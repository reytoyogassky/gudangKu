/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22E%3A%5C%5CKULIAH%5C%5CPWB%5C%5CUAS%5C%5Cuas-pweb%5C%5Csrc%5C%5Ccomponents%5C%5CDaftarStok.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!":
/*!**************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22E%3A%5C%5CKULIAH%5C%5CPWB%5C%5CUAS%5C%5Cuas-pweb%5C%5Csrc%5C%5Ccomponents%5C%5CDaftarStok.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false! ***!
  \**************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/DaftarStok.js */ \"(app-pages-browser)/./src/components/DaftarStok.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyRSUzQSU1QyU1Q0tVTElBSCU1QyU1Q1BXQiU1QyU1Q1VBUyU1QyU1Q3Vhcy1wd2ViJTVDJTVDc3JjJTVDJTVDY29tcG9uZW50cyU1QyU1Q0RhZnRhclN0b2suanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJkZWZhdWx0JTIyJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0xBQWdJIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJkZWZhdWx0XCJdICovIFwiRTpcXFxcS1VMSUFIXFxcXFBXQlxcXFxVQVNcXFxcdWFzLXB3ZWJcXFxcc3JjXFxcXGNvbXBvbmVudHNcXFxcRGFmdGFyU3Rvay5qc1wiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22E%3A%5C%5CKULIAH%5C%5CPWB%5C%5CUAS%5C%5Cuas-pweb%5C%5Csrc%5C%5Ccomponents%5C%5CDaftarStok.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@firebase/database/dist/index.esm2017.js":
/*!***************************************************************!*\
  !*** ./node_modules/@firebase/database/dist/index.esm2017.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataSnapshot: () => (/* binding */ DataSnapshot),\n/* harmony export */   Database: () => (/* binding */ Database),\n/* harmony export */   OnDisconnect: () => (/* binding */ OnDisconnect),\n/* harmony export */   QueryConstraint: () => (/* binding */ QueryConstraint),\n/* harmony export */   TransactionResult: () => (/* binding */ TransactionResult),\n/* harmony export */   _QueryImpl: () => (/* binding */ QueryImpl),\n/* harmony export */   _QueryParams: () => (/* binding */ QueryParams),\n/* harmony export */   _ReferenceImpl: () => (/* binding */ ReferenceImpl),\n/* harmony export */   _TEST_ACCESS_forceRestClient: () => (/* binding */ forceRestClient),\n/* harmony export */   _TEST_ACCESS_hijackHash: () => (/* binding */ hijackHash),\n/* harmony export */   _initStandalone: () => (/* binding */ _initStandalone),\n/* harmony export */   _repoManagerDatabaseFromApp: () => (/* binding */ repoManagerDatabaseFromApp),\n/* harmony export */   _setSDKVersion: () => (/* binding */ setSDKVersion),\n/* harmony export */   _validatePathString: () => (/* binding */ validatePathString),\n/* harmony export */   _validateWritablePath: () => (/* binding */ validateWritablePath),\n/* harmony export */   child: () => (/* binding */ child),\n/* harmony export */   connectDatabaseEmulator: () => (/* binding */ connectDatabaseEmulator),\n/* harmony export */   enableLogging: () => (/* binding */ enableLogging),\n/* harmony export */   endAt: () => (/* binding */ endAt),\n/* harmony export */   endBefore: () => (/* binding */ endBefore),\n/* harmony export */   equalTo: () => (/* binding */ equalTo),\n/* harmony export */   forceLongPolling: () => (/* binding */ forceLongPolling),\n/* harmony export */   forceWebSockets: () => (/* binding */ forceWebSockets),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase),\n/* harmony export */   goOffline: () => (/* binding */ goOffline),\n/* harmony export */   goOnline: () => (/* binding */ goOnline),\n/* harmony export */   increment: () => (/* binding */ increment),\n/* harmony export */   limitToFirst: () => (/* binding */ limitToFirst),\n/* harmony export */   limitToLast: () => (/* binding */ limitToLast),\n/* harmony export */   off: () => (/* binding */ off),\n/* harmony export */   onChildAdded: () => (/* binding */ onChildAdded),\n/* harmony export */   onChildChanged: () => (/* binding */ onChildChanged),\n/* harmony export */   onChildMoved: () => (/* binding */ onChildMoved),\n/* harmony export */   onChildRemoved: () => (/* binding */ onChildRemoved),\n/* harmony export */   onDisconnect: () => (/* binding */ onDisconnect),\n/* harmony export */   onValue: () => (/* binding */ onValue),\n/* harmony export */   orderByChild: () => (/* binding */ orderByChild),\n/* harmony export */   orderByKey: () => (/* binding */ orderByKey),\n/* harmony export */   orderByPriority: () => (/* binding */ orderByPriority),\n/* harmony export */   orderByValue: () => (/* binding */ orderByValue),\n/* harmony export */   push: () => (/* binding */ push),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   refFromURL: () => (/* binding */ refFromURL),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   runTransaction: () => (/* binding */ runTransaction),\n/* harmony export */   serverTimestamp: () => (/* binding */ serverTimestamp),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setPriority: () => (/* binding */ setPriority),\n/* harmony export */   setWithPriority: () => (/* binding */ setWithPriority),\n/* harmony export */   startAfter: () => (/* binding */ startAfter),\n/* harmony export */   startAt: () => (/* binding */ startAt),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"(app-pages-browser)/./node_modules/@firebase/app/dist/esm/index.esm2017.js\");\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/component */ \"(app-pages-browser)/./node_modules/@firebase/component/dist/esm/index.esm2017.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ \"(app-pages-browser)/./node_modules/@firebase/util/dist/index.esm2017.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @firebase/logger */ \"(app-pages-browser)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\n\nconst name = \"@firebase/database\";\nconst version = \"1.0.10\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n    SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n    /**\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    constructor(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param key - The key to save the value under\n     * @param value - The value being stored, or null to remove the key.\n     */\n    set(key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(value));\n        }\n    }\n    /**\n     * @returns The value that was stored under this key, or null\n     */\n    get(key) {\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(storedVal);\n        }\n    }\n    remove(key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n    prefixedName_(name) {\n        return this.prefix_ + name;\n    }\n    toString() {\n        return this.domStorage_.toString();\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n    constructor() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    set(key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    }\n    get(key) {\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    }\n    remove(key) {\n        delete this.cache_[key];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            const domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new _firebase_logger__WEBPACK_IMPORTED_MODULE_3__.Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = (function () {\n    let id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n    const utf8Bytes = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringToByteArray)(str);\n    const sha1 = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Sha1();\n    sha1.update(utf8Bytes);\n    const sha1Bytes = sha1.digest();\n    return _firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n    let message = '';\n    for (let i = 0; i < varArgs.length; i++) {\n        const arg = varArgs[i];\n        if (Array.isArray(arg) ||\n            (arg &&\n                typeof arg === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typeof arg.length === 'number')) {\n            message += buildLogMessage_.apply(null, arg);\n        }\n        else if (typeof arg === 'object') {\n            message += (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(arg);\n        }\n        else {\n            message += arg;\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        logClient.logLevel = _firebase_logger__WEBPACK_IMPORTED_MODULE_3__.LogLevel.VERBOSE;\n        logger = logClient.log.bind(logClient);\n        if (persistent) {\n            SessionStorage.set('logging_enabled', true);\n        }\n    }\n    else if (typeof logger_ === 'function') {\n        logger = logger_;\n    }\n    else {\n        logger = null;\n        SessionStorage.remove('logging_enabled');\n    }\n};\nconst log = function (...varArgs) {\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\n            enableLogging$1(true);\n        }\n    }\n    if (logger) {\n        const message = buildLogMessage_.apply(null, varArgs);\n        logger(message);\n    }\n};\nconst logWrapper = function (prefix) {\n    return function (...varArgs) {\n        log(prefix, ...varArgs);\n    };\n};\nconst error = function (...varArgs) {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n    logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n    logClient.error(message);\n    throw new Error(message);\n};\nconst warn = function (...varArgs) {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n    logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data !== data || // NaN\n            data === Number.POSITIVE_INFINITY ||\n            data === Number.NEGATIVE_INFINITY));\n};\nconst executeWhenDOMReady = function (fn) {\n    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        let called = false;\n        const wrappedFn = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn, Math.floor(10));\n                return;\n            }\n            if (!called) {\n                called = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn, false);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (document.attachEvent) {\n            // IE.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            document.attachEvent('onreadystatechange', () => {\n                if (document.readyState === 'complete') {\n                    wrappedFn();\n                }\n            });\n            // fallback to onload.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.attachEvent('onload', wrappedFn);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    }\n    else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    }\n    else {\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\nconst requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(obj));\n    }\n};\nconst ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(obj);\n    }\n    const keys = [];\n    // eslint-disable-next-line guard-for-in\n    for (const k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    let key = '{';\n    for (let i = 0; i < keys.length; i++) {\n        if (i !== 0) {\n            key += ',';\n        }\n        key += (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n    const len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    const dataSegs = [];\n    for (let c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    const ebits = 11, fbits = 52;\n    const bias = (1 << (ebits - 1)) - 1;\n    let s, e, f, ln, i;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    const str = bits.join('');\n    // Return the data as a hex string. --MJL\n    let hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) {\n            hexByte = '0' + hexByte;\n        }\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a JavaScript Error\n */\nfunction errorForServerCode(code, query) {\n    let reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code === 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code === 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error.code = code.toUpperCase();\n    return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in keys, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        const intVal = Number(str);\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(() => {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            const stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n    const userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n    const timeout = setTimeout(fn, time);\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n    if (typeof timeout === 'number' &&\n        // @ts-ignore Is only defined in Deno environments.\n        typeof Deno !== 'undefined' &&\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno['unrefTimer']) {\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno.unrefTimer(timeout);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    else if (typeof timeout === 'object' && timeout['unref']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n    constructor(appName_, appCheckProvider) {\n        this.appName_ = appName_;\n        this.appCheckProvider = appCheckProvider;\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\n        if (!this.appCheck) {\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.appCheck) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAppCheck. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // AppCheck and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.appCheck) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.appCheck.getToken(forceRefresh);\n    }\n    addTokenChangeListener(listener) {\n        var _a;\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n            'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n    constructor(appName_, firebaseOptions_, authProvider_) {\n        this.appName_ = appName_;\n        this.firebaseOptions_ = firebaseOptions_;\n        this.authProvider_ = authProvider_;\n        this.auth_ = null;\n        this.auth_ = authProvider_.getImmediate({ optional: true });\n        if (!this.auth_) {\n            authProvider_.onInit(auth => (this.auth_ = auth));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.auth_) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAuth. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // Auth and ensures that all requests are authenticated if a token\n                // becomes available before the timeout below expires.\n                setTimeout(() => {\n                    if (this.auth_) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.auth_.getToken(forceRefresh).catch(error => {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    }\n    addTokenChangeListener(listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        if (this.auth_) {\n            this.auth_.addAuthTokenListener(listener);\n        }\n        else {\n            this.authProvider_\n                .get()\n                .then(auth => auth.addAuthTokenListener(listener));\n        }\n    }\n    removeTokenChangeListener(listener) {\n        this.authProvider_\n            .get()\n            .then(auth => auth.removeAuthTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.appName_ +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n        return Promise.resolve({\n            accessToken: this.accessToken\n        });\n    }\n    addTokenChangeListener(listener) {\n        // Invoke the listener immediately to match the behavior in Firebase Auth\n        // (see packages/auth/src/auth.js#L1807)\n        listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) { }\n    notifyForInvalidToken() { }\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n    /**\n     * @param host - Hostname portion of the url for the repo\n     * @param secure - Whether or not this repo is accessed over ssl\n     * @param namespace - The namespace represented by the repo\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n     * @param persistenceKey - Override the default session persistence storage key\n     */\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.nodeAdmin = nodeAdmin;\n        this.persistenceKey = persistenceKey;\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n        this.isUsingEmulator = isUsingEmulator;\n        this._host = host.toLowerCase();\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\n        this.internalHost =\n            PersistentStorage.get('host:' + host) || this._host;\n    }\n    isCacheableHost() {\n        return this.internalHost.substr(0, 2) === 's-';\n    }\n    isCustomHost() {\n        return (this._domain !== 'firebaseio.com' &&\n            this._domain !== 'firebaseio-demo.com');\n    }\n    get host() {\n        return this._host;\n    }\n    set host(newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this._host, this.internalHost);\n            }\n        }\n    }\n    toString() {\n        let str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    }\n    toURLString() {\n        const protocol = this.secure ? 'https://' : 'http://';\n        const query = this.includeNamespaceInQueryParams\n            ? `?ns=${this.namespace}`\n            : '';\n        return `${protocol}${this.host}/${query}`;\n    }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n    return (repoInfo.host !== repoInfo.internalHost ||\n        repoInfo.isCustomHost() ||\n        repoInfo.includeNamespaceInQueryParams);\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof type === 'string', 'typeof type must == string');\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof params === 'object', 'typeof params must == object');\n    let connURL;\n    if (type === WEBSOCKET) {\n        connURL =\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n    }\n    else if (type === LONG_POLLING) {\n        connURL =\n            (repoInfo.secure ? 'https://' : 'http://') +\n                repoInfo.internalHost +\n                '/.lp?';\n    }\n    else {\n        throw new Error('Unknown connection type: ' + type);\n    }\n    if (repoInfoNeedsQueryParam(repoInfo)) {\n        params['ns'] = repoInfo.namespace;\n    }\n    const pairs = [];\n    each(params, (key, value) => {\n        pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n    constructor() {\n        this.counters_ = {};\n    }\n    incrementCounter(name, amount = 1) {\n        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(this.counters_, name)) {\n            this.counters_[name] = 0;\n        }\n        this.counters_[name] += amount;\n    }\n    get() {\n        return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepCopy)(this.counters_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n    const hashString = repoInfo.toString();\n    if (!collections[hashString]) {\n        collections[hashString] = new StatsCollection();\n    }\n    return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n    const hashString = repoInfo.toString();\n    if (!reporters[hashString]) {\n        reporters[hashString] = creatorFunction();\n    }\n    return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n    /**\n     * @param onMessage_\n     */\n    constructor(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    closeAfter(responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    }\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     */\n    handleResponse(requestNum, data) {\n        this.pendingResponses[requestNum] = data;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            const toProcess = this.pendingResponses[this.currentResponseNum];\n            delete this.pendingResponses[this.currentResponseNum];\n            for (let i = 0; i < toProcess.length; ++i) {\n                if (toProcess[i]) {\n                    exceptionGuard(() => {\n                        this.onMessage_(toProcess[i]);\n                    });\n                }\n            }\n            if (this.currentResponseNum === this.closeAfterResponse) {\n                if (this.onClose) {\n                    this.onClose();\n                    this.onClose = null;\n                }\n                break;\n            }\n            this.currentResponseNum++;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n    /**\n     * @param connId An identifier for this connection, used for logging\n     * @param repoInfo The info for the endpoint to send data to.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The AppCheck token for this client.\n     * @param authToken The AuthToken to use for this connection.\n     * @param transportSessionId Optional transportSessionid if we are\n     * reconnecting for an existing transport session\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n     * already created a connection previously\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = logWrapper(connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.urlFn = (params) => {\n            // Always add the token if we have one.\n            if (this.appCheckToken) {\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n        };\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(() => {\n            this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            this.onClosed_();\n            this.connectTimeoutTimer_ = null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        executeWhenDOMReady(() => {\n            if (this.isClosed_) {\n                return;\n            }\n            //Set up a callback that gets triggered once a connection is set up.\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n                const [command, arg1, arg2, arg3, arg4] = args;\n                this.incrementIncomingBytes_(args);\n                if (!this.scriptTagHolder) {\n                    return; // we closed the connection.\n                }\n                if (this.connectTimeoutTimer_) {\n                    clearTimeout(this.connectTimeoutTimer_);\n                    this.connectTimeoutTimer_ = null;\n                }\n                this.everConnected_ = true;\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\n                    this.id = arg1;\n                    this.password = arg2;\n                }\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        this.myPacketOrderer.closeAfter(arg1, () => {\n                            this.onClosed_();\n                        });\n                    }\n                    else {\n                        this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, (...args) => {\n                const [pN, data] = args;\n                this.incrementIncomingBytes_(args);\n                this.myPacketOrderer.handleResponse(pN, data);\n            }, () => {\n                this.onClosed_();\n            }, this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\n            }\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n            if (this.transportSessionId) {\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n            }\n            if (this.lastSessionId) {\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n            }\n            if (this.applicationId) {\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n            }\n            if (this.appCheckToken) {\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            if (typeof location !== 'undefined' &&\n                location.hostname &&\n                FORGE_DOMAIN_RE.test(location.hostname)) {\n                urlParams[REFERER_PARAM] = FORGE_REF;\n            }\n            const connectURL = this.urlFn(urlParams);\n            this.log_('Connecting via long-poll to ' + connectURL);\n            this.scriptTagHolder.addTag(connectURL, () => {\n                /* do nothing */\n            });\n        });\n    }\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    start() {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    static forceAllow() {\n        BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    static forceDisallow() {\n        BrowserPollConnection.forceDisallow_ = true;\n    }\n    // Static method, use string literal so it can be accessed in a generic way\n    static isAvailable() {\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            return false;\n        }\n        else if (BrowserPollConnection.forceAllow_) {\n            return true;\n        }\n        else {\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n            return (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !isChromeExtensionContentScript() &&\n                !isWindowsStoreApp());\n        }\n    }\n    /**\n     * No-op for polling\n     */\n    markConnectionHealthy() { }\n    /**\n     * Stops polling and cleans up the iframe\n     */\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    }\n    /**\n     * Triggered when this transport is closed\n     */\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param data - The JSON data to transmit.\n     */\n    send(data) {\n        const dataStr = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        const base64data = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64Encode)(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    }\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     */\n    addDisconnectPingFrame(id, pw) {\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            return;\n        }\n        this.myDisconnFrame = document.createElement('iframe');\n        const urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\n     * Used to track the bytes received by this client\n     */\n    incrementIncomingBytes_(args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        const bytesReceived = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n    /**\n     * @param commandCB - The callback to be called when control commands are received from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        this.outstandingRequests = new Set();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = LUIDGenerator();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n                onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            let script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                const currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            const iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                log('frame writing exception');\n                if (e.stack) {\n                    log(e.stack);\n                }\n                log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     */\n    static createIFrame_() {\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                const a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                const domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (iframe.document) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    }\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    close() {\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n            this.myIFrame.doc.body.textContent = '';\n            setTimeout(() => {\n                if (this.myIFrame !== null) {\n                    document.body.removeChild(this.myIFrame);\n                    this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        // Protect from being called recursively.\n        const onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    }\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param id - The ID of this connection\n     * @param pw - The password for this connection\n     */\n    startLongPoll(id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    }\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    newRequest_() {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            let theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            let curDataString = '';\n            let i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                const nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length +\n                    SEG_HEADER_SIZE +\n                    curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    const theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    enqueueSegment(segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    }\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param url - The URL of the script tag.\n     * @param serial - The serial number of the request.\n     */\n    addLongPollTag_(url, serial) {\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial);\n        const doNewRequest = () => {\n            this.outstandingRequests.delete(serial);\n            this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        const readyStateCB = () => {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    }\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param url - The URL for the script tag source.\n     * @param loadCB - A callback to be triggered once the script has loaded.\n     */\n    addTag(url, loadCB) {\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(() => {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!this.sendNewPolls) {\n                        return;\n                    }\n                    const newScript = this.myIFrame.doc.createElement('script');\n                    newScript.type = 'text/javascript';\n                    newScript.async = true;\n                    newScript.src = url;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    newScript.onload = newScript.onreadystatechange =\n                        function () {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            const rstate = newScript.readyState;\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                newScript.onload = newScript.onreadystatechange = null;\n                                if (newScript.parentNode) {\n                                    newScript.parentNode.removeChild(newScript);\n                                }\n                                loadCB();\n                            }\n                        };\n                    newScript.onerror = () => {\n                        log('Long-poll script failed to load: ' + url);\n                        this.sendNewPolls = false;\n                        this.close();\n                    };\n                    this.myIFrame.doc.body.appendChild(newScript);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n    /**\n     * @param connId identifier for this transport\n     * @param repoInfo The info for the websocket endpoint.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The App Check Token for this client.\n     * @param authToken The Auth Token for this client.\n     * @param transportSessionId Optional transportSessionId if this is connecting\n     * to an existing transport session\n     * @param lastSessionId Optional lastSessionId if there was a previous\n     * connection\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = logWrapper(this.connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n        this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\n     * @param repoInfo - The info for the websocket endpoint.\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\n     * @returns connection url\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n        const urlParams = {};\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)() &&\n            typeof location !== 'undefined' &&\n            location.hostname &&\n            FORGE_DOMAIN_RE.test(location.hostname)) {\n            urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\n        }\n        if (appCheckToken) {\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n        }\n        if (applicationId) {\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\n        }\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            let options;\n            if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                options = {\n                    headers: {\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n                        'X-Firebase-GMPID': this.applicationId || ''\n                    }\n                };\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\n                // Note that we send the credentials here even if they aren't admin credentials, which is\n                // not a problem.\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\n                // through the websocket connection once it is established.\n                if (this.authToken) {\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\n                }\n                if (this.appCheckToken) {\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n                }\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                const env = process['env'];\n                const proxy = this.connURL.indexOf('wss://') === 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n            }\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = () => {\n            this.log_('Websocket connected.');\n            this.everConnected_ = true;\n        };\n        this.mySock.onclose = () => {\n            this.log_('Websocket connection was disconnected.');\n            this.mySock = null;\n            this.onClosed_();\n        };\n        this.mySock.onmessage = m => {\n            this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = e => {\n            this.log_('WebSocket error.  Closing connection.');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n        };\n    }\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    start() { }\n    static forceDisallow() {\n        WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n        let isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    }\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     */\n    static previouslyFailed() {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (PersistentStorage.isInMemoryStorage ||\n            PersistentStorage.get('previous_websocket_failure') === true);\n    }\n    markConnectionHealthy() {\n        PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n        this.frames.push(data);\n        if (this.frames.length === this.totalFrames) {\n            const fullMess = this.frames.join('');\n            this.frames = null;\n            const jsonMess = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    }\n    /**\n     * @param frameCount - The number of frames we are expecting from the server\n     */\n    handleNewFrameCount_(frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    }\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @returns Any remaining data to be process, or null if there is none\n     */\n    extractFrameCount_(data) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            const frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    }\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess - The frame data\n     */\n    handleIncomingFrame(mess) {\n        if (this.mySock === null) {\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        }\n        const data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            const remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    }\n    /**\n     * Send a message to the server\n     * @param data - The JSON object to transmit\n     */\n    send(data) {\n        this.resetKeepAlive();\n        const dataStr = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    }\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    }\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    resetKeepAlive() {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(() => {\n            //If there has been no websocket activity for a while, send a no-op\n            if (this.mySock) {\n                this.sendString_('0');\n            }\n            this.resetKeepAlive();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\n     * Send a string over the websocket.\n     *\n     * @param str - String to send.\n     */\n    sendString_(str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n    static get ALL_TRANSPORTS() {\n        return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n     * TransportManager has already set up transports_\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n        return this.globalTransportInitialized_;\n    }\n    /**\n     * @param repoInfo - Metadata around the namespace we're connecting to\n     */\n    constructor(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    initTransports_(repoInfo) {\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) {\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            }\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            const transports = (this.transports_ = []);\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\n                if (transport && transport['isAvailable']()) {\n                    transports.push(transport);\n                }\n            }\n            TransportManager.globalTransportInitialized_ = true;\n        }\n    }\n    /**\n     * @returns The constructor for the initial transport to use\n     */\n    initialTransport() {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    }\n    /**\n     * @returns The constructor for the next transport, or null\n     */\n    upgradeTransport() {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n    /**\n     * @param id - an id for this connection\n     * @param repoInfo_ - the info for the endpoint to connect to\n     * @param applicationId_ - the Firebase App ID for this project\n     * @param appCheckToken_ - The App Check Token for this device.\n     * @param authToken_ - The auth token for this session.\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.appCheckToken_ = appCheckToken_;\n        this.authToken_ = authToken_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* RealtimeState.CONNECTING */;\n        this.log_ = logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     */\n    start_() {\n        const conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessageReceived = this.connReceiver_(this.conn_);\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(() => {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n        if (healthyTimeoutMS > 0) {\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n                this.healthyTimeout_ = null;\n                if (!this.isHealthy_) {\n                    if (this.conn_ &&\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has received ' +\n                            this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        this.isHealthy_ = true;\n                        this.conn_.markConnectionHealthy();\n                    }\n                    else if (this.conn_ &&\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\n                            this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        this.log_('Closing unhealthy connection after timeout.');\n                        this.close();\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }, Math.floor(healthyTimeoutMS));\n        }\n    }\n    nextTransportId_() {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n    disconnReceiver_(conn) {\n        return everConnected => {\n            if (conn === this.conn_) {\n                this.onConnectionLost_(everConnected);\n            }\n            else if (conn === this.secondaryConn_) {\n                this.log_('Secondary connection lost.');\n                this.onSecondaryConnectionLost_();\n            }\n            else {\n                this.log_('closing an old connection');\n            }\n        };\n    }\n    connReceiver_(conn) {\n        return (message) => {\n            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n                if (conn === this.rx_) {\n                    this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === this.secondaryConn_) {\n                    this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    this.log_('message on old connection');\n                }\n            }\n        };\n    }\n    /**\n     * @param dataMsg - An arbitrary data message to be sent to the server\n     */\n    sendRequest(dataMsg) {\n        // wrap in a data message envelope and send it on\n        const msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    }\n    tryCleanupConnection() {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    }\n    onSecondaryControl_(controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            const cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    }\n    onSecondaryMessageReceived_(parsedData) {\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer === 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    }\n    upgradeIfSecondaryHealthy_() {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    proceedWithUpgrade_() {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    }\n    onPrimaryMessageReceived_(parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onControl_(data);\n        }\n        else if (layer === 'd') {\n            this.onDataMessage_(data);\n        }\n    }\n    onDataMessage_(message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    }\n    onPrimaryResponse_() {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    }\n    onControl_(controlData) {\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            const payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                const handshakePayload = Object.assign({}, payload);\n                if (this.repoInfo_.isUsingEmulator) {\n                    // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n                    handshakePayload.h = this.repoInfo_.host;\n                }\n                this.onHandshake_(handshakePayload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                error('Unknown control packet command: ' + cmd);\n            }\n        }\n    }\n    /**\n     * @param handshake - The handshake data returned from the server\n     */\n    onHandshake_(handshake) {\n        const timestamp = handshake.ts;\n        const version = handshake.v;\n        const host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.host = host;\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (PROTOCOL_VERSION !== version) {\n                warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    }\n    tryStartUpgrade_() {\n        const conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    }\n    startUpgrade_(conn) {\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessage = this.connReceiver_(this.secondaryConn_);\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        setTimeoutNonBlocking(() => {\n            if (this.secondaryConn_) {\n                this.log_('Timed out trying to upgrade.');\n                this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    }\n    onReset_(host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.host = host;\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    }\n    onConnectionEstablished_(conn, timestamp) {\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* RealtimeState.CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            setTimeoutNonBlocking(() => {\n                this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    }\n    sendPingOnPrimaryIfNecessary_() {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    onSecondaryConnectionLost_() {\n        const conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    }\n    /**\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     */\n    onConnectionLost_(everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    }\n    onConnectionShutdown_(reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    }\n    sendData_(data) {\n        if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    }\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    close() {\n        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    closeConnections_() {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n    put(pathString, data, onComplete, hash) { }\n    merge(pathString, data, onComplete, hash) { }\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param token - The authentication token\n     */\n    refreshAuthToken(token) { }\n    /**\n     * Refreshes the app check token for the current connection.\n     * @param token The app check token\n     */\n    refreshAppCheckToken(token) { }\n    onDisconnectPut(pathString, data, onComplete) { }\n    onDisconnectMerge(pathString, data, onComplete) { }\n    onDisconnectCancel(pathString, onComplete) { }\n    reportStats(stats) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n    constructor(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     */\n    trigger(eventType, ...varArgs) {\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            const listeners = [...this.listeners_[eventType]];\n            for (let i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, varArgs);\n            }\n        }\n    }\n    on(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback, context });\n        const eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    }\n    off(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        const listeners = this.listeners_[eventType] || [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    }\n    validateEventType_(eventType) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.allowedEvents_.find(et => {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n    static getInstance() {\n        return new OnlineMonitor();\n    }\n    constructor() {\n        super(['online']);\n        this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isMobileCordova)()) {\n            window.addEventListener('online', () => {\n                if (!this.online_) {\n                    this.online_ = true;\n                    this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', () => {\n                if (this.online_) {\n                    this.online_ = false;\n                    this.trigger('online', false);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    }\n    currentlyOnline() {\n        return this.online_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n    /**\n     * @param pathOrString - Path string to parse, or another path, or the raw\n     * tokens array\n     */\n    constructor(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            let copyTo = 0;\n            for (let i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    toString() {\n        let pathString = '';\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') {\n                pathString += '/' + this.pieces_[i];\n            }\n        }\n        return pathString || '/';\n    }\n}\nfunction newEmptyPath() {\n    return new Path('');\n}\nfunction pathGetFront(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n    return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n    let pieceNum = path.pieceNum_;\n    if (pieceNum < path.pieces_.length) {\n        pieceNum++;\n    }\n    return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n    if (path.pieceNum_ < path.pieces_.length) {\n        return path.pieces_[path.pieces_.length - 1];\n    }\n    return null;\n}\nfunction pathToUrlEncodedString(path) {\n    let pathString = '';\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        if (path.pieces_[i] !== '') {\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n        }\n    }\n    return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n    return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n            pieces.push(childPathObj.pieces_[i]);\n        }\n    }\n    else {\n        const childPieces = childPathObj.split('/');\n        for (let i = 0; i < childPieces.length; i++) {\n            if (childPieces[i].length > 0) {\n                pieces.push(childPieces[i]);\n            }\n        }\n    }\n    return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n    return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\n    if (outer === null) {\n        return innerPath;\n    }\n    else if (outer === inner) {\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n    }\n    else {\n        throw new Error('INTERNAL ERROR: innerPath (' +\n            innerPath +\n            ') is not within ' +\n            'outerPath (' +\n            outerPath +\n            ')');\n    }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n    const leftKeys = pathSlice(left, 0);\n    const rightKeys = pathSlice(right, 0);\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (leftKeys.length === rightKeys.length) {\n        return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n    if (pathGetLength(path) !== pathGetLength(other)) {\n        return false;\n    }\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n    let i = path.pieceNum_;\n    let j = other.pieceNum_;\n    if (pathGetLength(path) > pathGetLength(other)) {\n        return false;\n    }\n    while (i < path.pieces_.length) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n        ++i;\n        ++j;\n    }\n    return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n    /**\n     * @param path - Initial Path.\n     * @param errorPrefix_ - Prefix for any error messages.\n     */\n    constructor(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        this.parts_ = pathSlice(path, 0);\n        /** Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (let i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(this.parts_[i]);\n        }\n        validationPathCheckValid(this);\n    }\n}\nfunction validationPathPush(validationPath, child) {\n    // Count the needed '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ += 1;\n    }\n    validationPath.parts_.push(child);\n    validationPath.byteLength_ += (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(child);\n    validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n    const last = validationPath.parts_.pop();\n    validationPath.byteLength_ -= (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(last);\n    // Un-count the previous '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ -= 1;\n    }\n}\nfunction validationPathCheckValid(validationPath) {\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n        throw new Error(validationPath.errorPrefix_ +\n            'has a key path longer than ' +\n            MAX_PATH_LENGTH_BYTES +\n            ' bytes (' +\n            validationPath.byteLength_ +\n            ').');\n    }\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n        throw new Error(validationPath.errorPrefix_ +\n            'path specified exceeds the maximum depth that can be written (' +\n            MAX_PATH_DEPTH +\n            ') or object contains a cycle ' +\n            validationPathToErrorString(validationPath));\n    }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n    if (validationPath.parts_.length === 0) {\n        return '';\n    }\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n    static getInstance() {\n        return new VisibilityMonitor();\n    }\n    constructor() {\n        super(['visible']);\n        let hidden;\n        let visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, () => {\n                const visible = !document[hidden];\n                if (visible !== this.visible_) {\n                    this.visible_ = visible;\n                    this.trigger('visible', visible);\n                }\n            }, false);\n        }\n    }\n    getInitialEvent(eventType) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param applicationId_ - The Firebase App ID for this project\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.onConnectStatus_ = onConnectStatus_;\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\n        this.log_ = logWrapper('p:' + this.id + ':');\n        this.interruptReasons_ = {};\n        this.listens = new Map();\n        this.outstandingPuts_ = [];\n        this.outstandingGets_ = [];\n        this.outstandingPutCount_ = 0;\n        this.outstandingGetCount_ = 0;\n        this.onDisconnectRequestQueue_ = [];\n        this.connected_ = false;\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        this.securityDebugCallback_ = null;\n        this.lastSessionId = null;\n        this.establishConnectionTimer_ = null;\n        this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        this.requestCBHash_ = {};\n        this.requestNumber_ = 0;\n        this.realtime_ = null;\n        this.authToken_ = null;\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = false;\n        this.invalidAuthTokenCount_ = 0;\n        this.invalidAppCheckTokenCount_ = 0;\n        this.firstConnection_ = true;\n        this.lastConnectionAttemptTime_ = null;\n        this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n        }\n    }\n    sendRequest(action, body, onResponse) {\n        const curReqNum = ++this.requestNumber_;\n        const msg = { r: curReqNum, a: action, b: body };\n        this.log_((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(msg));\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    }\n    get(query) {\n        this.initConnection_();\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        const request = {\n            p: query._path.toString(),\n            q: query._queryObject\n        };\n        const outstandingGet = {\n            action: 'g',\n            request,\n            onComplete: (message) => {\n                const payload = message['d'];\n                if (message['s'] === 'ok') {\n                    deferred.resolve(payload);\n                }\n                else {\n                    deferred.reject(payload);\n                }\n            }\n        };\n        this.outstandingGets_.push(outstandingGet);\n        this.outstandingGetCount_++;\n        const index = this.outstandingGets_.length - 1;\n        if (this.connected_) {\n            this.sendGet_(index);\n        }\n        return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n        this.initConnection_();\n        const queryId = query._queryIdentifier;\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        if (!this.listens.has(pathString)) {\n            this.listens.set(pathString, new Map());\n        }\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n        const listenSpec = {\n            onComplete,\n            hashFn: currentHashFn,\n            query,\n            tag\n        };\n        this.listens.get(pathString).set(queryId, listenSpec);\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    }\n    sendGet_(index) {\n        const get = this.outstandingGets_[index];\n        this.sendRequest('g', get.request, (message) => {\n            delete this.outstandingGets_[index];\n            this.outstandingGetCount_--;\n            if (this.outstandingGetCount_ === 0) {\n                this.outstandingGets_ = [];\n            }\n            if (get.onComplete) {\n                get.onComplete(message);\n            }\n        });\n    }\n    sendListen_(listenSpec) {\n        const query = listenSpec.query;\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query._queryObject;\n            req['t'] = listenSpec.tag;\n        }\n        req[ /*hash*/'h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, (message) => {\n            const payload = message[ /*data*/'d'];\n            const status = message[ /*status*/'s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            const currentListenSpec = this.listens.get(pathString) &&\n                this.listens.get(pathString).get(queryId);\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                this.log_('listen response', message);\n                if (status !== 'ok') {\n                    this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    }\n    static warnOnListenWarnings_(payload, query) {\n        if (payload && typeof payload === 'object' && (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(payload, 'w')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnings = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n                const indexPath = query._path.toString();\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\n                    `${indexPath} to your security rules for better performance.`);\n            }\n        }\n    }\n    refreshAuthToken(token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, () => { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        const isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isAdmin)(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    }\n    refreshAppCheckToken(token) {\n        this.appCheckToken_ = token;\n        this.log_('App check token refreshed');\n        if (this.appCheckToken_) {\n            this.tryAppCheck();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us.\n            //If we're not connected, simply delete the credential so we dont become\n            // authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unappeck', {}, () => { });\n            }\n        }\n    }\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    tryAuth() {\n        if (this.connected_ && this.authToken_) {\n            const token = this.authToken_;\n            const authMethod = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isValidFormat)(token) ? 'auth' : 'gauth';\n            const requestData = { cred: token };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (this.authToken_ === token) {\n                    if (status === 'ok') {\n                        this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Attempts to authenticate with the given token. If the authentication\n     * attempt fails, it's triggered like the token was revoked (the connection is\n     * closed).\n     */\n    tryAppCheck() {\n        if (this.connected_ && this.appCheckToken_) {\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (status === 'ok') {\n                    this.invalidAppCheckTokenCount_ = 0;\n                }\n                else {\n                    this.onAppCheckRevoked_(status, data);\n                }\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    unlisten(query, tag) {\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n        }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'o',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'om',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'oc',\n                data: null,\n                onComplete\n            });\n        }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, (response) => {\n            if (onComplete) {\n                setTimeout(() => {\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\n                }, Math.floor(0));\n            }\n        });\n    }\n    put(pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n        this.initConnection_();\n        const request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined) {\n            request[ /*hash*/'h'] = hash;\n        }\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action,\n            request,\n            onComplete\n        });\n        this.outstandingPutCount_++;\n        const index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    }\n    sendPut_(index) {\n        const action = this.outstandingPuts_[index].action;\n        const request = this.outstandingPuts_[index].request;\n        const onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, (message) => {\n            this.log_(action + ' response', message);\n            delete this.outstandingPuts_[index];\n            this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (this.outstandingPutCount_ === 0) {\n                this.outstandingPuts_ = [];\n            }\n            if (onComplete) {\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\n            }\n        });\n    }\n    reportStats(stats) {\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            const request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, result => {\n                const status = result[ /*status*/'s'];\n                if (status !== 'ok') {\n                    const errorReason = result[ /* data */'d'];\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    }\n    onDataMessage_(message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(message));\n            const reqNum = message['r'];\n            const onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message[ /*body*/'b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    }\n    onDataPush_(action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge*/ false, body['t']);\n        }\n        else if (action === 'm') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge=*/ true, body['t']);\n        }\n        else if (action === 'c') {\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\n        }\n        else if (action === 'ac') {\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'apc') {\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'sd') {\n            this.onSecurityDebugPacket_(body);\n        }\n        else {\n            error('Unrecognized action received from server: ' +\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(action) +\n                '\\nAre you using the latest client?');\n        }\n    }\n    onReady_(timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(() => {\n            this.establishConnectionTimer_ = null;\n            this.establishConnection_();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(timeout));\n    }\n    initConnection_() {\n        if (!this.realtime_ && this.firstConnection_) {\n            this.scheduleConnect_(0);\n        }\n    }\n    onVisible_(visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    }\n    onOnline_(online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    }\n    onRealtimeDisconnect_() {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                }\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            const onDataMessage = this.onDataMessage_.bind(this);\n            const onReady = this.onReady_.bind(this);\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            const lastSessionId = this.lastSessionId;\n            let canceled = false;\n            let connection = null;\n            const closeFn = function () {\n                if (connection) {\n                    connection.close();\n                }\n                else {\n                    canceled = true;\n                    onDisconnect();\n                }\n            };\n            const sendRequestFn = function (msg) {\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(connection, \"sendRequest call when we're not connected not allowed.\");\n                connection.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn,\n                sendRequest: sendRequestFn\n            };\n            const forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            try {\n                // First fetch auth and app check token, and establish connection after\n                // fetching the token was successful\n                const [authToken, appCheckToken] = await Promise.all([\n                    this.authTokenProvider_.getToken(forceRefresh),\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\n                ]);\n                if (!canceled) {\n                    log('getToken() completed. Creating connection.');\n                    this.authToken_ = authToken && authToken.accessToken;\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \n                    /* onKill= */ reason => {\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId);\n                }\n                else {\n                    log('getToken() completed but was canceled');\n                }\n            }\n            catch (error) {\n                this.log_('Failed to get token: ' + error);\n                if (!canceled) {\n                    if (this.repoInfo_.nodeAdmin) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        warn(error);\n                    }\n                    closeFn();\n                }\n            }\n        }\n    }\n    interrupt(reason) {\n        log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    }\n    resume(reason) {\n        log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    }\n    handleTimestamp_(timestamp) {\n        const delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    }\n    cancelSentTransactions_() {\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            const put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete) {\n                    put.onComplete('disconnect');\n                }\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n            this.outstandingPuts_ = [];\n        }\n    }\n    onListenRevoked_(pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        let queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n        }\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) {\n            listen.onComplete('permission_denied');\n        }\n    }\n    removeListen_(pathString, queryId) {\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\n        let listen;\n        if (this.listens.has(normalizedPathString)) {\n            const map = this.listens.get(normalizedPathString);\n            listen = map.get(queryId);\n            map.delete(queryId);\n            if (map.size === 0) {\n                this.listens.delete(normalizedPathString);\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n        log('App check token revoked: ' + statusCode + '/' + explanation);\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = true;\n        // Note: We don't close the connection as the developer may not have\n        // enforcement enabled. The backend closes connections with enforcements.\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAppCheckTokenCount_++;\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                this.appCheckTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onSecurityDebugPacket_(body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body) {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    }\n    restoreState_() {\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        this.tryAppCheck();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        for (const queries of this.listens.values()) {\n            for (const listenSpec of queries.values()) {\n                this.sendListen_(listenSpec);\n            }\n        }\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) {\n                this.sendPut_(i);\n            }\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            const request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\n            if (this.outstandingGets_[i]) {\n                this.sendGet_(i);\n            }\n        }\n    }\n    /**\n     * Sends client stats for first connection\n     */\n    sendConnectStats_() {\n        const stats = {};\n        let clientName = 'js';\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isNodeSdk)()) {\n            if (this.repoInfo_.nodeAdmin) {\n                clientName = 'admin_node';\n            }\n            else {\n                clientName = 'node';\n            }\n        }\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isMobileCordova)()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isReactNative)()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    }\n    shouldReconnect_() {\n        const online = OnlineMonitor.getInstance().currentlyOnline();\n        return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(this.interruptReasons_) && online;\n    }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n    constructor(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    static Wrap(name, node) {\n        return new NamedNode(name, node);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n    /**\n     * @returns A standalone comparison function for\n     * this index\n     */\n    getCompare() {\n        return this.compare.bind(this);\n    }\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     *\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    indexedValueChanged(oldNode, newNode) {\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\n     * @returns a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n    static get __EMPTY_NODE() {\n        return __EMPTY_NODE;\n    }\n    static set __EMPTY_NODE(val) {\n        __EMPTY_NODE = val;\n    }\n    compare(a, b) {\n        return nameCompare(a.name, b.name);\n    }\n    isDefinedOn(node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)('KeyIndex.isDefinedOn not expected to be called.');\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return false; // The key for a node never changes.\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n    makePost(indexValue, name) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.key';\n    }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n    /**\n     * @param node - Node to iterate.\n     * @param isReverse_ - Whether or not to iterate in reverse\n     */\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        this.nodeStack_ = [];\n        let cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) {\n                cmp *= -1;\n            }\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    getNext() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        let node = this.nodeStack_.pop();\n        let result;\n        if (this.resultGenerator_) {\n            result = this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            result = { key: node.key, value: node.value };\n        }\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    }\n    hasNext() {\n        return this.nodeStack_.length > 0;\n    }\n    peek() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n    /**\n     * @param key - Key associated with this node.\n     * @param value - Value associated with this node.\n     * @param color - Whether this node is red.\n     * @param left - Left child.\n     * @param right - Right child.\n     */\n    constructor(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param key - New key for the node, or null.\n     * @param value - New value for the node, or null.\n     * @param color - New color for the node, or null.\n     * @param left - New left child for the node, or null.\n     * @param right - New right child for the node, or null.\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return this.left.count() + 1 + this.right.count();\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return (this.left.inorderTraversal(action) ||\n            !!action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    }\n    /**\n     * @returns The minimum node in the tree.\n     */\n    min_() {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    minKey() {\n        return this.min_().key;\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    maxKey() {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    }\n    /**\n     * @param key - Key to insert.\n     * @param value - Value to insert.\n     * @param comparator - Comparator.\n     * @returns New tree, with the key/value added.\n     */\n    insert(key, value, comparator) {\n        let n = this;\n        const cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns New tree, with the minimum key removed.\n     */\n    removeMin_() {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        let n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\n            n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    }\n    /**\n     * @param key - The key of the item to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with the specified item removed.\n     */\n    remove(key, comparator) {\n        let n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_()) {\n                n = n.rotateRight_();\n            }\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns Whether this is a RED node.\n     */\n    isRed_() {\n        return this.color;\n    }\n    /**\n     * @returns New tree after performing any needed rotations.\n     */\n    fixUp_() {\n        let n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) {\n            n = n.rotateLeft_();\n        }\n        if (n.left.isRed_() && n.left.left.isRed_()) {\n            n = n.rotateRight_();\n        }\n        if (n.left.isRed_() && n.right.isRed_()) {\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedLeft.\n     */\n    moveRedLeft_() {\n        let n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedRight.\n     */\n    moveRedRight_() {\n        let n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after rotateLeft.\n     */\n    rotateLeft_() {\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\n     * @returns New tree, after rotateRight.\n     */\n    rotateRight_() {\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\n     * @returns Newt ree, after colorFlip.\n     */\n    colorFlip_() {\n        const left = this.left.copy(null, null, !this.left.color, null, null);\n        const right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    }\n    /**\n     * For testing.\n     *\n     * @returns True if all is well.\n     */\n    checkMaxDepth_() {\n        const blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        const blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n    /**\n     * Returns a copy of the current node.\n     *\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return this;\n    }\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @param comparator - Comparator.\n     * @returns New tree, with item added.\n     */\n    insert(key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    }\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with item removed.\n     */\n    remove(key, comparator) {\n        return this;\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return 0;\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return true;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    inorderTraversal(action) {\n        return false;\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return false;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    check_() {\n        return 0;\n    }\n    /**\n     * @returns Whether this node is red.\n     */\n    isRed_() {\n        return false;\n    }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n    /**\n     * @param comparator_ - Key comparator.\n     * @param root_ - Optional root node for the map.\n     */\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @returns New map, with item added.\n     */\n    insert(key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @returns New map, with item removed.\n     */\n    remove(key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param key - The key to look up.\n     * @returns The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    get(key) {\n        let cmp;\n        let node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param key - The key to find the predecessor of\n     * @returns The predecessor key.\n     */\n    getPredecessorKey(key) {\n        let cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\n     * @returns True if the map is empty.\n     */\n    isEmpty() {\n        return this.root_.isEmpty();\n    }\n    /**\n     * @returns The total number of nodes in the map.\n     */\n    count() {\n        return this.root_.count();\n    }\n    /**\n     * @returns The minimum key in the map.\n     */\n    minKey() {\n        return this.root_.minKey();\n    }\n    /**\n     * @returns The maximum key in the map.\n     */\n    maxKey() {\n        return this.root_.maxKey();\n    }\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return this.root_.inorderTraversal(action);\n    }\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns True if the traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return this.root_.reverseTraversal(action);\n    }\n    /**\n     * Returns an iterator over the SortedMap.\n     * @returns The iterator.\n     */\n    getIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n    getIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n    getReverseIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n    getReverseIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n    MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n    if (typeof priority === 'number') {\n        return 'number:' + doubleToIEEE754String(priority);\n    }\n    else {\n        return 'string:' + priority;\n    }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        const val = priorityNode.val();\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n    static set __childrenNodeConstructor(val) {\n        __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n        return __childrenNodeConstructor;\n    }\n    /**\n     * @param value_ - The value to store in this leaf node. The object type is\n     * possible in the event of a deferred value\n     * @param priorityNode_ - The priority of this node.\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        if (pathIsEmpty(path)) {\n            return this;\n        }\n        else if (pathGetFront(path) === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    hasChild() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n        return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n        return false;\n    }\n    val(exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        }\n        else {\n            return this.getValue();\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.priorityNode_.isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            }\n            const type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /**\n     * Returns the value of the leaf node.\n     * @returns The value of the node.\n     */\n    getValue() {\n        return this.value_;\n    }\n    compareTo(other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    }\n    /**\n     * Comparison specifically for two leaf nodes\n     */\n    compareToLeafNode_(otherLeaf) {\n        const otherLeafType = typeof otherLeaf.value_;\n        const thisLeafType = typeof this.value_;\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    }\n    withIndex() {\n        return this;\n    }\n    isIndexed() {\n        return true;\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            const otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n    MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n    compare(a, b) {\n        const aPriority = a.node.getPriority();\n        const bPriority = b.node.getPriority();\n        const indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return !node.getPriority().isEmpty();\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n    makePost(indexValue, name) {\n        const priorityNode = nodeFromJSON$1(indexValue);\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.priority';\n    }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n    constructor(length) {\n        const logBase2 = (num) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt((Math.log(num) / LOG_2), 10);\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        const mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    nextBitIsOne() {\n        //noinspection JSBitwiseOperatorUsage\n        const result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    const buildBalancedTree = function (low, high) {\n        const length = high - low;\n        let namedNode;\n        let key;\n        if (length === 0) {\n            return null;\n        }\n        else if (length === 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const middle = parseInt((length / 2), 10) + low;\n            const left = buildBalancedTree(low, middle);\n            const right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    const buildFrom12Array = function (base12) {\n        let node = null;\n        let root = null;\n        let index = childList.length;\n        const buildPennant = function (chunkSize, color) {\n            const low = index - chunkSize;\n            const high = index;\n            index -= chunkSize;\n            const childTree = buildBalancedTree(low + 1, high);\n            const namedNode = childList[low];\n            const key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        const attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (let i = 0; i < base12.count; ++i) {\n            const isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    const base12 = new Base12Num(childList.length);\n    const root = buildFrom12Array(base12);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n    /**\n     * The default IndexMap for nodes without a priority\n     */\n    static get Default() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n        _defaultIndexMap =\n            _defaultIndexMap ||\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n        return _defaultIndexMap;\n    }\n    constructor(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    get(indexKey) {\n        const sortedMap = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(this.indexes_, indexKey);\n        if (!sortedMap) {\n            throw new Error('No index defined for ' + indexKey);\n        }\n        if (sortedMap instanceof SortedMap) {\n            return sortedMap;\n        }\n        else {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n    }\n    hasIndex(indexDefinition) {\n        return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(this.indexSet_, indexDefinition.toString());\n    }\n    addIndex(indexDefinition, existingChildren) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        const childList = [];\n        let sawIndexedValue = false;\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\n        let next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        let newIndex;\n        if (sawIndexedValue) {\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        const indexName = indexDefinition.toString();\n        const newIndexSet = Object.assign({}, this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        const newIndexes = Object.assign({}, this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     */\n    addToIndexes(namedNode, existingChildren) {\n        const newIndexes = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(this.indexes_, (indexedChildren, indexName) => {\n            const index = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(this.indexSet_, indexName);\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    const childList = [];\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\n                    let next = iter.getNext();\n                    while (next) {\n                        if (next.name !== namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                let newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\n     * Create a new IndexMap instance with the given value removed\n     */\n    removeFromIndexes(namedNode, existingChildren) {\n        const newIndexes = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(this.indexes_, (indexedChildren) => {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n    static get EMPTY_NODE() {\n        return (EMPTY_NODE ||\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\n    }\n    /**\n     * @param children_ - List of children of this node..\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            const child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return this;\n        }\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n        return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            const namedNode = new NamedNode(childName, newChildNode);\n            let newChildren, newIndexMap;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            const newPriority = newChildren.isEmpty()\n                ? EMPTY_NODE\n                : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n        if (this.isEmpty()) {\n            return null;\n        }\n        const obj = {};\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            // eslint-disable-next-line guard-for-in\n            for (const key in obj) {\n                array[key] = obj[key];\n            }\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.getPriority().isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.getPriority().val()) +\n                        ':';\n            }\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                const childHash = childNode.hash();\n                if (childHash !== '') {\n                    toHash += ':' + key + ':' + childHash;\n                }\n            });\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    }\n    getFirstChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    }\n    getFirstChild(indexDefinition) {\n        const minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     */\n    getLastChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    }\n    getLastChild(indexDefinition) {\n        const maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    }\n    forEachChild(index, action) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(wrappedNode => {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    }\n    getIterator(indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, key => key);\n        }\n        else {\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    getReverseIterator(indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, key => {\n                return key;\n            });\n        }\n        else {\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    compareTo(other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    }\n    withIndex(indexDefinition) {\n        if (indexDefinition === KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    }\n    isIndexed(index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            const otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                const thisIter = this.getIterator(PRIORITY_INDEX);\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                let thisCurrent = thisIter.getNext();\n                let otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     */\n    resolveIndex_(indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n    constructor() {\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n    }\n    compareTo(other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    equals(other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    }\n    getPriority() {\n        return this;\n    }\n    getImmediateChild(childName) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    isEmpty() {\n        return false;\n    }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(MAX_NAME, MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n    if (json === null) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        const jsonLeaf = json;\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        const children = [];\n        let childrenHavePriority = false;\n        const hinzeJsonObj = json;\n        each(hinzeJsonObj, (key, child) => {\n            if (key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                const childNode = nodeFromJSON(child);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority =\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\n                    children.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children.length === 0) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n        if (childrenHavePriority) {\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n        }\n    }\n    else {\n        let node = ChildrenNode.EMPTY_NODE;\n        each(json, (key, childData) => {\n            if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(json, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    const childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\n                        node = node.updateImmediateChild(key, childNode);\n                    }\n                }\n            }\n        });\n        return node.updatePriority(nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n    constructor(indexPath_) {\n        super();\n        this.indexPath_ = indexPath_;\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    }\n    extractChild(snap) {\n        return snap.getChild(this.indexPath_);\n    }\n    isDefinedOn(node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    }\n    compare(a, b) {\n        const aChild = this.extractChild(a.node);\n        const bChild = this.extractChild(b.node);\n        const indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    }\n    maxPost() {\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    }\n    toString() {\n        return pathSlice(this.indexPath_, 0).join('/');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n    compare(a, b) {\n        const indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return true;\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MAX;\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.value';\n    }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n    return { type: \"value\" /* ChangeType.VALUE */, snapshotNode };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n    return { type: \"child_added\" /* ChangeType.CHILD_ADDED */, snapshotNode, childName };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n    return { type: \"child_removed\" /* ChangeType.CHILD_REMOVED */, snapshotNode, childName };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n    return {\n        type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n        snapshotNode,\n        childName,\n        oldSnap\n    };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n    return { type: \"child_moved\" /* ChangeType.CHILD_MOVED */, snapshotNode, childName };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n    constructor(index_) {\n        this.index_ = index_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        const oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n                }\n                else {\n                    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (oldSnap.hasChild(key)) {\n                        const oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    }\n    updatePriority(oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    }\n    filtersNodes() {\n        return false;\n    }\n    getIndexedFilter() {\n        return this;\n    }\n    getIndex() {\n        return this.index_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n    constructor(params) {\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    getStartPost() {\n        return this.startPost_;\n    }\n    getEndPost() {\n        return this.endPost_;\n    }\n    matches(node) {\n        const isWithinStart = this.startIsInclusive_\n            ? this.index_.compare(this.getStartPost(), node) <= 0\n            : this.index_.compare(this.getStartPost(), node) < 0;\n        const isWithinEnd = this.endIsInclusive_\n            ? this.index_.compare(node, this.getEndPost()) <= 0\n            : this.index_.compare(node, this.getEndPost()) < 0;\n        return isWithinStart && isWithinEnd;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode.EMPTY_NODE;\n        }\n        let filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        const self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.indexedFilter_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    static getStartPost_(params) {\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    }\n    static getEndPost_(params) {\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n    constructor(params) {\n        this.withinDirectionalStart = (node) => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n        this.withinDirectionalEnd = (node) => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n        this.withinStartPost = (node) => {\n            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.withinEndPost = (node) => {\n            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n        };\n        this.rangedFilter_ = new RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n        this.startIsInclusive_ = !params.startAfterSet_;\n        this.endIsInclusive_ = !params.endBeforeSet_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        let filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                let iterator;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    const next = iterator.getNext();\n                    if (!this.withinDirectionalStart(next)) {\n                        // if we have not reached the start, skip to the next element\n                        continue;\n                    }\n                    else if (!this.withinDirectionalEnd(next)) {\n                        // if we have reached the end, stop adding elements\n                        break;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n                let iterator;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext()) {\n                    const next = iterator.getNext();\n                    const inRange = count < this.limit_ &&\n                        this.withinDirectionalStart(next) &&\n                        this.withinDirectionalEnd(next);\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.rangedFilter_.getIndexedFilter();\n    }\n    getIndex() {\n        return this.index_;\n    }\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        let cmp;\n        if (this.reverse_) {\n            const indexCmp = this.index_.getCompare();\n            cmp = (a, b) => indexCmp(b, a);\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        const oldEventCache = snap;\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(oldEventCache.numChildren() === this.limit_, '');\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\n        const windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n                }\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n    constructor() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.startAfterSet_ = false; // can only be true if startSet_ is true\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.endBeforeSet_ = false; // can only be true if endSet_ is true\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    hasStart() {\n        return this.startSet_;\n    }\n    /**\n     * @returns True if it would return from left.\n     */\n    isViewFromLeft() {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n        }\n    }\n    /**\n     * Only valid to call if hasStart() returns true\n     */\n    getIndexStartValue() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    }\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     */\n    getIndexStartName() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return MIN_NAME;\n        }\n    }\n    hasEnd() {\n        return this.endSet_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     */\n    getIndexEndValue() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     */\n    getIndexEndName() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return MAX_NAME;\n        }\n    }\n    hasLimit() {\n        return this.limitSet_;\n    }\n    /**\n     * @returns True if a limit has been set and it has been explicitly anchored\n     */\n    hasAnchoredLimit() {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\n     * Only valid to call if hasLimit() returns true\n     */\n    getLimit() {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    loadsAllData() {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n    isDefault() {\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n    copy() {\n        const copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.startAfterSet_ = this.startAfterSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.endBeforeSet_ = this.endBeforeSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n    if (queryParams.loadsAllData()) {\n        return new IndexedFilter(queryParams.getIndex());\n    }\n    else if (queryParams.hasLimit()) {\n        return new LimitedFilter(queryParams);\n    }\n    else {\n        return new RangedFilter(queryParams);\n    }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n    return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n        newParams.startNameSet_ = true;\n        newParams.indexStartName_ = key;\n    }\n    else {\n        newParams.startNameSet_ = false;\n        newParams.indexStartName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsStartAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n    }\n    params.startAfterSet_ = true;\n    return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n        newParams.endNameSet_ = true;\n        newParams.indexEndName_ = key;\n    }\n    else {\n        newParams.endNameSet_ = false;\n        newParams.indexEndName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX || !!key) {\n        params = queryParamsEndAt(queryParams, indexValue, key);\n    }\n    else {\n        params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n    }\n    params.endBeforeSet_ = true;\n    return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n    const newParams = queryParams.copy();\n    newParams.index_ = index;\n    return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n    const qs = {};\n    if (queryParams.isDefault()) {\n        return qs;\n    }\n    let orderBy;\n    if (queryParams.index_ === PRIORITY_INDEX) {\n        orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n    }\n    else if (queryParams.index_ === VALUE_INDEX) {\n        orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n    }\n    else if (queryParams.index_ === KEY_INDEX) {\n        orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n    }\n    else {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n        orderBy = queryParams.index_.toString();\n    }\n    qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(orderBy);\n    if (queryParams.startSet_) {\n        const startParam = queryParams.startAfterSet_\n            ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */\n            : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n        qs[startParam] = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(queryParams.indexStartValue_);\n        if (queryParams.startNameSet_) {\n            qs[startParam] += ',' + (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(queryParams.indexStartName_);\n        }\n    }\n    if (queryParams.endSet_) {\n        const endParam = queryParams.endBeforeSet_\n            ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */\n            : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n        qs[endParam] = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(queryParams.indexEndValue_);\n        if (queryParams.endNameSet_) {\n            qs[endParam] += ',' + (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(queryParams.indexEndName_);\n        }\n    }\n    if (queryParams.limitSet_) {\n        if (queryParams.isViewFromLeft()) {\n            qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n        }\n        else {\n            qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n        }\n    }\n    return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n    const obj = {};\n    if (queryParams.startSet_) {\n        obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] =\n            queryParams.indexStartValue_;\n        if (queryParams.startNameSet_) {\n            obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] =\n                queryParams.indexStartName_;\n        }\n        obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] =\n            !queryParams.startAfterSet_;\n    }\n    if (queryParams.endSet_) {\n        obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n        if (queryParams.endNameSet_) {\n            obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n        }\n        obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] =\n            !queryParams.endBeforeSet_;\n    }\n    if (queryParams.limitSet_) {\n        obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n        let viewFrom = queryParams.viewFrom_;\n        if (viewFrom === '') {\n            if (queryParams.isViewFromLeft()) {\n                viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n            }\n            else {\n                viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n            }\n        }\n        obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (queryParams.index_ !== PRIORITY_INDEX) {\n        obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n    }\n    return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n    reportStats(stats) {\n        throw new Error('Method not implemented.');\n    }\n    static getListenId_(query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n            return query._path.toString();\n        }\n    }\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        /** @private {function(...[*])} */\n        this.log_ = logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         */\n        this.listens_ = {};\n    }\n    /** @inheritDoc */\n    listen(query, currentHashFn, tag, onComplete) {\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n        // Mark this listener so we can tell if it's removed.\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        const thisListen = {};\n        this.listens_[listenId] = thisListen;\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(this.listens_, listenId) === thisListen) {\n                let status;\n                if (!error) {\n                    status = 'ok';\n                }\n                else if (error === 401) {\n                    status = 'permission_denied';\n                }\n                else {\n                    status = 'rest_error:' + error;\n                }\n                onComplete(status, null);\n            }\n        });\n    }\n    /** @inheritDoc */\n    unlisten(query, tag) {\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    }\n    get(query) {\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        const pathString = query._path.toString();\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, \n                /*isMerge=*/ false, \n                /*tag=*/ null);\n                deferred.resolve(data);\n            }\n            else {\n                deferred.reject(new Error(data));\n            }\n        });\n        return deferred.promise;\n    }\n    /** @inheritDoc */\n    refreshAuthToken(token) {\n        // no-op since we just always call getToken.\n    }\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     */\n    restRequest_(pathString, queryStringParameters = {}, callback) {\n        queryStringParameters['format'] = 'export';\n        return Promise.all([\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n        ]).then(([authToken, appCheckToken]) => {\n            if (authToken && authToken.accessToken) {\n                queryStringParameters['auth'] = authToken.accessToken;\n            }\n            if (appCheckToken && appCheckToken.token) {\n                queryStringParameters['ac'] = appCheckToken.token;\n            }\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\n                this.repoInfo_.host +\n                pathString +\n                '?' +\n                'ns=' +\n                this.repoInfo_.namespace +\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.querystring)(queryStringParameters);\n            this.log_('Sending REST request for ' + url);\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (callback && xhr.readyState === 4) {\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    let res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.jsonEval)(xhr.responseText);\n                        }\n                        catch (e) {\n                            warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n    constructor() {\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\n    }\n    getNode(path) {\n        return this.rootNode_.getChild(path);\n    }\n    updateSnapshot(path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n    return {\n        value: null,\n        children: new Map()\n    };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = data;\n        sparseSnapshotTree.children.clear();\n    }\n    else if (sparseSnapshotTree.value !== null) {\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n    }\n    else {\n        const childKey = pathGetFront(path);\n        if (!sparseSnapshotTree.children.has(childKey)) {\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n        }\n        const child = sparseSnapshotTree.children.get(childKey);\n        path = pathPopFront(path);\n        sparseSnapshotTreeRemember(child, path, data);\n    }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = null;\n        sparseSnapshotTree.children.clear();\n        return true;\n    }\n    else {\n        if (sparseSnapshotTree.value !== null) {\n            if (sparseSnapshotTree.value.isLeafNode()) {\n                // We're trying to forget a node that doesn't exist\n                return false;\n            }\n            else {\n                const value = sparseSnapshotTree.value;\n                sparseSnapshotTree.value = null;\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n                });\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n            }\n        }\n        else if (sparseSnapshotTree.children.size > 0) {\n            const childKey = pathGetFront(path);\n            path = pathPopFront(path);\n            if (sparseSnapshotTree.children.has(childKey)) {\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n                if (safeToRemove) {\n                    sparseSnapshotTree.children.delete(childKey);\n                }\n            }\n            return sparseSnapshotTree.children.size === 0;\n        }\n        else {\n            return true;\n        }\n    }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n    if (sparseSnapshotTree.value !== null) {\n        func(prefixPath, sparseSnapshotTree.value);\n    }\n    else {\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n            const path = new Path(prefixPath.toString() + '/' + key);\n            sparseSnapshotTreeForEachTree(tree, path, func);\n        });\n    }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n    sparseSnapshotTree.children.forEach((tree, key) => {\n        func(key, tree);\n    });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n    constructor(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    get() {\n        const newStats = this.collection_.get();\n        const delta = Object.assign({}, newStats);\n        if (this.last_) {\n            each(this.last_, (stat, value) => {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n    constructor(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        const timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    reportStats_() {\n        const stats = this.statsListener_.get();\n        const reportedStats = {};\n        let haveStatsToReport = false;\n        each(stats, (stat, value) => {\n            if (value > 0 && (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n    return {\n        fromUser: true,\n        fromServer: false,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServer() {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId,\n        tagged: true\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n    /**\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n     */\n    constructor(\n    /** @inheritDoc */ path, \n    /** @inheritDoc */ affectedTree, \n    /** @inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = newOperationSourceUser();\n    }\n    operationForChild(childName) {\n        if (!pathIsEmpty(this.path)) {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            const childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n    constructor(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new ListenComplete(this.source, newEmptyPath());\n        }\n        else {\n            return new ListenComplete(this.source, pathPopFront(this.path));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n    constructor(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n    constructor(\n    /** @inheritDoc */ source, \n    /** @inheritDoc */ path, \n    /** @inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            const childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, newEmptyPath(), childTree);\n            }\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, pathPopFront(this.path), this.children);\n        }\n    }\n    toString() {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n    constructor(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     */\n    isFullyInitialized() {\n        return this.fullyInitialized_;\n    }\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     */\n    isFiltered() {\n        return this.filtered_;\n    }\n    isCompleteForPath(path) {\n        if (pathIsEmpty(path)) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        const childKey = pathGetFront(path);\n        return this.isCompleteForChild(childKey);\n    }\n    isCompleteForChild(key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    }\n    getNode() {\n        return this.node_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n    constructor(query_) {\n        this.query_ = query_;\n        this.index_ = this.query_._queryParams.getIndex();\n    }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n    const events = [];\n    const moves = [];\n    changes.forEach(change => {\n        if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\n        }\n    });\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n    return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n    filteredChanges.forEach(change => {\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n        registrations.forEach(registration => {\n            if (registration.respondsTo(change.type)) {\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n            }\n        });\n    });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n        return change;\n    }\n    else {\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n        return change;\n    }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n    if (a.childName == null || b.childName == null) {\n        throw (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n    return { eventCache, serverCache };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n    return viewCache.eventCache.isFullyInitialized()\n        ? viewCache.eventCache.getNode()\n        : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n    return viewCache.serverCache.isFullyInitialized()\n        ? viewCache.serverCache.getNode()\n        : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n    static fromObject(obj) {\n        let tree = new ImmutableTree(null);\n        each(obj, (childPath, childSnap) => {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    }\n    constructor(value, children = EmptyChildren()) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * True if the value is empty and there are no children\n     */\n    isEmpty() {\n        return this.value === null && this.children.isEmpty();\n    }\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param relativePath - The remainder of the path\n     * @param predicate - The predicate to satisfy to return a node\n     */\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: newEmptyPath(), value: this.value };\n        }\n        else {\n            if (pathIsEmpty(relativePath)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(relativePath);\n                const child = this.children.get(front);\n                if (child !== null) {\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n                    if (childExistingPathAndValue != null) {\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     */\n    findRootMostValueAndPath(relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n    }\n    /**\n     * @returns The subtree at the given path\n     */\n    subtree(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(pathPopFront(relativePath));\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param relativePath - Path to set value at.\n     * @param toSet - Value to set.\n     * @returns Resulting tree.\n     */\n    set(relativePath, toSet) {\n        if (pathIsEmpty(relativePath)) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.set(pathPopFront(relativePath), toSet);\n            const newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param relativePath - Path to value to remove.\n     * @returns Resulting tree.\n     */\n    remove(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            if (this.children.isEmpty()) {\n                return new ImmutableTree(null);\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                const newChild = child.remove(pathPopFront(relativePath));\n                let newChildren;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return new ImmutableTree(null);\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    }\n    /**\n     * Gets a value from the tree.\n     *\n     * @param relativePath - Path to get value for.\n     * @returns Value at path, or null.\n     */\n    get(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this.value;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                return child.get(pathPopFront(relativePath));\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param relativePath - Path to replace subtree for.\n     * @param newTree - New tree.\n     * @returns Resulting tree.\n     */\n    setTree(relativePath, newTree) {\n        if (pathIsEmpty(relativePath)) {\n            return newTree;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\n            let newChildren;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     */\n    fold(fn) {\n        return this.fold_(newEmptyPath(), fn);\n    }\n    /**\n     * Recursive helper for public-facing fold() method\n     */\n    fold_(pathSoFar, fn) {\n        const accum = {};\n        this.children.inorderTraversal((childKey, childTree) => {\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    }\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     */\n    findOnPath(path, f) {\n        return this.findOnPath_(path, newEmptyPath(), f);\n    }\n    findOnPath_(pathToFollow, pathSoFar, f) {\n        const result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathIsEmpty(pathToFollow)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(pathToFollow);\n                const nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    foreachOnPath(path, f) {\n        return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\n        if (pathIsEmpty(pathToFollow)) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            const front = pathGetFront(pathToFollow);\n            const nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param f - A function to be called with the path from the root of the tree to\n     * a node, and the value at that node. Called in depth-first order.\n     */\n    foreach(f) {\n        this.foreach_(newEmptyPath(), f);\n    }\n    foreach_(currentRelativePath, f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    }\n    foreachChild(f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n    constructor(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    static empty() {\n        return new CompoundWrite(new ImmutableTree(null));\n    }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n    if (pathIsEmpty(path)) {\n        return new CompoundWrite(new ImmutableTree(node));\n    }\n    else {\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            const rootMostPath = rootmost.path;\n            let value = rootmost.value;\n            const relativePath = newRelativePath(rootMostPath, path);\n            value = value.updateChild(relativePath, node);\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n        }\n        else {\n            const subtree = new ImmutableTree(node);\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n            return new CompoundWrite(newWriteTree);\n        }\n    }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n    let newWrite = compoundWrite;\n    each(updates, (childKey, node) => {\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n    });\n    return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return CompoundWrite.empty();\n    }\n    else {\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n        return new CompoundWrite(newWriteTree);\n    }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n        return compoundWrite.writeTree_\n            .get(rootmost.path)\n            .getChild(newRelativePath(rootmost.path, path));\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n    const children = [];\n    const node = compoundWrite.writeTree_.value;\n    if (node != null) {\n        // If it's a leaf node, it has no children; so nothing to do.\n        if (!node.isLeafNode()) {\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n                children.push(new NamedNode(childName, childNode));\n            });\n        }\n    }\n    else {\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value != null) {\n                children.push(new NamedNode(childName, childTree.value));\n            }\n        });\n    }\n    return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return compoundWrite;\n    }\n    else {\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n        if (shadowingNode != null) {\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\n        }\n        else {\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n        }\n    }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n    return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n        // Since there a write is always a leaf, we're done here\n        return node.updateChild(relativePath, writeTree.value);\n    }\n    else {\n        let priorityWrite = null;\n        writeTree.children.inorderTraversal((childKey, childTree) => {\n            if (childKey === '.priority') {\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                // to apply priorities to empty nodes that are later filled\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                priorityWrite = childTree.value;\n            }\n            else {\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n            }\n        });\n        // If there was a priority write, we only apply it if the node is not empty\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n        }\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n    return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n        visible = true;\n    }\n    writeTree.allWrites.push({\n        path,\n        snap,\n        writeId,\n        visible\n    });\n    if (visible) {\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n    }\n    writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n    writeTree.allWrites.push({\n        path,\n        children: changedChildren,\n        writeId,\n        visible: true\n    });\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n    writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\n        const record = writeTree.allWrites[i];\n        if (record.writeId === writeId) {\n            return record;\n        }\n    }\n    return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    const idx = writeTree.allWrites.findIndex(s => {\n        return s.writeId === writeId;\n    });\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = writeTree.allWrites[idx];\n    writeTree.allWrites.splice(idx, 1);\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n    let i = writeTree.allWrites.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n        const currentWrite = writeTree.allWrites[i];\n        if (currentWrite.visible) {\n            if (i >= idx &&\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n                // The removed write was completely shadowed by a subsequent write.\n                removedWriteWasVisible = false;\n            }\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\n                removedWriteOverlapsWithOtherWrites = true;\n            }\n        }\n        i--;\n    }\n    if (!removedWriteWasVisible) {\n        return false;\n    }\n    else if (removedWriteOverlapsWithOtherWrites) {\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\n        writeTreeResetTree_(writeTree);\n        return true;\n    }\n    else {\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n        if (writeToRemove.snap) {\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n        }\n        else {\n            const children = writeToRemove.children;\n            each(children, (childName) => {\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n            });\n        }\n        return true;\n    }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n    if (writeRecord.snap) {\n        return pathContains(writeRecord.path, path);\n    }\n    else {\n        for (const childName in writeRecord.children) {\n            if (writeRecord.children.hasOwnProperty(childName) &&\n                pathContains(pathChild(writeRecord.path, childName), path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n    if (writeTree.allWrites.length > 0) {\n        writeTree.lastWriteId =\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n    }\n    else {\n        writeTree.lastWriteId = -1;\n    }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n    return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n        const write = writes[i];\n        // Theory, a later set will either:\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n        if (filter(write)) {\n            const writePath = write.path;\n            let relativePath;\n            if (write.snap) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n                }\n                else ;\n            }\n            else if (write.children) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    if (pathIsEmpty(relativePath)) {\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n                    }\n                    else {\n                        const child = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(write.children, pathGetFront(relativePath));\n                        if (child) {\n                            // There exists a child in this node that matches the root path\n                            const deepNode = child.getChild(pathPopFront(relativePath));\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n                        }\n                    }\n                }\n                else ;\n            }\n            else {\n                throw (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)('WriteRecord should have .snap or .children');\n            }\n        }\n    }\n    return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n            if (compoundWriteIsEmpty(subMerge)) {\n                return completeServerCache;\n            }\n            else if (completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                return null;\n            }\n            else {\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(subMerge, layeredCache);\n            }\n        }\n    }\n    else {\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n            return completeServerCache;\n        }\n        else {\n            // If the server cache is null, and we don't have a complete cache, we need to return null\n            if (!includeHiddenWrites &&\n                completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n                return null;\n            }\n            else {\n                const filter = function (write) {\n                    return ((write.visible || includeHiddenWrites) &&\n                        (!writeIdsToExclude ||\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\n                        (pathContains(write.path, treePath) ||\n                            pathContains(treePath, write.path)));\n                };\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(mergeAtPath, layeredCache);\n            }\n        }\n    }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n    let completeChildren = ChildrenNode.EMPTY_NODE;\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (topLevelSet) {\n        if (!topLevelSet.isLeafNode()) {\n            // we're shadowing everything. Return the children.\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n            });\n        }\n        return completeChildren;\n    }\n    else if (completeServerChildren) {\n        // Layer any children we have on top of this\n        // We know we don't have a top-level set, so just enumerate existing children\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\n        });\n        // Add any complete children we have from the set\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n    else {\n        // We don't have anything to layer on top of. Layer on any children we have\n        // Note that we can return an empty snap if we have a defined delete\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n        // At this point we can probably guarantee that we're in case 2, meaning no events\n        // May need to check visibility while doing the findRootMostValueAndPath call\n        return null;\n    }\n    else {\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n        if (compoundWriteIsEmpty(childMerge)) {\n            // We're not shadowing at all. Case 1\n            return existingServerSnap.getChild(childPath);\n        }\n        else {\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n            // However this is tricky to find out, since user updates don't necessary change the server\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n            // only check if the updates change the serverNode.\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n        }\n    }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n    if (shadowingNode != null) {\n        return shadowingNode;\n    }\n    else {\n        if (existingServerSnap.isCompleteForChild(childKey)) {\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n    let toIterate;\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n        toIterate = shadowingNode;\n    }\n    else if (completeServerData != null) {\n        toIterate = compoundWriteApply(merge, completeServerData);\n    }\n    else {\n        // no children to iterate on\n        return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n        const nodes = [];\n        const cmp = index.getCompare();\n        const iter = reverse\n            ? toIterate.getReverseIteratorFrom(startPost, index)\n            : toIterate.getIteratorFrom(startPost, index);\n        let next = iter.getNext();\n        while (next && nodes.length < count) {\n            if (cmp(next, startPost) !== 0) {\n                nodes.push(next);\n            }\n            next = iter.getNext();\n        }\n        return nodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction newWriteTree() {\n    return {\n        visibleWrites: CompoundWrite.empty(),\n        allWrites: [],\n        lastWriteId: -1\n    };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n    return {\n        treePath: path,\n        writeTree\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n    constructor() {\n        this.changeMap = new Map();\n    }\n    trackChildChange(change) {\n        const type = change.type;\n        const childKey = change.childName;\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(type === \"child_added\" /* ChangeType.CHILD_ADDED */ ||\n            type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ ||\n            type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        const oldChange = this.changeMap.get(childKey);\n        if (oldChange) {\n            const oldType = oldChange.type;\n            if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ &&\n                oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.delete(childKey);\n            }\n            else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n            }\n            else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ &&\n                oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n            }\n            else {\n                throw (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap.set(childKey, change);\n        }\n    }\n    getChanges() {\n        return Array.from(this.changeMap.values());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n    getCompleteChild(childKey) {\n        return null;\n    }\n    getChildAfterChild(index, child, reverse) {\n        return null;\n    }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    getCompleteChild(childKey) {\n        const node = this.viewCache_.eventCache;\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            const serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.serverCache;\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n        }\n    }\n    getChildAfterChild(index, child, reverse) {\n        const completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n    return { filter };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n        const overwrite = operation;\n        if (overwrite.source.fromUser) {\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(overwrite.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n            // again\n            filterServerNode =\n                overwrite.source.tagged ||\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.MERGE) {\n        const merge = operation;\n        if (merge.source.fromUser) {\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n        }\n        else {\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(merge.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered\n            filterServerNode =\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\n        const ackUserWrite = operation;\n        if (!ackUserWrite.revert) {\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n        }\n        else {\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n    }\n    else {\n        throw (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assertionError)('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n    return { viewCache: newViewCache, changes };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n    const eventSnap = newViewCache.eventCache;\n    if (eventSnap.isFullyInitialized()) {\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n        if (accumulator.length > 0 ||\n            !oldViewCache.eventCache.isFullyInitialized() ||\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n        }\n    }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n    const oldEventSnap = viewCache.eventCache;\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n        // we have a shadowing write, ignore changes\n        return viewCache;\n    }\n    else {\n        let newEventCache, serverNode;\n        if (pathIsEmpty(changePath)) {\n            // TODO: figure out how this plays with \"sliding ack windows\"\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n            if (viewCache.serverCache.isFiltered()) {\n                // We need to special case this, because we need to only apply writes to complete children, or\n                // we might end up raising events for incomplete children. If the server data is filtered deep\n                // writes cannot be guaranteed to be complete\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n                const completeChildren = serverCache instanceof ChildrenNode\n                    ? serverCache\n                    : ChildrenNode.EMPTY_NODE;\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n            }\n            else {\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n            }\n        }\n        else {\n            const childKey = pathGetFront(changePath);\n            if (childKey === '.priority') {\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n                const oldEventNode = oldEventSnap.getNode();\n                serverNode = viewCache.serverCache.getNode();\n                // we might have overwrites for this priority\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n                if (updatedPriority != null) {\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n                }\n                else {\n                    // priority didn't change, keep old node\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n            else {\n                const childChangePath = pathPopFront(changePath);\n                // update child\n                let newEventChild;\n                if (oldEventSnap.isCompleteForChild(childKey)) {\n                    serverNode = viewCache.serverCache.getNode();\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n                    if (eventChildUpdate != null) {\n                        newEventChild = oldEventSnap\n                            .getNode()\n                            .getImmediateChild(childKey)\n                            .updateChild(childChangePath, eventChildUpdate);\n                    }\n                    else {\n                        // Nothing changed, just keep the old child\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                    }\n                }\n                else {\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n                }\n                if (newEventChild != null) {\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                }\n                else {\n                    // no complete child available or no change\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n        }\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n    }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    const oldServerSnap = oldViewCache.serverCache;\n    let newServerCache;\n    const serverFilter = filterServerNode\n        ? viewProcessor.filter\n        : viewProcessor.filter.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    }\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n        const newServerNode = oldServerSnap\n            .getNode()\n            .updateChild(changePath, changedSnap);\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\n            pathGetLength(changePath) > 1) {\n            // We don't update incomplete nodes with updates intended for other listeners\n            return oldViewCache;\n        }\n        const childChangePath = pathPopFront(changePath);\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n        if (childKey === '.priority') {\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n        }\n        else {\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n        }\n    }\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    const oldEventSnap = oldViewCache.eventCache;\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (pathIsEmpty(changePath)) {\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n        }\n        else {\n            const childChangePath = pathPopFront(changePath);\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            let newChild;\n            if (pathIsEmpty(childChangePath)) {\n                // Child overwrite, we can replace the child\n                newChild = changedSnap;\n            }\n            else {\n                const childNode = source.getCompleteChild(childKey);\n                if (childNode != null) {\n                    if (pathGetBack(childChangePath) === '.priority' &&\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n                        // This is a priority update on an empty node. If this node exists on the server, the\n                        // server will send down the priority in the update, so ignore for now\n                        newChild = childNode;\n                    }\n                    else {\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\n                    }\n                }\n                else {\n                    // There is no complete child node available\n                    newChild = ChildrenNode.EMPTY_NODE;\n                }\n            }\n            if (!oldChild.equals(newChild)) {\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n            }\n            else {\n                newViewCache = oldViewCache;\n            }\n        }\n    }\n    return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n    return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n    merge.foreach((relativePath, childNode) => {\n        node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.serverCache.getNode().isEmpty() &&\n        !viewCache.serverCache.isFullyInitialized()) {\n        return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n        viewMergeTree = changedChildren;\n    }\n    else {\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.serverCache.getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n        if (serverNode.hasChild(childKey)) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\n            childMergeTree.value === null;\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n        return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.serverCache.isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.serverCache;\n    if (affectedTree.value != null) {\n        // This is an overwrite.\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n            serverCache.isCompleteForPath(ackPath)) {\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else if (pathIsEmpty(ackPath)) {\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n            // should just re-apply whatever we have in our cache as a merge.\n            let changedChildren = new ImmutableTree(null);\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n                changedChildren = changedChildren.set(new Path(name), node);\n            });\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else {\n            return viewCache;\n        }\n    }\n    else {\n        // This is a merge.\n        let changedChildren = new ImmutableTree(null);\n        affectedTree.foreach((mergePath, value) => {\n            const serverCachePath = pathChild(ackPath, mergePath);\n            if (serverCache.isCompleteForPath(serverCachePath)) {\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n            }\n        });\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n    const oldServerNode = viewCache.serverCache;\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n    let complete;\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n        return viewCache;\n    }\n    else {\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n        const oldEventCache = viewCache.eventCache.getNode();\n        let newEventCache;\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n            let newNode;\n            if (viewCache.serverCache.isFullyInitialized()) {\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n            }\n            else {\n                const serverChildren = viewCache.serverCache.getNode();\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n            }\n            newNode = newNode;\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n        }\n        else {\n            const childKey = pathGetFront(path);\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n            if (newChild == null &&\n                viewCache.serverCache.isCompleteForChild(childKey)) {\n                newChild = oldEventCache.getImmediateChild(childKey);\n            }\n            if (newChild != null) {\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n            }\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n                // No complete child available, delete the existing one, if any\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n            }\n            else {\n                newEventCache = oldEventCache;\n            }\n            if (newEventCache.isEmpty() &&\n                viewCache.serverCache.isFullyInitialized()) {\n                // We might have reverted all child writes. Maybe the old event was a leaf node\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                if (complete.isLeafNode()) {\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n                }\n            }\n        }\n        complete =\n            viewCache.serverCache.isFullyInitialized() ||\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n    constructor(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        const params = this.query_._queryParams;\n        const indexFilter = new IndexedFilter(params.getIndex());\n        const filter = queryParamsGetNodeFilter(params);\n        this.processor_ = newViewProcessor(filter);\n        const initialServerCache = initialViewCache.serverCache;\n        const initialEventCache = initialViewCache.eventCache;\n        // Don't filter server node with other filter than index, wait for tagged listen\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    get query() {\n        return this.query_;\n    }\n}\nfunction viewGetServerCache(view) {\n    return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n    if (cache) {\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n        // we need to see if it contains the child we're interested in.\n        if (view.query._queryParams.loadsAllData() ||\n            (!pathIsEmpty(path) &&\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\n            return cache.getChild(path);\n        }\n    }\n    return null;\n}\nfunction viewIsEmpty(view) {\n    return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n    view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n    const cancelEvents = [];\n    if (cancelError) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(eventRegistration == null, 'A cancel should cancel all event registrations.');\n        const path = view.query._path;\n        view.eventRegistrations_.forEach(registration => {\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\n            if (maybeEvent) {\n                cancelEvents.push(maybeEvent);\n            }\n        });\n    }\n    if (eventRegistration) {\n        let remaining = [];\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n            const existing = view.eventRegistrations_[i];\n            if (!existing.matches(eventRegistration)) {\n                remaining.push(existing);\n            }\n            else if (eventRegistration.hasAnyCallback()) {\n                // We're removing just this one\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n                break;\n            }\n        }\n        view.eventRegistrations_ = remaining;\n    }\n    else {\n        view.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE &&\n        operation.source.queryId !== null) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n    }\n    const oldViewCache = view.viewCache_;\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(result.viewCache.serverCache.isFullyInitialized() ||\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    view.viewCache_ = result.viewCache;\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n    const eventSnap = view.viewCache_.eventCache;\n    const initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n        const eventNode = eventSnap.getNode();\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            initialChanges.push(changeChildAdded(key, childNode));\n        });\n    }\n    if (eventSnap.isFullyInitialized()) {\n        initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n    const registrations = eventRegistration\n        ? [eventRegistration]\n        : view.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n    constructor() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         */\n        this.views = new Map();\n    }\n}\nfunction syncPointSetReferenceConstructor(val) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!referenceConstructor$1, '__referenceConstructor has already been defined');\n    referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(referenceConstructor$1, 'Reference.ts has not been loaded');\n    return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n    return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n        const view = syncPoint.views.get(queryId);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(view != null, 'SyncTree gave us an op for an invalid query.');\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n    }\n    else {\n        let events = [];\n        for (const view of syncPoint.views.values()) {\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n        }\n        return events;\n    }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n    const queryId = query._queryIdentifier;\n    const view = syncPoint.views.get(queryId);\n    if (!view) {\n        // TODO: make writesCache take flag for complete server node\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n        let eventCacheComplete = false;\n        if (eventCache) {\n            eventCacheComplete = true;\n        }\n        else if (serverCache instanceof ChildrenNode) {\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n            eventCacheComplete = false;\n        }\n        else {\n            eventCache = ChildrenNode.EMPTY_NODE;\n            eventCacheComplete = false;\n        }\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n        return new View(query, viewCache);\n    }\n    return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n    if (!syncPoint.views.has(query._queryIdentifier)) {\n        syncPoint.views.set(query._queryIdentifier, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    viewAddEventRegistration(view, eventRegistration);\n    return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n    const queryId = query._queryIdentifier;\n    const removed = [];\n    let cancelEvents = [];\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\n    if (queryId === 'default') {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(viewQueryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    else {\n        // remove the callback from the specific view.\n        const view = syncPoint.views.get(queryId);\n        if (view) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(queryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n        // We removed our last complete view.\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n    }\n    return { removed, events: cancelEvents };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n    const result = [];\n    for (const view of syncPoint.views.values()) {\n        if (!view.query._queryParams.loadsAllData()) {\n            result.push(view);\n        }\n    }\n    return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n    let serverCache = null;\n    for (const view of syncPoint.views.values()) {\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n    return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n    const params = query._queryParams;\n    if (params.loadsAllData()) {\n        return syncPointGetCompleteView(syncPoint);\n    }\n    else {\n        const queryId = query._queryIdentifier;\n        return syncPoint.views.get(queryId);\n    }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n    return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n    return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n    for (const view of syncPoint.views.values()) {\n        if (view.query._queryParams.loadsAllData()) {\n            return view;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!referenceConstructor, '__referenceConstructor has already been defined');\n    referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(referenceConstructor, 'Reference.ts has not been loaded');\n    return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n    /**\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    constructor(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         */\n        this.syncPointTree_ = new ImmutableTree(null);\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         */\n        this.pendingWriteTree_ = newWriteTree();\n        this.tagToQueryMap = new Map();\n        this.queryToTagMap = new Map();\n    }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n    // Record pending write.\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n    if (!visible) {\n        return [];\n    }\n    else {\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n    }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n    // Record pending merge.\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n    if (!needToReevaluate) {\n        return [];\n    }\n    else {\n        let affectedTree = new ImmutableTree(null);\n        if (write.snap != null) {\n            // overwrite\n            affectedTree = affectedTree.set(newEmptyPath(), true);\n        }\n        else {\n            each(write.children, (pathString) => {\n                affectedTree = affectedTree.set(new Path(pathString), true);\n            });\n        }\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n    }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query._path;\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n    let cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint &&\n        (query._queryIdentifier === 'default' ||\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n        if (syncPointIsEmpty(maybeSyncPoint)) {\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n        }\n        const removed = removedAndEvents.removed;\n        cancelEvents = removedAndEvents.events;\n        if (!skipListenerDedup) {\n            /**\n             * We may have just removed one of many listeners and can short-circuit this whole process\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n             * properly set up.\n             */\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            const removingDefault = -1 !==\n                removed.findIndex(query => {\n                    return query._queryParams.loadsAllData();\n                });\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n            if (removingDefault && !covered) {\n                const subtree = syncTree.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (let i = 0; i < newViews.length; ++i) {\n                        const view = newViews[i], newQuery = view.query;\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                // Otherwise there's nothing below us, so nothing we need to start listening on\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    const defaultTag = null;\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach((queryToRemove) => {\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n        }\n        // Now, clear all of the tags we're tracking for the removed listens\n        syncTreeRemoveTags_(syncTree, removed);\n    }\n    return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey != null) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // Query must have been removed already\n        return [];\n    }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const changeTree = ImmutableTree.fromObject(changedChildren);\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n    const path = query._path;\n    let serverCache = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let serverCacheComplete;\n    if (serverCache != null) {\n        serverCacheComplete = true;\n    }\n    else {\n        serverCacheComplete = false;\n        serverCache = ChildrenNode.EMPTY_NODE;\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        subtree.foreachChild((childName, childSyncPoint) => {\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n            if (completeCache) {\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\n            }\n        });\n    }\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n        // We need to track a tag for this query\n        const queryKey = syncTreeMakeQueryKey_(query);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n        const tag = syncTreeGetNextQueryTag_();\n        syncTree.queryToTagMap.set(queryKey, tag);\n        syncTree.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n        const view = syncPointViewForQuery(syncPoint, query);\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n    }\n    return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n    const includeHiddenSets = true;\n    const writeTree = syncTree.pendingWriteTree_;\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n        if (serverCache) {\n            return serverCache;\n        }\n    });\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n    const path = query._path;\n    let serverCache = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode = serverCacheComplete\n        ? new CacheNode(serverCache, true, false)\n        : null;\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n    return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n    if (pathIsEmpty(operation.path)) {\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    }\n    else {\n        const syncPoint = syncPointTree.get(newEmptyPath());\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n        }\n        let events = [];\n        const childName = pathGetFront(operation.path);\n        const childOperation = operation.operationForChild(childName);\n        const childTree = syncPointTree.children.get(childName);\n        if (childTree && childOperation) {\n            const childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n        if (syncPoint) {\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n        }\n        return events;\n    }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n        const childServerCache = serverCache\n            ? serverCache.getImmediateChild(childName)\n            : null;\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\n        const childOperation = operation.operationForChild(childName);\n        if (childOperation) {\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n    });\n    if (syncPoint) {\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n    const query = view.query;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    return {\n        hashFn: () => {\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n            return cache.hash();\n        },\n        onComplete: (status) => {\n            if (status === 'ok') {\n                if (tag) {\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n                }\n                else {\n                    return syncTreeApplyListenComplete(syncTree, query._path);\n                }\n            }\n            else {\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                const error = errorForServerCode(status, query);\n                return syncTreeRemoveEventRegistration(syncTree, query, \n                /*eventRegistration*/ null, error);\n            }\n        }\n    };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n    const queryKey = syncTreeMakeQueryKey_(query);\n    return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n    return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n    return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n    const splitIndex = queryKey.indexOf('$');\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n        queryId: queryKey.substr(splitIndex + 1),\n        path: new Path(queryKey.substr(0, splitIndex))\n    };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n            return [completeView];\n        }\n        else {\n            // No complete view here, flatten any deeper listens into an array\n            let views = [];\n            if (maybeChildSyncPoint) {\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\n            }\n            each(childMap, (_key, childViews) => {\n                views = views.concat(childViews);\n            });\n            return views;\n        }\n    });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n        // We treat queries that load all data as default queries\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n        // from Query\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n    }\n    else {\n        return query;\n    }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n    for (let j = 0; j < queries.length; ++j) {\n        const removedQuery = queries[j];\n        if (!removedQuery._queryParams.loadsAllData()) {\n            // We should have a tag for this\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n            syncTree.queryToTagMap.delete(removedQueryKey);\n            syncTree.tagToQueryMap.delete(removedQueryTag);\n        }\n    }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n    return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n    const path = query._path;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n    }\n    else {\n        // Shadow everything at or below this location, this is a default listener.\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n            if (!pathIsEmpty(relativePath) &&\n                maybeChildSyncPoint &&\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n            }\n            else {\n                // No default listener here, flatten any deeper queries into an array\n                let queries = [];\n                if (maybeChildSyncPoint) {\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n                }\n                each(childMap, (_key, childQueries) => {\n                    queries = queries.concat(childQueries);\n                });\n                return queries;\n            }\n        });\n        for (let i = 0; i < queriesToStop.length; ++i) {\n            const queryToStop = queriesToStop[i];\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n        }\n    }\n    return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n    constructor(node_) {\n        this.node_ = node_;\n    }\n    getImmediateChild(childName) {\n        const child = this.node_.getImmediateChild(childName);\n        return new ExistingValueProvider(child);\n    }\n    node() {\n        return this.node_;\n    }\n}\nclass DeferredValueProvider {\n    constructor(syncTree, path) {\n        this.syncTree_ = syncTree;\n        this.path_ = path;\n    }\n    getImmediateChild(childName) {\n        const childPath = pathChild(this.path_, childName);\n        return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n    node() {\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)('.sv' in value, 'Unexpected leaf node or priority contents');\n    if (typeof value['.sv'] === 'string') {\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n    }\n    else if (typeof value['.sv'] === 'object') {\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\n    }\n    else {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n    }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n    switch (op) {\n        case 'timestamp':\n            return serverValues['timestamp'];\n        default:\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(false, 'Unexpected server value: ' + op);\n    }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n    if (!op.hasOwnProperty('increment')) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n    }\n    const delta = op['increment'];\n    if (typeof delta !== 'number') {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(false, 'Unexpected increment value: ' + delta);\n    }\n    const existingNode = existing.node();\n    (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n    // Incrementing a non-number sets the value to the incremented amount\n    if (!existingNode.isLeafNode()) {\n        return delta;\n    }\n    const leaf = existingNode;\n    const existingVal = leaf.getValue();\n    if (typeof existingVal !== 'number') {\n        return delta;\n    }\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n    return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n    const rawPri = node.getPriority().val();\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n    let newNode;\n    if (node.isLeafNode()) {\n        const leafNode = node;\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode(value, nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        const childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n    /**\n     * @param name - Optional name of the node.\n     * @param parent - Optional parent node.\n     * @param node - Optional node to wrap.\n     */\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\n        this.name = name;\n        this.parent = parent;\n        this.node = node;\n    }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = tree, next = pathGetFront(path);\n    while (next !== null) {\n        const childNode = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(child.node.children, next) || {\n            children: {},\n            childCount: 0\n        };\n        child = new Tree(next, child, childNode);\n        path = pathPopFront(path);\n        next = pathGetFront(path);\n    }\n    return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n    return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n    tree.node.value = value;\n    treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n    return tree.node.childCount > 0;\n}\n/**\n * @returns Whether the tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n    each(tree.node.children, (child, childTree) => {\n        action(new Tree(child, tree, childTree));\n    });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n        action(tree);\n    }\n    treeForEachChild(tree, child => {\n        treeForEachDescendant(child, action, true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n        action(tree);\n    }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n    let node = includeSelf ? tree : tree.parent;\n    while (node !== null) {\n        if (action(node)) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n    return new Path(tree.parent === null\n        ? tree.name\n        : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n    if (tree.parent !== null) {\n        treeUpdateChild(tree.parent, tree.name, tree);\n    }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n    const childEmpty = treeIsEmpty(child);\n    const childExists = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(tree.node.children, childName);\n    if (childEmpty && childExists) {\n        delete tree.node.children[childName];\n        tree.node.childCount--;\n        treeUpdateParents(tree);\n    }\n    else if (!childEmpty && !childExists) {\n        tree.node.children[childName] = child.node;\n        tree.node.childCount++;\n        treeUpdateParents(tree);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\n};\nconst isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !INVALID_PATH_REGEX_.test(pathString));\n};\nconst isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n        (priority &&\n            typeof priority === 'object' &&\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n    if (optional && value === undefined) {\n        return;\n    }\n    validateFirebaseData((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            validationPathToErrorString(path) +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix +\n            'contains ' +\n            data.toString() +\n            ' ' +\n            validationPathToErrorString(path));\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > MAX_LEAF_SIZE_ / 3 &&\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringLength)(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            validationPathToErrorString(path) +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        let hasDotValue = false;\n        let hasActualChild = false;\n        each(data, (key, value) => {\n            if (key === '.value') {\n                hasDotValue = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        validationPathToErrorString(path) +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            validationPathPush(path, key);\n            validateFirebaseData(errorPrefix, value, path);\n            validationPathPop(path);\n        });\n        if (hasDotValue && hasActualChild) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                validationPathToErrorString(path) +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    let i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        const keys = pathSlice(curPath);\n        for (let j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\n            else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(pathCompare);\n    let prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n    if (optional && data === undefined) {\n        return;\n    }\n    const errorPrefix$1 = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, 'values');\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n    }\n    const mergePaths = [];\n    each(data, (key, value) => {\n        const curPath = new Path(key);\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n        if (pathGetBack(curPath) === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix$1 +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n    if (optional && priority === undefined) {\n        return;\n    }\n    if (isInvalidJSONNumber(priority)) {\n        throw new Error((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, 'priority') +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    }\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) {\n        throw new Error((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, 'priority') +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n    }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n    if (optional && key === undefined) {\n        return;\n    }\n    if (!isValidKey(key)) {\n        throw new Error((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, argumentName) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n    }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n    if (optional && pathString === undefined) {\n        return;\n    }\n    if (!isValidPathString(pathString)) {\n        throw new Error((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, argumentName) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n    if (pathGetFront(path) === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n    // TODO = Validate server better.\n    const pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\n        throw new Error((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.errorPrefix)(fnName, 'url') +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n    constructor() {\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         */\n        this.recursionDepth_ = 0;\n    }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n        const data = eventDataList[i];\n        const path = data.getPath();\n        if (currList !== null && !pathEquals(path, currList.path)) {\n            eventQueue.eventLists_.push(currList);\n            currList = null;\n        }\n        if (currList === null) {\n            currList = { events: [], path };\n        }\n        currList.events.push(data);\n    }\n    if (currList) {\n        eventQueue.eventLists_.push(currList);\n    }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\n        pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n    eventQueue.recursionDepth_++;\n    let sentAll = true;\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n        const eventList = eventQueue.eventLists_[i];\n        if (eventList) {\n            const eventPath = eventList.path;\n            if (predicate(eventPath)) {\n                eventListRaise(eventQueue.eventLists_[i]);\n                eventQueue.eventLists_[i] = null;\n            }\n            else {\n                sentAll = false;\n            }\n        }\n    }\n    if (sentAll) {\n        eventQueue.eventLists_ = [];\n    }\n    eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n    for (let i = 0; i < eventList.events.length; i++) {\n        const eventData = eventList.events[i];\n        if (eventData !== null) {\n            eventList.events[i] = null;\n            const eventFn = eventData.getEventRunner();\n            if (logger) {\n                log('event: ' + eventData.toString());\n            }\n            exceptionGuard(eventFn);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n        this.repoInfo_ = repoInfo_;\n        this.forceRestClient_ = forceRestClient_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckProvider_ = appCheckProvider_;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        /** A list of data pieces and paths to be set when this client disconnects. */\n        this.onDisconnect_ = newSparseSnapshotTree();\n        /** Stores queues of outstanding transactions for Firebase locations. */\n        this.transactionQueueTree_ = new Tree();\n        // TODO: This should be @private but it's used by test_access.js and internal.js\n        this.persistentConnection_ = null;\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\n        this.key = this.repoInfo_.toURLString();\n    }\n    /**\n     * @returns The URL corresponding to the root of this Firebase.\n     */\n    toString() {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    }\n}\nfunction repoStart(repo, appId, authOverride) {\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n    if (repo.forceRestClient_ || beingCrawled()) {\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n    }\n    else {\n        // Validate authOverride\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\n            if (typeof authOverride !== 'object') {\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n            }\n            try {\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(authOverride);\n            }\n            catch (e) {\n                throw new Error('Invalid authOverride provided: ' + e);\n            }\n        }\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, (connectStatus) => {\n            repoOnConnectStatus(repo, connectStatus);\n        }, (updates) => {\n            repoOnServerInfoUpdate(repo, updates);\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n        repo.server_ = repo.persistentConnection_;\n    }\n    repo.authTokenProvider_.addTokenChangeListener(token => {\n        repo.server_.refreshAuthToken(token);\n    });\n    repo.appCheckProvider_.addTokenChangeListener(result => {\n        repo.server_.refreshAppCheckToken(result.token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n    // Used for .info.\n    repo.infoData_ = new SnapshotHolder();\n    repo.infoSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            let infoEvents = [];\n            const node = repo.infoData_.getNode(query._path);\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n            // on initial data...\n            if (!node.isEmpty()) {\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n                setTimeout(() => {\n                    onComplete('ok');\n                }, 0);\n            }\n            return infoEvents;\n        },\n        stopListening: () => { }\n    });\n    repoUpdateInfo(repo, 'connected', false);\n    repo.serverSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n                const events = onComplete(status, data);\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n            });\n            // No synchronous events for network-backed sync trees\n            return [];\n        },\n        stopListening: (query, tag) => {\n            repo.server_.unlisten(query, tag);\n        }\n    });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    const offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n    return generateWithValues({\n        timestamp: repoServerTime(repo)\n    });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n    // For testing.\n    repo.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = repo.interceptServerDataCallback_\n        ? repo.interceptServerDataCallback_(pathString, data)\n        : data;\n    let events = [];\n    if (tag) {\n        if (isMerge) {\n            const taggedChildren = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(data, (raw) => nodeFromJSON(raw));\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n        }\n        else {\n            const taggedSnap = nodeFromJSON(data);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n        }\n    }\n    else if (isMerge) {\n        const changedChildren = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.map)(data, (raw) => nodeFromJSON(raw));\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n    }\n    else {\n        const snap = nodeFromJSON(data);\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n        // Since we have a listener outstanding for each transaction, receiving any events\n        // is a proxy for some change having occurred.\n        affectedPath = repoRerunTransactions(repo, path);\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n    repoUpdateInfo(repo, 'connected', connectStatus);\n    if (connectStatus === false) {\n        repoRunOnDisconnectEvents(repo);\n    }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n    each(updates, (key, value) => {\n        repoUpdateInfo(repo, key, value);\n    });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    repo.infoData_.updateSnapshot(path, newNode);\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n    return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n    if (cached != null) {\n        return Promise.resolve(cached);\n    }\n    return repo.server_.get(query).then(payload => {\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n        /**\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n         * Add an event registration,\n         * Update data at the path,\n         * Raise any events,\n         * Cleanup the SyncTree\n         */\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n        let events;\n        if (query._queryParams.loadsAllData()) {\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n        }\n        else {\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n        }\n        /*\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n         * ensure the corresponding child events will get fired.\n         */\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n        return node;\n    }, err => {\n        repoLog(repo, 'get for query ' + (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err));\n    });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n    repoLog(repo, 'set', {\n        path: path.toString(),\n        value: newVal,\n        priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n            warn('set at ' + path + ' failed: ' + status);\n        }\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = repoGenerateServerValues(repo);\n    const changedChildren = {};\n    each(childrenToMerge, (changedKey, changedValue) => {\n        empty = false;\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n        const writeId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n        eventQueueQueueEvents(repo.eventQueue_, events);\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n            const success = status === 'ok';\n            if (!success) {\n                warn('update at ' + path + ' failed: ' + status);\n            }\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n        });\n        each(childrenToMerge, (changedPath) => {\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n            repoRerunTransactions(repo, affectedPath);\n        });\n        // We queued the events above, so just flush the queue here\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n    }\n    else {\n        log(\"update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n    repoLog(repo, 'onDisconnectEvents');\n    const serverValues = repoGenerateServerValues(repo);\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    });\n    let events = [];\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n        const affectedPath = repoAbortTransactions(repo, path);\n        repoRerunTransactions(repo, affectedPath);\n    });\n    repo.onDisconnect_ = newSparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n    const newNode = nodeFromJSON(value);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n    const newNode = nodeFromJSON(value, priority);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(childrenToMerge)) {\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n        return;\n    }\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n        if (status === 'ok') {\n            each(childrenToMerge, (childName, childNode) => {\n                const newChildNode = nodeFromJSON(childNode);\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n            });\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n}\nfunction repoResume(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n}\nfunction repoLog(repo, ...varArgs) {\n    let prefix = '';\n    if (repo.persistentConnection_) {\n        prefix = repo.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n    if (callback) {\n        exceptionGuard(() => {\n            if (status === 'ok') {\n                callback(null);\n            }\n            else {\n                const code = (status || 'error').toUpperCase();\n                let message = code;\n                if (errorReason) {\n                    message += ': ' + errorReason;\n                }\n                const error = new Error(message);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.code = code;\n                callback(error);\n            }\n        });\n    }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n    repoLog(repo, 'transaction on ' + path);\n    // Initialize transaction.\n    const transaction = {\n        path,\n        update: transactionUpdate,\n        onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out\n        // which one goes first.\n        order: LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    const currentState = repoGetLatestState(repo, path, undefined);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\n        }\n    }\n    else {\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = 0 /* TransactionStatus.RUN */;\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n        const nodeQueue = treeGetValue(queueNode) || [];\n        nodeQueue.push(transaction);\n        treeSetValue(queueNode, nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our\n        // transaction state, since the user could start new transactions from the\n        // event callbacks.\n        let priorityForNode;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(newVal, '.priority')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            priorityForNode = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.safeGet)(newVal, '.priority');\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n                ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        const serverValues = repoGenerateServerValues(repo);\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n    }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n        ChildrenNode.EMPTY_NODE);\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        repoPruneCompletedTransactionsBelowNode(repo, node);\n    }\n    if (treeGetValue(node)) {\n        const queue = repoBuildTransactionQueue(repo, node);\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queue.length > 0, 'Sending zero length transaction queue');\n        const allRun = queue.every((transaction) => transaction.status === 0 /* TransactionStatus.RUN */);\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\n        }\n    }\n    else if (treeHasChildren(node)) {\n        treeForEachChild(node, childNode => {\n            repoSendReadyTransactions(repo, childNode);\n        });\n    }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n        return txn.currentWriteId;\n    });\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n        const txn = queue[i];\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = 1 /* TransactionStatus.SENT */;\n        txn.retryCount++;\n        const relativePath = newRelativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n    // Send the put.\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\n        repoLog(repo, 'transaction put response', {\n            path: pathToSend.toString(),\n            status\n        });\n        let events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our\n            // transaction state, since the callback could trigger more\n            // transactions or sets.\n            const callbacks = [];\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this\n                    // transaction is complete, it should be set\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n            // There may be pending transactions that we can now send.\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n            // Finally, trigger onComplete callbacks.\n            for (let i = 0; i < callbacks.length; i++) {\n                exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (let i = 0; i < queue.length; i++) {\n                    if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n                        queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    }\n                    else {\n                        queue[i].status = 0 /* TransactionStatus.RUN */;\n                    }\n                }\n            }\n            else {\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (let i = 0; i < queue.length; i++) {\n                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n                    queue[i].abortReason = status;\n                }\n            }\n            repoRerunTransactions(repo, path);\n        }\n    }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n    const path = treeGetPath(rootMostTransactionNode);\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n    repoRerunTransactionQueue(repo, queue, path);\n    return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n        return q.status === 0 /* TransactionStatus.RUN */;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n        return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n        const transaction = queue[i];\n        const relativePath = newRelativePath(path, transaction.path);\n        let abortTransaction = false, abortReason;\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n        else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                const newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    let newDataNode = nodeFromJSON(newData);\n                    const hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.contains)(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    const oldWriteId = transaction.currentWriteId;\n                    const serverValues = repoGenerateServerValues(repo);\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n                }\n            }\n        }\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n            // Removing a listener can trigger pruning which can muck with\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\n            // until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n                }\n                else {\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n    let front;\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = repo.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\n        transactionNode = treeSubTree(transactionNode, front);\n        path = pathPopFront(path);\n        front = pathGetFront(path);\n    }\n    return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue = [];\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => a.order - b.order);\n    return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n    const nodeQueue = treeGetValue(node);\n    if (nodeQueue) {\n        for (let i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    treeForEachChild(node, child => {\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\n    });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        let to = 0;\n        for (let from = 0; from < queue.length; from++) {\n            if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\n    }\n    treeForEachChild(node, childNode => {\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\n    });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n    treeForEachAncestor(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    repoAbortTransactionsOnNode(repo, transactionNode);\n    treeForEachDescendant(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more transactions\n        // or sets.\n        const callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for\n        // abort, while the unsent ones can be immediately aborted and removed.\n        let events = [];\n        let lastSent = -1;\n        for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;\n            else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            treeSetValue(node, undefined);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n        for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n    let pathStringDecoded = '';\n    const pieces = pathString.split('/');\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            let piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n    const results = {};\n    if (queryString.charAt(0) === '?') {\n        queryString = queryString.substring(1);\n    }\n    for (const segment of queryString.split('&')) {\n        if (segment.length === 0) {\n            continue;\n        }\n        const kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n        }\n    }\n    return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\n    if (parsedUrl.domain === 'firebase.com') {\n        fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace === 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        warnIfPageIsSecure();\n    }\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \n        /*persistenceKey=*/ '', \n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\n        path: new Path(parsedUrl.pathString)\n    };\n};\nconst parseDatabaseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\n    // Always default to SSL, unless otherwise specified.\n    let secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        let colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        let slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        let questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = host.length;\n        }\n        const hostWithoutPort = host.slice(0, colonInd);\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        else if (hostWithoutPort.split('.').length <= 2) {\n            domain = hostWithoutPort;\n        }\n        else {\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\n            const dotInd = host.indexOf('.');\n            subdomain = host.substring(0, dotInd).toLowerCase();\n            domain = host.substring(dotInd + 1);\n            // Normalize namespaces to lowercase to share storage / connection.\n            namespace = subdomain;\n        }\n        // Always treat the value of the `ns` as the namespace name if it is present.\n        if ('ns' in queryParams) {\n            namespace = queryParams['ns'];\n        }\n    }\n    return {\n        host,\n        port,\n        domain,\n        subdomain,\n        secure,\n        scheme,\n        pathString,\n        namespace\n    };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = (function () {\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    let lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    const lastRandChars = [];\n    return function (now) {\n        const duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        let i;\n        const timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(now === 0, 'Cannot push at time == 0');\n        let id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n    /**\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n     * @param eventRegistration - The function to call to with the event data. User provided\n     * @param snapshot - The data backing the event\n     * @param prevName - Optional, the name of the previous child for child_* events.\n     */\n    constructor(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    getPath() {\n        const ref = this.snapshot.ref;\n        if (this.eventType === 'value') {\n            return ref._path;\n        }\n        else {\n            return ref.parent._path;\n        }\n    }\n    getEventType() {\n        return this.eventType;\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.stringify)(this.snapshot.exportVal()));\n    }\n}\nclass CancelEvent {\n    constructor(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    getPath() {\n        return this.path;\n    }\n    getEventType() {\n        return 'cancel';\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return this.path.toString() + ':cancel';\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n    constructor(snapshotCallback, cancelCallback) {\n        this.snapshotCallback = snapshotCallback;\n        this.cancelCallback = cancelCallback;\n    }\n    onValue(expDataSnapshot, previousChildName) {\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n    onCancel(error) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n        return this.cancelCallback.call(null, error);\n    }\n    get hasCancelCallback() {\n        return !!this.cancelCallback;\n    }\n    matches(other) {\n        return (this.snapshotCallback === other.snapshotCallback ||\n            (this.snapshotCallback.userCallback !== undefined &&\n                this.snapshotCallback.userCallback ===\n                    other.snapshotCallback.userCallback &&\n                this.snapshotCallback.context === other.snapshotCallback.context));\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n    /** @hideconstructor */\n    constructor(_repo, _path) {\n        this._repo = _repo;\n        this._path = _path;\n    }\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    cancel() {\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    remove() {\n        validateWritablePath('OnDisconnect.remove', this._path);\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n     * for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    set(value) {\n        validateWritablePath('OnDisconnect.set', this._path);\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @param priority - The priority to be written (string, number, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    setWithPriority(value, priority) {\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * @param values - Object containing multiple values.\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    update(values) {\n        validateWritablePath('OnDisconnect.update', this._path);\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n        const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n    /**\n     * @hideconstructor\n     */\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\n        this._repo = _repo;\n        this._path = _path;\n        this._queryParams = _queryParams;\n        this._orderByCalled = _orderByCalled;\n    }\n    get key() {\n        if (pathIsEmpty(this._path)) {\n            return null;\n        }\n        else {\n            return pathGetBack(this._path);\n        }\n    }\n    get ref() {\n        return new ReferenceImpl(this._repo, this._path);\n    }\n    get _queryIdentifier() {\n        const obj = queryParamsGetQueryObject(this._queryParams);\n        const id = ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    }\n    /**\n     * An object representation of the query parameters used by this Query.\n     */\n    get _queryObject() {\n        return queryParamsGetQueryObject(this._queryParams);\n    }\n    isEqual(other) {\n        other = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(other);\n        if (!(other instanceof QueryImpl)) {\n            return false;\n        }\n        const sameRepo = this._repo === other._repo;\n        const samePath = pathEquals(this._path, other._path);\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n        return sameRepo && samePath && sameQueryIdentifier;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n    if (query._orderByCalled === true) {\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n        startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n        endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n            'startAt(), endAt(), or equalTo().';\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n            'endAt(), endBefore(), or equalTo() must be a string.';\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            if (startName !== MIN_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof startNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            if (endName !== MAX_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof endNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n    }\n    else if (params.getIndex() === PRIORITY_INDEX) {\n        if ((startNode != null && !isValidPriority(startNode)) ||\n            (endNode != null && !isValidPriority(endNode))) {\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n                '(null, a number, or a string).');\n        }\n    }\n    else {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(params.getIndex() instanceof PathIndex ||\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\n        if ((startNode != null && typeof startNode === 'object') ||\n            (endNode != null && typeof endNode === 'object')) {\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n                'equalTo() cannot be an object.');\n        }\n    }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n    if (params.hasStart() &&\n        params.hasEnd() &&\n        params.hasLimit() &&\n        !params.hasAnchoredLimit()) {\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n            'limitToFirst() or limitToLast() instead.');\n    }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n    /** @hideconstructor */\n    constructor(repo, path) {\n        super(repo, path, new QueryParams(), false);\n    }\n    get parent() {\n        const parentPath = pathParent(this._path);\n        return parentPath === null\n            ? null\n            : new ReferenceImpl(this._repo, parentPath);\n    }\n    get root() {\n        let ref = this;\n        while (ref.parent !== null) {\n            ref = ref.parent;\n        }\n        return ref;\n    }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n    /**\n     * @param _node - A SnapshotNode to wrap.\n     * @param ref - The location this snapshot came from.\n     * @param _index - The iteration order for this snapshot\n     * @hideconstructor\n     */\n    constructor(_node, \n    /**\n     * The location of this DataSnapshot.\n     */\n    ref, _index) {\n        this._node = _node;\n        this.ref = ref;\n        this._index = _index;\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n     * ).\n     */\n    get priority() {\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this._node.getPriority().val();\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return\n     * `null`.\n     */\n    get key() {\n        return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get size() {\n        return this._node.numChildren();\n    }\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @param path - A relative path to the location of child data.\n     */\n    child(path) {\n        const childPath = new Path(path);\n        const childRef = child(this.ref, path);\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     */\n    exists() {\n        return !this._node.isEmpty();\n    }\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    exportVal() {\n        return this._node.val(true);\n    }\n    /**\n     * Enumerates the top-level children in the `IteratedDataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\n     * where `forEach()` comes in handy. It guarantees the children of a\n     * `DataSnapshot` will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action - A function that will be called for each child DataSnapshot.\n     * The callback can return true to cancel further enumeration.\n     * @returns true if enumeration was canceled due to your callback returning\n     * true.\n     */\n    forEach(action) {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        const childrenNode = this._node;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n        });\n    }\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @param path - A relative path to the location of a potential child.\n     * @returns `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path) {\n        const childPath = new Path(path);\n        return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @returns true if this snapshot has any children; else false.\n     */\n    hasChildren() {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        else {\n            return !this._node.isEmpty();\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.exportVal();\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    val() {\n        return this._node.val();\n    }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n    db = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);\n    db._checkNotDeleted('ref');\n    return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n    db = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);\n    db._checkNotDeleted('refFromURL');\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n    validateUrl('refFromURL', parsedURL);\n    const repoInfo = parsedURL.repoInfo;\n    if (!db._repo.repoInfo_.isCustomHost() &&\n        repoInfo.host !== db._repo.repoInfo_.host) {\n        fatal('refFromURL' +\n            ': Host name does not match the current database: ' +\n            '(found ' +\n            repoInfo.host +\n            ' but expected ' +\n            db._repo.repoInfo_.host +\n            ')');\n    }\n    return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n    parent = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(parent);\n    if (pathGetFront(parent._path) === null) {\n        validateRootPathString('child', 'path', path, false);\n    }\n    else {\n        validatePathString('child', 'path', path, false);\n    }\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n    ref = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);\n    return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n    parent = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(parent);\n    validateWritablePath('push', parent._path);\n    validateFirebaseDataArg('push', value, parent._path, true);\n    const now = repoServerTime(parent._repo);\n    const name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a\n    // regular Reference. We use child() to create handles to two different\n    // references. The first is turned into a ThennableReference below by adding\n    // then() and catch() methods and is used as the return value of push(). The\n    // second remains a regular Reference and is used as the fulfilled value of\n    // the first ThennableReference.\n    const thenablePushRef = child(parent, name);\n    const pushRef = child(parent, name);\n    let promise;\n    if (value != null) {\n        promise = set(pushRef, value).then(() => pushRef);\n    }\n    else {\n        promise = Promise.resolve(pushRef);\n    }\n    thenablePushRef.then = promise.then.bind(promise);\n    thenablePushRef.catch = promise.then.bind(promise, undefined);\n    return thenablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n    validateWritablePath('remove', ref._path);\n    return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n    ref = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);\n    validateWritablePath('set', ref._path);\n    validateFirebaseDataArg('set', value, ref._path, false);\n    const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, \n    /*priority=*/ null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n    ref = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);\n    validateWritablePath('setPriority', ref._path);\n    validatePriority('setPriority', priority, false);\n    const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n    validateWritablePath('setWithPriority', ref._path);\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n    validatePriority('setWithPriority', priority, false);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n    }\n    const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\n    const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n    query = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(query);\n    const callbackContext = new CallbackContext(() => { });\n    const container = new ValueEventRegistration(callbackContext);\n    return repoGetValue(query._repo, query, container).then(node => {\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n    });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n    constructor(callbackContext) {\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        return eventType === 'value';\n    }\n    createEvent(change, query) {\n        const index = query._queryParams.getIndex();\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\n        }\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    matches(other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callbackContext || !this.callbackContext) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return other.callbackContext.matches(this.callbackContext);\n        }\n    }\n    hasAnyCallback() {\n        return this.callbackContext !== null;\n    }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n    constructor(eventType, callbackContext) {\n        this.eventType = eventType;\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return this.eventType === eventToCheck;\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    createEvent(change, query) {\n        (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.assert)(change.childName != null, 'Child events should have a childName.');\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n        const index = query._queryParams.getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        }\n    }\n    matches(other) {\n        if (other instanceof ChildEventRegistration) {\n            return (this.eventType === other.eventType &&\n                (!this.callbackContext ||\n                    !other.callbackContext ||\n                    this.callbackContext.matches(other.callbackContext)));\n        }\n        return false;\n    }\n    hasAnyCallback() {\n        return !!this.callbackContext;\n    }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n    let cancelCallback;\n    if (typeof cancelCallbackOrListenOptions === 'object') {\n        cancelCallback = undefined;\n        options = cancelCallbackOrListenOptions;\n    }\n    if (typeof cancelCallbackOrListenOptions === 'function') {\n        cancelCallback = cancelCallbackOrListenOptions;\n    }\n    if (options && options.onlyOnce) {\n        const userCallback = callback;\n        const onceCallback = (dataSnapshot, previousChildName) => {\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\n            userCallback(dataSnapshot, previousChildName);\n        };\n        onceCallback.userCallback = callback.userCallback;\n        onceCallback.context = callback.context;\n        callback = onceCallback;\n    }\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n    const container = eventType === 'value'\n        ? new ValueEventRegistration(callbackContext)\n        : new ChildEventRegistration(eventType, callbackContext);\n    repoAddEventCallbackForQuery(query._repo, query, container);\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n    let container = null;\n    const expCallback = callback ? new CallbackContext(callback) : null;\n    if (eventType === 'value') {\n        container = new ValueEventRegistration(expCallback);\n    }\n    else if (eventType) {\n        container = new ChildEventRegistration(eventType, expCallback);\n    }\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {\n}\nclass QueryEndAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n    validateKey('endAt', 'key', key, true);\n    return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'endBefore';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n    validateKey('endBefore', 'key', key, true);\n    return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAt';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\n                'startBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n    validateKey('startAt', 'key', key, true);\n    return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'startAfter';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\n                'startAfter, or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n    validateKey('startAfter', 'key', key, true);\n    return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToFirst';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToFirst: First argument must be a positive integer.');\n    }\n    return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n        this.type = 'limitToLast';\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToLast: First argument must be a positive integer.');\n    }\n    return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n    constructor(_path) {\n        super();\n        this._path = _path;\n        this.type = 'orderByChild';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByChild');\n        const parsedPath = new Path(this._path);\n        if (pathIsEmpty(parsedPath)) {\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n        }\n        const index = new PathIndex(parsedPath);\n        const newParams = queryParamsOrderBy(query._queryParams, index);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n    if (path === '$key') {\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n    }\n    else if (path === '$priority') {\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n    }\n    else if (path === '$value') {\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n    }\n    validatePathString('orderByChild', 'path', path, false);\n    return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByKey';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByKey');\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n    return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByPriority';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n    return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n    constructor() {\n        super(...arguments);\n        this.type = 'orderByValue';\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByValue');\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n    return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n        this.type = 'equalTo';\n    }\n    _apply(query) {\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\n        if (query._queryParams.hasStart()) {\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n                'equalTo).');\n        }\n        if (query._queryParams.hasEnd()) {\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n                'equalTo).');\n        }\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n    validateKey('equalTo', 'key', key, true);\n    return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n    let queryImpl = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(query);\n    for (const constraint of queryConstraints) {\n        queryImpl = constraint._apply(queryImpl);\n    }\n    return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, \n    /*isUsingEmulator=*/ true);\n    if (tokenProvider) {\n        repo.authTokenProvider_ = tokenProvider;\n    }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n    let dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n        if (!app.options.projectId) {\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\n                ' a Project ID when calling firebase.initializeApp().');\n        }\n        log('Using default host for project ', app.options.projectId);\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n    let isEmulator;\n    let dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined' && process.env) {\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n        isEmulator = true;\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n        repoInfo = parsedUrl.repoInfo;\n    }\n    else {\n        isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    const authTokenProvider = nodeAdmin && isEmulator\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n        fatal('Database URL must point to the root of a Firebase Database ' +\n            '(not including a child path).');\n    }\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n    return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n    const appRepos = repos[appName];\n    // This should never happen...\n    if (!appRepos || appRepos[repo.key] !== repo) {\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n    }\n    repoInterrupt(repo);\n    delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n    let appRepos = repos[app.name];\n    if (!appRepos) {\n        appRepos = {};\n        repos[app.name] = appRepos;\n    }\n    let repo = appRepos[repoInfo.toURLString()];\n    if (repo) {\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n    useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n    /** @hideconstructor */\n    constructor(_repoInternal, \n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    app) {\n        this._repoInternal = _repoInternal;\n        this.app = app;\n        /** Represents a `Database` instance. */\n        this['type'] = 'database';\n        /** Track if the instance has been used (root or repo accessed) */\n        this._instanceStarted = false;\n    }\n    get _repo() {\n        if (!this._instanceStarted) {\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n            this._instanceStarted = true;\n        }\n        return this._repoInternal;\n    }\n    get _root() {\n        if (!this._rootInternal) {\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n        }\n        return this._rootInternal;\n    }\n    _delete() {\n        if (this._rootInternal !== null) {\n            repoManagerDeleteRepo(this._repo, this.app.name);\n            this._repoInternal = null;\n            this._rootInternal = null;\n        }\n        return Promise.resolve();\n    }\n    _checkNotDeleted(apiName) {\n        if (this._rootInternal === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    }\n}\nfunction checkTransportInit() {\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n    }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n    checkTransportInit();\n    BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n    checkTransportInit();\n    WebSocketConnection.forceDisallow();\n    BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated with the provided\n * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if\n * no instance exists or if the existing instance uses a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)(), url) {\n    const db = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, 'database').getImmediate({\n        identifier: url\n    });\n    if (!db._instanceStarted) {\n        const emulator = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultEmulatorHostnameAndPort)('database');\n        if (emulator) {\n            connectDatabaseEmulator(db, ...emulator);\n        }\n    }\n    return db;\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n    db = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);\n    db._checkNotDeleted('useEmulator');\n    if (db._instanceStarted) {\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\n    }\n    const repo = db._repoInternal;\n    let tokenProvider = undefined;\n    if (repo.repoInfo_.nodeAdmin) {\n        if (options.mockUserToken) {\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n        }\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n    }\n    else if (options.mockUserToken) {\n        const token = typeof options.mockUserToken === 'string'\n            ? options.mockUserToken\n            : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.createMockUserToken)(options.mockUserToken, db.app.options.projectId);\n        tokenProvider = new EmulatorTokenProvider(token);\n    }\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n    db = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);\n    db._checkNotDeleted('goOffline');\n    repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n    db = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(db);\n    db._checkNotDeleted('goOnline');\n    repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n    enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n    setSDKVersion(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION);\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component('database', (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n    '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n    return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n    return {\n        '.sv': {\n            'increment': delta\n        }\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n    /** @hideconstructor */\n    constructor(\n    /** Whether the transaction was successfully committed. */\n    committed, \n    /** The resulting data snapshot. */\n    snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    /** Returns a JSON-serializable representation of this object. */\n    toJSON() {\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n    var _a;\n    ref = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(ref);\n    validateWritablePath('Reference.transaction', ref._path);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\n    }\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n    const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.Deferred();\n    const promiseComplete = (error, committed, node) => {\n        let dataSnapshot = null;\n        if (error) {\n            deferred.reject(error);\n        }\n        else {\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\n        }\n    };\n    // Add a watch to make sure we get server updates.\n    const unwatcher = onValue(ref, () => { });\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n    return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n    const oldPut = PersistentConnection.prototype.put;\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        if (hash !== undefined) {\n            hash = newHash();\n        }\n        oldPut.call(this, pathString, data, onComplete, hash);\n    };\n    return function () {\n        PersistentConnection.prototype.put = oldPut;\n    };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n    repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n * @internal\n * @param app - A valid FirebaseApp-like object\n * @param url - A valid Firebase databaseURL\n * @param version - custom version e.g. firebase-admin version\n * @param customAppCheckImpl - custom app check implementation\n * @param customAuthImpl - custom auth implementation\n */\nfunction _initStandalone({ app, url, version, customAuthImpl, customAppCheckImpl, nodeAdmin = false }) {\n    setSDKVersion(version);\n    /**\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n     * any actual function.\n     */\n    const componentContainer = new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.ComponentContainer('database-standalone');\n    const authProvider = new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Provider('auth-internal', componentContainer);\n    let appCheckProvider;\n    if (customAppCheckImpl) {\n        appCheckProvider = new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Provider('app-check-internal', componentContainer);\n        appCheckProvider.setComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    }\n    authProvider.setComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvZGF0YWJhc2UvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdIO0FBQzFDO0FBQzBSO0FBQ3BUOztBQUVwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELHlEQUFTO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0RBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3REFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0RBQU07QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLHNCQUFzQixpRUFBaUI7QUFDdkMscUJBQXFCLGdEQUFJO0FBQ3pCO0FBQ0E7QUFDQSxXQUFXLGtEQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWO0FBQ0EsNkJBQTZCLHNEQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsNkJBQTZCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5REFBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUseURBQVM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlEQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxlQUFlLHlEQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTSxrREFBa0Q7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEdBQUc7QUFDdkI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEdBQUc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLEtBQUs7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SCxnQkFBZ0I7QUFDNUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGNBQWM7QUFDL0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0Esa0JBQWtCLFNBQVMsRUFBRSxVQUFVLEdBQUcsTUFBTTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1YsSUFBSSxzREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdEQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFRO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzQkFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5REFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNERBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQkFBcUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHlEQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlEQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx5REFBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBLDJCQUEyQixrQkFBa0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxxQ0FBcUM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseURBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5REFBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxpQkFBaUIsR0FBRyxZQUFZLEdBQUcsT0FBTyxVQUFVLEdBQUcsT0FBTztBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZUFBZTtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsR0FBRyxRQUFRLEdBQUc7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0RBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseURBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxhQUFhLGtCQUFrQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxhQUFhLHdCQUF3QjtBQUN4RTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYSw4QkFBOEI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHFDQUFxQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGFBQWEsa0JBQWtCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzQkFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsbUJBQW1CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtEQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUJBQXlCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx5QkFBeUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMseUJBQXlCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw2QkFBNkI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHlCQUF5QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsaUNBQWlDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2Q0FBNkM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCwwQkFBMEI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQsZ0NBQWdDLDREQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDREQUFZO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDREQUFZO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELGtEQUFrRDtBQUNsRDtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIseURBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGtCQUFrQix5REFBUztBQUMzQixRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsb0RBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxzREFBc0Qsd0RBQVE7QUFDOUQ7QUFDQSw2QkFBNkIsdURBQU87QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsV0FBVztBQUMxRSx1QkFBdUIsV0FBVztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxXQUFXO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsdURBQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFdBQVc7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNkRBQWE7QUFDNUMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsOEJBQThCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHlEQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5REFBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMseUJBQXlCO0FBQzVEO0FBQ0E7QUFDQSx3QkFBd0Isa0NBQWtDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQ0FBa0M7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQ0FBa0M7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseURBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQWU7QUFDM0I7QUFDQTtBQUNBLGlCQUFpQiw2REFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVEQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhEQUFjO0FBQzVCO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQSx3Q0FBd0Msd0RBQVE7QUFDaEQ7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0EsK0JBQStCLDZCQUE2QixJQUFJLDZCQUE2QjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix1REFBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQVE7QUFDdkI7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsbURBQUc7QUFDOUIsMEJBQTBCLHVEQUFPO0FBQ2pDLFlBQVksc0RBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsbURBQUc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLDZCQUE2QixJQUFJLDZCQUE2QjtBQUNuSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdEQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0RBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQSx3REFBd0QseURBQVM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseURBQVM7QUFDbEM7QUFDQSxvQ0FBb0MseURBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUFTO0FBQ2hDO0FBQ0Esa0NBQWtDLHlEQUFTO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtCQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1REFBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDJEQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msd0RBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0RBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQU07QUFDbEIseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4REFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGFBQWE7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUksc0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1REFBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4REFBYztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhEQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLElBQUksc0RBQU07QUFDVixJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhEQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2QsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBLElBQUksc0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBLElBQUksc0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHFCQUFxQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsU0FBUztBQUNULHdCQUF3QiwwQkFBMEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksc0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQSxJQUFJLHNEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELFlBQVksaUJBQWlCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVEQUFPO0FBQ2pDLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3REFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0RBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QiwyREFBVztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0REFBWTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJEQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkRBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkRBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDJEQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkRBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwyREFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQ0FBbUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDZCQUE2QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlEQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG1EQUFHO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsbURBQUc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wseUNBQXlDLHlEQUFTO0FBQ2xEO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwrQ0FBK0M7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFFBQVEsdURBQU87QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3REFBUTtBQUNwQjtBQUNBLDhCQUE4Qix1REFBTztBQUNyQyxZQUFZLHNEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsT0FBTztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtCQUFrQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdEQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxQkFBcUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBLGdCQUFnQixzREFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0RBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUSxjQUFjLFlBQVk7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQ0FBbUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFRO0FBQ3JDLHNGQUFzRjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvREFBUTtBQUNyQyx5RkFBeUY7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsb0RBQVE7QUFDckMsMEZBQTBGO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG9EQUFRO0FBQ3JDLGdIQUFnSDtBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsb0RBQVE7QUFDckMsOEZBQThGO0FBQzlGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtFQUFrQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0VBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtFQUFrQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0VBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtFQUFrQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzSEFBc0g7QUFDOUgsUUFBUSxtSUFBbUk7QUFDM0k7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0VBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0VBQWtCO0FBQzVCO0FBQ0E7QUFDQSx5QkFBeUIsb0RBQVE7QUFDakM7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtFQUFrQjtBQUM1QjtBQUNBO0FBQ0EseUJBQXlCLG9EQUFRO0FBQ2pDLHFIQUFxSDtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvREFBUTtBQUNqQyw4RkFBOEY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDJJQUEySTtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvREFBUTtBQUNqQyw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0VBQWtCO0FBQzlCLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELFlBQVk7QUFDM0UsSUFBSSxnQkFBZ0IsR0FBRyxjQUFjLEdBQUcsaUJBQWlCLEdBQUc7QUFDNUQsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsbUJBQW1CO0FBQzNELElBQUksbUJBQW1CLEdBQUcsa0JBQWtCLEdBQUcsdUJBQXVCO0FBQ3RFLElBQUkscUJBQXFCLElBQUksZUFBZTtBQUM1QywwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtHQUFrRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtHQUFrRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtHQUFrRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksa0dBQWtHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLElBQUksd0ZBQXdGO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdGQUF3RjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0ZBQXdGO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxrR0FBa0c7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrRUFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsS0FBSyxHQUFHLEtBQUs7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPLG9CQUFvQixPQUFPO0FBQ2pELHlCQUF5QixPQUFPO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixlQUFlLE1BQU0sbUJBQW1CO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVEsR0FBRyxlQUFlO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQ0FBaUM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnQ0FBZ0M7QUFDcEM7QUFDQTtBQUNBLHFCQUFxQixpQ0FBaUM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxREFBTTtBQUNqQyxlQUFlLDJEQUFZO0FBQzNCO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCLGlGQUFpQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdELFNBQVMsa0VBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUVBQW1CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0VBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0VBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFhO0FBQy9CLElBQUksaUVBQWtCLEtBQUssMERBQVMsMkJBQTJCLHlCQUF5QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLDhEQUFlO0FBQ25CO0FBQ0EsSUFBSSw4REFBZTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MscUJBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxrRUFBa0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvREFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixlQUFlO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwwRUFBMEU7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxtRUFBa0I7QUFDckQsNkJBQTZCLHlEQUFRO0FBQ3JDO0FBQ0E7QUFDQSwrQkFBK0IseURBQVE7QUFDdkMsMENBQTBDLDBEQUFTO0FBQ25EO0FBQ0Esa0NBQWtDLDBEQUFTO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU0NUI7QUFDNTVCIiwic291cmNlcyI6WyJFOlxcS1VMSUFIXFxQV0JcXFVBU1xcdWFzLXB3ZWJcXG5vZGVfbW9kdWxlc1xcQGZpcmViYXNlXFxkYXRhYmFzZVxcZGlzdFxcaW5kZXguZXNtMjAxNy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfZ2V0UHJvdmlkZXIsIGdldEFwcCwgU0RLX1ZFUlNJT04gYXMgU0RLX1ZFUlNJT04kMSwgX3JlZ2lzdGVyQ29tcG9uZW50LCByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgc3RyaW5naWZ5LCBqc29uRXZhbCwgY29udGFpbnMsIGFzc2VydCwgaXNOb2RlU2RrLCBzdHJpbmdUb0J5dGVBcnJheSwgU2hhMSwgYmFzZTY0LCBkZWVwQ29weSwgYmFzZTY0RW5jb2RlLCBpc01vYmlsZUNvcmRvdmEsIHN0cmluZ0xlbmd0aCwgRGVmZXJyZWQsIHNhZmVHZXQsIGlzQWRtaW4sIGlzVmFsaWRGb3JtYXQsIGlzRW1wdHksIGlzUmVhY3ROYXRpdmUsIGFzc2VydGlvbkVycm9yLCBtYXAsIHF1ZXJ5c3RyaW5nLCBlcnJvclByZWZpeCwgZ2V0TW9kdWxhckluc3RhbmNlLCBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQsIGNyZWF0ZU1vY2tVc2VyVG9rZW4gfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5cbmNvbnN0IG5hbWUgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xuY29uc3QgdmVyc2lvbiA9IFwiMS4wLjEwXCI7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogVGhlIHNlbXZlciAod3d3LnNlbXZlci5vcmcpIHZlcnNpb24gb2YgdGhlIFNESy4gKi9cbmxldCBTREtfVkVSU0lPTiA9ICcnO1xuLyoqXG4gKiBTREtfVkVSU0lPTiBzaG91bGQgYmUgc2V0IGJlZm9yZSBhbnkgZGF0YWJhc2UgaW5zdGFuY2UgaXMgY3JlYXRlZFxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHNldFNES1ZlcnNpb24odmVyc2lvbikge1xuICAgIFNES19WRVJTSU9OID0gdmVyc2lvbjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogV3JhcHMgYSBET00gU3RvcmFnZSBvYmplY3QgYW5kOlxuICogLSBhdXRvbWF0aWNhbGx5IGVuY29kZSBvYmplY3RzIGFzIEpTT04gc3RyaW5ncyBiZWZvcmUgc3RvcmluZyB0aGVtIHRvIGFsbG93IHVzIHRvIHN0b3JlIGFyYml0cmFyeSB0eXBlcy5cbiAqIC0gcHJlZml4ZXMgbmFtZXMgd2l0aCBcImZpcmViYXNlOlwiIHRvIGF2b2lkIGNvbGxpc2lvbnMgd2l0aCBhcHAgZGF0YS5cbiAqXG4gKiBXZSBhdXRvbWF0aWNhbGx5IChzZWUgc3RvcmFnZS5qcykgY3JlYXRlIHR3byBzdWNoIHdyYXBwZXJzLCBvbmUgZm9yIHNlc3Npb25TdG9yYWdlLFxuICogYW5kIG9uZSBmb3IgbG9jYWxTdG9yYWdlLlxuICpcbiAqL1xuY2xhc3MgRE9NU3RvcmFnZVdyYXBwZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkb21TdG9yYWdlXyAtIFRoZSB1bmRlcmx5aW5nIHN0b3JhZ2Ugb2JqZWN0IChlLmcuIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZSlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihkb21TdG9yYWdlXykge1xuICAgICAgICB0aGlzLmRvbVN0b3JhZ2VfID0gZG9tU3RvcmFnZV87XG4gICAgICAgIC8vIFVzZSBhIHByZWZpeCB0byBhdm9pZCBjb2xsaXNpb25zIHdpdGggb3RoZXIgc3R1ZmYgc2F2ZWQgYnkgdGhlIGFwcC5cbiAgICAgICAgdGhpcy5wcmVmaXhfID0gJ2ZpcmViYXNlOic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHNhdmUgdGhlIHZhbHVlIHVuZGVyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIGJlaW5nIHN0b3JlZCwgb3IgbnVsbCB0byByZW1vdmUgdGhlIGtleS5cbiAgICAgKi9cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kb21TdG9yYWdlXy5yZW1vdmVJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZG9tU3RvcmFnZV8uc2V0SXRlbSh0aGlzLnByZWZpeGVkTmFtZV8oa2V5KSwgc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIHRoYXQgd2FzIHN0b3JlZCB1bmRlciB0aGlzIGtleSwgb3IgbnVsbFxuICAgICAqL1xuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3Qgc3RvcmVkVmFsID0gdGhpcy5kb21TdG9yYWdlXy5nZXRJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcbiAgICAgICAgaWYgKHN0b3JlZFZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBqc29uRXZhbChzdG9yZWRWYWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZShrZXkpIHtcbiAgICAgICAgdGhpcy5kb21TdG9yYWdlXy5yZW1vdmVJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcbiAgICB9XG4gICAgcHJlZml4ZWROYW1lXyhuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeF8gKyBuYW1lO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tU3RvcmFnZV8udG9TdHJpbmcoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGluLW1lbW9yeSBzdG9yYWdlIGltcGxlbWVudGF0aW9uIHRoYXQgbWF0Y2hlcyB0aGUgQVBJIG9mIERPTVN0b3JhZ2VXcmFwcGVyXG4gKiAoVE9ETzogY3JlYXRlIGludGVyZmFjZSBmb3IgYm90aCB0byBpbXBsZW1lbnQpLlxuICovXG5jbGFzcyBNZW1vcnlTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYWNoZV8gPSB7fTtcbiAgICAgICAgdGhpcy5pc0luTWVtb3J5U3RvcmFnZSA9IHRydWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jYWNoZV9ba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVfW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGlmIChjb250YWlucyh0aGlzLmNhY2hlXywga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVfW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJlbW92ZShrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2FjaGVfW2tleV07XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBIZWxwZXIgdG8gY3JlYXRlIGEgRE9NU3RvcmFnZVdyYXBwZXIgb3IgZWxzZSBmYWxsIGJhY2sgdG8gTWVtb3J5U3RvcmFnZS5cbiAqIFRPRE86IE9uY2UgTWVtb3J5U3RvcmFnZSBhbmQgRE9NU3RvcmFnZVdyYXBwZXIgaGF2ZSBhIHNoYXJlZCBpbnRlcmZhY2UgdGhpcyBtZXRob2QgYW5ub3RhdGlvbiBzaG91bGQgY2hhbmdlXG4gKiB0byByZWZsZWN0IHRoaXMgdHlwZVxuICpcbiAqIEBwYXJhbSBkb21TdG9yYWdlTmFtZSAtIE5hbWUgb2YgdGhlIHVuZGVybHlpbmcgc3RvcmFnZSBvYmplY3RcbiAqICAgKGUuZy4gJ2xvY2FsU3RvcmFnZScgb3IgJ3Nlc3Npb25TdG9yYWdlJykuXG4gKiBAcmV0dXJucyBUdXJuaW5nIG9mZiB0eXBlIGluZm9ybWF0aW9uIHVudGlsIGEgY29tbW9uIGludGVyZmFjZSBpcyBkZWZpbmVkLlxuICovXG5jb25zdCBjcmVhdGVTdG9yYWdlZm9yID0gZnVuY3Rpb24gKGRvbVN0b3JhZ2VOYW1lKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gTk9URToganVzdCBhY2Nlc3NpbmcgXCJsb2NhbFN0b3JhZ2VcIiBvciBcIndpbmRvd1snbG9jYWxTdG9yYWdlJ11cIiBtYXkgdGhyb3cgYSBzZWN1cml0eSBleGNlcHRpb24sXG4gICAgICAgIC8vIHNvIGl0IG11c3QgYmUgaW5zaWRlIHRoZSB0cnkvY2F0Y2guXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdHlwZW9mIHdpbmRvd1tkb21TdG9yYWdlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHRlc3QgY2FjaGUuIEp1c3QgYmVjYXVzZSBpdCdzIGhlcmUgZG9lc24ndCBtZWFuIGl0IHdvcmtzXG4gICAgICAgICAgICBjb25zdCBkb21TdG9yYWdlID0gd2luZG93W2RvbVN0b3JhZ2VOYW1lXTtcbiAgICAgICAgICAgIGRvbVN0b3JhZ2Uuc2V0SXRlbSgnZmlyZWJhc2U6c2VudGluZWwnLCAnY2FjaGUnKTtcbiAgICAgICAgICAgIGRvbVN0b3JhZ2UucmVtb3ZlSXRlbSgnZmlyZWJhc2U6c2VudGluZWwnKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRE9NU3RvcmFnZVdyYXBwZXIoZG9tU3RvcmFnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHsgfVxuICAgIC8vIEZhaWxlZCB0byBjcmVhdGUgd3JhcHBlci4gIEp1c3QgcmV0dXJuIGluLW1lbW9yeSBzdG9yYWdlLlxuICAgIC8vIFRPRE86IGxvZz9cbiAgICByZXR1cm4gbmV3IE1lbW9yeVN0b3JhZ2UoKTtcbn07XG4vKiogQSBzdG9yYWdlIG9iamVjdCB0aGF0IGxhc3RzIGFjcm9zcyBzZXNzaW9ucyAqL1xuY29uc3QgUGVyc2lzdGVudFN0b3JhZ2UgPSBjcmVhdGVTdG9yYWdlZm9yKCdsb2NhbFN0b3JhZ2UnKTtcbi8qKiBBIHN0b3JhZ2Ugb2JqZWN0IHRoYXQgb25seSBsYXN0cyBvbmUgc2Vzc2lvbiAqL1xuY29uc3QgU2Vzc2lvblN0b3JhZ2UgPSBjcmVhdGVTdG9yYWdlZm9yKCdzZXNzaW9uU3RvcmFnZScpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgbG9nQ2xpZW50ID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2RhdGFiYXNlJyk7XG4vKipcbiAqIFJldHVybnMgYSBsb2NhbGx5LXVuaXF1ZSBJRCAoZ2VuZXJhdGVkIGJ5IGp1c3QgaW5jcmVtZW50aW5nIHVwIGZyb20gMCBlYWNoIHRpbWUgaXRzIGNhbGxlZCkuXG4gKi9cbmNvbnN0IExVSURHZW5lcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGxldCBpZCA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGlkKys7XG4gICAgfTtcbn0pKCk7XG4vKipcbiAqIFNoYTEgaGFzaCBvZiB0aGUgaW5wdXQgc3RyaW5nXG4gKiBAcGFyYW0gc3RyIC0gVGhlIHN0cmluZyB0byBoYXNoXG4gKiBAcmV0dXJucyB7IXN0cmluZ30gVGhlIHJlc3VsdGluZyBoYXNoXG4gKi9cbmNvbnN0IHNoYTEgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgY29uc3QgdXRmOEJ5dGVzID0gc3RyaW5nVG9CeXRlQXJyYXkoc3RyKTtcbiAgICBjb25zdCBzaGExID0gbmV3IFNoYTEoKTtcbiAgICBzaGExLnVwZGF0ZSh1dGY4Qnl0ZXMpO1xuICAgIGNvbnN0IHNoYTFCeXRlcyA9IHNoYTEuZGlnZXN0KCk7XG4gICAgcmV0dXJuIGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkoc2hhMUJ5dGVzKTtcbn07XG5jb25zdCBidWlsZExvZ01lc3NhZ2VfID0gZnVuY3Rpb24gKC4uLnZhckFyZ3MpIHtcbiAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFyQXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhcmcgPSB2YXJBcmdzW2ldO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpIHx8XG4gICAgICAgICAgICAoYXJnICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIHR5cGVvZiBhcmcubGVuZ3RoID09PSAnbnVtYmVyJykpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYnVpbGRMb2dNZXNzYWdlXy5hcHBseShudWxsLCBhcmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IHN0cmluZ2lmeShhcmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBhcmc7XG4gICAgICAgIH1cbiAgICAgICAgbWVzc2FnZSArPSAnICc7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xufTtcbi8qKlxuICogVXNlIHRoaXMgZm9yIGFsbCBkZWJ1ZyBtZXNzYWdlcyBpbiBGaXJlYmFzZS5cbiAqL1xubGV0IGxvZ2dlciA9IG51bGw7XG4vKipcbiAqIEZsYWcgdG8gY2hlY2sgZm9yIGxvZyBhdmFpbGFiaWxpdHkgb24gZmlyc3QgbG9nIG1lc3NhZ2VcbiAqL1xubGV0IGZpcnN0TG9nXyA9IHRydWU7XG4vKipcbiAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiBGaXJlYmFzZS5lbmFibGVMb2dnaW5nIChkZWZpbmVkIGhlcmUgdG8gYnJlYWsgZGVwZW5kZW5jaWVzKVxuICogQHBhcmFtIGxvZ2dlcl8gLSBBIGZsYWcgdG8gdHVybiBvbiBsb2dnaW5nLCBvciBhIGN1c3RvbSBsb2dnZXJcbiAqIEBwYXJhbSBwZXJzaXN0ZW50IC0gV2hldGhlciBvciBub3QgdG8gcGVyc2lzdCBsb2dnaW5nIHNldHRpbmdzIGFjcm9zcyByZWZyZXNoZXNcbiAqL1xuY29uc3QgZW5hYmxlTG9nZ2luZyQxID0gZnVuY3Rpb24gKGxvZ2dlcl8sIHBlcnNpc3RlbnQpIHtcbiAgICBhc3NlcnQoIXBlcnNpc3RlbnQgfHwgbG9nZ2VyXyA9PT0gdHJ1ZSB8fCBsb2dnZXJfID09PSBmYWxzZSwgXCJDYW4ndCB0dXJuIG9uIGN1c3RvbSBsb2dnZXJzIHBlcnNpc3RlbnRseS5cIik7XG4gICAgaWYgKGxvZ2dlcl8gPT09IHRydWUpIHtcbiAgICAgICAgbG9nQ2xpZW50LmxvZ0xldmVsID0gTG9nTGV2ZWwuVkVSQk9TRTtcbiAgICAgICAgbG9nZ2VyID0gbG9nQ2xpZW50LmxvZy5iaW5kKGxvZ0NsaWVudCk7XG4gICAgICAgIGlmIChwZXJzaXN0ZW50KSB7XG4gICAgICAgICAgICBTZXNzaW9uU3RvcmFnZS5zZXQoJ2xvZ2dpbmdfZW5hYmxlZCcsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBsb2dnZXJfID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGxvZ2dlciA9IGxvZ2dlcl87XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsb2dnZXIgPSBudWxsO1xuICAgICAgICBTZXNzaW9uU3RvcmFnZS5yZW1vdmUoJ2xvZ2dpbmdfZW5hYmxlZCcpO1xuICAgIH1cbn07XG5jb25zdCBsb2cgPSBmdW5jdGlvbiAoLi4udmFyQXJncykge1xuICAgIGlmIChmaXJzdExvZ18gPT09IHRydWUpIHtcbiAgICAgICAgZmlyc3RMb2dfID0gZmFsc2U7XG4gICAgICAgIGlmIChsb2dnZXIgPT09IG51bGwgJiYgU2Vzc2lvblN0b3JhZ2UuZ2V0KCdsb2dnaW5nX2VuYWJsZWQnKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZW5hYmxlTG9nZ2luZyQxKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsb2dnZXIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGJ1aWxkTG9nTWVzc2FnZV8uYXBwbHkobnVsbCwgdmFyQXJncyk7XG4gICAgICAgIGxvZ2dlcihtZXNzYWdlKTtcbiAgICB9XG59O1xuY29uc3QgbG9nV3JhcHBlciA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLnZhckFyZ3MpIHtcbiAgICAgICAgbG9nKHByZWZpeCwgLi4udmFyQXJncyk7XG4gICAgfTtcbn07XG5jb25zdCBlcnJvciA9IGZ1bmN0aW9uICguLi52YXJBcmdzKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdGSVJFQkFTRSBJTlRFUk5BTCBFUlJPUjogJyArIGJ1aWxkTG9nTWVzc2FnZV8oLi4udmFyQXJncyk7XG4gICAgbG9nQ2xpZW50LmVycm9yKG1lc3NhZ2UpO1xufTtcbmNvbnN0IGZhdGFsID0gZnVuY3Rpb24gKC4uLnZhckFyZ3MpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYEZJUkVCQVNFIEZBVEFMIEVSUk9SOiAke2J1aWxkTG9nTWVzc2FnZV8oLi4udmFyQXJncyl9YDtcbiAgICBsb2dDbGllbnQuZXJyb3IobWVzc2FnZSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufTtcbmNvbnN0IHdhcm4gPSBmdW5jdGlvbiAoLi4udmFyQXJncykge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnRklSRUJBU0UgV0FSTklORzogJyArIGJ1aWxkTG9nTWVzc2FnZV8oLi4udmFyQXJncyk7XG4gICAgbG9nQ2xpZW50Lndhcm4obWVzc2FnZSk7XG59O1xuLyoqXG4gKiBMb2dzIGEgd2FybmluZyBpZiB0aGUgY29udGFpbmluZyBwYWdlIHVzZXMgaHR0cHMuIENhbGxlZCB3aGVuIGEgY2FsbCB0byBuZXcgRmlyZWJhc2VcbiAqIGRvZXMgbm90IHVzZSBodHRwcy5cbiAqL1xuY29uc3Qgd2FybklmUGFnZUlzU2VjdXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEJlIHZlcnkgY2FyZWZ1bCBhY2Nlc3NpbmcgYnJvd3NlciBnbG9iYWxzLiBXaG8ga25vd3Mgd2hhdCBtYXkgb3IgbWF5IG5vdCBleGlzdC5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LmxvY2F0aW9uICYmXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAmJlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZignaHR0cHM6JykgIT09IC0xKSB7XG4gICAgICAgIHdhcm4oJ0luc2VjdXJlIEZpcmViYXNlIGFjY2VzcyBmcm9tIGEgc2VjdXJlIHBhZ2UuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSB1c2UgaHR0cHMgaW4gY2FsbHMgdG8gbmV3IEZpcmViYXNlKCkuJyk7XG4gICAgfVxufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGRhdGEgaXMgTmFOLCBvciArLy0gSW5maW5pdHkuXG4gKi9cbmNvbnN0IGlzSW52YWxpZEpTT05OdW1iZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInICYmXG4gICAgICAgIChkYXRhICE9PSBkYXRhIHx8IC8vIE5hTlxuICAgICAgICAgICAgZGF0YSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIHx8XG4gICAgICAgICAgICBkYXRhID09PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpKTtcbn07XG5jb25zdCBleGVjdXRlV2hlbkRPTVJlYWR5ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgaWYgKGlzTm9kZVNkaygpIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgZm4oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE1vZGVsZWQgYWZ0ZXIgalF1ZXJ5LiBUcnkgRE9NQ29udGVudExvYWRlZCBhbmQgb25yZWFkeXN0YXRlY2hhbmdlICh3aGljaFxuICAgICAgICAvLyBmaXJlIGJlZm9yZSBvbmxvYWQpLCBidXQgZmFsbCBiYWNrIHRvIG9ubG9hZC5cbiAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHdyYXBwZWRGbiwgTWF0aC5mbG9vcigxMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHdyYXBwZWRGbiwgZmFsc2UpO1xuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gb25sb2FkLlxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB3cmFwcGVkRm4sIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIElFLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbnJlYWR5c3RhdGVjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlZEZuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBvbmxvYWQuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbmxvYWQnLCB3cmFwcGVkRm4pO1xuICAgICAgICAgICAgLy8galF1ZXJ5IGhhcyBhbiBleHRyYSBoYWNrIGZvciBJRSB0aGF0IHdlIGNvdWxkIGVtcGxveSAoYmFzZWQgb25cbiAgICAgICAgICAgIC8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvKSBCdXQgaXQgbG9va3MgcmVhbGx5IG9sZC5cbiAgICAgICAgICAgIC8vIEknbSBob3Bpbmcgd2UgZG9uJ3QgbmVlZCBpdC5cbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIE1pbmltdW0ga2V5IG5hbWUuIEludmFsaWQgZm9yIGFjdHVhbCBkYXRhLCB1c2VkIGFzIGEgbWFya2VyIHRvIHNvcnQgYmVmb3JlIGFueSB2YWxpZCBuYW1lc1xuICovXG5jb25zdCBNSU5fTkFNRSA9ICdbTUlOX05BTUVdJztcbi8qKlxuICogTWF4aW11bSBrZXkgbmFtZS4gSW52YWxpZCBmb3IgYWN0dWFsIGRhdGEsIHVzZWQgYXMgYSBtYXJrZXIgdG8gc29ydCBhYm92ZSBhbnkgdmFsaWQgbmFtZXNcbiAqL1xuY29uc3QgTUFYX05BTUUgPSAnW01BWF9OQU1FXSc7XG4vKipcbiAqIENvbXBhcmVzIHZhbGlkIEZpcmViYXNlIGtleSBuYW1lcywgcGx1cyBtaW4gYW5kIG1heCBuYW1lXG4gKi9cbmNvbnN0IG5hbWVDb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYSA9PT0gTUlOX05BTUUgfHwgYiA9PT0gTUFYX05BTUUpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBlbHNlIGlmIChiID09PSBNSU5fTkFNRSB8fCBhID09PSBNQVhfTkFNRSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGFBc0ludCA9IHRyeVBhcnNlSW50KGEpLCBiQXNJbnQgPSB0cnlQYXJzZUludChiKTtcbiAgICAgICAgaWYgKGFBc0ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGJBc0ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhQXNJbnQgLSBiQXNJbnQgPT09IDAgPyBhLmxlbmd0aCAtIGIubGVuZ3RoIDogYUFzSW50IC0gYkFzSW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJBc0ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYSA8IGIgPyAtMSA6IDE7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLyoqXG4gKiBAcmV0dXJucyB7IW51bWJlcn0gY29tcGFyaXNvbiByZXN1bHQuXG4gKi9cbmNvbnN0IHN0cmluZ0NvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChhIDwgYikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG59O1xuY29uc3QgcmVxdWlyZUtleSA9IGZ1bmN0aW9uIChrZXksIG9iaikge1xuICAgIGlmIChvYmogJiYga2V5IGluIG9iaikge1xuICAgICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQga2V5ICgnICsga2V5ICsgJykgaW4gb2JqZWN0OiAnICsgc3RyaW5naWZ5KG9iaikpO1xuICAgIH1cbn07XG5jb25zdCBPYmplY3RUb1VuaXF1ZUtleSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnkob2JqKTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGtleXMucHVzaChrKTtcbiAgICB9XG4gICAgLy8gRXhwb3J0IGFzIGpzb24sIGJ1dCB3aXRoIHRoZSBrZXlzIHNvcnRlZC5cbiAgICBrZXlzLnNvcnQoKTtcbiAgICBsZXQga2V5ID0gJ3snO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgICAgICAga2V5ICs9ICcsJztcbiAgICAgICAgfVxuICAgICAgICBrZXkgKz0gc3RyaW5naWZ5KGtleXNbaV0pO1xuICAgICAgICBrZXkgKz0gJzonO1xuICAgICAgICBrZXkgKz0gT2JqZWN0VG9VbmlxdWVLZXkob2JqW2tleXNbaV1dKTtcbiAgICB9XG4gICAga2V5ICs9ICd9JztcbiAgICByZXR1cm4ga2V5O1xufTtcbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYSBudW1iZXIgb2Ygc21hbGxlciBzZWdtZW50cyBvZiBtYXhpbXVtIHNpemVcbiAqIEBwYXJhbSBzdHIgLSBUaGUgc3RyaW5nXG4gKiBAcGFyYW0gc2Vnc2l6ZSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFycyBpbiB0aGUgc3RyaW5nLlxuICogQHJldHVybnMgVGhlIHN0cmluZywgc3BsaXQgaW50byBhcHByb3ByaWF0ZWx5LXNpemVkIGNodW5rc1xuICovXG5jb25zdCBzcGxpdFN0cmluZ0J5U2l6ZSA9IGZ1bmN0aW9uIChzdHIsIHNlZ3NpemUpIHtcbiAgICBjb25zdCBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIGlmIChsZW4gPD0gc2Vnc2l6ZSkge1xuICAgICAgICByZXR1cm4gW3N0cl07XG4gICAgfVxuICAgIGNvbnN0IGRhdGFTZWdzID0gW107XG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCBsZW47IGMgKz0gc2Vnc2l6ZSkge1xuICAgICAgICBpZiAoYyArIHNlZ3NpemUgPiBsZW4pIHtcbiAgICAgICAgICAgIGRhdGFTZWdzLnB1c2goc3RyLnN1YnN0cmluZyhjLCBsZW4pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFTZWdzLnB1c2goc3RyLnN1YnN0cmluZyhjLCBjICsgc2Vnc2l6ZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhU2Vncztcbn07XG4vKipcbiAqIEFwcGx5IGEgZnVuY3Rpb24gdG8gZWFjaCAoa2V5LCB2YWx1ZSkgcGFpciBpbiBhbiBvYmplY3Qgb3JcbiAqIGFwcGx5IGEgZnVuY3Rpb24gdG8gZWFjaCAoaW5kZXgsIHZhbHVlKSBwYWlyIGluIGFuIGFycmF5XG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBhcHBseVxuICovXG5mdW5jdGlvbiBlYWNoKG9iaiwgZm4pIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBmbihrZXksIG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQm9ycm93ZWQgZnJvbSBodHRwOi8vaGcuc2Vjb25kbGlmZS5jb20vbGxzZC9zcmMvdGlwL2pzL3R5cGVkYXJyYXkuanMgKE1JVCBMaWNlbnNlKVxuICogSSBtYWRlIG9uZSBtb2RpZmljYXRpb24gYXQgdGhlIGVuZCBhbmQgcmVtb3ZlZCB0aGUgTmFOIC8gSW5maW5pdHlcbiAqIGhhbmRsaW5nIChzaW5jZSBpdCBzZWVtZWQgYnJva2VuIFtjYXVzZWQgYW4gb3ZlcmZsb3ddIGFuZCB3ZSBkb24ndCBuZWVkIGl0KS4gIFNlZSBNSkwgY29tbWVudHMuXG4gKiBAcGFyYW0gdiAtIEEgZG91YmxlXG4gKlxuICovXG5jb25zdCBkb3VibGVUb0lFRUU3NTRTdHJpbmcgPSBmdW5jdGlvbiAodikge1xuICAgIGFzc2VydCghaXNJbnZhbGlkSlNPTk51bWJlcih2KSwgJ0ludmFsaWQgSlNPTiBudW1iZXInKTsgLy8gTUpMXG4gICAgY29uc3QgZWJpdHMgPSAxMSwgZmJpdHMgPSA1MjtcbiAgICBjb25zdCBiaWFzID0gKDEgPDwgKGViaXRzIC0gMSkpIC0gMTtcbiAgICBsZXQgcywgZSwgZiwgbG4sIGk7XG4gICAgLy8gQ29tcHV0ZSBzaWduLCBleHBvbmVudCwgZnJhY3Rpb25cbiAgICAvLyBTa2lwIE5hTiAvIEluZmluaXR5IGhhbmRsaW5nIC0tTUpMLlxuICAgIGlmICh2ID09PSAwKSB7XG4gICAgICAgIGUgPSAwO1xuICAgICAgICBmID0gMDtcbiAgICAgICAgcyA9IDEgLyB2ID09PSAtSW5maW5pdHkgPyAxIDogMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHMgPSB2IDwgMDtcbiAgICAgICAgdiA9IE1hdGguYWJzKHYpO1xuICAgICAgICBpZiAodiA+PSBNYXRoLnBvdygyLCAxIC0gYmlhcykpIHtcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZWRcbiAgICAgICAgICAgIGxuID0gTWF0aC5taW4oTWF0aC5mbG9vcihNYXRoLmxvZyh2KSAvIE1hdGguTE4yKSwgYmlhcyk7XG4gICAgICAgICAgICBlID0gbG4gKyBiaWFzO1xuICAgICAgICAgICAgZiA9IE1hdGgucm91bmQodiAqIE1hdGgucG93KDIsIGZiaXRzIC0gbG4pIC0gTWF0aC5wb3coMiwgZmJpdHMpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIERlbm9ybWFsaXplZFxuICAgICAgICAgICAgZSA9IDA7XG4gICAgICAgICAgICBmID0gTWF0aC5yb3VuZCh2IC8gTWF0aC5wb3coMiwgMSAtIGJpYXMgLSBmYml0cykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFBhY2sgc2lnbiwgZXhwb25lbnQsIGZyYWN0aW9uXG4gICAgY29uc3QgYml0cyA9IFtdO1xuICAgIGZvciAoaSA9IGZiaXRzOyBpOyBpIC09IDEpIHtcbiAgICAgICAgYml0cy5wdXNoKGYgJSAyID8gMSA6IDApO1xuICAgICAgICBmID0gTWF0aC5mbG9vcihmIC8gMik7XG4gICAgfVxuICAgIGZvciAoaSA9IGViaXRzOyBpOyBpIC09IDEpIHtcbiAgICAgICAgYml0cy5wdXNoKGUgJSAyID8gMSA6IDApO1xuICAgICAgICBlID0gTWF0aC5mbG9vcihlIC8gMik7XG4gICAgfVxuICAgIGJpdHMucHVzaChzID8gMSA6IDApO1xuICAgIGJpdHMucmV2ZXJzZSgpO1xuICAgIGNvbnN0IHN0ciA9IGJpdHMuam9pbignJyk7XG4gICAgLy8gUmV0dXJuIHRoZSBkYXRhIGFzIGEgaGV4IHN0cmluZy4gLS1NSkxcbiAgICBsZXQgaGV4Qnl0ZVN0cmluZyA9ICcnO1xuICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSArPSA4KSB7XG4gICAgICAgIGxldCBoZXhCeXRlID0gcGFyc2VJbnQoc3RyLnN1YnN0cihpLCA4KSwgMikudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoaGV4Qnl0ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGhleEJ5dGUgPSAnMCcgKyBoZXhCeXRlO1xuICAgICAgICB9XG4gICAgICAgIGhleEJ5dGVTdHJpbmcgPSBoZXhCeXRlU3RyaW5nICsgaGV4Qnl0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhleEJ5dGVTdHJpbmcudG9Mb3dlckNhc2UoKTtcbn07XG4vKipcbiAqIFVzZWQgdG8gZGV0ZWN0IGlmIHdlJ3JlIGluIGEgQ2hyb21lIGNvbnRlbnQgc2NyaXB0ICh3aGljaCBleGVjdXRlcyBpbiBhblxuICogaXNvbGF0ZWQgZW52aXJvbm1lbnQgd2hlcmUgbG9uZy1wb2xsaW5nIGRvZXNuJ3Qgd29yaykuXG4gKi9cbmNvbnN0IGlzQ2hyb21lRXh0ZW5zaW9uQ29udGVudFNjcmlwdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgd2luZG93WydjaHJvbWUnXSAmJlxuICAgICAgICB3aW5kb3dbJ2Nocm9tZSddWydleHRlbnNpb24nXSAmJlxuICAgICAgICAhL15jaHJvbWUvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpKTtcbn07XG4vKipcbiAqIFVzZWQgdG8gZGV0ZWN0IGlmIHdlJ3JlIGluIGEgV2luZG93cyA4IFN0b3JlIGFwcC5cbiAqL1xuY29uc3QgaXNXaW5kb3dzU3RvcmVBcHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGNvdXBsZSBXaW5SVCBnbG9iYWxzXG4gICAgcmV0dXJuIHR5cGVvZiBXaW5kb3dzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgV2luZG93cy5VSSA9PT0gJ29iamVjdCc7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHNlcnZlciBlcnJvciBjb2RlIHRvIGEgSmF2YVNjcmlwdCBFcnJvclxuICovXG5mdW5jdGlvbiBlcnJvckZvclNlcnZlckNvZGUoY29kZSwgcXVlcnkpIHtcbiAgICBsZXQgcmVhc29uID0gJ1Vua25vd24gRXJyb3InO1xuICAgIGlmIChjb2RlID09PSAndG9vX2JpZycpIHtcbiAgICAgICAgcmVhc29uID1cbiAgICAgICAgICAgICdUaGUgZGF0YSByZXF1ZXN0ZWQgZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplICcgK1xuICAgICAgICAgICAgICAgICd0aGF0IGNhbiBiZSBhY2Nlc3NlZCB3aXRoIGEgc2luZ2xlIHJlcXVlc3QuJztcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA9PT0gJ3Blcm1pc3Npb25fZGVuaWVkJykge1xuICAgICAgICByZWFzb24gPSBcIkNsaWVudCBkb2Vzbid0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhlIGRlc2lyZWQgZGF0YS5cIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA9PT0gJ3VuYXZhaWxhYmxlJykge1xuICAgICAgICByZWFzb24gPSAnVGhlIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUnO1xuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihjb2RlICsgJyBhdCAnICsgcXVlcnkuX3BhdGgudG9TdHJpbmcoKSArICc6ICcgKyByZWFzb24pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZXJyb3IuY29kZSA9IGNvZGUudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gZXJyb3I7XG59XG4vKipcbiAqIFVzZWQgdG8gdGVzdCBmb3IgaW50ZWdlci1sb29raW5nIHN0cmluZ3NcbiAqL1xuY29uc3QgSU5URUdFUl9SRUdFWFBfID0gbmV3IFJlZ0V4cCgnXi0/KDAqKVxcXFxkezEsMTB9JCcpO1xuLyoqXG4gKiBGb3IgdXNlIGluIGtleXMsIHRoZSBtaW5pbXVtIHBvc3NpYmxlIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5jb25zdCBJTlRFR0VSXzMyX01JTiA9IC0yMTQ3NDgzNjQ4O1xuLyoqXG4gKiBGb3IgdXNlIGluIGtleXMsIHRoZSBtYXhpbXVtIHBvc3NpYmxlIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5jb25zdCBJTlRFR0VSXzMyX01BWCA9IDIxNDc0ODM2NDc7XG4vKipcbiAqIElmIHRoZSBzdHJpbmcgY29udGFpbnMgYSAzMi1iaXQgaW50ZWdlciwgcmV0dXJuIGl0LiAgRWxzZSByZXR1cm4gbnVsbC5cbiAqL1xuY29uc3QgdHJ5UGFyc2VJbnQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKElOVEVHRVJfUkVHRVhQXy50ZXN0KHN0cikpIHtcbiAgICAgICAgY29uc3QgaW50VmFsID0gTnVtYmVyKHN0cik7XG4gICAgICAgIGlmIChpbnRWYWwgPj0gSU5URUdFUl8zMl9NSU4gJiYgaW50VmFsIDw9IElOVEVHRVJfMzJfTUFYKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50VmFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbi8qKlxuICogSGVscGVyIHRvIHJ1biBzb21lIGNvZGUgYnV0IGNhdGNoIGFueSBleGNlcHRpb25zIGFuZCByZS10aHJvdyB0aGVtIGxhdGVyLlxuICogVXNlZnVsIGZvciBwcmV2ZW50aW5nIHVzZXIgY2FsbGJhY2tzIGZyb20gYnJlYWtpbmcgaW50ZXJuYWwgY29kZS5cbiAqXG4gKiBSZS10aHJvd2luZyB0aGUgZXhjZXB0aW9uIGZyb20gYSBzZXRUaW1lb3V0IGlzIGEgbGl0dGxlIGV2aWwsIGJ1dCBpdCdzIHZlcnlcbiAqIGNvbnZlbmllbnQgKHdlIGRvbid0IGhhdmUgdG8gdHJ5IHRvIGZpZ3VyZSBvdXQgd2hlbiBpcyBhIHNhZmUgcG9pbnQgdG9cbiAqIHJlLXRocm93IGl0KSwgYW5kIHRoZSBiZWhhdmlvciBzZWVtcyByZWFzb25hYmxlOlxuICpcbiAqICogSWYgeW91IGFyZW4ndCBwYXVzaW5nIG9uIGV4Y2VwdGlvbnMsIHlvdSBnZXQgYW4gZXJyb3IgaW4gdGhlIGNvbnNvbGUgd2l0aFxuICogICB0aGUgY29ycmVjdCBzdGFjayB0cmFjZS5cbiAqICogSWYgeW91J3JlIHBhdXNpbmcgb24gYWxsIGV4Y2VwdGlvbnMsIHRoZSBkZWJ1Z2dlciB3aWxsIHBhdXNlIG9uIHlvdXJcbiAqICAgZXhjZXB0aW9uIGFuZCB0aGVuIGFnYWluIHdoZW4gd2UgcmV0aHJvdyBpdC5cbiAqICogSWYgeW91J3JlIG9ubHkgcGF1c2luZyBvbiB1bmNhdWdodCBleGNlcHRpb25zLCB0aGUgZGVidWdnZXIgd2lsbCBvbmx5IHBhdXNlXG4gKiAgIG9uIHVzIHJlLXRocm93aW5nIGl0LlxuICpcbiAqIEBwYXJhbSBmbiAtIFRoZSBjb2RlIHRvIGd1YXJkLlxuICovXG5jb25zdCBleGNlcHRpb25HdWFyZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFJlLXRocm93IGV4Y2VwdGlvbiB3aGVuIGl0J3Mgc2FmZS5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBJdCB1c2VkIHRvIGJlIHRoYXQgXCJ0aHJvdyBlXCIgd291bGQgcmVzdWx0IGluIGEgZ29vZCBjb25zb2xlIGVycm9yIHdpdGhcbiAgICAgICAgICAgIC8vIHJlbGV2YW50IGNvbnRleHQsIGJ1dCBhcyBvZiBDaHJvbWUgMzksIHlvdSBqdXN0IGdldCB0aGUgZmlyZWJhc2UuanNcbiAgICAgICAgICAgIC8vIGZpbGUvbGluZSBudW1iZXIgd2hlcmUgd2UgcmUtdGhyb3cgaXQsIHdoaWNoIGlzIHVzZWxlc3MuIFNvIHdlIGxvZ1xuICAgICAgICAgICAgLy8gZS5zdGFjayBleHBsaWNpdGx5LlxuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBlLnN0YWNrIHx8ICcnO1xuICAgICAgICAgICAgd2FybignRXhjZXB0aW9uIHdhcyB0aHJvd24gYnkgdXNlciBjYWxsYmFjay4nLCBzdGFjayk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9LCBNYXRoLmZsb29yKDApKTtcbiAgICB9XG59O1xuLyoqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB3ZSB0aGluayB3ZSdyZSBjdXJyZW50bHkgYmVpbmcgY3Jhd2xlZC5cbiAqL1xuY29uc3QgYmVpbmdDcmF3bGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHVzZXJBZ2VudCA9ICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB3aW5kb3dbJ25hdmlnYXRvciddICYmXG4gICAgICAgIHdpbmRvd1snbmF2aWdhdG9yJ11bJ3VzZXJBZ2VudCddKSB8fFxuICAgICAgICAnJztcbiAgICAvLyBGb3Igbm93IHdlIHdoaXRlbGlzdCB0aGUgbW9zdCBwb3B1bGFyIGNyYXdsZXJzLiAgV2Ugc2hvdWxkIHJlZmluZSB0aGlzIHRvIGJlIHRoZSBzZXQgb2YgY3Jhd2xlcnMgd2VcbiAgICAvLyBiZWxpZXZlIHRvIHN1cHBvcnQgSmF2YVNjcmlwdC9BSkFYIHJlbmRlcmluZy5cbiAgICAvLyBOT1RFOiBHb29nbGUgV2VibWFzdGVyIFRvb2xzIGRvZXNuJ3QgcmVhbGx5IGJlbG9uZywgYnV0IHRoZWlyIFwiVGhpcyBpcyBob3cgYSB2aXNpdG9yIHRvIHlvdXIgd2Vic2l0ZVxuICAgIC8vIHdvdWxkIGhhdmUgc2VlbiB0aGUgcGFnZVwiIGlzIGZsYWt5IGlmIHdlIGRvbid0IHRyZWF0IGl0IGFzIGEgY3Jhd2xlci5cbiAgICByZXR1cm4gKHVzZXJBZ2VudC5zZWFyY2goL2dvb2dsZWJvdHxnb29nbGUgd2VibWFzdGVyIHRvb2xzfGJpbmdib3R8eWFob28hIHNsdXJwfGJhaWR1c3BpZGVyfHlhbmRleGJvdHxkdWNrZHVja2JvdC9pKSA+PSAwKTtcbn07XG4vKipcbiAqIFNhbWUgYXMgc2V0VGltZW91dCgpIGV4Y2VwdCBvbiBOb2RlLkpTIGl0IHdpbGwgL25vdC8gcHJldmVudCB0aGUgcHJvY2VzcyBmcm9tIGV4aXRpbmcuXG4gKlxuICogSXQgaXMgcmVtb3ZlZCB3aXRoIGNsZWFyVGltZW91dCgpIGFzIG5vcm1hbC5cbiAqXG4gKiBAcGFyYW0gZm4gLSBGdW5jdGlvbiB0byBydW4uXG4gKiBAcGFyYW0gdGltZSAtIE1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBydW5uaW5nLlxuICogQHJldHVybnMgVGhlIHNldFRpbWVvdXQoKSByZXR1cm4gdmFsdWUuXG4gKi9cbmNvbnN0IHNldFRpbWVvdXROb25CbG9ja2luZyA9IGZ1bmN0aW9uIChmbiwgdGltZSkge1xuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCB0aW1lKTtcbiAgICAvLyBOb3RlOiBhdCB0aGUgdGltZSBvZiB0aGlzIGNvbW1lbnQsIHVucmVmVGltZXIgaXMgdW5kZXIgdGhlIHVuc3RhYmxlIHNldCBvZiBBUElzLiBSdW4gd2l0aCAtLXVuc3RhYmxlIHRvIGVuYWJsZSB0aGUgQVBJLlxuICAgIGlmICh0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBJcyBvbmx5IGRlZmluZWQgaW4gRGVubyBlbnZpcm9ubWVudHMuXG4gICAgICAgIHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAvLyBAdHMtaWdub3JlIERlbm8gYW5kIHVucmVmVGltZXIgYXJlIG9ubHkgZGVmaW5lZCBpbiBEZW5vIGVudmlyb25tZW50cy5cbiAgICAgICAgRGVub1sndW5yZWZUaW1lciddKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgRGVubyBhbmQgdW5yZWZUaW1lciBhcmUgb25seSBkZWZpbmVkIGluIERlbm8gZW52aXJvbm1lbnRzLlxuICAgICAgICBEZW5vLnVucmVmVGltZXIodGltZW91dCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aW1lb3V0ID09PSAnb2JqZWN0JyAmJiB0aW1lb3V0Wyd1bnJlZiddKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHRpbWVvdXRbJ3VucmVmJ10oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWVvdXQ7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBYnN0cmFjdGlvbiBhcm91bmQgQXBwQ2hlY2sncyB0b2tlbiBmZXRjaGluZyBjYXBhYmlsaXRpZXMuXG4gKi9cbmNsYXNzIEFwcENoZWNrVG9rZW5Qcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoYXBwTmFtZV8sIGFwcENoZWNrUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBOYW1lXyA9IGFwcE5hbWVfO1xuICAgICAgICB0aGlzLmFwcENoZWNrUHJvdmlkZXIgPSBhcHBDaGVja1Byb3ZpZGVyO1xuICAgICAgICB0aGlzLmFwcENoZWNrID0gYXBwQ2hlY2tQcm92aWRlciA9PT0gbnVsbCB8fCBhcHBDaGVja1Byb3ZpZGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcHBDaGVja1Byb3ZpZGVyLmdldEltbWVkaWF0ZSh7IG9wdGlvbmFsOiB0cnVlIH0pO1xuICAgICAgICBpZiAoIXRoaXMuYXBwQ2hlY2spIHtcbiAgICAgICAgICAgIGFwcENoZWNrUHJvdmlkZXIgPT09IG51bGwgfHwgYXBwQ2hlY2tQcm92aWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXBwQ2hlY2tQcm92aWRlci5nZXQoKS50aGVuKGFwcENoZWNrID0+ICh0aGlzLmFwcENoZWNrID0gYXBwQ2hlY2spKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRUb2tlbihmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFwcENoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgZGVsYXllZCBpbml0aWFsaXphdGlvbiBvZiBGaXJlYmFzZUFwcENoZWNrLiBUaGlzIGFsbG93cyBvdXJcbiAgICAgICAgICAgICAgICAvLyBjdXN0b21lcnMgdG8gaW5pdGlhbGl6ZSB0aGUgUlREQiBTREsgYmVmb3JlIGluaXRpYWxpemluZyBGaXJlYmFzZVxuICAgICAgICAgICAgICAgIC8vIEFwcENoZWNrIGFuZCBlbnN1cmVzIHRoYXQgYWxsIHJlcXVlc3RzIGFyZSBhdXRoZW50aWNhdGVkIGlmIGEgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBiZWNvbWVzIGF2YWlsYWJsZSBiZWZvcmUgdGhlIHRpbWVvdXQgYmVsb3cgZXhwaXJlcy5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwQ2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VG9rZW4oZm9yY2VSZWZyZXNoKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hcHBDaGVjay5nZXRUb2tlbihmb3JjZVJlZnJlc2gpO1xuICAgIH1cbiAgICBhZGRUb2tlbkNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5hcHBDaGVja1Byb3ZpZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0KCkudGhlbihhcHBDaGVjayA9PiBhcHBDaGVjay5hZGRUb2tlbkxpc3RlbmVyKGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG5vdGlmeUZvckludmFsaWRUb2tlbigpIHtcbiAgICAgICAgd2FybihgUHJvdmlkZWQgQXBwQ2hlY2sgY3JlZGVudGlhbHMgZm9yIHRoZSBhcHAgbmFtZWQgXCIke3RoaXMuYXBwTmFtZV99XCIgYCArXG4gICAgICAgICAgICAnYXJlIGludmFsaWQuIFRoaXMgdXN1YWxseSBpbmRpY2F0ZXMgeW91ciBhcHAgd2FzIG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHkuJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBYnN0cmFjdGlvbiBhcm91bmQgRmlyZWJhc2VBcHAncyB0b2tlbiBmZXRjaGluZyBjYXBhYmlsaXRpZXMuXG4gKi9cbmNsYXNzIEZpcmViYXNlQXV0aFRva2VuUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwcE5hbWVfLCBmaXJlYmFzZU9wdGlvbnNfLCBhdXRoUHJvdmlkZXJfKSB7XG4gICAgICAgIHRoaXMuYXBwTmFtZV8gPSBhcHBOYW1lXztcbiAgICAgICAgdGhpcy5maXJlYmFzZU9wdGlvbnNfID0gZmlyZWJhc2VPcHRpb25zXztcbiAgICAgICAgdGhpcy5hdXRoUHJvdmlkZXJfID0gYXV0aFByb3ZpZGVyXztcbiAgICAgICAgdGhpcy5hdXRoXyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXV0aF8gPSBhdXRoUHJvdmlkZXJfLmdldEltbWVkaWF0ZSh7IG9wdGlvbmFsOiB0cnVlIH0pO1xuICAgICAgICBpZiAoIXRoaXMuYXV0aF8pIHtcbiAgICAgICAgICAgIGF1dGhQcm92aWRlcl8ub25Jbml0KGF1dGggPT4gKHRoaXMuYXV0aF8gPSBhdXRoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VG9rZW4oZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgIGlmICghdGhpcy5hdXRoXykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IGRlbGF5ZWQgaW5pdGlhbGl6YXRpb24gb2YgRmlyZWJhc2VBdXRoLiBUaGlzIGFsbG93cyBvdXJcbiAgICAgICAgICAgICAgICAvLyBjdXN0b21lcnMgdG8gaW5pdGlhbGl6ZSB0aGUgUlREQiBTREsgYmVmb3JlIGluaXRpYWxpemluZyBGaXJlYmFzZVxuICAgICAgICAgICAgICAgIC8vIEF1dGggYW5kIGVuc3VyZXMgdGhhdCBhbGwgcmVxdWVzdHMgYXJlIGF1dGhlbnRpY2F0ZWQgaWYgYSB0b2tlblxuICAgICAgICAgICAgICAgIC8vIGJlY29tZXMgYXZhaWxhYmxlIGJlZm9yZSB0aGUgdGltZW91dCBiZWxvdyBleHBpcmVzLlxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRoXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRUb2tlbihmb3JjZVJlZnJlc2gpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhfLmdldFRva2VuKGZvcmNlUmVmcmVzaCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogTmVlZCB0byBmaWd1cmUgb3V0IGFsbCB0aGUgY2FzZXMgdGhpcyBpcyByYWlzZWQgYW5kIHdoZXRoZXJcbiAgICAgICAgICAgIC8vIHRoaXMgbWFrZXMgc2Vuc2UuXG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ2F1dGgvdG9rZW4tbm90LWluaXRpYWxpemVkJykge1xuICAgICAgICAgICAgICAgIGxvZygnR290IGF1dGgvdG9rZW4tbm90LWluaXRpYWxpemVkIGVycm9yLiAgVHJlYXRpbmcgYXMgbnVsbCB0b2tlbi4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRUb2tlbkNoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIC8vIFRPRE86IFdlIG1pZ2h0IHdhbnQgdG8gd3JhcCB0aGUgbGlzdGVuZXIgYW5kIGNhbGwgaXQgd2l0aCBubyBhcmdzIHRvXG4gICAgICAgIC8vIGF2b2lkIGEgbGVha3kgYWJzdHJhY3Rpb24sIGJ1dCB0aGF0IG1ha2VzIHJlbW92aW5nIHRoZSBsaXN0ZW5lciBoYXJkZXIuXG4gICAgICAgIGlmICh0aGlzLmF1dGhfKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGhfLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aFByb3ZpZGVyX1xuICAgICAgICAgICAgICAgIC5nZXQoKVxuICAgICAgICAgICAgICAgIC50aGVuKGF1dGggPT4gYXV0aC5hZGRBdXRoVG9rZW5MaXN0ZW5lcihsaXN0ZW5lcikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZVRva2VuQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5hdXRoUHJvdmlkZXJfXG4gICAgICAgICAgICAuZ2V0KClcbiAgICAgICAgICAgIC50aGVuKGF1dGggPT4gYXV0aC5yZW1vdmVBdXRoVG9rZW5MaXN0ZW5lcihsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBub3RpZnlGb3JJbnZhbGlkVG9rZW4oKSB7XG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnUHJvdmlkZWQgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZm9yIHRoZSBhcHAgbmFtZWQgXCInICtcbiAgICAgICAgICAgIHRoaXMuYXBwTmFtZV8gK1xuICAgICAgICAgICAgJ1wiIGFyZSBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgaW5kaWNhdGVzIHlvdXIgYXBwIHdhcyBub3QgJyArXG4gICAgICAgICAgICAnaW5pdGlhbGl6ZWQgY29ycmVjdGx5LiAnO1xuICAgICAgICBpZiAoJ2NyZWRlbnRpYWwnIGluIHRoaXMuZmlyZWJhc2VPcHRpb25zXykge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlICs9XG4gICAgICAgICAgICAgICAgJ01ha2Ugc3VyZSB0aGUgXCJjcmVkZW50aWFsXCIgcHJvcGVydHkgcHJvdmlkZWQgdG8gaW5pdGlhbGl6ZUFwcCgpICcgK1xuICAgICAgICAgICAgICAgICAgICAnaXMgYXV0aG9yaXplZCB0byBhY2Nlc3MgdGhlIHNwZWNpZmllZCBcImRhdGFiYXNlVVJMXCIgYW5kIGlzIGZyb20gdGhlIGNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgICAgICdwcm9qZWN0Lic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ3NlcnZpY2VBY2NvdW50JyBpbiB0aGlzLmZpcmViYXNlT3B0aW9uc18pIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPVxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwic2VydmljZUFjY291bnRcIiBwcm9wZXJ0eSBwcm92aWRlZCB0byBpbml0aWFsaXplQXBwKCkgJyArXG4gICAgICAgICAgICAgICAgICAgICdpcyBhdXRob3JpemVkIHRvIGFjY2VzcyB0aGUgc3BlY2lmaWVkIFwiZGF0YWJhc2VVUkxcIiBhbmQgaXMgZnJvbSB0aGUgY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3Byb2plY3QuJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPVxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwiYXBpS2V5XCIgYW5kIFwiZGF0YWJhc2VVUkxcIiBwcm9wZXJ0aWVzIHByb3ZpZGVkIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAnaW5pdGlhbGl6ZUFwcCgpIG1hdGNoIHRoZSB2YWx1ZXMgcHJvdmlkZWQgZm9yIHlvdXIgYXBwIGF0ICcgK1xuICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9jb25zb2xlLmZpcmViYXNlLmdvb2dsZS5jb20vLic7XG4gICAgICAgIH1cbiAgICAgICAgd2FybihlcnJvck1lc3NhZ2UpO1xuICAgIH1cbn1cbi8qIEF1dGhUb2tlblByb3ZpZGVyIHRoYXQgc3VwcGxpZXMgYSBjb25zdGFudCB0b2tlbi4gVXNlZCBieSBBZG1pbiBTREsgb3IgbW9ja1VzZXJUb2tlbiB3aXRoIGVtdWxhdG9ycy4gKi9cbmNsYXNzIEVtdWxhdG9yVG9rZW5Qcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgIH1cbiAgICBnZXRUb2tlbihmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogdGhpcy5hY2Nlc3NUb2tlblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkVG9rZW5DaGFuZ2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxpc3RlbmVyIGltbWVkaWF0ZWx5IHRvIG1hdGNoIHRoZSBiZWhhdmlvciBpbiBGaXJlYmFzZSBBdXRoXG4gICAgICAgIC8vIChzZWUgcGFja2FnZXMvYXV0aC9zcmMvYXV0aC5qcyNMMTgwNylcbiAgICAgICAgbGlzdGVuZXIodGhpcy5hY2Nlc3NUb2tlbik7XG4gICAgfVxuICAgIHJlbW92ZVRva2VuQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHsgfVxuICAgIG5vdGlmeUZvckludmFsaWRUb2tlbigpIHsgfVxufVxuLyoqIEEgc3RyaW5nIHRoYXQgaXMgdHJlYXRlZCBhcyBhbiBhZG1pbiBhY2Nlc3MgdG9rZW4gYnkgdGhlIFJUREIgZW11bGF0b3IuIFVzZWQgYnkgQWRtaW4gU0RLLiAqL1xuRW11bGF0b3JUb2tlblByb3ZpZGVyLk9XTkVSID0gJ293bmVyJztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFBST1RPQ09MX1ZFUlNJT04gPSAnNSc7XG5jb25zdCBWRVJTSU9OX1BBUkFNID0gJ3YnO1xuY29uc3QgVFJBTlNQT1JUX1NFU1NJT05fUEFSQU0gPSAncyc7XG5jb25zdCBSRUZFUkVSX1BBUkFNID0gJ3InO1xuY29uc3QgRk9SR0VfUkVGID0gJ2YnO1xuLy8gTWF0Y2hlcyBjb25zb2xlLmZpcmViYXNlLmdvb2dsZS5jb20sIGZpcmViYXNlLWNvbnNvbGUtKi5jb3JwLmdvb2dsZS5jb20gYW5kXG4vLyBmaXJlYmFzZS5jb3JwLmdvb2dsZS5jb21cbmNvbnN0IEZPUkdFX0RPTUFJTl9SRSA9IC8oY29uc29sZVxcLmZpcmViYXNlfGZpcmViYXNlLWNvbnNvbGUtXFx3K1xcLmNvcnB8ZmlyZWJhc2VcXC5jb3JwKVxcLmdvb2dsZVxcLmNvbS87XG5jb25zdCBMQVNUX1NFU1NJT05fUEFSQU0gPSAnbHMnO1xuY29uc3QgQVBQTElDQVRJT05fSURfUEFSQU0gPSAncCc7XG5jb25zdCBBUFBfQ0hFQ0tfVE9LRU5fUEFSQU0gPSAnYWMnO1xuY29uc3QgV0VCU09DS0VUID0gJ3dlYnNvY2tldCc7XG5jb25zdCBMT05HX1BPTExJTkcgPSAnbG9uZ19wb2xsaW5nJztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBjbGFzcyB0aGF0IGhvbGRzIG1ldGFkYXRhIGFib3V0IGEgUmVwbyBvYmplY3RcbiAqL1xuY2xhc3MgUmVwb0luZm8ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBob3N0IC0gSG9zdG5hbWUgcG9ydGlvbiBvZiB0aGUgdXJsIGZvciB0aGUgcmVwb1xuICAgICAqIEBwYXJhbSBzZWN1cmUgLSBXaGV0aGVyIG9yIG5vdCB0aGlzIHJlcG8gaXMgYWNjZXNzZWQgb3ZlciBzc2xcbiAgICAgKiBAcGFyYW0gbmFtZXNwYWNlIC0gVGhlIG5hbWVzcGFjZSByZXByZXNlbnRlZCBieSB0aGUgcmVwb1xuICAgICAqIEBwYXJhbSB3ZWJTb2NrZXRPbmx5IC0gV2hldGhlciB0byBwcmVmZXIgd2Vic29ja2V0cyBvdmVyIGFsbCBvdGhlciB0cmFuc3BvcnRzICh1c2VkIGJ5IE5lc3QpLlxuICAgICAqIEBwYXJhbSBub2RlQWRtaW4gLSBXaGV0aGVyIHRoaXMgaW5zdGFuY2UgdXNlcyBBZG1pbiBTREsgY3JlZGVudGlhbHNcbiAgICAgKiBAcGFyYW0gcGVyc2lzdGVuY2VLZXkgLSBPdmVycmlkZSB0aGUgZGVmYXVsdCBzZXNzaW9uIHBlcnNpc3RlbmNlIHN0b3JhZ2Uga2V5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaG9zdCwgc2VjdXJlLCBuYW1lc3BhY2UsIHdlYlNvY2tldE9ubHksIG5vZGVBZG1pbiA9IGZhbHNlLCBwZXJzaXN0ZW5jZUtleSA9ICcnLCBpbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcyA9IGZhbHNlLCBpc1VzaW5nRW11bGF0b3IgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnNlY3VyZSA9IHNlY3VyZTtcbiAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgIHRoaXMud2ViU29ja2V0T25seSA9IHdlYlNvY2tldE9ubHk7XG4gICAgICAgIHRoaXMubm9kZUFkbWluID0gbm9kZUFkbWluO1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlS2V5ID0gcGVyc2lzdGVuY2VLZXk7XG4gICAgICAgIHRoaXMuaW5jbHVkZU5hbWVzcGFjZUluUXVlcnlQYXJhbXMgPSBpbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcztcbiAgICAgICAgdGhpcy5pc1VzaW5nRW11bGF0b3IgPSBpc1VzaW5nRW11bGF0b3I7XG4gICAgICAgIHRoaXMuX2hvc3QgPSBob3N0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHRoaXMuX2RvbWFpbiA9IHRoaXMuX2hvc3Quc3Vic3RyKHRoaXMuX2hvc3QuaW5kZXhPZignLicpICsgMSk7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxIb3N0ID1cbiAgICAgICAgICAgIFBlcnNpc3RlbnRTdG9yYWdlLmdldCgnaG9zdDonICsgaG9zdCkgfHwgdGhpcy5faG9zdDtcbiAgICB9XG4gICAgaXNDYWNoZWFibGVIb3N0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEhvc3Quc3Vic3RyKDAsIDIpID09PSAncy0nO1xuICAgIH1cbiAgICBpc0N1c3RvbUhvc3QoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fZG9tYWluICE9PSAnZmlyZWJhc2Vpby5jb20nICYmXG4gICAgICAgICAgICB0aGlzLl9kb21haW4gIT09ICdmaXJlYmFzZWlvLWRlbW8uY29tJyk7XG4gICAgfVxuICAgIGdldCBob3N0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faG9zdDtcbiAgICB9XG4gICAgc2V0IGhvc3QobmV3SG9zdCkge1xuICAgICAgICBpZiAobmV3SG9zdCAhPT0gdGhpcy5pbnRlcm5hbEhvc3QpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxIb3N0ID0gbmV3SG9zdDtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2FjaGVhYmxlSG9zdCgpKSB7XG4gICAgICAgICAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2Uuc2V0KCdob3N0OicgKyB0aGlzLl9ob3N0LCB0aGlzLmludGVybmFsSG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCBzdHIgPSB0aGlzLnRvVVJMU3RyaW5nKCk7XG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3RlbmNlS2V5KSB7XG4gICAgICAgICAgICBzdHIgKz0gJzwnICsgdGhpcy5wZXJzaXN0ZW5jZUtleSArICc+JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICB0b1VSTFN0cmluZygpIHtcbiAgICAgICAgY29uc3QgcHJvdG9jb2wgPSB0aGlzLnNlY3VyZSA/ICdodHRwczovLycgOiAnaHR0cDovLyc7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5pbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtc1xuICAgICAgICAgICAgPyBgP25zPSR7dGhpcy5uYW1lc3BhY2V9YFxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgcmV0dXJuIGAke3Byb3RvY29sfSR7dGhpcy5ob3N0fS8ke3F1ZXJ5fWA7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVwb0luZm9OZWVkc1F1ZXJ5UGFyYW0ocmVwb0luZm8pIHtcbiAgICByZXR1cm4gKHJlcG9JbmZvLmhvc3QgIT09IHJlcG9JbmZvLmludGVybmFsSG9zdCB8fFxuICAgICAgICByZXBvSW5mby5pc0N1c3RvbUhvc3QoKSB8fFxuICAgICAgICByZXBvSW5mby5pbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcyk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHdlYnNvY2tldCBVUkwgZm9yIHRoaXMgcmVwb1xuICogQHBhcmFtIHJlcG9JbmZvIC0gUmVwb0luZm8gb2JqZWN0XG4gKiBAcGFyYW0gdHlwZSAtIG9mIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSBwYXJhbXMgLSBsaXN0XG4gKiBAcmV0dXJucyBUaGUgVVJMIGZvciB0aGlzIHJlcG9cbiAqL1xuZnVuY3Rpb24gcmVwb0luZm9Db25uZWN0aW9uVVJMKHJlcG9JbmZvLCB0eXBlLCBwYXJhbXMpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAndHlwZW9mIHR5cGUgbXVzdCA9PSBzdHJpbmcnKTtcbiAgICBhc3NlcnQodHlwZW9mIHBhcmFtcyA9PT0gJ29iamVjdCcsICd0eXBlb2YgcGFyYW1zIG11c3QgPT0gb2JqZWN0Jyk7XG4gICAgbGV0IGNvbm5VUkw7XG4gICAgaWYgKHR5cGUgPT09IFdFQlNPQ0tFVCkge1xuICAgICAgICBjb25uVVJMID1cbiAgICAgICAgICAgIChyZXBvSW5mby5zZWN1cmUgPyAnd3NzOi8vJyA6ICd3czovLycpICsgcmVwb0luZm8uaW50ZXJuYWxIb3N0ICsgJy8ud3M/JztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gTE9OR19QT0xMSU5HKSB7XG4gICAgICAgIGNvbm5VUkwgPVxuICAgICAgICAgICAgKHJlcG9JbmZvLnNlY3VyZSA/ICdodHRwczovLycgOiAnaHR0cDovLycpICtcbiAgICAgICAgICAgICAgICByZXBvSW5mby5pbnRlcm5hbEhvc3QgK1xuICAgICAgICAgICAgICAgICcvLmxwPyc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29ubmVjdGlvbiB0eXBlOiAnICsgdHlwZSk7XG4gICAgfVxuICAgIGlmIChyZXBvSW5mb05lZWRzUXVlcnlQYXJhbShyZXBvSW5mbykpIHtcbiAgICAgICAgcGFyYW1zWyducyddID0gcmVwb0luZm8ubmFtZXNwYWNlO1xuICAgIH1cbiAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgIGVhY2gocGFyYW1zLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBwYWlycy5wdXNoKGtleSArICc9JyArIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29ublVSTCArIHBhaXJzLmpvaW4oJyYnKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVHJhY2tzIGEgY29sbGVjdGlvbiBvZiBzdGF0cy5cbiAqL1xuY2xhc3MgU3RhdHNDb2xsZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb3VudGVyc18gPSB7fTtcbiAgICB9XG4gICAgaW5jcmVtZW50Q291bnRlcihuYW1lLCBhbW91bnQgPSAxKSB7XG4gICAgICAgIGlmICghY29udGFpbnModGhpcy5jb3VudGVyc18sIG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ZXJzX1tuYW1lXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb3VudGVyc19bbmFtZV0gKz0gYW1vdW50O1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBkZWVwQ29weSh0aGlzLmNvdW50ZXJzXyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgY29sbGVjdGlvbnMgPSB7fTtcbmNvbnN0IHJlcG9ydGVycyA9IHt9O1xuZnVuY3Rpb24gc3RhdHNNYW5hZ2VyR2V0Q29sbGVjdGlvbihyZXBvSW5mbykge1xuICAgIGNvbnN0IGhhc2hTdHJpbmcgPSByZXBvSW5mby50b1N0cmluZygpO1xuICAgIGlmICghY29sbGVjdGlvbnNbaGFzaFN0cmluZ10pIHtcbiAgICAgICAgY29sbGVjdGlvbnNbaGFzaFN0cmluZ10gPSBuZXcgU3RhdHNDb2xsZWN0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uc1toYXNoU3RyaW5nXTtcbn1cbmZ1bmN0aW9uIHN0YXRzTWFuYWdlckdldE9yQ3JlYXRlUmVwb3J0ZXIocmVwb0luZm8sIGNyZWF0b3JGdW5jdGlvbikge1xuICAgIGNvbnN0IGhhc2hTdHJpbmcgPSByZXBvSW5mby50b1N0cmluZygpO1xuICAgIGlmICghcmVwb3J0ZXJzW2hhc2hTdHJpbmddKSB7XG4gICAgICAgIHJlcG9ydGVyc1toYXNoU3RyaW5nXSA9IGNyZWF0b3JGdW5jdGlvbigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVwb3J0ZXJzW2hhc2hTdHJpbmddO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGlzIGNsYXNzIGVuc3VyZXMgdGhlIHBhY2tldHMgZnJvbSB0aGUgc2VydmVyIGFycml2ZSBpbiBvcmRlclxuICogVGhpcyBjbGFzcyB0YWtlcyBkYXRhIGZyb20gdGhlIHNlcnZlciBhbmQgZW5zdXJlcyBpdCBnZXRzIHBhc3NlZCBpbnRvIHRoZSBjYWxsYmFja3MgaW4gb3JkZXIuXG4gKi9cbmNsYXNzIFBhY2tldFJlY2VpdmVyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlX1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9uTWVzc2FnZV8pIHtcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VfID0gb25NZXNzYWdlXztcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVzcG9uc2VzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFJlc3BvbnNlTnVtID0gMDtcbiAgICAgICAgdGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UgPSAtMTtcbiAgICAgICAgdGhpcy5vbkNsb3NlID0gbnVsbDtcbiAgICB9XG4gICAgY2xvc2VBZnRlcihyZXNwb25zZU51bSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UgPSByZXNwb25zZU51bTtcbiAgICAgICAgdGhpcy5vbkNsb3NlID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlQWZ0ZXJSZXNwb25zZSA8IHRoaXMuY3VycmVudFJlc3BvbnNlTnVtKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRWFjaCBtZXNzYWdlIGZyb20gdGhlIHNlcnZlciBjb21lcyB3aXRoIGEgcmVzcG9uc2UgbnVtYmVyLCBhbmQgYW4gYXJyYXkgb2YgZGF0YS4gVGhlIHJlc3BvbnNlTnVtYmVyXG4gICAgICogYWxsb3dzIHVzIHRvIGVuc3VyZSB0aGF0IHdlIHByb2Nlc3MgdGhlbSBpbiB0aGUgcmlnaHQgb3JkZXIsIHNpbmNlIHdlIGNhbid0IGJlIGd1YXJhbnRlZWQgdGhhdCBhbGxcbiAgICAgKiBicm93c2VycyB3aWxsIHJlc3BvbmQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHJlcXVlc3RzIHdlIHNlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVSZXNwb25zZShyZXF1ZXN0TnVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ1Jlc3BvbnNlc1tyZXF1ZXN0TnVtXSA9IGRhdGE7XG4gICAgICAgIHdoaWxlICh0aGlzLnBlbmRpbmdSZXNwb25zZXNbdGhpcy5jdXJyZW50UmVzcG9uc2VOdW1dKSB7XG4gICAgICAgICAgICBjb25zdCB0b1Byb2Nlc3MgPSB0aGlzLnBlbmRpbmdSZXNwb25zZXNbdGhpcy5jdXJyZW50UmVzcG9uc2VOdW1dO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1Jlc3BvbnNlc1t0aGlzLmN1cnJlbnRSZXNwb25zZU51bV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvUHJvY2Vzcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0b1Byb2Nlc3NbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VfKHRvUHJvY2Vzc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRSZXNwb25zZU51bSA9PT0gdGhpcy5jbG9zZUFmdGVyUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJlc3BvbnNlTnVtKys7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBVUkwgcXVlcnkgcGFyYW1ldGVycyBhc3NvY2lhdGVkIHdpdGggbG9uZ3BvbGxpbmdcbmNvbnN0IEZJUkVCQVNFX0xPTkdQT0xMX1NUQVJUX1BBUkFNID0gJ3N0YXJ0JztcbmNvbnN0IEZJUkVCQVNFX0xPTkdQT0xMX0NMT1NFX0NPTU1BTkQgPSAnY2xvc2UnO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfQ09NTUFORF9DQl9OQU1FID0gJ3BMUENvbW1hbmQnO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfREFUQV9DQl9OQU1FID0gJ3BSVExQQ0InO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfSURfUEFSQU0gPSAnaWQnO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfUFdfUEFSQU0gPSAncHcnO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNID0gJ3Nlcic7XG5jb25zdCBGSVJFQkFTRV9MT05HUE9MTF9DQUxMQkFDS19JRF9QQVJBTSA9ICdjYic7XG5jb25zdCBGSVJFQkFTRV9MT05HUE9MTF9TRUdNRU5UX05VTV9QQVJBTSA9ICdzZWcnO1xuY29uc3QgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVFNfSU5fUEFDS0VUID0gJ3RzJztcbmNvbnN0IEZJUkVCQVNFX0xPTkdQT0xMX0RBVEFfUEFSQU0gPSAnZCc7XG5jb25zdCBGSVJFQkFTRV9MT05HUE9MTF9ESVNDT05OX0ZSQU1FX1JFUVVFU1RfUEFSQU0gPSAnZGZyYW1lJztcbi8vRGF0YSBzaXplIGNvbnN0YW50cy5cbi8vVE9ETzogUGVyZjogdGhlIG1heGltdW0gbGVuZ3RoIGFjdHVhbGx5IGRpZmZlcnMgZnJvbSBicm93c2VyIHRvIGJyb3dzZXIuXG4vLyBXZSBzaG91bGQgY2hlY2sgd2hhdCBicm93c2VyIHdlJ3JlIG9uIGFuZCBzZXQgYWNjb3JkaW5nbHkuXG5jb25zdCBNQVhfVVJMX0RBVEFfU0laRSA9IDE4NzA7XG5jb25zdCBTRUdfSEVBREVSX1NJWkUgPSAzMDsgLy9pZTogJnNlZz04Mjk5MjM0JnRzPTk4MjM4OTEyMyZkPVxuY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IE1BWF9VUkxfREFUQV9TSVpFIC0gU0VHX0hFQURFUl9TSVpFO1xuLyoqXG4gKiBLZWVwYWxpdmUgcGVyaW9kXG4gKiBzZW5kIGEgZnJlc2ggcmVxdWVzdCBhdCBtaW5pbXVtIGV2ZXJ5IDI1IHNlY29uZHMuIE9wZXJhIGhhcyBhIG1heGltdW0gcmVxdWVzdFxuICogbGVuZ3RoIG9mIDMwIHNlY29uZHMgdGhhdCB3ZSBjYW4ndCBleGNlZWQuXG4gKi9cbmNvbnN0IEtFRVBBTElWRV9SRVFVRVNUX0lOVEVSVkFMID0gMjUwMDA7XG4vKipcbiAqIEhvdyBsb25nIHRvIHdhaXQgYmVmb3JlIGFib3J0aW5nIGEgbG9uZy1wb2xsaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdC5cbiAqL1xuY29uc3QgTFBfQ09OTkVDVF9USU1FT1VUID0gMzAwMDA7XG4vKipcbiAqIFRoaXMgY2xhc3MgbWFuYWdlcyBhIHNpbmdsZSBsb25nLXBvbGxpbmcgY29ubmVjdGlvbi5cbiAqL1xuY2xhc3MgQnJvd3NlclBvbGxDb25uZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ubklkIEFuIGlkZW50aWZpZXIgZm9yIHRoaXMgY29ubmVjdGlvbiwgdXNlZCBmb3IgbG9nZ2luZ1xuICAgICAqIEBwYXJhbSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIGVuZHBvaW50IHRvIHNlbmQgZGF0YSB0by5cbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25JZCBUaGUgRmlyZWJhc2UgQXBwIElEIGZvciB0aGlzIHByb2plY3QuXG4gICAgICogQHBhcmFtIGFwcENoZWNrVG9rZW4gVGhlIEFwcENoZWNrIHRva2VuIGZvciB0aGlzIGNsaWVudC5cbiAgICAgKiBAcGFyYW0gYXV0aFRva2VuIFRoZSBBdXRoVG9rZW4gdG8gdXNlIGZvciB0aGlzIGNvbm5lY3Rpb24uXG4gICAgICogQHBhcmFtIHRyYW5zcG9ydFNlc3Npb25JZCBPcHRpb25hbCB0cmFuc3BvcnRTZXNzaW9uaWQgaWYgd2UgYXJlXG4gICAgICogcmVjb25uZWN0aW5nIGZvciBhbiBleGlzdGluZyB0cmFuc3BvcnQgc2Vzc2lvblxuICAgICAqIEBwYXJhbSBsYXN0U2Vzc2lvbklkIE9wdGlvbmFsIGxhc3RTZXNzaW9uSWQgaWYgdGhlIFBlcnNpc3RlbnRDb25uZWN0aW9uIGhhc1xuICAgICAqIGFscmVhZHkgY3JlYXRlZCBhIGNvbm5lY3Rpb24gcHJldmlvdXNseVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5JZCwgcmVwb0luZm8sIGFwcGxpY2F0aW9uSWQsIGFwcENoZWNrVG9rZW4sIGF1dGhUb2tlbiwgdHJhbnNwb3J0U2Vzc2lvbklkLCBsYXN0U2Vzc2lvbklkKSB7XG4gICAgICAgIHRoaXMuY29ubklkID0gY29ubklkO1xuICAgICAgICB0aGlzLnJlcG9JbmZvID0gcmVwb0luZm87XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25JZCA9IGFwcGxpY2F0aW9uSWQ7XG4gICAgICAgIHRoaXMuYXBwQ2hlY2tUb2tlbiA9IGFwcENoZWNrVG9rZW47XG4gICAgICAgIHRoaXMuYXV0aFRva2VuID0gYXV0aFRva2VuO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydFNlc3Npb25JZCA9IHRyYW5zcG9ydFNlc3Npb25JZDtcbiAgICAgICAgdGhpcy5sYXN0U2Vzc2lvbklkID0gbGFzdFNlc3Npb25JZDtcbiAgICAgICAgdGhpcy5ieXRlc1NlbnQgPSAwO1xuICAgICAgICB0aGlzLmJ5dGVzUmVjZWl2ZWQgPSAwO1xuICAgICAgICB0aGlzLmV2ZXJDb25uZWN0ZWRfID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nXyA9IGxvZ1dyYXBwZXIoY29ubklkKTtcbiAgICAgICAgdGhpcy5zdGF0c18gPSBzdGF0c01hbmFnZXJHZXRDb2xsZWN0aW9uKHJlcG9JbmZvKTtcbiAgICAgICAgdGhpcy51cmxGbiA9IChwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIC8vIEFsd2F5cyBhZGQgdGhlIHRva2VuIGlmIHdlIGhhdmUgb25lLlxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwQ2hlY2tUb2tlbikge1xuICAgICAgICAgICAgICAgIHBhcmFtc1tBUFBfQ0hFQ0tfVE9LRU5fUEFSQU1dID0gdGhpcy5hcHBDaGVja1Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcG9JbmZvQ29ubmVjdGlvblVSTChyZXBvSW5mbywgTE9OR19QT0xMSU5HLCBwYXJhbXMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlIC0gQ2FsbGJhY2sgd2hlbiBtZXNzYWdlcyBhcnJpdmVcbiAgICAgKiBAcGFyYW0gb25EaXNjb25uZWN0IC0gQ2FsbGJhY2sgd2l0aCBjb25uZWN0aW9uIGxvc3QuXG4gICAgICovXG4gICAgb3Blbihvbk1lc3NhZ2UsIG9uRGlzY29ubmVjdCkge1xuICAgICAgICB0aGlzLmN1clNlZ21lbnROdW0gPSAwO1xuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBvbkRpc2Nvbm5lY3Q7XG4gICAgICAgIHRoaXMubXlQYWNrZXRPcmRlcmVyID0gbmV3IFBhY2tldFJlY2VpdmVyKG9uTWVzc2FnZSk7XG4gICAgICAgIHRoaXMuaXNDbG9zZWRfID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnVGltZWQgb3V0IHRyeWluZyB0byBjb25uZWN0LicpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGNsZWFyIHRoZSBob3N0IGNhY2hlXG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2VkXygpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyA9IG51bGw7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB9LCBNYXRoLmZsb29yKExQX0NPTk5FQ1RfVElNRU9VVCkpO1xuICAgICAgICAvLyBFbnN1cmUgd2UgZGVsYXkgdGhlIGNyZWF0aW9uIG9mIHRoZSBpZnJhbWUgdW50aWwgdGhlIERPTSBpcyBsb2FkZWQuXG4gICAgICAgIGV4ZWN1dGVXaGVuRE9NUmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWRfKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9TZXQgdXAgYSBjYWxsYmFjayB0aGF0IGdldHMgdHJpZ2dlcmVkIG9uY2UgYSBjb25uZWN0aW9uIGlzIHNldCB1cC5cbiAgICAgICAgICAgIHRoaXMuc2NyaXB0VGFnSG9sZGVyID0gbmV3IEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyKCguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2NvbW1hbmQsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzRdID0gYXJncztcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlbWVudEluY29taW5nQnl0ZXNfKGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zY3JpcHRUYWdIb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyB3ZSBjbG9zZWQgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZXZlckNvbm5lY3RlZF8gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBGSVJFQkFTRV9MT05HUE9MTF9TVEFSVF9QQVJBTSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlkID0gYXJnMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9IGFyZzI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmQgPT09IEZJUkVCQVNFX0xPTkdQT0xMX0NMT1NFX0NPTU1BTkQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2xlYXIgdGhlIGhvc3QgY2FjaGUuIFdlIGdvdCBhIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciwgc28gd2Uga25vdyBpdCdzIHJlYWNoYWJsZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlbid0IGV4cGVjdGluZyBhbnkgbW9yZSBkYXRhIChvdGhlciB0aGFuIHdoYXQgdGhlIHNlcnZlcidzIGFscmVhZHkgaW4gdGhlIHByb2Nlc3Mgb2Ygc2VuZGluZyB1c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3VnaCBvdXIgYWxyZWFkeSBvcGVuIHBvbGxzKSwgc28gZG9uJ3Qgc2VuZCBhbnkgbW9yZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NyaXB0VGFnSG9sZGVyLnNlbmROZXdQb2xscyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJnMSBpbiB0aGlzIGNhc2UgaXMgdGhlIGxhc3QgcmVzcG9uc2UgbnVtYmVyIHNlbnQgYnkgdGhlIHNlcnZlci4gV2Ugc2hvdWxkIHRyeSB0byByZWNlaXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgb2YgdGhlIHJlc3BvbnNlcyB1cCB0byB0aGlzIG9uZSBiZWZvcmUgY2xvc2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5teVBhY2tldE9yZGVyZXIuY2xvc2VBZnRlcihhcmcxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlZF8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlZF8oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgY29tbWFuZCByZWNlaXZlZDogJyArIGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgW3BOLCBkYXRhXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyhhcmdzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm15UGFja2V0T3JkZXJlci5oYW5kbGVSZXNwb25zZShwTiwgZGF0YSk7XG4gICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlZF8oKTtcbiAgICAgICAgICAgIH0sIHRoaXMudXJsRm4pO1xuICAgICAgICAgICAgLy9TZW5kIHRoZSBpbml0aWFsIHJlcXVlc3QgdG8gY29ubmVjdC4gVGhlIHNlcmlhbCBudW1iZXIgaXMgc2ltcGx5IHRvIGtlZXAgdGhlIGJyb3dzZXIgZnJvbSBwdWxsaW5nIHByZXZpb3VzIHJlc3VsdHNcbiAgICAgICAgICAgIC8vZnJvbSBjYWNoZS5cbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX1NUQVJUX1BBUkFNXSA9ICd0JztcbiAgICAgICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9TRVJJQUxfUEFSQU1dID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcmlwdFRhZ0hvbGRlci51bmlxdWVDYWxsYmFja0lkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfQ0FMTEJBQ0tfSURfUEFSQU1dID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JpcHRUYWdIb2xkZXIudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsUGFyYW1zW1ZFUlNJT05fUEFSQU1dID0gUFJPVE9DT0xfVkVSU0lPTjtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydFNlc3Npb25JZCkge1xuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tUUkFOU1BPUlRfU0VTU0lPTl9QQVJBTV0gPSB0aGlzLnRyYW5zcG9ydFNlc3Npb25JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3RTZXNzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbTEFTVF9TRVNTSU9OX1BBUkFNXSA9IHRoaXMubGFzdFNlc3Npb25JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFwcGxpY2F0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbQVBQTElDQVRJT05fSURfUEFSQU1dID0gdGhpcy5hcHBsaWNhdGlvbklkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwQ2hlY2tUb2tlbikge1xuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tBUFBfQ0hFQ0tfVE9LRU5fUEFSQU1dID0gdGhpcy5hcHBDaGVja1Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSAmJlxuICAgICAgICAgICAgICAgIEZPUkdFX0RPTUFJTl9SRS50ZXN0KGxvY2F0aW9uLmhvc3RuYW1lKSkge1xuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tSRUZFUkVSX1BBUkFNXSA9IEZPUkdFX1JFRjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3RVUkwgPSB0aGlzLnVybEZuKHVybFBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0Nvbm5lY3RpbmcgdmlhIGxvbmctcG9sbCB0byAnICsgY29ubmVjdFVSTCk7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5hZGRUYWcoY29ubmVjdFVSTCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGlzIHdoZW4gYSBoYW5kc2hha2UgaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgYW5kIHdlIHdhbnQgdG8gY29uc2lkZXIgdGhlIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWRcbiAgICAgKi9cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5zY3JpcHRUYWdIb2xkZXIuc3RhcnRMb25nUG9sbCh0aGlzLmlkLCB0aGlzLnBhc3N3b3JkKTtcbiAgICAgICAgdGhpcy5hZGREaXNjb25uZWN0UGluZ0ZyYW1lKHRoaXMuaWQsIHRoaXMucGFzc3dvcmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgbG9uZyBwb2xsaW5nIHRvIGJlIGNvbnNpZGVyZWQgYXMgYSBwb3RlbnRpYWwgdHJhbnNwb3J0XG4gICAgICovXG4gICAgc3RhdGljIGZvcmNlQWxsb3coKSB7XG4gICAgICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZUFsbG93XyA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcmNlcyBsb25ncG9sbGluZyB0byBub3QgYmUgY29uc2lkZXJlZCBhcyBhIHBvdGVudGlhbCB0cmFuc3BvcnRcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9yY2VEaXNhbGxvdygpIHtcbiAgICAgICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3dfID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gU3RhdGljIG1ldGhvZCwgdXNlIHN0cmluZyBsaXRlcmFsIHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBpbiBhIGdlbmVyaWMgd2F5XG4gICAgc3RhdGljIGlzQXZhaWxhYmxlKCkge1xuICAgICAgICBpZiAoaXNOb2RlU2RrKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VBbGxvd18pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTk9URTogSW4gUmVhY3QtTmF0aXZlIHRoZXJlJ3Mgbm9ybWFsbHkgbm8gJ2RvY3VtZW50JywgYnV0IGlmIHlvdSBkZWJ1ZyBhIFJlYWN0LU5hdGl2ZSBhcHAgaW5cbiAgICAgICAgICAgIC8vIHRoZSBDaHJvbWUgZGVidWdnZXIsICdkb2N1bWVudCcgaXMgZGVmaW5lZCwgYnV0IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgbnVsbCAoMjAxNS8wNi8wOCkuXG4gICAgICAgICAgICByZXR1cm4gKCFCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VEaXNhbGxvd18gJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgIWlzQ2hyb21lRXh0ZW5zaW9uQ29udGVudFNjcmlwdCgpICYmXG4gICAgICAgICAgICAgICAgIWlzV2luZG93c1N0b3JlQXBwKCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vLW9wIGZvciBwb2xsaW5nXG4gICAgICovXG4gICAgbWFya0Nvbm5lY3Rpb25IZWFsdGh5KCkgeyB9XG4gICAgLyoqXG4gICAgICogU3RvcHMgcG9sbGluZyBhbmQgY2xlYW5zIHVwIHRoZSBpZnJhbWVcbiAgICAgKi9cbiAgICBzaHV0ZG93bl8oKSB7XG4gICAgICAgIHRoaXMuaXNDbG9zZWRfID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuc2NyaXB0VGFnSG9sZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRUYWdIb2xkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vcmVtb3ZlIHRoZSBkaXNjb25uZWN0IGZyYW1lLCB3aGljaCB3aWxsIHRyaWdnZXIgYW4gWEhSIGNhbGwgdG8gdGhlIHNlcnZlciB0byB0ZWxsIGl0IHdlJ3JlIGxlYXZpbmcuXG4gICAgICAgIGlmICh0aGlzLm15RGlzY29ubkZyYW1lKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMubXlEaXNjb25uRnJhbWUpO1xuICAgICAgICAgICAgdGhpcy5teURpc2Nvbm5GcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8pIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIHRoaXMgdHJhbnNwb3J0IGlzIGNsb3NlZFxuICAgICAqL1xuICAgIG9uQ2xvc2VkXygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdMb25ncG9sbCBpcyBjbG9zaW5nIGl0c2VsZicpO1xuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uRGlzY29ubmVjdF8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8odGhpcy5ldmVyQ29ubmVjdGVkXyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRlcm5hbC1mYWNpbmcgY2xvc2UgaGFuZGxlci4gUmVhbFRpbWUgaGFzIHJlcXVlc3RlZCB3ZSBzaHV0IGRvd24uIEtpbGwgb3VyIGNvbm5lY3Rpb24gYW5kIHRlbGwgdGhlIHNlcnZlclxuICAgICAqIHRoYXQgd2UndmUgbGVmdC5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdMb25ncG9sbCBpcyBiZWluZyBjbG9zZWQuJyk7XG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIEpTT04gb2JqZWN0IGRvd24gdG8gdGhlIHNlcnZlci4gSXQgd2lsbCBuZWVkIHRvIGJlIHN0cmluZ2lmaWVkLCBiYXNlNjQgZW5jb2RlZCwgYW5kIHRoZW5cbiAgICAgKiBicm9rZW4gaW50byBjaHVua3MgKHNpbmNlIFVSTHMgaGF2ZSBhIHNtYWxsIG1heGltdW0gbGVuZ3RoKS5cbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBKU09OIGRhdGEgdG8gdHJhbnNtaXQuXG4gICAgICovXG4gICAgc2VuZChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGRhdGFTdHIgPSBzdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgIHRoaXMuYnl0ZXNTZW50ICs9IGRhdGFTdHIubGVuZ3RoO1xuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKCdieXRlc19zZW50JywgZGF0YVN0ci5sZW5ndGgpO1xuICAgICAgICAvL2ZpcnN0LCBsZXRzIGdldCB0aGUgYmFzZTY0LWVuY29kZWQgZGF0YVxuICAgICAgICBjb25zdCBiYXNlNjRkYXRhID0gYmFzZTY0RW5jb2RlKGRhdGFTdHIpO1xuICAgICAgICAvL1dlIGNhbiBvbmx5IGZpdCBhIGNlcnRhaW4gYW1vdW50IGluIGVhY2ggVVJMLCBzbyB3ZSBuZWVkIHRvIHNwbGl0IHRoaXMgcmVxdWVzdFxuICAgICAgICAvL3VwIGludG8gbXVsdGlwbGUgcGllY2VzIGlmIGl0IGRvZXNuJ3QgZml0IGluIG9uZSByZXF1ZXN0LlxuICAgICAgICBjb25zdCBkYXRhU2VncyA9IHNwbGl0U3RyaW5nQnlTaXplKGJhc2U2NGRhdGEsIE1BWF9QQVlMT0FEX1NJWkUpO1xuICAgICAgICAvL0VucXVldWUgZWFjaCBzZWdtZW50IGZvciB0cmFuc21pc3Npb24uIFdlIGFzc2lnbiBlYWNoIGNodW5rIGEgc2VxdWVudGlhbCBJRCBhbmQgYSB0b3RhbCBudW1iZXJcbiAgICAgICAgLy9vZiBzZWdtZW50cyBzbyB0aGF0IHdlIGNhbiByZWFzc2VtYmxlIHRoZSBwYWNrZXQgb24gdGhlIHNlcnZlci5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhU2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRUYWdIb2xkZXIuZW5xdWV1ZVNlZ21lbnQodGhpcy5jdXJTZWdtZW50TnVtLCBkYXRhU2Vncy5sZW5ndGgsIGRhdGFTZWdzW2ldKTtcbiAgICAgICAgICAgIHRoaXMuY3VyU2VnbWVudE51bSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgaG93IHdlIG5vdGlmeSB0aGUgc2VydmVyIHRoYXQgd2UncmUgbGVhdmluZy5cbiAgICAgKiBXZSBhcmVuJ3QgYWJsZSB0byBzZW5kIHJlcXVlc3RzIHdpdGggREhUTUwgb24gYSB3aW5kb3cgY2xvc2UgZXZlbnQsIGJ1dCB3ZSBjYW5cbiAgICAgKiB0cmlnZ2VyIFhIUiByZXF1ZXN0cyBpbiBzb21lIGJyb3dzZXJzIChldmVyeXRoaW5nIGJ1dCBPcGVyYSBiYXNpY2FsbHkpLlxuICAgICAqL1xuICAgIGFkZERpc2Nvbm5lY3RQaW5nRnJhbWUoaWQsIHB3KSB7XG4gICAgICAgIGlmIChpc05vZGVTZGsoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXlEaXNjb25uRnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0ge307XG4gICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9ESVNDT05OX0ZSQU1FX1JFUVVFU1RfUEFSQU1dID0gJ3QnO1xuICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfSURfUEFSQU1dID0gaWQ7XG4gICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9QV19QQVJBTV0gPSBwdztcbiAgICAgICAgdGhpcy5teURpc2Nvbm5GcmFtZS5zcmMgPSB0aGlzLnVybEZuKHVybFBhcmFtcyk7XG4gICAgICAgIHRoaXMubXlEaXNjb25uRnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm15RGlzY29ubkZyYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlZCB0byB0cmFjayB0aGUgYnl0ZXMgcmVjZWl2ZWQgYnkgdGhpcyBjbGllbnRcbiAgICAgKi9cbiAgICBpbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyhhcmdzKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgaXMgYW4gYW5ub3lpbmcgcGVyZiBoaXQganVzdCB0byB0cmFjayB0aGUgbnVtYmVyIG9mIGluY29taW5nIGJ5dGVzLiAgTWF5YmUgaXQgc2hvdWxkIGJlIG9wdC1pbi5cbiAgICAgICAgY29uc3QgYnl0ZXNSZWNlaXZlZCA9IHN0cmluZ2lmeShhcmdzKS5sZW5ndGg7XG4gICAgICAgIHRoaXMuYnl0ZXNSZWNlaXZlZCArPSBieXRlc1JlY2VpdmVkO1xuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKCdieXRlc19yZWNlaXZlZCcsIGJ5dGVzUmVjZWl2ZWQpO1xuICAgIH1cbn1cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIEEgd3JhcHBlciBhcm91bmQgYW4gaWZyYW1lIHRoYXQgaXMgdXNlZCBhcyBhIGxvbmctcG9sbGluZyBzY3JpcHQgaG9sZGVyLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmNsYXNzIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29tbWFuZENCIC0gVGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIGNvbnRyb2wgY29tbWFuZHMgYXJlIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlQ0IgLSBUaGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gcmVzcG9uc2VzIGFycml2ZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIG9uRGlzY29ubmVjdCAtIFRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGlzIHRhZyBob2xkZXIgaXMgY2xvc2VkXG4gICAgICogQHBhcmFtIHVybEZuIC0gQSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIHRoZSBVUkwgb2YgdGhlIGVuZHBvaW50IHRvIHNlbmQgZGF0YSB0by5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb21tYW5kQ0IsIG9uTWVzc2FnZUNCLCBvbkRpc2Nvbm5lY3QsIHVybEZuKSB7XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gb25EaXNjb25uZWN0O1xuICAgICAgICB0aGlzLnVybEZuID0gdXJsRm47XG4gICAgICAgIC8vV2UgbWFpbnRhaW4gYSBjb3VudCBvZiBhbGwgb2YgdGhlIG91dHN0YW5kaW5nIHJlcXVlc3RzLCBiZWNhdXNlIGlmIHdlIGhhdmUgdG9vIG1hbnkgYWN0aXZlIGF0IG9uY2UgaXQgY2FuIGNhdXNlXG4gICAgICAgIC8vcHJvYmxlbXMgaW4gc29tZSBicm93c2Vycy5cbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1JlcXVlc3RzID0gbmV3IFNldCgpO1xuICAgICAgICAvL0EgcXVldWUgb2YgdGhlIHBlbmRpbmcgc2VnbWVudHMgd2FpdGluZyBmb3IgdHJhbnNtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICAgIHRoaXMucGVuZGluZ1NlZ3MgPSBbXTtcbiAgICAgICAgLy9BIHNlcmlhbCBudW1iZXIuIFdlIHVzZSB0aGlzIGZvciB0d28gdGhpbmdzOlxuICAgICAgICAvLyAxKSBBIHdheSB0byBlbnN1cmUgdGhlIGJyb3dzZXIgZG9lc24ndCBjYWNoZSByZXNwb25zZXMgdG8gcG9sbHNcbiAgICAgICAgLy8gMikgQSB3YXkgdG8gbWFrZSB0aGUgc2VydmVyIGF3YXJlIHdoZW4gbG9uZy1wb2xscyBhcnJpdmUgaW4gYSBkaWZmZXJlbnQgb3JkZXIgdGhhbiB3ZSBzdGFydGVkIHRoZW0uIFRoZVxuICAgICAgICAvLyAgICBzZXJ2ZXIgbmVlZHMgdG8gcmVsZWFzZSBib3RoIHBvbGxzIGluIHRoaXMgY2FzZSBvciBpdCB3aWxsIGNhdXNlIHByb2JsZW1zIGluIE9wZXJhIHNpbmNlIE9wZXJhIGNhbiBvbmx5IGV4ZWN1dGVcbiAgICAgICAgLy8gICAgSlNPTlAgY29kZSBpbiB0aGUgb3JkZXIgaXQgd2FzIGFkZGVkIHRvIHRoZSBpZnJhbWUuXG4gICAgICAgIHRoaXMuY3VycmVudFNlcmlhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XG4gICAgICAgIC8vIFRoaXMgZ2V0cyBzZXQgdG8gZmFsc2Ugd2hlbiB3ZSdyZSBcImNsb3NpbmcgZG93blwiIHRoZSBjb25uZWN0aW9uIChlLmcuIHdlJ3JlIHN3aXRjaGluZyB0cmFuc3BvcnRzIGJ1dCB0aGVyZSdzIHN0aWxsXG4gICAgICAgIC8vIGluY29taW5nIGRhdGEgZnJvbSB0aGUgc2VydmVyIHRoYXQgd2UncmUgd2FpdGluZyBmb3IpLlxuICAgICAgICB0aGlzLnNlbmROZXdQb2xscyA9IHRydWU7XG4gICAgICAgIGlmICghaXNOb2RlU2RrKCkpIHtcbiAgICAgICAgICAgIC8vRWFjaCBzY3JpcHQgaG9sZGVyIHJlZ2lzdGVycyBhIGNvdXBsZSBvZiB1bmlxdWVseSBuYW1lZCBjYWxsYmFja3Mgd2l0aCB0aGUgd2luZG93LiBUaGVzZSBhcmUgY2FsbGVkIGZyb20gdGhlXG4gICAgICAgICAgICAvL2lmcmFtZXMgd2hlcmUgd2UgcHV0IHRoZSBsb25nLXBvbGxpbmcgc2NyaXB0IHRhZ3MuIFdlIGhhdmUgdHdvIGNhbGxiYWNrczpcbiAgICAgICAgICAgIC8vICAgMSkgQ29tbWFuZCBDYWxsYmFjayAtIFRyaWdnZXJlZCBmb3IgY29udHJvbCBpc3N1ZXMsIGxpa2Ugc3RhcnRpbmcgYSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgLy8gICAyKSBNZXNzYWdlIENhbGxiYWNrIC0gVHJpZ2dlcmVkIHdoZW4gbmV3IGRhdGEgYXJyaXZlcy5cbiAgICAgICAgICAgIHRoaXMudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyID0gTFVJREdlbmVyYXRvcigpO1xuICAgICAgICAgICAgd2luZG93W0ZJUkVCQVNFX0xPTkdQT0xMX0NPTU1BTkRfQ0JfTkFNRSArIHRoaXMudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyXSA9IGNvbW1hbmRDQjtcbiAgICAgICAgICAgIHdpbmRvd1tGSVJFQkFTRV9MT05HUE9MTF9EQVRBX0NCX05BTUUgKyB0aGlzLnVuaXF1ZUNhbGxiYWNrSWRlbnRpZmllcl0gPVxuICAgICAgICAgICAgICAgIG9uTWVzc2FnZUNCO1xuICAgICAgICAgICAgLy9DcmVhdGUgYW4gaWZyYW1lIGZvciB1cyB0byBhZGQgc2NyaXB0IHRhZ3MgdG8uXG4gICAgICAgICAgICB0aGlzLm15SUZyYW1lID0gRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIuY3JlYXRlSUZyYW1lXygpO1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBpZnJhbWUncyBjb250ZW50cy5cbiAgICAgICAgICAgIGxldCBzY3JpcHQgPSAnJztcbiAgICAgICAgICAgIC8vIGlmIHdlIHNldCBhIGphdmFzY3JpcHQgdXJsLCBpdCdzIElFIGFuZCB3ZSBuZWVkIHRvIHNldCB0aGUgZG9jdW1lbnQgZG9tYWluLiBUaGUgamF2YXNjcmlwdCB1cmwgaXMgc3VmZmljaWVudFxuICAgICAgICAgICAgLy8gZm9yIGllOSwgYnV0IGllOCBuZWVkcyB0byBkbyBpdCBhZ2FpbiBpbiB0aGUgZG9jdW1lbnQgaXRzZWxmLlxuICAgICAgICAgICAgaWYgKHRoaXMubXlJRnJhbWUuc3JjICYmXG4gICAgICAgICAgICAgICAgdGhpcy5teUlGcmFtZS5zcmMuc3Vic3RyKDAsICdqYXZhc2NyaXB0OicubGVuZ3RoKSA9PT0gJ2phdmFzY3JpcHQ6Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREb21haW4gPSBkb2N1bWVudC5kb21haW47XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gJzxzY3JpcHQ+ZG9jdW1lbnQuZG9tYWluPVwiJyArIGN1cnJlbnREb21haW4gKyAnXCI7PC9zY3JpcHQ+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZUNvbnRlbnRzID0gJzxodG1sPjxib2R5PicgKyBzY3JpcHQgKyAnPC9ib2R5PjwvaHRtbD4nO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLm15SUZyYW1lLmRvYy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5teUlGcmFtZS5kb2Mud3JpdGUoaWZyYW1lQ29udGVudHMpO1xuICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxvZygnZnJhbWUgd3JpdGluZyBleGNlcHRpb24nKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5zdGFjaykge1xuICAgICAgICAgICAgICAgICAgICBsb2coZS5zdGFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvZyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZENCID0gY29tbWFuZENCO1xuICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VDQiA9IG9uTWVzc2FnZUNCO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVhY2ggYnJvd3NlciBoYXMgaXRzIG93biBmdW5ueSB3YXkgdG8gaGFuZGxlIGlmcmFtZXMuIEhlcmUgd2UgbXVzaCB0aGVtIGFsbCB0b2dldGhlciBpbnRvIG9uZSBvYmplY3QgdGhhdCBJIGNhblxuICAgICAqIGFjdHVhbGx5IHVzZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlSUZyYW1lXygpIHtcbiAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byBpbml0aWFsaXplIHRoZSBkb2N1bWVudCBpbnNpZGUgdGhlIGlmcmFtZVxuICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBJZiBkb2N1bWVudC5kb21haW4gaGFzIGJlZW4gbW9kaWZpZWQgaW4gSUUsIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciwgYW5kIHdlIG5lZWQgdG8gc2V0IHRoZVxuICAgICAgICAgICAgICAgIC8vIGRvbWFpbiBvZiB0aGUgaWZyYW1lJ3MgZG9jdW1lbnQgbWFudWFsbHkuIFdlIGNhbiBkbyB0aGlzIHZpYSBhIGphdmFzY3JpcHQ6IHVybCBhcyB0aGUgc3JjIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgIC8vIEFsc28gbm90ZSB0aGF0IHdlIG11c3QgZG8gdGhpcyAqYWZ0ZXIqIHRoZSBpZnJhbWUgaGFzIGJlZW4gYXBwZW5kZWQgdG8gdGhlIHBhZ2UuIE90aGVyd2lzZSBpdCBkb2Vzbid0IHdvcmsuXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICAgICAgICAgIGlmICghYSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcG9sb2dpZXMgZm9yIHRoZSBsb2ctc3BhbSwgSSBuZWVkIHRvIGRvIHNvbWV0aGluZyB0byBrZWVwIGNsb3N1cmUgZnJvbSBvcHRpbWl6aW5nIG91dCB0aGUgYXNzaWdubWVudCBhYm92ZS5cbiAgICAgICAgICAgICAgICAgICAgbG9nKCdObyBJRSBkb21haW4gc2V0dGluZyByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9tYWluID0gZG9jdW1lbnQuZG9tYWluO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zcmMgPVxuICAgICAgICAgICAgICAgICAgICBcImphdmFzY3JpcHQ6dm9pZCgoZnVuY3Rpb24oKXtkb2N1bWVudC5vcGVuKCk7ZG9jdW1lbnQuZG9tYWluPSdcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBkb21haW4gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCInO2RvY3VtZW50LmNsb3NlKCk7fSkoKSlcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIExvbmdQb2xsQ29ubmVjdGlvbiBhdHRlbXB0cyB0byBkZWxheSBpbml0aWFsaXphdGlvbiB1bnRpbCB0aGUgZG9jdW1lbnQgaXMgcmVhZHksIHNvIGhvcGVmdWxseSB0aGlzXG4gICAgICAgICAgICAvLyBuZXZlciBnZXRzIGhpdC5cbiAgICAgICAgICAgIHRocm93ICdEb2N1bWVudCBib2R5IGhhcyBub3QgaW5pdGlhbGl6ZWQuIFdhaXQgdG8gaW5pdGlhbGl6ZSBGaXJlYmFzZSB1bnRpbCBhZnRlciB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuJztcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgdGhlIGRvY3VtZW50IG9mIHRoZSBpZnJhbWUgaW4gYSBicm93c2VyLXNwZWNpZmljIHdheS5cbiAgICAgICAgaWYgKGlmcmFtZS5jb250ZW50RG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGlmcmFtZS5kb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50OyAvLyBGaXJlZm94LCBPcGVyYSwgU2FmYXJpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIGlmcmFtZS5kb2MgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDsgLy8gSW50ZXJuZXQgRXhwbG9yZXJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaWZyYW1lLmRvY3VtZW50KSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgaWZyYW1lLmRvYyA9IGlmcmFtZS5kb2N1bWVudDsgLy9vdGhlcnM/XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlmcmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VsIGFsbCBvdXRzdGFuZGluZyBxdWVyaWVzIGFuZCByZW1vdmUgdGhlIGZyYW1lLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICAvL01hcmsgdGhpcyBpZnJhbWUgYXMgZGVhZCwgc28gbm8gbmV3IHJlcXVlc3RzIGFyZSBzZW50LlxuICAgICAgICB0aGlzLmFsaXZlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLm15SUZyYW1lKSB7XG4gICAgICAgICAgICAvL1dlIGhhdmUgdG8gYWN0dWFsbHkgcmVtb3ZlIGFsbCBvZiB0aGUgaHRtbCBpbnNpZGUgdGhpcyBpZnJhbWUgYmVmb3JlIHJlbW92aW5nIGl0IGZyb20gdGhlXG4gICAgICAgICAgICAvL3dpbmRvdywgb3IgSUUgd2lsbCBjb250aW51ZSBsb2FkaW5nIGFuZCBleGVjdXRpbmcgdGhlIHNjcmlwdCB0YWdzIHdlJ3ZlIGFscmVhZHkgYWRkZWQsIHdoaWNoXG4gICAgICAgICAgICAvL2NhbiBsZWFkIHRvIHNvbWUgZXJyb3JzIGJlaW5nIHRocm93bi4gU2V0dGluZyB0ZXh0Q29udGVudCBzZWVtcyB0byBiZSB0aGUgc2FmZXN0IHdheSB0byBkbyB0aGlzLlxuICAgICAgICAgICAgdGhpcy5teUlGcmFtZS5kb2MuYm9keS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubXlJRnJhbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm15SUZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5teUlGcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcigwKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJvdGVjdCBmcm9tIGJlaW5nIGNhbGxlZCByZWN1cnNpdmVseS5cbiAgICAgICAgY29uc3Qgb25EaXNjb25uZWN0ID0gdGhpcy5vbkRpc2Nvbm5lY3Q7XG4gICAgICAgIGlmIChvbkRpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIG9uRGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjdHVhbGx5IHN0YXJ0IHRoZSBsb25nLXBvbGxpbmcgc2Vzc2lvbiBieSBhZGRpbmcgdGhlIGZpcnN0IHNjcmlwdCB0YWcocykgdG8gdGhlIGlmcmFtZS5cbiAgICAgKiBAcGFyYW0gaWQgLSBUaGUgSUQgb2YgdGhpcyBjb25uZWN0aW9uXG4gICAgICogQHBhcmFtIHB3IC0gVGhlIHBhc3N3b3JkIGZvciB0aGlzIGNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBzdGFydExvbmdQb2xsKGlkLCBwdykge1xuICAgICAgICB0aGlzLm15SUQgPSBpZDtcbiAgICAgICAgdGhpcy5teVBXID0gcHc7XG4gICAgICAgIHRoaXMuYWxpdmUgPSB0cnVlO1xuICAgICAgICAvL3NlbmQgdGhlIGluaXRpYWwgcmVxdWVzdC4gSWYgdGhlcmUgYXJlIHJlcXVlc3RzIHF1ZXVlZCwgbWFrZSBzdXJlIHRoYXQgd2UgdHJhbnNtaXQgYXMgbWFueSBhcyB3ZSBhcmUgY3VycmVudGx5IGFibGUgdG8uXG4gICAgICAgIHdoaWxlICh0aGlzLm5ld1JlcXVlc3RfKCkpIHsgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGNhbGxlZCBhbnkgdGltZSBzb21lb25lIG1pZ2h0IHdhbnQgYSBzY3JpcHQgdGFnIHRvIGJlIGFkZGVkLiBJdCBhZGRzIGEgc2NyaXB0IHRhZyB3aGVuIHRoZXJlIGFyZW4ndFxuICAgICAqIHRvbyBtYW55IG91dHN0YW5kaW5nIHJlcXVlc3RzIGFuZCB3ZSBhcmUgc3RpbGwgYWxpdmUuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgb3V0c3RhbmRpbmcgcGFja2V0IHNlZ21lbnRzIHRvIHNlbmQsIGl0IHNlbmRzIG9uZS4gSWYgdGhlcmUgYXJlbid0LCBpdCBzZW5kcyBhIGxvbmctcG9sbCBhbnl3YXlzIGlmXG4gICAgICogbmVlZGVkLlxuICAgICAqL1xuICAgIG5ld1JlcXVlc3RfKCkge1xuICAgICAgICAvLyBXZSBrZWVwIG9uZSBvdXRzdGFuZGluZyByZXF1ZXN0IG9wZW4gYWxsIHRoZSB0aW1lIHRvIHJlY2VpdmUgZGF0YSwgYnV0IGlmIHdlIG5lZWQgdG8gc2VuZCBkYXRhXG4gICAgICAgIC8vIChwZW5kaW5nU2Vncy5sZW5ndGggPiAwKSB0aGVuIHdlIGNyZWF0ZSBhIG5ldyByZXF1ZXN0IHRvIHNlbmQgdGhlIGRhdGEuICBUaGUgc2VydmVyIHdpbGwgYXV0b21hdGljYWxseVxuICAgICAgICAvLyBjbG9zZSB0aGUgb2xkIHJlcXVlc3QuXG4gICAgICAgIGlmICh0aGlzLmFsaXZlICYmXG4gICAgICAgICAgICB0aGlzLnNlbmROZXdQb2xscyAmJlxuICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1JlcXVlc3RzLnNpemUgPCAodGhpcy5wZW5kaW5nU2Vncy5sZW5ndGggPiAwID8gMiA6IDEpKSB7XG4gICAgICAgICAgICAvL2NvbnN0cnVjdCBvdXIgdXJsXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZXJpYWwrKztcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0lEX1BBUkFNXSA9IHRoaXMubXlJRDtcbiAgICAgICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9QV19QQVJBTV0gPSB0aGlzLm15UFc7XG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNXSA9IHRoaXMuY3VycmVudFNlcmlhbDtcbiAgICAgICAgICAgIGxldCB0aGVVUkwgPSB0aGlzLnVybEZuKHVybFBhcmFtcyk7XG4gICAgICAgICAgICAvL05vdyBhZGQgYXMgbXVjaCBkYXRhIGFzIHdlIGNhbi5cbiAgICAgICAgICAgIGxldCBjdXJEYXRhU3RyaW5nID0gJyc7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5wZW5kaW5nU2Vncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy9maXJzdCwgbGV0cyBzZWUgaWYgdGhlIG5leHQgc2VnbWVudCB3aWxsIGZpdC5cbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0U2VnID0gdGhpcy5wZW5kaW5nU2Vnc1swXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFNlZy5kLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgICAgIFNFR19IRUFERVJfU0laRSArXG4gICAgICAgICAgICAgICAgICAgIGN1ckRhdGFTdHJpbmcubGVuZ3RoIDw9XG4gICAgICAgICAgICAgICAgICAgIE1BWF9VUkxfREFUQV9TSVpFKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZ3JlYXQsIHRoZSBzZWdtZW50IHdpbGwgZml0LiBMZXRzIGFwcGVuZCBpdC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlU2VnID0gdGhpcy5wZW5kaW5nU2Vncy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJEYXRhU3RyaW5nID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckRhdGFTdHJpbmcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcmJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVF9OVU1fUEFSQU0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlU2VnLnNlZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyYnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSVJFQkFTRV9MT05HUE9MTF9TRUdNRU5UU19JTl9QQUNLRVQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlU2VnLnRzICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJUkVCQVNFX0xPTkdQT0xMX0RBVEFfUEFSQU0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlU2VnLmQ7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoZVVSTCA9IHRoZVVSTCArIGN1ckRhdGFTdHJpbmc7XG4gICAgICAgICAgICB0aGlzLmFkZExvbmdQb2xsVGFnXyh0aGVVUkwsIHRoaXMuY3VycmVudFNlcmlhbCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWV1ZSBhIHBhY2tldCBmb3IgdHJhbnNtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHNlZ251bSAtIEEgc2VxdWVudGlhbCBpZCBmb3IgdGhpcyBwYWNrZXQgc2VnbWVudCB1c2VkIGZvciByZWFzc2VtYmx5XG4gICAgICogQHBhcmFtIHRvdGFsc2VncyAtIFRoZSB0b3RhbCBudW1iZXIgb2Ygc2VnbWVudHMgaW4gdGhpcyBwYWNrZXRcbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIGZvciB0aGlzIHNlZ21lbnQuXG4gICAgICovXG4gICAgZW5xdWV1ZVNlZ21lbnQoc2VnbnVtLCB0b3RhbHNlZ3MsIGRhdGEpIHtcbiAgICAgICAgLy9hZGQgdGhpcyB0byB0aGUgcXVldWUgb2Ygc2VnbWVudHMgdG8gc2VuZC5cbiAgICAgICAgdGhpcy5wZW5kaW5nU2Vncy5wdXNoKHsgc2VnOiBzZWdudW0sIHRzOiB0b3RhbHNlZ3MsIGQ6IGRhdGEgfSk7XG4gICAgICAgIC8vc2VuZCB0aGUgZGF0YSBpbW1lZGlhdGVseSBpZiB0aGVyZSBpc24ndCBhbHJlYWR5IGRhdGEgYmVpbmcgdHJhbnNtaXR0ZWQsIHVubGVzc1xuICAgICAgICAvL3N0YXJ0TG9uZ1BvbGwgaGFzbid0IGJlZW4gY2FsbGVkIHlldC5cbiAgICAgICAgaWYgKHRoaXMuYWxpdmUpIHtcbiAgICAgICAgICAgIHRoaXMubmV3UmVxdWVzdF8oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBzY3JpcHQgdGFnIGZvciBhIHJlZ3VsYXIgbG9uZy1wb2xsIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHVybCAtIFRoZSBVUkwgb2YgdGhlIHNjcmlwdCB0YWcuXG4gICAgICogQHBhcmFtIHNlcmlhbCAtIFRoZSBzZXJpYWwgbnVtYmVyIG9mIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIGFkZExvbmdQb2xsVGFnXyh1cmwsIHNlcmlhbCkge1xuICAgICAgICAvL3JlbWVtYmVyIHRoYXQgd2Ugc2VudCB0aGlzIHJlcXVlc3QuXG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdSZXF1ZXN0cy5hZGQoc2VyaWFsKTtcbiAgICAgICAgY29uc3QgZG9OZXdSZXF1ZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1JlcXVlc3RzLmRlbGV0ZShzZXJpYWwpO1xuICAgICAgICAgICAgdGhpcy5uZXdSZXF1ZXN0XygpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJZiB0aGlzIHJlcXVlc3QgZG9lc24ndCByZXR1cm4gb24gaXRzIG93biBhY2NvcmQgKGJ5IHRoZSBzZXJ2ZXIgc2VuZGluZyB1cyBzb21lIGRhdGEpLCB3ZSdsbFxuICAgICAgICAvLyBjcmVhdGUgYSBuZXcgb25lIGFmdGVyIHRoZSBLRUVQQUxJVkUgaW50ZXJ2YWwgdG8gbWFrZSBzdXJlIHdlIGFsd2F5cyBrZWVwIGEgZnJlc2ggcmVxdWVzdCBvcGVuLlxuICAgICAgICBjb25zdCBrZWVwYWxpdmVUaW1lb3V0ID0gc2V0VGltZW91dChkb05ld1JlcXVlc3QsIE1hdGguZmxvb3IoS0VFUEFMSVZFX1JFUVVFU1RfSU5URVJWQUwpKTtcbiAgICAgICAgY29uc3QgcmVhZHlTdGF0ZUNCID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gUmVxdWVzdCBjb21wbGV0ZWQuICBDYW5jZWwgdGhlIGtlZXBhbGl2ZS5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChrZWVwYWxpdmVUaW1lb3V0KTtcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYSBuZXcgcmVxdWVzdCBzbyB3ZSBjYW4gY29udGludWUgcmVjZWl2aW5nIGRhdGEuXG4gICAgICAgICAgICBkb05ld1JlcXVlc3QoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRUYWcodXJsLCByZWFkeVN0YXRlQ0IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gYXJiaXRyYXJ5IHNjcmlwdCB0YWcgdG8gdGhlIGlmcmFtZS5cbiAgICAgKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCBmb3IgdGhlIHNjcmlwdCB0YWcgc291cmNlLlxuICAgICAqIEBwYXJhbSBsb2FkQ0IgLSBBIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCBvbmNlIHRoZSBzY3JpcHQgaGFzIGxvYWRlZC5cbiAgICAgKi9cbiAgICBhZGRUYWcodXJsLCBsb2FkQ0IpIHtcbiAgICAgICAgaWYgKGlzTm9kZVNkaygpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgdGhpcy5kb05vZGVMb25nUG9sbCh1cmwsIGxvYWRDQik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSdyZSBhbHJlYWR5IGNsb3NlZCwgZG9uJ3QgYWRkIHRoaXMgcG9sbFxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VuZE5ld1BvbGxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2NyaXB0ID0gdGhpcy5teUlGcmFtZS5kb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC5zcmMgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC5vbmxvYWQgPSBuZXdTY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJzdGF0ZSA9IG5ld1NjcmlwdC5yZWFkeVN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnN0YXRlIHx8IHJzdGF0ZSA9PT0gJ2xvYWRlZCcgfHwgcnN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC5vbmxvYWQgPSBuZXdTY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1NjcmlwdC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuZXdTY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRDQigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCdMb25nLXBvbGwgc2NyaXB0IGZhaWxlZCB0byBsb2FkOiAnICsgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZE5ld1BvbGxzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLmJvZHkuYXBwZW5kQ2hpbGQobmV3U2NyaXB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIG1ha2UgdGhpcyBlcnJvciB2aXNpYmxlIHNvbWVob3dcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBNYXRoLmZsb29yKDEpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFdFQlNPQ0tFVF9NQVhfRlJBTUVfU0laRSA9IDE2Mzg0O1xuY29uc3QgV0VCU09DS0VUX0tFRVBBTElWRV9JTlRFUlZBTCA9IDQ1MDAwO1xubGV0IFdlYlNvY2tldEltcGwgPSBudWxsO1xuaWYgKHR5cGVvZiBNb3pXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgV2ViU29ja2V0SW1wbCA9IE1veldlYlNvY2tldDtcbn1cbmVsc2UgaWYgKHR5cGVvZiBXZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgV2ViU29ja2V0SW1wbCA9IFdlYlNvY2tldDtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHdlYnNvY2tldCBjb25uZWN0aW9uIHdpdGggdGhlIGdpdmVuIGNhbGxiYWNrcy5cbiAqL1xuY2xhc3MgV2ViU29ja2V0Q29ubmVjdGlvbiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbm5JZCBpZGVudGlmaWVyIGZvciB0aGlzIHRyYW5zcG9ydFxuICAgICAqIEBwYXJhbSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25JZCBUaGUgRmlyZWJhc2UgQXBwIElEIGZvciB0aGlzIHByb2plY3QuXG4gICAgICogQHBhcmFtIGFwcENoZWNrVG9rZW4gVGhlIEFwcCBDaGVjayBUb2tlbiBmb3IgdGhpcyBjbGllbnQuXG4gICAgICogQHBhcmFtIGF1dGhUb2tlbiBUaGUgQXV0aCBUb2tlbiBmb3IgdGhpcyBjbGllbnQuXG4gICAgICogQHBhcmFtIHRyYW5zcG9ydFNlc3Npb25JZCBPcHRpb25hbCB0cmFuc3BvcnRTZXNzaW9uSWQgaWYgdGhpcyBpcyBjb25uZWN0aW5nXG4gICAgICogdG8gYW4gZXhpc3RpbmcgdHJhbnNwb3J0IHNlc3Npb25cbiAgICAgKiBAcGFyYW0gbGFzdFNlc3Npb25JZCBPcHRpb25hbCBsYXN0U2Vzc2lvbklkIGlmIHRoZXJlIHdhcyBhIHByZXZpb3VzXG4gICAgICogY29ubmVjdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5JZCwgcmVwb0luZm8sIGFwcGxpY2F0aW9uSWQsIGFwcENoZWNrVG9rZW4sIGF1dGhUb2tlbiwgdHJhbnNwb3J0U2Vzc2lvbklkLCBsYXN0U2Vzc2lvbklkKSB7XG4gICAgICAgIHRoaXMuY29ubklkID0gY29ubklkO1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uSWQgPSBhcHBsaWNhdGlvbklkO1xuICAgICAgICB0aGlzLmFwcENoZWNrVG9rZW4gPSBhcHBDaGVja1Rva2VuO1xuICAgICAgICB0aGlzLmF1dGhUb2tlbiA9IGF1dGhUb2tlbjtcbiAgICAgICAgdGhpcy5rZWVwYWxpdmVUaW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMuZnJhbWVzID0gbnVsbDtcbiAgICAgICAgdGhpcy50b3RhbEZyYW1lcyA9IDA7XG4gICAgICAgIHRoaXMuYnl0ZXNTZW50ID0gMDtcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkID0gMDtcbiAgICAgICAgdGhpcy5sb2dfID0gbG9nV3JhcHBlcih0aGlzLmNvbm5JZCk7XG4gICAgICAgIHRoaXMuc3RhdHNfID0gc3RhdHNNYW5hZ2VyR2V0Q29sbGVjdGlvbihyZXBvSW5mbyk7XG4gICAgICAgIHRoaXMuY29ublVSTCA9IFdlYlNvY2tldENvbm5lY3Rpb24uY29ubmVjdGlvblVSTF8ocmVwb0luZm8sIHRyYW5zcG9ydFNlc3Npb25JZCwgbGFzdFNlc3Npb25JZCwgYXBwQ2hlY2tUb2tlbiwgYXBwbGljYXRpb25JZCk7XG4gICAgICAgIHRoaXMubm9kZUFkbWluID0gcmVwb0luZm8ubm9kZUFkbWluO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcmVwb0luZm8gLSBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cbiAgICAgKiBAcGFyYW0gdHJhbnNwb3J0U2Vzc2lvbklkIC0gT3B0aW9uYWwgdHJhbnNwb3J0U2Vzc2lvbklkIGlmIHRoaXMgaXMgY29ubmVjdGluZyB0byBhbiBleGlzdGluZyB0cmFuc3BvcnRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblxuICAgICAqIEBwYXJhbSBsYXN0U2Vzc2lvbklkIC0gT3B0aW9uYWwgbGFzdFNlc3Npb25JZCBpZiB0aGVyZSB3YXMgYSBwcmV2aW91cyBjb25uZWN0aW9uXG4gICAgICogQHJldHVybnMgY29ubmVjdGlvbiB1cmxcbiAgICAgKi9cbiAgICBzdGF0aWMgY29ubmVjdGlvblVSTF8ocmVwb0luZm8sIHRyYW5zcG9ydFNlc3Npb25JZCwgbGFzdFNlc3Npb25JZCwgYXBwQ2hlY2tUb2tlbiwgYXBwbGljYXRpb25JZCkge1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSB7fTtcbiAgICAgICAgdXJsUGFyYW1zW1ZFUlNJT05fUEFSQU1dID0gUFJPVE9DT0xfVkVSU0lPTjtcbiAgICAgICAgaWYgKCFpc05vZGVTZGsoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgJiZcbiAgICAgICAgICAgIEZPUkdFX0RPTUFJTl9SRS50ZXN0KGxvY2F0aW9uLmhvc3RuYW1lKSkge1xuICAgICAgICAgICAgdXJsUGFyYW1zW1JFRkVSRVJfUEFSQU1dID0gRk9SR0VfUkVGO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc3BvcnRTZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIHVybFBhcmFtc1tUUkFOU1BPUlRfU0VTU0lPTl9QQVJBTV0gPSB0cmFuc3BvcnRTZXNzaW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RTZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIHVybFBhcmFtc1tMQVNUX1NFU1NJT05fUEFSQU1dID0gbGFzdFNlc3Npb25JZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXBwQ2hlY2tUb2tlbikge1xuICAgICAgICAgICAgdXJsUGFyYW1zW0FQUF9DSEVDS19UT0tFTl9QQVJBTV0gPSBhcHBDaGVja1Rva2VuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcHBsaWNhdGlvbklkKSB7XG4gICAgICAgICAgICB1cmxQYXJhbXNbQVBQTElDQVRJT05fSURfUEFSQU1dID0gYXBwbGljYXRpb25JZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVwb0luZm9Db25uZWN0aW9uVVJMKHJlcG9JbmZvLCBXRUJTT0NLRVQsIHVybFBhcmFtcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvbk1lc3NhZ2UgLSBDYWxsYmFjayB3aGVuIG1lc3NhZ2VzIGFycml2ZVxuICAgICAqIEBwYXJhbSBvbkRpc2Nvbm5lY3QgLSBDYWxsYmFjayB3aXRoIGNvbm5lY3Rpb24gbG9zdC5cbiAgICAgKi9cbiAgICBvcGVuKG9uTWVzc2FnZSwgb25EaXNjb25uZWN0KSB7XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gb25EaXNjb25uZWN0O1xuICAgICAgICB0aGlzLm9uTWVzc2FnZSA9IG9uTWVzc2FnZTtcbiAgICAgICAgdGhpcy5sb2dfKCdXZWJzb2NrZXQgY29ubmVjdGluZyB0byAnICsgdGhpcy5jb25uVVJMKTtcbiAgICAgICAgdGhpcy5ldmVyQ29ubmVjdGVkXyA9IGZhbHNlO1xuICAgICAgICAvLyBBc3N1bWUgZmFpbHVyZSB1bnRpbCBwcm92ZW4gb3RoZXJ3aXNlLlxuICAgICAgICBQZXJzaXN0ZW50U3RvcmFnZS5zZXQoJ3ByZXZpb3VzX3dlYnNvY2tldF9mYWlsdXJlJywgdHJ1ZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9ucztcbiAgICAgICAgICAgIGlmIChpc05vZGVTZGsoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXMubm9kZUFkbWluID8gJ0FkbWluTm9kZScgOiAnTm9kZSc7XG4gICAgICAgICAgICAgICAgLy8gVUEgRm9ybWF0OiBGaXJlYmFzZS88d2lyZV9wcm90b2NvbD4vPHNka192ZXJzaW9uPi88cGxhdGZvcm0+LzxkZXZpY2U+XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBgRmlyZWJhc2UvJHtQUk9UT0NPTF9WRVJTSU9OfS8ke1NES19WRVJTSU9OfS8ke3Byb2Nlc3MucGxhdGZvcm19LyR7ZGV2aWNlfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnWC1GaXJlYmFzZS1HTVBJRCc6IHRoaXMuYXBwbGljYXRpb25JZCB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBJZiB1c2luZyBOb2RlIHdpdGggYWRtaW4gY3JlZHMsIEFwcENoZWNrLXJlbGF0ZWQgY2hlY2tzIGFyZSB1bm5lY2Vzc2FyeS5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgd2Ugc2VuZCB0aGUgY3JlZGVudGlhbHMgaGVyZSBldmVuIGlmIHRoZXkgYXJlbid0IGFkbWluIGNyZWRlbnRpYWxzLCB3aGljaCBpc1xuICAgICAgICAgICAgICAgIC8vIG5vdCBhIHByb2JsZW0uXG4gICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgaGVhZGVyIGlzIGp1c3QgdXNlZCB0byBieXBhc3MgYXBwY2hlY2ssIGFuZCB0aGUgdG9rZW4gc2hvdWxkIHN0aWxsIGJlIHNlbnRcbiAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBvbmNlIGl0IGlzIGVzdGFibGlzaGVkLlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dGhUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0aGlzLmF1dGhUb2tlbn1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHBDaGVja1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1snWC1GaXJlYmFzZS1BcHBDaGVjayddID0gdGhpcy5hcHBDaGVja1Rva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQbHVtYiBhcHByb3ByaWF0ZSBodHRwX3Byb3h5IGVudmlyb25tZW50IHZhcmlhYmxlIGludG8gZmF5ZS13ZWJzb2NrZXQgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgICAgIGNvbnN0IGVudiA9IHByb2Nlc3NbJ2VudiddO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3h5ID0gdGhpcy5jb25uVVJMLmluZGV4T2YoJ3dzczovLycpID09PSAwXG4gICAgICAgICAgICAgICAgICAgID8gZW52WydIVFRQU19QUk9YWSddIHx8IGVudlsnaHR0cHNfcHJveHknXVxuICAgICAgICAgICAgICAgICAgICA6IGVudlsnSFRUUF9QUk9YWSddIHx8IGVudlsnaHR0cF9wcm94eSddO1xuICAgICAgICAgICAgICAgIGlmIChwcm94eSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zWydwcm94eSddID0geyBvcmlnaW46IHByb3h5IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBuZXcgV2ViU29ja2V0SW1wbCh0aGlzLmNvbm5VUkwsIFtdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdFcnJvciBpbnN0YW50aWF0aW5nIFdlYlNvY2tldC4nKTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZS5tZXNzYWdlIHx8IGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXyhlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2VkXygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXlTb2NrLm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnV2Vic29ja2V0IGNvbm5lY3RlZC4nKTtcbiAgICAgICAgICAgIHRoaXMuZXZlckNvbm5lY3RlZF8gPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm15U29jay5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdXZWJzb2NrZXQgY29ubmVjdGlvbiB3YXMgZGlzY29ubmVjdGVkLicpO1xuICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlZF8oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5teVNvY2sub25tZXNzYWdlID0gbSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUluY29taW5nRnJhbWUobSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubXlTb2NrLm9uZXJyb3IgPSBlID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnV2ViU29ja2V0IGVycm9yLiAgQ2xvc2luZyBjb25uZWN0aW9uLicpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZS5tZXNzYWdlIHx8IGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXyhlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2VkXygpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOby1vcCBmb3Igd2Vic29ja2V0cywgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBvbmNlIHRoZSBjb25uZWN0aW9uIGlzIGNvbmZpcm1lZCBhcyBvcGVuXG4gICAgICovXG4gICAgc3RhcnQoKSB7IH1cbiAgICBzdGF0aWMgZm9yY2VEaXNhbGxvdygpIHtcbiAgICAgICAgV2ViU29ja2V0Q29ubmVjdGlvbi5mb3JjZURpc2FsbG93XyA9IHRydWU7XG4gICAgfVxuICAgIHN0YXRpYyBpc0F2YWlsYWJsZSgpIHtcbiAgICAgICAgbGV0IGlzT2xkQW5kcm9pZCA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCkge1xuICAgICAgICAgICAgY29uc3Qgb2xkQW5kcm9pZFJlZ2V4ID0gL0FuZHJvaWQgKFswLTldezAsfVxcLlswLTldezAsfSkvO1xuICAgICAgICAgICAgY29uc3Qgb2xkQW5kcm9pZE1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaChvbGRBbmRyb2lkUmVnZXgpO1xuICAgICAgICAgICAgaWYgKG9sZEFuZHJvaWRNYXRjaCAmJiBvbGRBbmRyb2lkTWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG9sZEFuZHJvaWRNYXRjaFsxXSkgPCA0LjQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNPbGRBbmRyb2lkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICghaXNPbGRBbmRyb2lkICYmXG4gICAgICAgICAgICBXZWJTb2NrZXRJbXBsICE9PSBudWxsICYmXG4gICAgICAgICAgICAhV2ViU29ja2V0Q29ubmVjdGlvbi5mb3JjZURpc2FsbG93Xyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBwcmV2aW91c2x5IGZhaWxlZCB0byBjb25uZWN0IHdpdGggdGhpcyB0cmFuc3BvcnQuXG4gICAgICovXG4gICAgc3RhdGljIHByZXZpb3VzbHlGYWlsZWQoKSB7XG4gICAgICAgIC8vIElmIG91ciBwZXJzaXN0ZW50IHN0b3JhZ2UgaXMgYWN0dWFsbHkgb25seSBpbi1tZW1vcnkgc3RvcmFnZSxcbiAgICAgICAgLy8gd2UgZGVmYXVsdCB0byBhc3N1bWluZyB0aGF0IGl0IHByZXZpb3VzbHkgZmFpbGVkIHRvIGJlIHNhZmUuXG4gICAgICAgIHJldHVybiAoUGVyc2lzdGVudFN0b3JhZ2UuaXNJbk1lbW9yeVN0b3JhZ2UgfHxcbiAgICAgICAgICAgIFBlcnNpc3RlbnRTdG9yYWdlLmdldCgncHJldmlvdXNfd2Vic29ja2V0X2ZhaWx1cmUnKSA9PT0gdHJ1ZSk7XG4gICAgfVxuICAgIG1hcmtDb25uZWN0aW9uSGVhbHRoeSgpIHtcbiAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2UucmVtb3ZlKCdwcmV2aW91c193ZWJzb2NrZXRfZmFpbHVyZScpO1xuICAgIH1cbiAgICBhcHBlbmRGcmFtZV8oZGF0YSkge1xuICAgICAgICB0aGlzLmZyYW1lcy5wdXNoKGRhdGEpO1xuICAgICAgICBpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSB0aGlzLnRvdGFsRnJhbWVzKSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsTWVzcyA9IHRoaXMuZnJhbWVzLmpvaW4oJycpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZXMgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QganNvbk1lc3MgPSBqc29uRXZhbChmdWxsTWVzcyk7XG4gICAgICAgICAgICAvL2hhbmRsZSB0aGUgbWVzc2FnZVxuICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2UoanNvbk1lc3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBmcmFtZUNvdW50IC0gVGhlIG51bWJlciBvZiBmcmFtZXMgd2UgYXJlIGV4cGVjdGluZyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgKi9cbiAgICBoYW5kbGVOZXdGcmFtZUNvdW50XyhmcmFtZUNvdW50KSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBmcmFtZUNvdW50O1xuICAgICAgICB0aGlzLmZyYW1lcyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBwYXJzZSBhIGZyYW1lIGNvdW50IG91dCBvZiBzb21lIHRleHQuIElmIGl0IGNhbid0LCBhc3N1bWVzIGEgdmFsdWUgb2YgMVxuICAgICAqIEByZXR1cm5zIEFueSByZW1haW5pbmcgZGF0YSB0byBiZSBwcm9jZXNzLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vbmVcbiAgICAgKi9cbiAgICBleHRyYWN0RnJhbWVDb3VudF8oZGF0YSkge1xuICAgICAgICBhc3NlcnQodGhpcy5mcmFtZXMgPT09IG51bGwsICdXZSBhbHJlYWR5IGhhdmUgYSBmcmFtZSBidWZmZXInKTtcbiAgICAgICAgLy8gVE9ETzogVGhlIHNlcnZlciBpcyBvbmx5IHN1cHBvc2VkIHRvIHNlbmQgdXAgdG8gOTk5OSBmcmFtZXMgKGkuZS4gbGVuZ3RoIDw9IDQpLCBidXQgdGhhdCBpc24ndCBiZWluZyBlbmZvcmNlZFxuICAgICAgICAvLyBjdXJyZW50bHkuICBTbyBhbGxvd2luZyBsYXJnZXIgZnJhbWUgY291bnRzIChsZW5ndGggPD0gNikuICBTZWUgaHR0cHM6Ly9hcHAuYXNhbmEuY29tLzAvc2VhcmNoLzg2ODg1OTg5OTgzODAvODIzNzYwODA0MjUwOFxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPD0gNikge1xuICAgICAgICAgICAgY29uc3QgZnJhbWVDb3VudCA9IE51bWJlcihkYXRhKTtcbiAgICAgICAgICAgIGlmICghaXNOYU4oZnJhbWVDb3VudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5ld0ZyYW1lQ291bnRfKGZyYW1lQ291bnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFuZGxlTmV3RnJhbWVDb3VudF8oMSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgd2Vic29ja2V0IGZyYW1lIHRoYXQgaGFzIGFycml2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAqIEBwYXJhbSBtZXNzIC0gVGhlIGZyYW1lIGRhdGFcbiAgICAgKi9cbiAgICBoYW5kbGVJbmNvbWluZ0ZyYW1lKG1lc3MpIHtcbiAgICAgICAgaWYgKHRoaXMubXlTb2NrID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIENocm9tZSBhcHBhcmVudGx5IGRlbGl2ZXJzIGluY29taW5nIHBhY2tldHMgZXZlbiBhZnRlciB3ZSAuY2xvc2UoKSB0aGUgY29ubmVjdGlvbiBzb21ldGltZXMuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IG1lc3NbJ2RhdGEnXTtcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKCdieXRlc19yZWNlaXZlZCcsIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5yZXNldEtlZXBBbGl2ZSgpO1xuICAgICAgICBpZiAodGhpcy5mcmFtZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHdlJ3JlIGJ1ZmZlcmluZ1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRGcmFtZV8oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0cnkgdG8gcGFyc2Ugb3V0IGEgZnJhbWUgY291bnQsIG90aGVyd2lzZSwgYXNzdW1lIDEgYW5kIHByb2Nlc3MgaXRcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0RhdGEgPSB0aGlzLmV4dHJhY3RGcmFtZUNvdW50XyhkYXRhKTtcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdEYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRGcmFtZV8ocmVtYWluaW5nRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHNlcnZlclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIEpTT04gb2JqZWN0IHRvIHRyYW5zbWl0XG4gICAgICovXG4gICAgc2VuZChkYXRhKSB7XG4gICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmUoKTtcbiAgICAgICAgY29uc3QgZGF0YVN0ciA9IHN0cmluZ2lmeShkYXRhKTtcbiAgICAgICAgdGhpcy5ieXRlc1NlbnQgKz0gZGF0YVN0ci5sZW5ndGg7XG4gICAgICAgIHRoaXMuc3RhdHNfLmluY3JlbWVudENvdW50ZXIoJ2J5dGVzX3NlbnQnLCBkYXRhU3RyLmxlbmd0aCk7XG4gICAgICAgIC8vV2UgY2FuIG9ubHkgZml0IGEgY2VydGFpbiBhbW91bnQgaW4gZWFjaCB3ZWJzb2NrZXQgZnJhbWUsIHNvIHdlIG5lZWQgdG8gc3BsaXQgdGhpcyByZXF1ZXN0XG4gICAgICAgIC8vdXAgaW50byBtdWx0aXBsZSBwaWVjZXMgaWYgaXQgZG9lc24ndCBmaXQgaW4gb25lIHJlcXVlc3QuXG4gICAgICAgIGNvbnN0IGRhdGFTZWdzID0gc3BsaXRTdHJpbmdCeVNpemUoZGF0YVN0ciwgV0VCU09DS0VUX01BWF9GUkFNRV9TSVpFKTtcbiAgICAgICAgLy9TZW5kIHRoZSBsZW5ndGggaGVhZGVyXG4gICAgICAgIGlmIChkYXRhU2Vncy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRTdHJpbmdfKFN0cmluZyhkYXRhU2Vncy5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICAvL1NlbmQgdGhlIGFjdHVhbCBkYXRhIGluIHNlZ21lbnRzLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFTZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRTdHJpbmdfKGRhdGFTZWdzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaHV0ZG93bl8oKSB7XG4gICAgICAgIHRoaXMuaXNDbG9zZWRfID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMua2VlcGFsaXZlVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVUaW1lcik7XG4gICAgICAgICAgICB0aGlzLmtlZXBhbGl2ZVRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5teVNvY2spIHtcbiAgICAgICAgICAgIHRoaXMubXlTb2NrLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLm15U29jayA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25DbG9zZWRfKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWRfKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1dlYlNvY2tldCBpcyBjbG9zaW5nIGl0c2VsZicpO1xuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgYW4gaW50ZXJuYWwgY2xvc2UsIHRyaWdnZXIgdGhlIGNsb3NlIGxpc3RlbmVyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkRpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdCh0aGlzLmV2ZXJDb25uZWN0ZWRfKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0ZXJuYWwtZmFjaW5nIGNsb3NlIGhhbmRsZXIuXG4gICAgICogQ2xvc2UgdGhlIHdlYnNvY2tldCBhbmQga2lsbCB0aGUgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdXZWJTb2NrZXQgaXMgYmVpbmcgY2xvc2VkJyk7XG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEtpbGwgdGhlIGN1cnJlbnQga2VlcGFsaXZlIHRpbWVyIGFuZCBzdGFydCBhIG5ldyBvbmUsIHRvIGVuc3VyZSB0aGF0IGl0IGFsd2F5cyBmaXJlcyBOIHNlY29uZHMgYWZ0ZXJcbiAgICAgKiB0aGUgbGFzdCBhY3Rpdml0eS5cbiAgICAgKi9cbiAgICByZXNldEtlZXBBbGl2ZSgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmtlZXBhbGl2ZVRpbWVyKTtcbiAgICAgICAgdGhpcy5rZWVwYWxpdmVUaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIC8vSWYgdGhlcmUgaGFzIGJlZW4gbm8gd2Vic29ja2V0IGFjdGl2aXR5IGZvciBhIHdoaWxlLCBzZW5kIGEgbm8tb3BcbiAgICAgICAgICAgIGlmICh0aGlzLm15U29jaykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN0cmluZ18oJzAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmUoKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIH0sIE1hdGguZmxvb3IoV0VCU09DS0VUX0tFRVBBTElWRV9JTlRFUlZBTCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgc3RyaW5nIG92ZXIgdGhlIHdlYnNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgdG8gc2VuZC5cbiAgICAgKi9cbiAgICBzZW5kU3RyaW5nXyhzdHIpIHtcbiAgICAgICAgLy8gRmlyZWZveCBzZWVtcyB0byBzb21ldGltZXMgdGhyb3cgZXhjZXB0aW9ucyAoTlNfRVJST1JfVU5FWFBFQ1RFRCkgZnJvbSB3ZWJzb2NrZXQgLnNlbmQoKVxuICAgICAgICAvLyBjYWxscyBmb3Igc29tZSB1bmtub3duIHJlYXNvbi4gIFdlIHRyZWF0IHRoZXNlIGFzIGFuIGVycm9yIGFuZCBkaXNjb25uZWN0LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9hcHAuYXNhbmEuY29tLzAvNTg5MjYxMTE0MDIyOTIvNjgwMjEzNDAyNTA0MTBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMubXlTb2NrLnNlbmQoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdFeGNlcHRpb24gdGhyb3duIGZyb20gV2ViU29ja2V0LnNlbmQoKTonLCBlLm1lc3NhZ2UgfHwgZS5kYXRhLCAnQ2xvc2luZyBjb25uZWN0aW9uLicpO1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm9uQ2xvc2VkXy5iaW5kKHRoaXMpLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogTnVtYmVyIG9mIHJlc3BvbnNlIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgY29ubmVjdGlvbiBcImhlYWx0aHkuXCJcbiAqL1xuV2ViU29ja2V0Q29ubmVjdGlvbi5yZXNwb25zZXNSZXF1aXJlZFRvQmVIZWFsdGh5ID0gMjtcbi8qKlxuICogVGltZSB0byB3YWl0IGZvciB0aGUgY29ubmVjdGlvbiB0ZSBiZWNvbWUgaGVhbHRoeSBiZWZvcmUgZ2l2aW5nIHVwLlxuICovXG5XZWJTb2NrZXRDb25uZWN0aW9uLmhlYWx0aHlUaW1lb3V0ID0gMzAwMDA7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEN1cnJlbnRseSBzaW1wbGlzdGljLCB0aGlzIGNsYXNzIG1hbmFnZXMgd2hhdCB0cmFuc3BvcnQgYSBDb25uZWN0aW9uIHNob3VsZCB1c2UgYXQgdmFyaW91cyBzdGFnZXMgb2YgaXRzXG4gKiBsaWZlY3ljbGUuXG4gKlxuICogSXQgc3RhcnRzIHdpdGggbG9uZ3BvbGxpbmcgaW4gYSBicm93c2VyLCBhbmQgaHR0cHBvbGxpbmcgb24gbm9kZS4gSXQgdGhlbiB1cGdyYWRlcyB0byB3ZWJzb2NrZXRzIGlmXG4gKiB0aGV5IGFyZSBhdmFpbGFibGUuXG4gKi9cbmNsYXNzIFRyYW5zcG9ydE1hbmFnZXIge1xuICAgIHN0YXRpYyBnZXQgQUxMX1RSQU5TUE9SVFMoKSB7XG4gICAgICAgIHJldHVybiBbQnJvd3NlclBvbGxDb25uZWN0aW9uLCBXZWJTb2NrZXRDb25uZWN0aW9uXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRyYW5zcG9ydCBoYXMgYmVlbiBzZWxlY3RlZCB0byBlbnN1cmUgV2ViU29ja2V0Q29ubmVjdGlvbiBvciBCcm93c2VyUG9sbENvbm5lY3Rpb24gYXJlIG5vdCBjYWxsZWQgYWZ0ZXJcbiAgICAgKiBUcmFuc3BvcnRNYW5hZ2VyIGhhcyBhbHJlYWR5IHNldCB1cCB0cmFuc3BvcnRzX1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSVNfVFJBTlNQT1JUX0lOSVRJQUxJWkVEKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxUcmFuc3BvcnRJbml0aWFsaXplZF87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXBvSW5mbyAtIE1ldGFkYXRhIGFyb3VuZCB0aGUgbmFtZXNwYWNlIHdlJ3JlIGNvbm5lY3RpbmcgdG9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXBvSW5mbykge1xuICAgICAgICB0aGlzLmluaXRUcmFuc3BvcnRzXyhyZXBvSW5mbyk7XG4gICAgfVxuICAgIGluaXRUcmFuc3BvcnRzXyhyZXBvSW5mbykge1xuICAgICAgICBjb25zdCBpc1dlYlNvY2tldHNBdmFpbGFibGUgPSBXZWJTb2NrZXRDb25uZWN0aW9uICYmIFdlYlNvY2tldENvbm5lY3Rpb25bJ2lzQXZhaWxhYmxlJ10oKTtcbiAgICAgICAgbGV0IGlzU2tpcFBvbGxDb25uZWN0aW9uID0gaXNXZWJTb2NrZXRzQXZhaWxhYmxlICYmICFXZWJTb2NrZXRDb25uZWN0aW9uLnByZXZpb3VzbHlGYWlsZWQoKTtcbiAgICAgICAgaWYgKHJlcG9JbmZvLndlYlNvY2tldE9ubHkpIHtcbiAgICAgICAgICAgIGlmICghaXNXZWJTb2NrZXRzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgd2FybihcIndzczovLyBVUkwgdXNlZCwgYnV0IGJyb3dzZXIgaXNuJ3Qga25vd24gdG8gc3VwcG9ydCB3ZWJzb2NrZXRzLiAgVHJ5aW5nIGFueXdheS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc1NraXBQb2xsQ29ubmVjdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU2tpcFBvbGxDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHNfID0gW1dlYlNvY2tldENvbm5lY3Rpb25dO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNwb3J0cyA9ICh0aGlzLnRyYW5zcG9ydHNfID0gW10pO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc3BvcnQgb2YgVHJhbnNwb3J0TWFuYWdlci5BTExfVFJBTlNQT1JUUykge1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnQgJiYgdHJhbnNwb3J0Wydpc0F2YWlsYWJsZSddKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cy5wdXNoKHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVHJhbnNwb3J0TWFuYWdlci5nbG9iYWxUcmFuc3BvcnRJbml0aWFsaXplZF8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGluaXRpYWwgdHJhbnNwb3J0IHRvIHVzZVxuICAgICAqL1xuICAgIGluaXRpYWxUcmFuc3BvcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydHNfLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydHNfWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0cmFuc3BvcnRzIGF2YWlsYWJsZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIG5leHQgdHJhbnNwb3J0LCBvciBudWxsXG4gICAgICovXG4gICAgdXBncmFkZVRyYW5zcG9ydCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c18ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0c19bMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIEtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgdGhlIFRyYW5zcG9ydE1hbmFnZXIgaGFzIGFscmVhZHkgY2hvc2VuIGEgdHJhbnNwb3J0IHRvIHVzZVxuVHJhbnNwb3J0TWFuYWdlci5nbG9iYWxUcmFuc3BvcnRJbml0aWFsaXplZF8gPSBmYWxzZTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEFib3J0IHVwZ3JhZGUgYXR0ZW1wdCBpZiBpdCB0YWtlcyBsb25nZXIgdGhhbiA2MHMuXG5jb25zdCBVUEdSQURFX1RJTUVPVVQgPSA2MDAwMDtcbi8vIEZvciBzb21lIHRyYW5zcG9ydHMgKFdlYlNvY2tldHMpLCB3ZSBuZWVkIHRvIFwidmFsaWRhdGVcIiB0aGUgdHJhbnNwb3J0IGJ5IGV4Y2hhbmdpbmcgYSBmZXcgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcy5cbi8vIElmIHdlIGhhdmVuJ3Qgc2VudCBlbm91Z2ggcmVxdWVzdHMgd2l0aGluIDVzLCB3ZSdsbCBzdGFydCBzZW5kaW5nIG5vb3AgcGluZyByZXF1ZXN0cy5cbmNvbnN0IERFTEFZX0JFRk9SRV9TRU5ESU5HX0VYVFJBX1JFUVVFU1RTID0gNTAwMDtcbi8vIElmIHRoZSBpbml0aWFsIGRhdGEgc2VudCB0cmlnZ2VycyBhIGxvdCBvZiBiYW5kd2lkdGggKGkuZS4gaXQncyBhIGxhcmdlIHB1dCBvciBhIGxpc3RlbiBmb3IgYSBsYXJnZSBhbW91bnQgb2YgZGF0YSlcbi8vIHRoZW4gd2UgbWF5IG5vdCBiZSBhYmxlIHRvIGV4Y2hhbmdlIG91ciBwaW5nL3BvbmcgcmVxdWVzdHMgd2l0aGluIHRoZSBoZWFsdGh5IHRpbWVvdXQuICBTbyBpZiB3ZSByZWFjaCB0aGUgdGltZW91dFxuLy8gYnV0IHdlJ3ZlIHNlbnQvcmVjZWl2ZWQgZW5vdWdoIGJ5dGVzLCB3ZSBkb24ndCBjYW5jZWwgdGhlIGNvbm5lY3Rpb24uXG5jb25zdCBCWVRFU19TRU5UX0hFQUxUSFlfT1ZFUlJJREUgPSAxMCAqIDEwMjQ7XG5jb25zdCBCWVRFU19SRUNFSVZFRF9IRUFMVEhZX09WRVJSSURFID0gMTAwICogMTAyNDtcbmNvbnN0IE1FU1NBR0VfVFlQRSA9ICd0JztcbmNvbnN0IE1FU1NBR0VfREFUQSA9ICdkJztcbmNvbnN0IENPTlRST0xfU0hVVERPV04gPSAncyc7XG5jb25zdCBDT05UUk9MX1JFU0VUID0gJ3InO1xuY29uc3QgQ09OVFJPTF9FUlJPUiA9ICdlJztcbmNvbnN0IENPTlRST0xfUE9ORyA9ICdvJztcbmNvbnN0IFNXSVRDSF9BQ0sgPSAnYSc7XG5jb25zdCBFTkRfVFJBTlNNSVNTSU9OID0gJ24nO1xuY29uc3QgUElORyA9ICdwJztcbmNvbnN0IFNFUlZFUl9IRUxMTyA9ICdoJztcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWFsLXRpbWUgY29ubmVjdGlvbiB0byB0aGUgc2VydmVyIHVzaW5nIHdoaWNoZXZlciBtZXRob2Qgd29ya3NcbiAqIGJlc3QgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqL1xuY2xhc3MgQ29ubmVjdGlvbiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGlkIC0gYW4gaWQgZm9yIHRoaXMgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSByZXBvSW5mb18gLSB0aGUgaW5mbyBmb3IgdGhlIGVuZHBvaW50IHRvIGNvbm5lY3QgdG9cbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25JZF8gLSB0aGUgRmlyZWJhc2UgQXBwIElEIGZvciB0aGlzIHByb2plY3RcbiAgICAgKiBAcGFyYW0gYXBwQ2hlY2tUb2tlbl8gLSBUaGUgQXBwIENoZWNrIFRva2VuIGZvciB0aGlzIGRldmljZS5cbiAgICAgKiBAcGFyYW0gYXV0aFRva2VuXyAtIFRoZSBhdXRoIHRva2VuIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogQHBhcmFtIG9uTWVzc2FnZV8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gYSBzZXJ2ZXItcHVzaCBtZXNzYWdlIGFycml2ZXNcbiAgICAgKiBAcGFyYW0gb25SZWFkeV8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhpcyBjb25uZWN0aW9uIGlzIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICogQHBhcmFtIG9uRGlzY29ubmVjdF8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gYSBjb25uZWN0aW9uIHdhcyBsb3N0XG4gICAgICogQHBhcmFtIG9uS2lsbF8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhpcyBjb25uZWN0aW9uIGhhcyBwZXJtYW5lbnRseSBzaHV0IGRvd24uXG4gICAgICogQHBhcmFtIGxhc3RTZXNzaW9uSWQgLSBsYXN0IHNlc3Npb24gaWQgaW4gcGVyc2lzdGVudCBjb25uZWN0aW9uLiBpcyB1c2VkIHRvIGNsZWFuIHVwIG9sZCBzZXNzaW9uIGluIHJlYWwtdGltZSBzZXJ2ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZCwgcmVwb0luZm9fLCBhcHBsaWNhdGlvbklkXywgYXBwQ2hlY2tUb2tlbl8sIGF1dGhUb2tlbl8sIG9uTWVzc2FnZV8sIG9uUmVhZHlfLCBvbkRpc2Nvbm5lY3RfLCBvbktpbGxfLCBsYXN0U2Vzc2lvbklkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5yZXBvSW5mb18gPSByZXBvSW5mb187XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25JZF8gPSBhcHBsaWNhdGlvbklkXztcbiAgICAgICAgdGhpcy5hcHBDaGVja1Rva2VuXyA9IGFwcENoZWNrVG9rZW5fO1xuICAgICAgICB0aGlzLmF1dGhUb2tlbl8gPSBhdXRoVG9rZW5fO1xuICAgICAgICB0aGlzLm9uTWVzc2FnZV8gPSBvbk1lc3NhZ2VfO1xuICAgICAgICB0aGlzLm9uUmVhZHlfID0gb25SZWFkeV87XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0XyA9IG9uRGlzY29ubmVjdF87XG4gICAgICAgIHRoaXMub25LaWxsXyA9IG9uS2lsbF87XG4gICAgICAgIHRoaXMubGFzdFNlc3Npb25JZCA9IGxhc3RTZXNzaW9uSWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbkNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzID0gW107XG4gICAgICAgIHRoaXMuc3RhdGVfID0gMCAvKiBSZWFsdGltZVN0YXRlLkNPTk5FQ1RJTkcgKi87XG4gICAgICAgIHRoaXMubG9nXyA9IGxvZ1dyYXBwZXIoJ2M6JyArIHRoaXMuaWQgKyAnOicpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydE1hbmFnZXJfID0gbmV3IFRyYW5zcG9ydE1hbmFnZXIocmVwb0luZm9fKTtcbiAgICAgICAgdGhpcy5sb2dfKCdDb25uZWN0aW9uIGNyZWF0ZWQnKTtcbiAgICAgICAgdGhpcy5zdGFydF8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgY29ubmVjdGlvbiBhdHRlbXB0XG4gICAgICovXG4gICAgc3RhcnRfKCkge1xuICAgICAgICBjb25zdCBjb25uID0gdGhpcy50cmFuc3BvcnRNYW5hZ2VyXy5pbml0aWFsVHJhbnNwb3J0KCk7XG4gICAgICAgIHRoaXMuY29ubl8gPSBuZXcgY29ubih0aGlzLm5leHRUcmFuc3BvcnRJZF8oKSwgdGhpcy5yZXBvSW5mb18sIHRoaXMuYXBwbGljYXRpb25JZF8sIHRoaXMuYXBwQ2hlY2tUb2tlbl8sIHRoaXMuYXV0aFRva2VuXywgbnVsbCwgdGhpcy5sYXN0U2Vzc2lvbklkKTtcbiAgICAgICAgLy8gRm9yIGNlcnRhaW4gdHJhbnNwb3J0cyAoV2ViU29ja2V0cyksIHdlIG5lZWQgdG8gc2VuZCBhbmQgcmVjZWl2ZSBzZXZlcmFsIG1lc3NhZ2VzIGJhY2sgYW5kIGZvcnRoIGJlZm9yZSB3ZVxuICAgICAgICAvLyBjYW4gY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBoZWFsdGh5LlxuICAgICAgICB0aGlzLnByaW1hcnlSZXNwb25zZXNSZXF1aXJlZF8gPSBjb25uWydyZXNwb25zZXNSZXF1aXJlZFRvQmVIZWFsdGh5J10gfHwgMDtcbiAgICAgICAgY29uc3Qgb25NZXNzYWdlUmVjZWl2ZWQgPSB0aGlzLmNvbm5SZWNlaXZlcl8odGhpcy5jb25uXyk7XG4gICAgICAgIGNvbnN0IG9uQ29ubmVjdGlvbkxvc3QgPSB0aGlzLmRpc2Nvbm5SZWNlaXZlcl8odGhpcy5jb25uXyk7XG4gICAgICAgIHRoaXMudHhfID0gdGhpcy5jb25uXztcbiAgICAgICAgdGhpcy5yeF8gPSB0aGlzLmNvbm5fO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gZmFsc2U7XG4gICAgICAgIC8qXG4gICAgICAgICAqIEZpcmVmb3ggZG9lc24ndCBsaWtlIHdoZW4gY29kZSBmcm9tIG9uZSBpZnJhbWUgdHJpZXMgdG8gY3JlYXRlIGFub3RoZXIgaWZyYW1lIGJ5IHdheSBvZiB0aGUgcGFyZW50IGZyYW1lLlxuICAgICAgICAgKiBUaGlzIGNhbiBvY2N1ciBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0LCBpLmUuIHdlIGd1ZXNzZWQgd3Jvbmcgb24gd2hhdCBzZXJ2ZXIgdG8gY29ubmVjdCB0byBhbmQgcmVjZWl2ZWQgYSByZXNldC5cbiAgICAgICAgICogU29tZWhvdywgc2V0VGltZW91dCBzZWVtcyB0byBtYWtlIHRoaXMgb2suIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlIGZyb20gYSBzZWN1cml0eSBwZXJzcGVjdGl2ZSwgc2luY2UgeW91IHNob3VsZFxuICAgICAgICAgKiBzdGlsbCBoYXZlIHRoZSBjb250ZXh0IG9mIHlvdXIgb3JpZ2luYXRpbmcgZnJhbWUuXG4gICAgICAgICAqL1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vIHRoaXMuY29ubl8gZ2V0cyBzZXQgdG8gbnVsbCBpbiBzb21lIG9mIHRoZSB0ZXN0cy4gQ2hlY2sgdG8gbWFrZSBzdXJlIGl0IHN0aWxsIGV4aXN0cyBiZWZvcmUgdXNpbmcgaXRcbiAgICAgICAgICAgIHRoaXMuY29ubl8gJiYgdGhpcy5jb25uXy5vcGVuKG9uTWVzc2FnZVJlY2VpdmVkLCBvbkNvbm5lY3Rpb25Mb3N0KTtcbiAgICAgICAgfSwgTWF0aC5mbG9vcigwKSk7XG4gICAgICAgIGNvbnN0IGhlYWx0aHlUaW1lb3V0TVMgPSBjb25uWydoZWFsdGh5VGltZW91dCddIHx8IDA7XG4gICAgICAgIGlmIChoZWFsdGh5VGltZW91dE1TID4gMCkge1xuICAgICAgICAgICAgdGhpcy5oZWFsdGh5VGltZW91dF8gPSBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhbHRoeVRpbWVvdXRfID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIZWFsdGh5Xykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25uXyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uXy5ieXRlc1JlY2VpdmVkID4gQllURVNfUkVDRUlWRURfSEVBTFRIWV9PVkVSUklERSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dfKCdDb25uZWN0aW9uIGV4Y2VlZGVkIGhlYWx0aHkgdGltZW91dCBidXQgaGFzIHJlY2VpdmVkICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubl8uYnl0ZXNSZWNlaXZlZCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBieXRlcy4gIE1hcmtpbmcgY29ubmVjdGlvbiBoZWFsdGh5LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubl8ubWFya0Nvbm5lY3Rpb25IZWFsdGh5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uXyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uXy5ieXRlc1NlbnQgPiBCWVRFU19TRU5UX0hFQUxUSFlfT1ZFUlJJREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nXygnQ29ubmVjdGlvbiBleGNlZWRlZCBoZWFsdGh5IHRpbWVvdXQgYnV0IGhhcyBzZW50ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubl8uYnl0ZXNTZW50ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGJ5dGVzLiAgTGVhdmluZyBjb25uZWN0aW9uIGFsaXZlLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgZG9uJ3Qgd2FudCB0byBtYXJrIGl0IGhlYWx0aHksIHNpbmNlIHdlIGhhdmUgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIGJ5dGVzIGhhdmUgbWFkZSBpdCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlci5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9nXygnQ2xvc2luZyB1bmhlYWx0aHkgY29ubmVjdGlvbiBhZnRlciB0aW1lb3V0LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICB9LCBNYXRoLmZsb29yKGhlYWx0aHlUaW1lb3V0TVMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXh0VHJhbnNwb3J0SWRfKCkge1xuICAgICAgICByZXR1cm4gJ2M6JyArIHRoaXMuaWQgKyAnOicgKyB0aGlzLmNvbm5lY3Rpb25Db3VudCsrO1xuICAgIH1cbiAgICBkaXNjb25uUmVjZWl2ZXJfKGNvbm4pIHtcbiAgICAgICAgcmV0dXJuIGV2ZXJDb25uZWN0ZWQgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbm4gPT09IHRoaXMuY29ubl8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkxvc3RfKGV2ZXJDb25uZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29ubiA9PT0gdGhpcy5zZWNvbmRhcnlDb25uXykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnU2Vjb25kYXJ5IGNvbm5lY3Rpb24gbG9zdC4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU2Vjb25kYXJ5Q29ubmVjdGlvbkxvc3RfKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ2Nsb3NpbmcgYW4gb2xkIGNvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29ublJlY2VpdmVyXyhjb25uKSB7XG4gICAgICAgIHJldHVybiAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVfICE9PSAyIC8qIFJlYWx0aW1lU3RhdGUuRElTQ09OTkVDVEVEICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm4gPT09IHRoaXMucnhfKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25QcmltYXJ5TWVzc2FnZVJlY2VpdmVkXyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29ubiA9PT0gdGhpcy5zZWNvbmRhcnlDb25uXykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2Vjb25kYXJ5TWVzc2FnZVJlY2VpdmVkXyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nXygnbWVzc2FnZSBvbiBvbGQgY29ubmVjdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFNc2cgLSBBbiBhcmJpdHJhcnkgZGF0YSBtZXNzYWdlIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlclxuICAgICAqL1xuICAgIHNlbmRSZXF1ZXN0KGRhdGFNc2cpIHtcbiAgICAgICAgLy8gd3JhcCBpbiBhIGRhdGEgbWVzc2FnZSBlbnZlbG9wZSBhbmQgc2VuZCBpdCBvblxuICAgICAgICBjb25zdCBtc2cgPSB7IHQ6ICdkJywgZDogZGF0YU1zZyB9O1xuICAgICAgICB0aGlzLnNlbmREYXRhXyhtc2cpO1xuICAgIH1cbiAgICB0cnlDbGVhbnVwQ29ubmVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMudHhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fICYmIHRoaXMucnhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ2NsZWFuaW5nIHVwIGFuZCBwcm9tb3RpbmcgYSBjb25uZWN0aW9uOiAnICsgdGhpcy5zZWNvbmRhcnlDb25uXy5jb25uSWQpO1xuICAgICAgICAgICAgdGhpcy5jb25uXyA9IHRoaXMuc2Vjb25kYXJ5Q29ubl87XG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fID0gbnVsbDtcbiAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIgd2lsbCBzaHV0ZG93biB0aGUgb2xkIGNvbm5lY3Rpb25cbiAgICAgICAgfVxuICAgIH1cbiAgICBvblNlY29uZGFyeUNvbnRyb2xfKGNvbnRyb2xEYXRhKSB7XG4gICAgICAgIGlmIChNRVNTQUdFX1RZUEUgaW4gY29udHJvbERhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNtZCA9IGNvbnRyb2xEYXRhW01FU1NBR0VfVFlQRV07XG4gICAgICAgICAgICBpZiAoY21kID09PSBTV0lUQ0hfQUNLKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGdyYWRlSWZTZWNvbmRhcnlIZWFsdGh5XygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1JFU0VUKSB7XG4gICAgICAgICAgICAgICAgLy8gTW9zdCBsaWtlbHkgdGhlIHNlc3Npb24gd2Fzbid0IHZhbGlkLiBBYmFuZG9uIHRoZSBzd2l0Y2ggYXR0ZW1wdFxuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnR290IGEgcmVzZXQgb24gc2Vjb25kYXJ5LCBjbG9zaW5nIGl0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgYWxyZWFkeSB1c2luZyB0aGlzIGNvbm5lY3Rpb24gZm9yIHNvbWV0aGluZywgdGhhbiB3ZSBuZWVkIHRvIGZ1bGx5IGNsb3NlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbWQgPT09IENPTlRST0xfUE9ORykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnZ290IHBvbmcgb24gc2Vjb25kYXJ5LicpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfLS07XG4gICAgICAgICAgICAgICAgdGhpcy51cGdyYWRlSWZTZWNvbmRhcnlIZWFsdGh5XygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uU2Vjb25kYXJ5TWVzc2FnZVJlY2VpdmVkXyhwYXJzZWREYXRhKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gcmVxdWlyZUtleSgndCcsIHBhcnNlZERhdGEpO1xuICAgICAgICBjb25zdCBkYXRhID0gcmVxdWlyZUtleSgnZCcsIHBhcnNlZERhdGEpO1xuICAgICAgICBpZiAobGF5ZXIgPT09ICdjJykge1xuICAgICAgICAgICAgdGhpcy5vblNlY29uZGFyeUNvbnRyb2xfKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxheWVyID09PSAnZCcpIHtcbiAgICAgICAgICAgIC8vIGdvdCBhIGRhdGEgbWVzc2FnZSwgYnV0IHdlJ3JlIHN0aWxsIHNlY29uZCBjb25uZWN0aW9uLiBOZWVkIHRvIGJ1ZmZlciBpdCB1cFxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzLnB1c2goZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJvdG9jb2wgbGF5ZXI6ICcgKyBsYXllcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBncmFkZUlmU2Vjb25kYXJ5SGVhbHRoeV8oKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY29uZGFyeVJlc3BvbnNlc1JlcXVpcmVkXyA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1NlY29uZGFyeSBjb25uZWN0aW9uIGlzIGhlYWx0aHkuJyk7XG4gICAgICAgICAgICB0aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5tYXJrQ29ubmVjdGlvbkhlYWx0aHkoKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2VlZFdpdGhVcGdyYWRlXygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gU2VuZCBhIHBpbmcgdG8gbWFrZSBzdXJlIHRoZSBjb25uZWN0aW9uIGlzIGhlYWx0aHkuXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ3NlbmRpbmcgcGluZyBvbiBzZWNvbmRhcnkuJyk7XG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLnNlbmQoeyB0OiAnYycsIGQ6IHsgdDogUElORywgZDoge30gfSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZWVkV2l0aFVwZ3JhZGVfKCkge1xuICAgICAgICAvLyB0ZWxsIHRoaXMgY29ubmVjdGlvbiB0byBjb25zaWRlciBpdHNlbGYgb3BlblxuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLnN0YXJ0KCk7XG4gICAgICAgIC8vIHNlbmQgYWNrXG4gICAgICAgIHRoaXMubG9nXygnc2VuZGluZyBjbGllbnQgYWNrIG9uIHNlY29uZGFyeScpO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLnNlbmQoeyB0OiAnYycsIGQ6IHsgdDogU1dJVENIX0FDSywgZDoge30gfSB9KTtcbiAgICAgICAgLy8gc2VuZCBlbmQgcGFja2V0IG9uIHByaW1hcnkgdHJhbnNwb3J0LCBzd2l0Y2ggdG8gc2VuZGluZyBvbiB0aGlzIG9uZVxuICAgICAgICAvLyBjYW4gcmVjZWl2ZSBvbiB0aGlzIG9uZSwgYnVmZmVyIHJlc3BvbnNlcyB1bnRpbCBlbmQgcmVjZWl2ZWQgb24gcHJpbWFyeSB0cmFuc3BvcnRcbiAgICAgICAgdGhpcy5sb2dfKCdFbmRpbmcgdHJhbnNtaXNzaW9uIG9uIHByaW1hcnknKTtcbiAgICAgICAgdGhpcy5jb25uXy5zZW5kKHsgdDogJ2MnLCBkOiB7IHQ6IEVORF9UUkFOU01JU1NJT04sIGQ6IHt9IH0gfSk7XG4gICAgICAgIHRoaXMudHhfID0gdGhpcy5zZWNvbmRhcnlDb25uXztcbiAgICAgICAgdGhpcy50cnlDbGVhbnVwQ29ubmVjdGlvbigpO1xuICAgIH1cbiAgICBvblByaW1hcnlNZXNzYWdlUmVjZWl2ZWRfKHBhcnNlZERhdGEpIHtcbiAgICAgICAgLy8gTXVzdCByZWZlciB0byBwYXJzZWREYXRhIHByb3BlcnRpZXMgaW4gcXVvdGVzLCBzbyBjbG9zdXJlIGRvZXNuJ3QgdG91Y2ggdGhlbS5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSByZXF1aXJlS2V5KCd0JywgcGFyc2VkRGF0YSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXF1aXJlS2V5KCdkJywgcGFyc2VkRGF0YSk7XG4gICAgICAgIGlmIChsYXllciA9PT0gJ2MnKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ29udHJvbF8oZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGF5ZXIgPT09ICdkJykge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGFNZXNzYWdlXyhkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRhdGFNZXNzYWdlXyhtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMub25QcmltYXJ5UmVzcG9uc2VfKCk7XG4gICAgICAgIC8vIFdlIGRvbid0IGRvIGFueXRoaW5nIHdpdGggZGF0YSBtZXNzYWdlcywganVzdCBraWNrIHRoZW0gdXAgYSBsZXZlbFxuICAgICAgICB0aGlzLm9uTWVzc2FnZV8obWVzc2FnZSk7XG4gICAgfVxuICAgIG9uUHJpbWFyeVJlc3BvbnNlXygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSGVhbHRoeV8pIHtcbiAgICAgICAgICAgIHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXy0tO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKCdQcmltYXJ5IGNvbm5lY3Rpb24gaXMgaGVhbHRoeS4nKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubl8ubWFya0Nvbm5lY3Rpb25IZWFsdGh5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Db250cm9sXyhjb250cm9sRGF0YSkge1xuICAgICAgICBjb25zdCBjbWQgPSByZXF1aXJlS2V5KE1FU1NBR0VfVFlQRSwgY29udHJvbERhdGEpO1xuICAgICAgICBpZiAoTUVTU0FHRV9EQVRBIGluIGNvbnRyb2xEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gY29udHJvbERhdGFbTUVTU0FHRV9EQVRBXTtcbiAgICAgICAgICAgIGlmIChjbWQgPT09IFNFUlZFUl9IRUxMTykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRzaGFrZVBheWxvYWQgPSBPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXBvSW5mb18uaXNVc2luZ0VtdWxhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwb24gY29ubmVjdGluZywgdGhlIGVtdWxhdG9yIHdpbGwgcGFzcyB0aGUgaG9zdG5hbWUgdGhhdCBpdCdzIGF3YXJlIG9mLCBidXQgd2UgcHJlZmVyIHRoZSB1c2VyJ3Mgc2V0IGhvc3RuYW1lIHZpYSBgY29ubmVjdERhdGFiYXNlRW11bGF0b3JgIG92ZXIgd2hhdCB0aGUgZW11bGF0b3IgcGFzc2VzLlxuICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQYXlsb2FkLmggPSB0aGlzLnJlcG9JbmZvXy5ob3N0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlXyhoYW5kc2hha2VQYXlsb2FkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gRU5EX1RSQU5TTUlTU0lPTikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygncmVjdmQgZW5kIHRyYW5zbWlzc2lvbiBvbiBwcmltYXJ5Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5yeF8gPSB0aGlzLnNlY29uZGFyeUNvbm5fO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25EYXRhTWVzc2FnZV8odGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy50cnlDbGVhbnVwQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1NIVVRET1dOKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3YXMgcHJldmlvdXNseSB0aGUgJ29uS2lsbCcgY2FsbGJhY2sgcGFzc2VkIHRvIHRoZSBsb3dlci1sZXZlbCBjb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgLy8gcGF5bG9hZCBpbiB0aGlzIGNhc2UgaXMgdGhlIHJlYXNvbiBmb3IgdGhlIHNodXRkb3duLiBHZW5lcmFsbHkgYSBodW1hbi1yZWFkYWJsZSBlcnJvclxuICAgICAgICAgICAgICAgIHRoaXMub25Db25uZWN0aW9uU2h1dGRvd25fKHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1JFU0VUKSB7XG4gICAgICAgICAgICAgICAgLy8gcGF5bG9hZCBpbiB0aGlzIGNhc2UgaXMgdGhlIGhvc3Qgd2Ugc2hvdWxkIGNvbnRhY3RcbiAgICAgICAgICAgICAgICB0aGlzLm9uUmVzZXRfKHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX0VSUk9SKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoJ1NlcnZlciBFcnJvcjogJyArIHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1BPTkcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ2dvdCBwb25nIG9uIHByaW1hcnkuJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblByaW1hcnlSZXNwb25zZV8oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQaW5nT25QcmltYXJ5SWZOZWNlc3NhcnlfKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvcignVW5rbm93biBjb250cm9sIHBhY2tldCBjb21tYW5kOiAnICsgY21kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaGFuZHNoYWtlIC0gVGhlIGhhbmRzaGFrZSBkYXRhIHJldHVybmVkIGZyb20gdGhlIHNlcnZlclxuICAgICAqL1xuICAgIG9uSGFuZHNoYWtlXyhoYW5kc2hha2UpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gaGFuZHNoYWtlLnRzO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gaGFuZHNoYWtlLnY7XG4gICAgICAgIGNvbnN0IGhvc3QgPSBoYW5kc2hha2UuaDtcbiAgICAgICAgdGhpcy5zZXNzaW9uSWQgPSBoYW5kc2hha2UucztcbiAgICAgICAgdGhpcy5yZXBvSW5mb18uaG9zdCA9IGhvc3Q7XG4gICAgICAgIC8vIGlmIHdlJ3ZlIGFscmVhZHkgY2xvc2VkIHRoZSBjb25uZWN0aW9uLCB0aGVuIGRvbid0IGJvdGhlciB0cnlpbmcgdG8gcHJvZ3Jlc3MgZnVydGhlclxuICAgICAgICBpZiAodGhpcy5zdGF0ZV8gPT09IDAgLyogUmVhbHRpbWVTdGF0ZS5DT05ORUNUSU5HICovKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5fLnN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkVzdGFibGlzaGVkXyh0aGlzLmNvbm5fLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgaWYgKFBST1RPQ09MX1ZFUlNJT04gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICB3YXJuKCdQcm90b2NvbCB2ZXJzaW9uIG1pc21hdGNoIGRldGVjdGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUT0RPOiBkbyB3ZSB3YW50IHRvIHVwZ3JhZGU/IHdoZW4/IG1heWJlIGEgZGVsYXk/XG4gICAgICAgICAgICB0aGlzLnRyeVN0YXJ0VXBncmFkZV8oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnlTdGFydFVwZ3JhZGVfKCkge1xuICAgICAgICBjb25zdCBjb25uID0gdGhpcy50cmFuc3BvcnRNYW5hZ2VyXy51cGdyYWRlVHJhbnNwb3J0KCk7XG4gICAgICAgIGlmIChjb25uKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VXBncmFkZV8oY29ubik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRVcGdyYWRlXyhjb25uKSB7XG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBuZXcgY29ubih0aGlzLm5leHRUcmFuc3BvcnRJZF8oKSwgdGhpcy5yZXBvSW5mb18sIHRoaXMuYXBwbGljYXRpb25JZF8sIHRoaXMuYXBwQ2hlY2tUb2tlbl8sIHRoaXMuYXV0aFRva2VuXywgdGhpcy5zZXNzaW9uSWQpO1xuICAgICAgICAvLyBGb3IgY2VydGFpbiB0cmFuc3BvcnRzIChXZWJTb2NrZXRzKSwgd2UgbmVlZCB0byBzZW5kIGFuZCByZWNlaXZlIHNldmVyYWwgbWVzc2FnZXMgYmFjayBhbmQgZm9ydGggYmVmb3JlIHdlXG4gICAgICAgIC8vIGNhbiBjb25zaWRlciB0aGUgdHJhbnNwb3J0IGhlYWx0aHkuXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfID1cbiAgICAgICAgICAgIGNvbm5bJ3Jlc3BvbnNlc1JlcXVpcmVkVG9CZUhlYWx0aHknXSB8fCAwO1xuICAgICAgICBjb25zdCBvbk1lc3NhZ2UgPSB0aGlzLmNvbm5SZWNlaXZlcl8odGhpcy5zZWNvbmRhcnlDb25uXyk7XG4gICAgICAgIGNvbnN0IG9uRGlzY29ubmVjdCA9IHRoaXMuZGlzY29ublJlY2VpdmVyXyh0aGlzLnNlY29uZGFyeUNvbm5fKTtcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5vcGVuKG9uTWVzc2FnZSwgb25EaXNjb25uZWN0KTtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBzdWNjZXNzZnVsbHkgdXBncmFkZWQgYWZ0ZXIgVVBHUkFERV9USU1FT1VULCBnaXZlIHVwIGFuZCBraWxsIHRoZSBzZWNvbmRhcnkuXG4gICAgICAgIHNldFRpbWVvdXROb25CbG9ja2luZygoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWNvbmRhcnlDb25uXykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnVGltZWQgb3V0IHRyeWluZyB0byB1cGdyYWRlLicpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgTWF0aC5mbG9vcihVUEdSQURFX1RJTUVPVVQpKTtcbiAgICB9XG4gICAgb25SZXNldF8oaG9zdCkge1xuICAgICAgICB0aGlzLmxvZ18oJ1Jlc2V0IHBhY2tldCByZWNlaXZlZC4gIE5ldyBob3N0OiAnICsgaG9zdCk7XG4gICAgICAgIHRoaXMucmVwb0luZm9fLmhvc3QgPSBob3N0O1xuICAgICAgICAvLyBUT0RPOiBpZiB3ZSdyZSBhbHJlYWR5IFwiY29ubmVjdGVkXCIsIHdlIG5lZWQgdG8gdHJpZ2dlciBhIGRpc2Nvbm5lY3QgYXQgdGhlIG5leHQgbGF5ZXIgdXAuXG4gICAgICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IHJlc2V0cyBhZnRlciB0aGUgY29ubmVjdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGVzdGFibGlzaGVkXG4gICAgICAgIGlmICh0aGlzLnN0YXRlXyA9PT0gMSAvKiBSZWFsdGltZVN0YXRlLkNPTk5FQ1RFRCAqLykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2xvc2Ugd2hhdGV2ZXIgY29ubmVjdGlvbnMgd2UgaGF2ZSBvcGVuIGFuZCBzdGFydCBhZ2Fpbi5cbiAgICAgICAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uc18oKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Db25uZWN0aW9uRXN0YWJsaXNoZWRfKGNvbm4sIHRpbWVzdGFtcCkge1xuICAgICAgICB0aGlzLmxvZ18oJ1JlYWx0aW1lIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQuJyk7XG4gICAgICAgIHRoaXMuY29ubl8gPSBjb25uO1xuICAgICAgICB0aGlzLnN0YXRlXyA9IDEgLyogUmVhbHRpbWVTdGF0ZS5DT05ORUNURUQgKi87XG4gICAgICAgIGlmICh0aGlzLm9uUmVhZHlfKSB7XG4gICAgICAgICAgICB0aGlzLm9uUmVhZHlfKHRpbWVzdGFtcCwgdGhpcy5zZXNzaW9uSWQpO1xuICAgICAgICAgICAgdGhpcy5vblJlYWR5XyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYWZ0ZXIgNSBzZWNvbmRzIHdlIGhhdmVuJ3Qgc2VudCBlbm91Z2ggcmVxdWVzdHMgdG8gdGhlIHNlcnZlciB0byBnZXQgdGhlIGNvbm5lY3Rpb24gaGVhbHRoeSxcbiAgICAgICAgLy8gc2VuZCBzb21lIHBpbmdzLlxuICAgICAgICBpZiAodGhpcy5wcmltYXJ5UmVzcG9uc2VzUmVxdWlyZWRfID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1ByaW1hcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LicpO1xuICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXROb25CbG9ja2luZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kUGluZ09uUHJpbWFyeUlmTmVjZXNzYXJ5XygpO1xuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcihERUxBWV9CRUZPUkVfU0VORElOR19FWFRSQV9SRVFVRVNUUykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRQaW5nT25QcmltYXJ5SWZOZWNlc3NhcnlfKCkge1xuICAgICAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiBpc24ndCBjb25zaWRlcmVkIGhlYWx0aHkgeWV0LCB3ZSdsbCBzZW5kIGEgbm9vcCBwaW5nIHBhY2tldCByZXF1ZXN0LlxuICAgICAgICBpZiAoIXRoaXMuaXNIZWFsdGh5XyAmJiB0aGlzLnN0YXRlXyA9PT0gMSAvKiBSZWFsdGltZVN0YXRlLkNPTk5FQ1RFRCAqLykge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdzZW5kaW5nIHBpbmcgb24gcHJpbWFyeS4nKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZERhdGFfKHsgdDogJ2MnLCBkOiB7IHQ6IFBJTkcsIGQ6IHt9IH0gfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TZWNvbmRhcnlDb25uZWN0aW9uTG9zdF8oKSB7XG4gICAgICAgIGNvbnN0IGNvbm4gPSB0aGlzLnNlY29uZGFyeUNvbm5fO1xuICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMudHhfID09PSBjb25uIHx8IHRoaXMucnhfID09PSBjb25uKSB7XG4gICAgICAgICAgICAvLyB3ZSBhcmUgcmVseWluZyBvbiB0aGlzIGNvbm5lY3Rpb24gYWxyZWFkeSBpbiBzb21lIGNhcGFjaXR5LiBUaGVyZWZvcmUsIGEgZmFpbHVyZSBpcyByZWFsXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV2ZXJDb25uZWN0ZWQgLSBXaGV0aGVyIG9yIG5vdCB0aGUgY29ubmVjdGlvbiBldmVyIHJlYWNoZWQgYSBzZXJ2ZXIuIFVzZWQgdG8gZGV0ZXJtaW5lIGlmXG4gICAgICogd2Ugc2hvdWxkIGZsdXNoIHRoZSBob3N0IGNhY2hlXG4gICAgICovXG4gICAgb25Db25uZWN0aW9uTG9zdF8oZXZlckNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLmNvbm5fID0gbnVsbDtcbiAgICAgICAgLy8gTk9URTogSUYgeW91J3JlIHNlZWluZyBhIEZpcmVmb3ggZXJyb3IgZm9yIHRoaXMgbGluZSwgSSB0aGluayBpdCBtaWdodCBiZSBiZWNhdXNlIGl0J3MgZ2V0dGluZ1xuICAgICAgICAvLyBjYWxsZWQgb24gd2luZG93IGNsb3NlIGFuZCBSZWFsdGltZVN0YXRlLkNPTk5FQ1RJTkcgaXMgbm8gbG9uZ2VyIGRlZmluZWQuICBKdXN0IGEgZ3Vlc3MuXG4gICAgICAgIGlmICghZXZlckNvbm5lY3RlZCAmJiB0aGlzLnN0YXRlXyA9PT0gMCAvKiBSZWFsdGltZVN0YXRlLkNPTk5FQ1RJTkcgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnUmVhbHRpbWUgY29ubmVjdGlvbiBmYWlsZWQuJyk7XG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBmYWlsZWQgdG8gY29ubmVjdCBhdCBhbGwsIGNsZWFyIGFueSBjYWNoZWQgZW50cnkgZm9yIHRoaXMgbmFtZXNwYWNlIGluIGNhc2UgdGhlIG1hY2hpbmUgd2VudCBhd2F5XG4gICAgICAgICAgICBpZiAodGhpcy5yZXBvSW5mb18uaXNDYWNoZWFibGVIb3N0KCkpIHtcbiAgICAgICAgICAgICAgICBQZXJzaXN0ZW50U3RvcmFnZS5yZW1vdmUoJ2hvc3Q6JyArIHRoaXMucmVwb0luZm9fLmhvc3QpO1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBpbnRlcm5hbCBob3N0IHRvIHdoYXQgd2Ugd291bGQgc2hvdyB0aGUgdXNlciwgaS5lLiA8bnM+LmZpcmViYXNlaW8uY29tXG4gICAgICAgICAgICAgICAgdGhpcy5yZXBvSW5mb18uaW50ZXJuYWxIb3N0ID0gdGhpcy5yZXBvSW5mb18uaG9zdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlXyA9PT0gMSAvKiBSZWFsdGltZVN0YXRlLkNPTk5FQ1RFRCAqLykge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdSZWFsdGltZSBjb25uZWN0aW9uIGxvc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICBvbkNvbm5lY3Rpb25TaHV0ZG93bl8ocmVhc29uKSB7XG4gICAgICAgIHRoaXMubG9nXygnQ29ubmVjdGlvbiBzaHV0ZG93biBjb21tYW5kIHJlY2VpdmVkLiBTaHV0dGluZyBkb3duLi4uJyk7XG4gICAgICAgIGlmICh0aGlzLm9uS2lsbF8pIHtcbiAgICAgICAgICAgIHRoaXMub25LaWxsXyhyZWFzb24pO1xuICAgICAgICAgICAgdGhpcy5vbktpbGxfID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHdhbnQgdG8gZmlyZSBvbkRpc2Nvbm5lY3QgKGtpbGwgaXMgYSBkaWZmZXJlbnQgY2FzZSksXG4gICAgICAgIC8vIHNvIGNsZWFyIHRoZSBjYWxsYmFjay5cbiAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICBzZW5kRGF0YV8oZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZV8gIT09IDEgLyogUmVhbHRpbWVTdGF0ZS5DT05ORUNURUQgKi8pIHtcbiAgICAgICAgICAgIHRocm93ICdDb25uZWN0aW9uIGlzIG5vdCBjb25uZWN0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50eF8uc2VuZChkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgdGhpcyBjb25uZWN0aW9uLCBjYWxsaW5nIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfICE9PSAyIC8qIFJlYWx0aW1lU3RhdGUuRElTQ09OTkVDVEVEICovKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0Nsb3NpbmcgcmVhbHRpbWUgY29ubmVjdGlvbi4nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVfID0gMiAvKiBSZWFsdGltZVN0YXRlLkRJU0NPTk5FQ1RFRCAqLztcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDb25uZWN0aW9uc18oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9uRGlzY29ubmVjdF8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8oKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlQ29ubmVjdGlvbnNfKCkge1xuICAgICAgICB0aGlzLmxvZ18oJ1NodXR0aW5nIGRvd24gYWxsIGNvbm5lY3Rpb25zJyk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5fKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5fLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5fID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZWNvbmRhcnlDb25uXykge1xuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVhbHRoeVRpbWVvdXRfKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFsdGh5VGltZW91dF8pO1xuICAgICAgICAgICAgdGhpcy5oZWFsdGh5VGltZW91dF8gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBJbnRlcmZhY2UgZGVmaW5pbmcgdGhlIHNldCBvZiBhY3Rpb25zIHRoYXQgY2FuIGJlIHBlcmZvcm1lZCBhZ2FpbnN0IHRoZSBGaXJlYmFzZSBzZXJ2ZXJcbiAqIChiYXNpY2FsbHkgY29ycmVzcG9uZHMgdG8gb3VyIHdpcmUgcHJvdG9jb2wpLlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgU2VydmVyQWN0aW9ucyB7XG4gICAgcHV0KHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHsgfVxuICAgIG1lcmdlKHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHsgfVxuICAgIC8qKlxuICAgICAqIFJlZnJlc2hlcyB0aGUgYXV0aCB0b2tlbiBmb3IgdGhlIGN1cnJlbnQgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0gdG9rZW4gLSBUaGUgYXV0aGVudGljYXRpb24gdG9rZW5cbiAgICAgKi9cbiAgICByZWZyZXNoQXV0aFRva2VuKHRva2VuKSB7IH1cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGFwcCBjaGVjayB0b2tlbiBmb3IgdGhlIGN1cnJlbnQgY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVGhlIGFwcCBjaGVjayB0b2tlblxuICAgICAqL1xuICAgIHJlZnJlc2hBcHBDaGVja1Rva2VuKHRva2VuKSB7IH1cbiAgICBvbkRpc2Nvbm5lY3RQdXQocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkgeyB9XG4gICAgb25EaXNjb25uZWN0TWVyZ2UocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkgeyB9XG4gICAgb25EaXNjb25uZWN0Q2FuY2VsKHBhdGhTdHJpbmcsIG9uQ29tcGxldGUpIHsgfVxuICAgIHJlcG9ydFN0YXRzKHN0YXRzKSB7IH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQmFzZSBjbGFzcyB0byBiZSB1c2VkIGlmIHlvdSB3YW50IHRvIGVtaXQgZXZlbnRzLiBDYWxsIHRoZSBjb25zdHJ1Y3RvciB3aXRoXG4gKiB0aGUgc2V0IG9mIGFsbG93ZWQgZXZlbnQgbmFtZXMuXG4gKi9cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoYWxsb3dlZEV2ZW50c18pIHtcbiAgICAgICAgdGhpcy5hbGxvd2VkRXZlbnRzXyA9IGFsbG93ZWRFdmVudHNfO1xuICAgICAgICB0aGlzLmxpc3RlbmVyc18gPSB7fTtcbiAgICAgICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkoYWxsb3dlZEV2ZW50c18pICYmIGFsbG93ZWRFdmVudHNfLmxlbmd0aCA+IDAsICdSZXF1aXJlcyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUbyBiZSBjYWxsZWQgYnkgZGVyaXZlZCBjbGFzc2VzIHRvIHRyaWdnZXIgZXZlbnRzLlxuICAgICAqL1xuICAgIHRyaWdnZXIoZXZlbnRUeXBlLCAuLi52YXJBcmdzKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdKSkge1xuICAgICAgICAgICAgLy8gQ2xvbmUgdGhlIGxpc3QsIHNpbmNlIGNhbGxiYWNrcyBjb3VsZCBhZGQvcmVtb3ZlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IFsuLi50aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5jYWxsYmFjay5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgdmFyQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb24oZXZlbnRUeXBlLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlRXZlbnRUeXBlXyhldmVudFR5cGUpO1xuICAgICAgICB0aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXSA9IHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdIHx8IFtdO1xuICAgICAgICB0aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXS5wdXNoKHsgY2FsbGJhY2ssIGNvbnRleHQgfSk7XG4gICAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IHRoaXMuZ2V0SW5pdGlhbEV2ZW50KGV2ZW50VHlwZSk7XG4gICAgICAgIGlmIChldmVudERhdGEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGV2ZW50RGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb2ZmKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZUV2ZW50VHlwZV8oZXZlbnRUeXBlKTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0gfHwgW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJlxuICAgICAgICAgICAgICAgICghY29udGV4dCB8fCBjb250ZXh0ID09PSBsaXN0ZW5lcnNbaV0uY29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZUV2ZW50VHlwZV8oZXZlbnRUeXBlKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLmFsbG93ZWRFdmVudHNfLmZpbmQoZXQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGV0ID09PSBldmVudFR5cGU7XG4gICAgICAgIH0pLCAnVW5rbm93biBldmVudDogJyArIGV2ZW50VHlwZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBNb25pdG9ycyBvbmxpbmUgc3RhdGUgKGFzIHJlcG9ydGVkIGJ5IHdpbmRvdy5vbmxpbmUvb2ZmbGluZSBldmVudHMpLlxuICpcbiAqIFRoZSBleHBlY3RhdGlvbiBpcyB0aGF0IHRoaXMgY291bGQgaGF2ZSBtYW55IGZhbHNlIHBvc2l0aXZlcyAodGhpbmtzIHdlIGFyZSBvbmxpbmVcbiAqIHdoZW4gd2UncmUgbm90KSwgYnV0IG5vIGZhbHNlIG5lZ2F0aXZlcy4gIFNvIHdlIGNhbiBzYWZlbHkgdXNlIGl0IHRvIGRldGVybWluZSB3aGVuXG4gKiB3ZSBkZWZpbml0ZWx5IGNhbm5vdCByZWFjaCB0aGUgaW50ZXJuZXQuXG4gKi9cbmNsYXNzIE9ubGluZU1vbml0b3IgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPbmxpbmVNb25pdG9yKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbJ29ubGluZSddKTtcbiAgICAgICAgdGhpcy5vbmxpbmVfID0gdHJ1ZTtcbiAgICAgICAgLy8gV2UndmUgaGFkIHJlcGVhdGVkIGNvbXBsYWludHMgdGhhdCBDb3Jkb3ZhIGFwcHMgY2FuIGdldCBzdHVjayBcIm9mZmxpbmVcIiwgZS5nLlxuICAgICAgICAvLyBodHRwczovL2ZvcnVtLmlvbmljZnJhbWV3b3JrLmNvbS90L2ZpcmViYXNlLWNvbm5lY3Rpb24taXMtbG9zdC1hbmQtbmV2ZXItY29tZS1iYWNrLzQzODEwXG4gICAgICAgIC8vIEl0IHdvdWxkIHNlZW0gdGhhdCB0aGUgJ29ubGluZScgZXZlbnQgZG9lcyBub3QgYWx3YXlzIGZpcmUgY29uc2lzdGVudGx5LiBTbyB3ZSBkaXNhYmxlIGl0XG4gICAgICAgIC8vIGZvciBDb3Jkb3ZhLlxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICFpc01vYmlsZUNvcmRvdmEoKSkge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubGluZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub25saW5lXykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ubGluZV8gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ29ubGluZScsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ubGluZV8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmxpbmVfID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignb25saW5lJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJbml0aWFsRXZlbnQoZXZlbnRUeXBlKSB7XG4gICAgICAgIGFzc2VydChldmVudFR5cGUgPT09ICdvbmxpbmUnLCAnVW5rbm93biBldmVudCB0eXBlOiAnICsgZXZlbnRUeXBlKTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLm9ubGluZV9dO1xuICAgIH1cbiAgICBjdXJyZW50bHlPbmxpbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9ubGluZV87XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqIE1heGltdW0ga2V5IGRlcHRoLiAqL1xuY29uc3QgTUFYX1BBVEhfREVQVEggPSAzMjtcbi8qKiBNYXhpbXVtIG51bWJlciBvZiAoVVRGOCkgYnl0ZXMgaW4gYSBGaXJlYmFzZSBwYXRoLiAqL1xuY29uc3QgTUFYX1BBVEhfTEVOR1RIX0JZVEVTID0gNzY4O1xuLyoqXG4gKiBBbiBpbW11dGFibGUgb2JqZWN0IHJlcHJlc2VudGluZyBhIHBhcnNlZCBwYXRoLiAgSXQncyBpbW11dGFibGUgc28gdGhhdCB5b3VcbiAqIGNhbiBwYXNzIHRoZW0gYXJvdW5kIHRvIG90aGVyIGZ1bmN0aW9ucyB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IHRoZW0gY2hhbmdpbmdcbiAqIGl0LlxuICovXG5jbGFzcyBQYXRoIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcGF0aE9yU3RyaW5nIC0gUGF0aCBzdHJpbmcgdG8gcGFyc2UsIG9yIGFub3RoZXIgcGF0aCwgb3IgdGhlIHJhd1xuICAgICAqIHRva2VucyBhcnJheVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhdGhPclN0cmluZywgcGllY2VOdW0pIHtcbiAgICAgICAgaWYgKHBpZWNlTnVtID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHRoaXMucGllY2VzXyA9IHBhdGhPclN0cmluZy5zcGxpdCgnLycpO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGVtcHR5IHBpZWNlcy5cbiAgICAgICAgICAgIGxldCBjb3B5VG8gPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5waWVjZXNfW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waWVjZXNfW2NvcHlUb10gPSB0aGlzLnBpZWNlc19baV07XG4gICAgICAgICAgICAgICAgICAgIGNvcHlUbysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGllY2VzXy5sZW5ndGggPSBjb3B5VG87XG4gICAgICAgICAgICB0aGlzLnBpZWNlTnVtXyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBpZWNlc18gPSBwYXRoT3JTdHJpbmc7XG4gICAgICAgICAgICB0aGlzLnBpZWNlTnVtXyA9IHBpZWNlTnVtO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgcGF0aFN0cmluZyA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5waWVjZU51bV87IGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBpZWNlc19baV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcGF0aFN0cmluZyArPSAnLycgKyB0aGlzLnBpZWNlc19baV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhdGhTdHJpbmcgfHwgJy8nO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5ld0VtcHR5UGF0aCgpIHtcbiAgICByZXR1cm4gbmV3IFBhdGgoJycpO1xufVxuZnVuY3Rpb24gcGF0aEdldEZyb250KHBhdGgpIHtcbiAgICBpZiAocGF0aC5waWVjZU51bV8gPj0gcGF0aC5waWVjZXNfLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGgucGllY2VzX1twYXRoLnBpZWNlTnVtX107XG59XG4vKipcbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgaW4gdGhpcyBwYXRoXG4gKi9cbmZ1bmN0aW9uIHBhdGhHZXRMZW5ndGgocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnBpZWNlc18ubGVuZ3RoIC0gcGF0aC5waWVjZU51bV87XG59XG5mdW5jdGlvbiBwYXRoUG9wRnJvbnQocGF0aCkge1xuICAgIGxldCBwaWVjZU51bSA9IHBhdGgucGllY2VOdW1fO1xuICAgIGlmIChwaWVjZU51bSA8IHBhdGgucGllY2VzXy5sZW5ndGgpIHtcbiAgICAgICAgcGllY2VOdW0rKztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQYXRoKHBhdGgucGllY2VzXywgcGllY2VOdW0pO1xufVxuZnVuY3Rpb24gcGF0aEdldEJhY2socGF0aCkge1xuICAgIGlmIChwYXRoLnBpZWNlTnVtXyA8IHBhdGgucGllY2VzXy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGgucGllY2VzX1twYXRoLnBpZWNlc18ubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcGF0aFRvVXJsRW5jb2RlZFN0cmluZyhwYXRoKSB7XG4gICAgbGV0IHBhdGhTdHJpbmcgPSAnJztcbiAgICBmb3IgKGxldCBpID0gcGF0aC5waWVjZU51bV87IGkgPCBwYXRoLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhdGgucGllY2VzX1tpXSAhPT0gJycpIHtcbiAgICAgICAgICAgIHBhdGhTdHJpbmcgKz0gJy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhwYXRoLnBpZWNlc19baV0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aFN0cmluZyB8fCAnLyc7XG59XG4vKipcbiAqIFNoYWxsb3cgY29weSBvZiB0aGUgcGFydHMgb2YgdGhlIHBhdGguXG4gKlxuICovXG5mdW5jdGlvbiBwYXRoU2xpY2UocGF0aCwgYmVnaW4gPSAwKSB7XG4gICAgcmV0dXJuIHBhdGgucGllY2VzXy5zbGljZShwYXRoLnBpZWNlTnVtXyArIGJlZ2luKTtcbn1cbmZ1bmN0aW9uIHBhdGhQYXJlbnQocGF0aCkge1xuICAgIGlmIChwYXRoLnBpZWNlTnVtXyA+PSBwYXRoLnBpZWNlc18ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwaWVjZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gcGF0aC5waWVjZU51bV87IGkgPCBwYXRoLnBpZWNlc18ubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHBpZWNlcy5wdXNoKHBhdGgucGllY2VzX1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUGF0aChwaWVjZXMsIDApO1xufVxuZnVuY3Rpb24gcGF0aENoaWxkKHBhdGgsIGNoaWxkUGF0aE9iaikge1xuICAgIGNvbnN0IHBpZWNlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBwYXRoLnBpZWNlTnVtXzsgaSA8IHBhdGgucGllY2VzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwaWVjZXMucHVzaChwYXRoLnBpZWNlc19baV0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGRQYXRoT2JqIGluc3RhbmNlb2YgUGF0aCkge1xuICAgICAgICBmb3IgKGxldCBpID0gY2hpbGRQYXRoT2JqLnBpZWNlTnVtXzsgaSA8IGNoaWxkUGF0aE9iai5waWVjZXNfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwaWVjZXMucHVzaChjaGlsZFBhdGhPYmoucGllY2VzX1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoaWxkUGllY2VzID0gY2hpbGRQYXRoT2JqLnNwbGl0KCcvJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRQaWVjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaGlsZFBpZWNlc1tpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcGllY2VzLnB1c2goY2hpbGRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgUGF0aChwaWVjZXMsIDApO1xufVxuLyoqXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZXJlIGFyZSBubyBzZWdtZW50cyBpbiB0aGlzIHBhdGhcbiAqL1xuZnVuY3Rpb24gcGF0aElzRW1wdHkocGF0aCkge1xuICAgIHJldHVybiBwYXRoLnBpZWNlTnVtXyA+PSBwYXRoLnBpZWNlc18ubGVuZ3RoO1xufVxuLyoqXG4gKiBAcmV0dXJucyBUaGUgcGF0aCBmcm9tIG91dGVyUGF0aCB0byBpbm5lclBhdGhcbiAqL1xuZnVuY3Rpb24gbmV3UmVsYXRpdmVQYXRoKG91dGVyUGF0aCwgaW5uZXJQYXRoKSB7XG4gICAgY29uc3Qgb3V0ZXIgPSBwYXRoR2V0RnJvbnQob3V0ZXJQYXRoKSwgaW5uZXIgPSBwYXRoR2V0RnJvbnQoaW5uZXJQYXRoKTtcbiAgICBpZiAob3V0ZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlubmVyUGF0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAob3V0ZXIgPT09IGlubmVyKSB7XG4gICAgICAgIHJldHVybiBuZXdSZWxhdGl2ZVBhdGgocGF0aFBvcEZyb250KG91dGVyUGF0aCksIHBhdGhQb3BGcm9udChpbm5lclBhdGgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSU5URVJOQUwgRVJST1I6IGlubmVyUGF0aCAoJyArXG4gICAgICAgICAgICBpbm5lclBhdGggK1xuICAgICAgICAgICAgJykgaXMgbm90IHdpdGhpbiAnICtcbiAgICAgICAgICAgICdvdXRlclBhdGggKCcgK1xuICAgICAgICAgICAgb3V0ZXJQYXRoICtcbiAgICAgICAgICAgICcpJyk7XG4gICAgfVxufVxuLyoqXG4gKiBAcmV0dXJucyAtMSwgMCwgMSBpZiBsZWZ0IGlzIGxlc3MsIGVxdWFsLCBvciBncmVhdGVyIHRoYW4gdGhlIHJpZ2h0LlxuICovXG5mdW5jdGlvbiBwYXRoQ29tcGFyZShsZWZ0LCByaWdodCkge1xuICAgIGNvbnN0IGxlZnRLZXlzID0gcGF0aFNsaWNlKGxlZnQsIDApO1xuICAgIGNvbnN0IHJpZ2h0S2V5cyA9IHBhdGhTbGljZShyaWdodCwgMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWZ0S2V5cy5sZW5ndGggJiYgaSA8IHJpZ2h0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjbXAgPSBuYW1lQ29tcGFyZShsZWZ0S2V5c1tpXSwgcmlnaHRLZXlzW2ldKTtcbiAgICAgICAgaWYgKGNtcCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNtcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVmdEtleXMubGVuZ3RoID09PSByaWdodEtleXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdEtleXMubGVuZ3RoIDwgcmlnaHRLZXlzLmxlbmd0aCA/IC0xIDogMTtcbn1cbi8qKlxuICogQHJldHVybnMgdHJ1ZSBpZiBwYXRocyBhcmUgdGhlIHNhbWUuXG4gKi9cbmZ1bmN0aW9uIHBhdGhFcXVhbHMocGF0aCwgb3RoZXIpIHtcbiAgICBpZiAocGF0aEdldExlbmd0aChwYXRoKSAhPT0gcGF0aEdldExlbmd0aChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gcGF0aC5waWVjZU51bV8sIGogPSBvdGhlci5waWVjZU51bV87IGkgPD0gcGF0aC5waWVjZXNfLmxlbmd0aDsgaSsrLCBqKyspIHtcbiAgICAgICAgaWYgKHBhdGgucGllY2VzX1tpXSAhPT0gb3RoZXIucGllY2VzX1tqXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoaXMgcGF0aCBpcyBhIHBhcmVudCBvZiAob3IgdGhlIHNhbWUgYXMpIG90aGVyXG4gKi9cbmZ1bmN0aW9uIHBhdGhDb250YWlucyhwYXRoLCBvdGhlcikge1xuICAgIGxldCBpID0gcGF0aC5waWVjZU51bV87XG4gICAgbGV0IGogPSBvdGhlci5waWVjZU51bV87XG4gICAgaWYgKHBhdGhHZXRMZW5ndGgocGF0aCkgPiBwYXRoR2V0TGVuZ3RoKG90aGVyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHdoaWxlIChpIDwgcGF0aC5waWVjZXNfLmxlbmd0aCkge1xuICAgICAgICBpZiAocGF0aC5waWVjZXNfW2ldICE9PSBvdGhlci5waWVjZXNfW2pdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgKytpO1xuICAgICAgICArK2o7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBEeW5hbWljIChtdXRhYmxlKSBwYXRoIHVzZWQgdG8gY291bnQgcGF0aCBsZW5ndGhzLlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgdXNlZCB0byBlZmZpY2llbnRseSBjaGVjayBwYXRocyBmb3IgdmFsaWRcbiAqIGxlbmd0aCAoaW4gVVRGOCBieXRlcykgYW5kIGRlcHRoICh1c2VkIGluIHBhdGggdmFsaWRhdGlvbikuXG4gKlxuICogVGhyb3dzIEVycm9yIGV4Y2VwdGlvbiBpZiBwYXRoIGlzIGV2ZXIgaW52YWxpZC5cbiAqXG4gKiBUaGUgZGVmaW5pdGlvbiBvZiBhIHBhdGggYWx3YXlzIGJlZ2lucyB3aXRoICcvJy5cbiAqL1xuY2xhc3MgVmFsaWRhdGlvblBhdGgge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBwYXRoIC0gSW5pdGlhbCBQYXRoLlxuICAgICAqIEBwYXJhbSBlcnJvclByZWZpeF8gLSBQcmVmaXggZm9yIGFueSBlcnJvciBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXRoLCBlcnJvclByZWZpeF8pIHtcbiAgICAgICAgdGhpcy5lcnJvclByZWZpeF8gPSBlcnJvclByZWZpeF87XG4gICAgICAgIHRoaXMucGFydHNfID0gcGF0aFNsaWNlKHBhdGgsIDApO1xuICAgICAgICAvKiogSW5pdGlhbGl6ZSB0byBudW1iZXIgb2YgJy8nIGNoYXJzIG5lZWRlZCBpbiBwYXRoLiAqL1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfID0gTWF0aC5tYXgoMSwgdGhpcy5wYXJ0c18ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcnRzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoXyArPSBzdHJpbmdMZW5ndGgodGhpcy5wYXJ0c19baV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRpb25QYXRoQ2hlY2tWYWxpZCh0aGlzKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0aW9uUGF0aFB1c2godmFsaWRhdGlvblBhdGgsIGNoaWxkKSB7XG4gICAgLy8gQ291bnQgdGhlIG5lZWRlZCAnLydcbiAgICBpZiAodmFsaWRhdGlvblBhdGgucGFydHNfLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFsaWRhdGlvblBhdGguYnl0ZUxlbmd0aF8gKz0gMTtcbiAgICB9XG4gICAgdmFsaWRhdGlvblBhdGgucGFydHNfLnB1c2goY2hpbGQpO1xuICAgIHZhbGlkYXRpb25QYXRoLmJ5dGVMZW5ndGhfICs9IHN0cmluZ0xlbmd0aChjaGlsZCk7XG4gICAgdmFsaWRhdGlvblBhdGhDaGVja1ZhbGlkKHZhbGlkYXRpb25QYXRoKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRpb25QYXRoUG9wKHZhbGlkYXRpb25QYXRoKSB7XG4gICAgY29uc3QgbGFzdCA9IHZhbGlkYXRpb25QYXRoLnBhcnRzXy5wb3AoKTtcbiAgICB2YWxpZGF0aW9uUGF0aC5ieXRlTGVuZ3RoXyAtPSBzdHJpbmdMZW5ndGgobGFzdCk7XG4gICAgLy8gVW4tY291bnQgdGhlIHByZXZpb3VzICcvJ1xuICAgIGlmICh2YWxpZGF0aW9uUGF0aC5wYXJ0c18ubGVuZ3RoID4gMCkge1xuICAgICAgICB2YWxpZGF0aW9uUGF0aC5ieXRlTGVuZ3RoXyAtPSAxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRpb25QYXRoQ2hlY2tWYWxpZCh2YWxpZGF0aW9uUGF0aCkge1xuICAgIGlmICh2YWxpZGF0aW9uUGF0aC5ieXRlTGVuZ3RoXyA+IE1BWF9QQVRIX0xFTkdUSF9CWVRFUykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvblBhdGguZXJyb3JQcmVmaXhfICtcbiAgICAgICAgICAgICdoYXMgYSBrZXkgcGF0aCBsb25nZXIgdGhhbiAnICtcbiAgICAgICAgICAgIE1BWF9QQVRIX0xFTkdUSF9CWVRFUyArXG4gICAgICAgICAgICAnIGJ5dGVzICgnICtcbiAgICAgICAgICAgIHZhbGlkYXRpb25QYXRoLmJ5dGVMZW5ndGhfICtcbiAgICAgICAgICAgICcpLicpO1xuICAgIH1cbiAgICBpZiAodmFsaWRhdGlvblBhdGgucGFydHNfLmxlbmd0aCA+IE1BWF9QQVRIX0RFUFRIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcih2YWxpZGF0aW9uUGF0aC5lcnJvclByZWZpeF8gK1xuICAgICAgICAgICAgJ3BhdGggc3BlY2lmaWVkIGV4Y2VlZHMgdGhlIG1heGltdW0gZGVwdGggdGhhdCBjYW4gYmUgd3JpdHRlbiAoJyArXG4gICAgICAgICAgICBNQVhfUEFUSF9ERVBUSCArXG4gICAgICAgICAgICAnKSBvciBvYmplY3QgY29udGFpbnMgYSBjeWNsZSAnICtcbiAgICAgICAgICAgIHZhbGlkYXRpb25QYXRoVG9FcnJvclN0cmluZyh2YWxpZGF0aW9uUGF0aCkpO1xuICAgIH1cbn1cbi8qKlxuICogU3RyaW5nIGZvciB1c2UgaW4gZXJyb3IgbWVzc2FnZXMgLSB1c2VzICcuJyBub3RhdGlvbiBmb3IgcGF0aC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGlvblBhdGhUb0Vycm9yU3RyaW5nKHZhbGlkYXRpb25QYXRoKSB7XG4gICAgaWYgKHZhbGlkYXRpb25QYXRoLnBhcnRzXy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gXCJpbiBwcm9wZXJ0eSAnXCIgKyB2YWxpZGF0aW9uUGF0aC5wYXJ0c18uam9pbignLicpICsgXCInXCI7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBWaXNpYmlsaXR5TW9uaXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZpc2liaWxpdHlNb25pdG9yKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihbJ3Zpc2libGUnXSk7XG4gICAgICAgIGxldCBoaWRkZW47XG4gICAgICAgIGxldCB2aXNpYmlsaXR5Q2hhbmdlO1xuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50WydoaWRkZW4nXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBPcGVyYSAxMi4xMCBhbmQgRmlyZWZveCAxOCBhbmQgbGF0ZXIgc3VwcG9ydFxuICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnRbJ21vekhpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ21vekhpZGRlbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnRbJ21zSGlkZGVuJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICdtc3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICdtc0hpZGRlbic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnRbJ3dlYmtpdEhpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGx5LCB3ZSBhbHdheXMgYXNzdW1lIHdlIGFyZSB2aXNpYmxlLiBUaGlzIGVuc3VyZXMgdGhhdCBpbiBicm93c2Vyc1xuICAgICAgICAvLyB3aXRob3V0IHBhZ2UgdmlzaWJpbGl0eSBzdXBwb3J0IG9yIGluIGNhc2VzIHdoZXJlIHdlIGFyZSBuZXZlciB2aXNpYmxlXG4gICAgICAgIC8vIChlLmcuIGNocm9tZSBleHRlbnNpb24pLCB3ZSBhY3QgYXMgaWYgd2UgYXJlIHZpc2libGUsIGkuZS4gZG9uJ3QgZGVsYXlcbiAgICAgICAgLy8gcmVjb25uZWN0c1xuICAgICAgICB0aGlzLnZpc2libGVfID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZpc2liaWxpdHlDaGFuZ2UpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodmlzaWJpbGl0eUNoYW5nZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSAhZG9jdW1lbnRbaGlkZGVuXTtcbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZSAhPT0gdGhpcy52aXNpYmxlXykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVfID0gdmlzaWJsZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCd2aXNpYmxlJywgdmlzaWJsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEluaXRpYWxFdmVudChldmVudFR5cGUpIHtcbiAgICAgICAgYXNzZXJ0KGV2ZW50VHlwZSA9PT0gJ3Zpc2libGUnLCAnVW5rbm93biBldmVudCB0eXBlOiAnICsgZXZlbnRUeXBlKTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLnZpc2libGVfXTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jb25zdCBSRUNPTk5FQ1RfTUlOX0RFTEFZID0gMTAwMDtcbmNvbnN0IFJFQ09OTkVDVF9NQVhfREVMQVlfREVGQVVMVCA9IDYwICogNSAqIDEwMDA7IC8vIDUgbWludXRlcyBpbiBtaWxsaXNlY29uZHMgKENhc2U6IDE4NTgpXG5jb25zdCBSRUNPTk5FQ1RfTUFYX0RFTEFZX0ZPUl9BRE1JTlMgPSAzMCAqIDEwMDA7IC8vIDMwIHNlY29uZHMgZm9yIGFkbWluIGNsaWVudHMgKGxpa2VseSB0byBiZSBhIGJhY2tlbmQgc2VydmVyKVxuY29uc3QgUkVDT05ORUNUX0RFTEFZX01VTFRJUExJRVIgPSAxLjM7XG5jb25zdCBSRUNPTk5FQ1RfREVMQVlfUkVTRVRfVElNRU9VVCA9IDMwMDAwOyAvLyBSZXNldCBkZWxheSBiYWNrIHRvIE1JTl9ERUxBWSBhZnRlciBiZWluZyBjb25uZWN0ZWQgZm9yIDMwc2VjLlxuY29uc3QgU0VSVkVSX0tJTExfSU5URVJSVVBUX1JFQVNPTiA9ICdzZXJ2ZXJfa2lsbCc7XG4vLyBJZiBhdXRoIGZhaWxzIHJlcGVhdGVkbHksIHdlJ2xsIGFzc3VtZSBzb21ldGhpbmcgaXMgd3JvbmcgYW5kIGxvZyBhIHdhcm5pbmcgLyBiYWNrIG9mZi5cbmNvbnN0IElOVkFMSURfVE9LRU5fVEhSRVNIT0xEID0gMztcbi8qKlxuICogRmlyZWJhc2UgY29ubmVjdGlvbi4gIEFic3RyYWN0cyB3aXJlIHByb3RvY29sIGFuZCBoYW5kbGVzIHJlY29ubmVjdGluZy5cbiAqXG4gKiBOT1RFOiBBbGwgSlNPTiBvYmplY3RzIHNlbnQgdG8gdGhlIHJlYWx0aW1lIGNvbm5lY3Rpb24gbXVzdCBoYXZlIHByb3BlcnR5IG5hbWVzIGVuY2xvc2VkXG4gKiBpbiBxdW90ZXMgdG8gbWFrZSBzdXJlIHRoZSBjbG9zdXJlIGNvbXBpbGVyIGRvZXMgbm90IG1pbmlmeSB0aGVtLlxuICovXG5jbGFzcyBQZXJzaXN0ZW50Q29ubmVjdGlvbiBleHRlbmRzIFNlcnZlckFjdGlvbnMge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXBvSW5mb18gLSBEYXRhIGFib3V0IHRoZSBuYW1lc3BhY2Ugd2UgYXJlIGNvbm5lY3RpbmcgdG9cbiAgICAgKiBAcGFyYW0gYXBwbGljYXRpb25JZF8gLSBUaGUgRmlyZWJhc2UgQXBwIElEIGZvciB0aGlzIHByb2plY3RcbiAgICAgKiBAcGFyYW0gb25EYXRhVXBkYXRlXyAtIEEgY2FsbGJhY2sgZm9yIG5ldyBkYXRhIGZyb20gdGhlIHNlcnZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlcG9JbmZvXywgYXBwbGljYXRpb25JZF8sIG9uRGF0YVVwZGF0ZV8sIG9uQ29ubmVjdFN0YXR1c18sIG9uU2VydmVySW5mb1VwZGF0ZV8sIGF1dGhUb2tlblByb3ZpZGVyXywgYXBwQ2hlY2tUb2tlblByb3ZpZGVyXywgYXV0aE92ZXJyaWRlXykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlcG9JbmZvXyA9IHJlcG9JbmZvXztcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklkXyA9IGFwcGxpY2F0aW9uSWRfO1xuICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8gPSBvbkRhdGFVcGRhdGVfO1xuICAgICAgICB0aGlzLm9uQ29ubmVjdFN0YXR1c18gPSBvbkNvbm5lY3RTdGF0dXNfO1xuICAgICAgICB0aGlzLm9uU2VydmVySW5mb1VwZGF0ZV8gPSBvblNlcnZlckluZm9VcGRhdGVfO1xuICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcbiAgICAgICAgdGhpcy5hcHBDaGVja1Rva2VuUHJvdmlkZXJfID0gYXBwQ2hlY2tUb2tlblByb3ZpZGVyXztcbiAgICAgICAgdGhpcy5hdXRoT3ZlcnJpZGVfID0gYXV0aE92ZXJyaWRlXztcbiAgICAgICAgLy8gVXNlZCBmb3IgZGlhZ25vc3RpYyBsb2dnaW5nLlxuICAgICAgICB0aGlzLmlkID0gUGVyc2lzdGVudENvbm5lY3Rpb24ubmV4dFBlcnNpc3RlbnRDb25uZWN0aW9uSWRfKys7XG4gICAgICAgIHRoaXMubG9nXyA9IGxvZ1dyYXBwZXIoJ3A6JyArIHRoaXMuaWQgKyAnOicpO1xuICAgICAgICB0aGlzLmludGVycnVwdFJlYXNvbnNfID0ge307XG4gICAgICAgIHRoaXMubGlzdGVucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1B1dHNfID0gW107XG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdHZXRzXyA9IFtdO1xuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfID0gMDtcbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ0dldENvdW50XyA9IDA7XG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXyA9IFtdO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xuICAgICAgICB0aGlzLm1heFJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NQVhfREVMQVlfREVGQVVMVDtcbiAgICAgICAgdGhpcy5zZWN1cml0eURlYnVnQ2FsbGJhY2tfID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0U2Vzc2lvbklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfID0gbnVsbDtcbiAgICAgICAgdGhpcy52aXNpYmxlXyA9IGZhbHNlO1xuICAgICAgICAvLyBCZWZvcmUgd2UgZ2V0IGNvbm5lY3RlZCwgd2Uga2VlcCBhIHF1ZXVlIG9mIHBlbmRpbmcgbWVzc2FnZXMgdG8gc2VuZC5cbiAgICAgICAgdGhpcy5yZXF1ZXN0Q0JIYXNoXyA9IHt9O1xuICAgICAgICB0aGlzLnJlcXVlc3ROdW1iZXJfID0gMDtcbiAgICAgICAgdGhpcy5yZWFsdGltZV8gPSBudWxsO1xuICAgICAgICB0aGlzLmF1dGhUb2tlbl8gPSBudWxsO1xuICAgICAgICB0aGlzLmFwcENoZWNrVG9rZW5fID0gbnVsbDtcbiAgICAgICAgdGhpcy5mb3JjZVRva2VuUmVmcmVzaF8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID0gMDtcbiAgICAgICAgdGhpcy5pbnZhbGlkQXBwQ2hlY2tUb2tlbkNvdW50XyA9IDA7XG4gICAgICAgIHRoaXMuZmlyc3RDb25uZWN0aW9uXyA9IHRydWU7XG4gICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25BdHRlbXB0VGltZV8gPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXyA9IG51bGw7XG4gICAgICAgIGlmIChhdXRoT3ZlcnJpZGVfICYmICFpc05vZGVTZGsoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRoIG92ZXJyaWRlIHNwZWNpZmllZCBpbiBvcHRpb25zLCBidXQgbm90IHN1cHBvcnRlZCBvbiBub24gTm9kZS5qcyBwbGF0Zm9ybXMnKTtcbiAgICAgICAgfVxuICAgICAgICBWaXNpYmlsaXR5TW9uaXRvci5nZXRJbnN0YW5jZSgpLm9uKCd2aXNpYmxlJywgdGhpcy5vblZpc2libGVfLCB0aGlzKTtcbiAgICAgICAgaWYgKHJlcG9JbmZvXy5ob3N0LmluZGV4T2YoJ2ZibG9jYWwnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIE9ubGluZU1vbml0b3IuZ2V0SW5zdGFuY2UoKS5vbignb25saW5lJywgdGhpcy5vbk9ubGluZV8sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRSZXF1ZXN0KGFjdGlvbiwgYm9keSwgb25SZXNwb25zZSkge1xuICAgICAgICBjb25zdCBjdXJSZXFOdW0gPSArK3RoaXMucmVxdWVzdE51bWJlcl87XG4gICAgICAgIGNvbnN0IG1zZyA9IHsgcjogY3VyUmVxTnVtLCBhOiBhY3Rpb24sIGI6IGJvZHkgfTtcbiAgICAgICAgdGhpcy5sb2dfKHN0cmluZ2lmeShtc2cpKTtcbiAgICAgICAgYXNzZXJ0KHRoaXMuY29ubmVjdGVkXywgXCJzZW5kUmVxdWVzdCBjYWxsIHdoZW4gd2UncmUgbm90IGNvbm5lY3RlZCBub3QgYWxsb3dlZC5cIik7XG4gICAgICAgIHRoaXMucmVhbHRpbWVfLnNlbmRSZXF1ZXN0KG1zZyk7XG4gICAgICAgIGlmIChvblJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RDQkhhc2hfW2N1clJlcU51bV0gPSBvblJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldChxdWVyeSkge1xuICAgICAgICB0aGlzLmluaXRDb25uZWN0aW9uXygpO1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgcDogcXVlcnkuX3BhdGgudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHE6IHF1ZXJ5Ll9xdWVyeU9iamVjdFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvdXRzdGFuZGluZ0dldCA9IHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2cnLFxuICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IG1lc3NhZ2VbJ2QnXTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVsncyddID09PSAnb2snKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm91dHN0YW5kaW5nR2V0c18ucHVzaChvdXRzdGFuZGluZ0dldCk7XG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdHZXRDb3VudF8rKztcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm91dHN0YW5kaW5nR2V0c18ubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICAgICAgdGhpcy5zZW5kR2V0XyhpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGxpc3RlbihxdWVyeSwgY3VycmVudEhhc2hGbiwgdGFnLCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuaW5pdENvbm5lY3Rpb25fKCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5SWQgPSBxdWVyeS5fcXVlcnlJZGVudGlmaWVyO1xuICAgICAgICBjb25zdCBwYXRoU3RyaW5nID0gcXVlcnkuX3BhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5sb2dfKCdMaXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5SWQpO1xuICAgICAgICBpZiAoIXRoaXMubGlzdGVucy5oYXMocGF0aFN0cmluZykpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVucy5zZXQocGF0aFN0cmluZywgbmV3IE1hcCgpKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQocXVlcnkuX3F1ZXJ5UGFyYW1zLmlzRGVmYXVsdCgpIHx8ICFxdWVyeS5fcXVlcnlQYXJhbXMubG9hZHNBbGxEYXRhKCksICdsaXN0ZW4oKSBjYWxsZWQgZm9yIG5vbi1kZWZhdWx0IGJ1dCBjb21wbGV0ZSBxdWVyeScpO1xuICAgICAgICBhc3NlcnQoIXRoaXMubGlzdGVucy5nZXQocGF0aFN0cmluZykuaGFzKHF1ZXJ5SWQpLCBgbGlzdGVuKCkgY2FsbGVkIHR3aWNlIGZvciBzYW1lIHBhdGgvcXVlcnlJZC5gKTtcbiAgICAgICAgY29uc3QgbGlzdGVuU3BlYyA9IHtcbiAgICAgICAgICAgIG9uQ29tcGxldGUsXG4gICAgICAgICAgICBoYXNoRm46IGN1cnJlbnRIYXNoRm4sXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHRhZ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3RlbnMuZ2V0KHBhdGhTdHJpbmcpLnNldChxdWVyeUlkLCBsaXN0ZW5TcGVjKTtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICAgICAgdGhpcy5zZW5kTGlzdGVuXyhsaXN0ZW5TcGVjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZW5kR2V0XyhpbmRleCkge1xuICAgICAgICBjb25zdCBnZXQgPSB0aGlzLm91dHN0YW5kaW5nR2V0c19baW5kZXhdO1xuICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KCdnJywgZ2V0LnJlcXVlc3QsIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vdXRzdGFuZGluZ0dldHNfW2luZGV4XTtcbiAgICAgICAgICAgIHRoaXMub3V0c3RhbmRpbmdHZXRDb3VudF8tLTtcbiAgICAgICAgICAgIGlmICh0aGlzLm91dHN0YW5kaW5nR2V0Q291bnRfID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ0dldHNfID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0Lm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBnZXQub25Db21wbGV0ZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlbmRMaXN0ZW5fKGxpc3RlblNwZWMpIHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBsaXN0ZW5TcGVjLnF1ZXJ5O1xuICAgICAgICBjb25zdCBwYXRoU3RyaW5nID0gcXVlcnkuX3BhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgcXVlcnlJZCA9IHF1ZXJ5Ll9xdWVyeUlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMubG9nXygnTGlzdGVuIG9uICcgKyBwYXRoU3RyaW5nICsgJyBmb3IgJyArIHF1ZXJ5SWQpO1xuICAgICAgICBjb25zdCByZXEgPSB7IC8qcGF0aCovIHA6IHBhdGhTdHJpbmcgfTtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gJ3EnO1xuICAgICAgICAvLyBPbmx5IGJvdGhlciB0byBzZW5kIHF1ZXJ5IGlmIGl0J3Mgbm9uLWRlZmF1bHQuXG4gICAgICAgIGlmIChsaXN0ZW5TcGVjLnRhZykge1xuICAgICAgICAgICAgcmVxWydxJ10gPSBxdWVyeS5fcXVlcnlPYmplY3Q7XG4gICAgICAgICAgICByZXFbJ3QnXSA9IGxpc3RlblNwZWMudGFnO1xuICAgICAgICB9XG4gICAgICAgIHJlcVsgLypoYXNoKi8naCddID0gbGlzdGVuU3BlYy5oYXNoRm4oKTtcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcSwgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBtZXNzYWdlWyAvKmRhdGEqLydkJ107XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBtZXNzYWdlWyAvKnN0YXR1cyovJ3MnXTtcbiAgICAgICAgICAgIC8vIHByaW50IHdhcm5pbmdzIGluIGFueSBjYXNlLi4uXG4gICAgICAgICAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi53YXJuT25MaXN0ZW5XYXJuaW5nc18ocGF5bG9hZCwgcXVlcnkpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudExpc3RlblNwZWMgPSB0aGlzLmxpc3RlbnMuZ2V0KHBhdGhTdHJpbmcpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5zLmdldChwYXRoU3RyaW5nKS5nZXQocXVlcnlJZCk7XG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYWN0aW9ucyBpZiB0aGUgbGlzdGVuIGhhc24ndCBiZWVuIHJlbW92ZWQgYW5kIHJlYWRkZWRcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGlzdGVuU3BlYyA9PT0gbGlzdGVuU3BlYykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnbGlzdGVuIHJlc3BvbnNlJywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ29rJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3Rlbl8ocGF0aFN0cmluZywgcXVlcnlJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5TcGVjLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuU3BlYy5vbkNvbXBsZXRlKHN0YXR1cywgcGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHdhcm5Pbkxpc3Rlbldhcm5pbmdzXyhwYXlsb2FkLCBxdWVyeSkge1xuICAgICAgICBpZiAocGF5bG9hZCAmJiB0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcgJiYgY29udGFpbnMocGF5bG9hZCwgJ3cnKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGNvbnN0IHdhcm5pbmdzID0gc2FmZUdldChwYXlsb2FkLCAndycpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2FybmluZ3MpICYmIH53YXJuaW5ncy5pbmRleE9mKCdub19pbmRleCcpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhTcGVjID0gJ1wiLmluZGV4T25cIjogXCInICsgcXVlcnkuX3F1ZXJ5UGFyYW1zLmdldEluZGV4KCkudG9TdHJpbmcoKSArICdcIic7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXhQYXRoID0gcXVlcnkuX3BhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3YXJuKGBVc2luZyBhbiB1bnNwZWNpZmllZCBpbmRleC4gWW91ciBkYXRhIHdpbGwgYmUgZG93bmxvYWRlZCBhbmQgYCArXG4gICAgICAgICAgICAgICAgICAgIGBmaWx0ZXJlZCBvbiB0aGUgY2xpZW50LiBDb25zaWRlciBhZGRpbmcgJHtpbmRleFNwZWN9IGF0IGAgK1xuICAgICAgICAgICAgICAgICAgICBgJHtpbmRleFBhdGh9IHRvIHlvdXIgc2VjdXJpdHkgcnVsZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZWZyZXNoQXV0aFRva2VuKHRva2VuKSB7XG4gICAgICAgIHRoaXMuYXV0aFRva2VuXyA9IHRva2VuO1xuICAgICAgICB0aGlzLmxvZ18oJ0F1dGggdG9rZW4gcmVmcmVzaGVkJyk7XG4gICAgICAgIGlmICh0aGlzLmF1dGhUb2tlbl8pIHtcbiAgICAgICAgICAgIHRoaXMudHJ5QXV0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy9JZiB3ZSdyZSBjb25uZWN0ZWQgd2Ugd2FudCB0byBsZXQgdGhlIHNlcnZlciBrbm93IHRvIHVuYXV0aGVudGljYXRlIHVzLiBJZiB3ZSdyZSBub3QgY29ubmVjdGVkLCBzaW1wbHkgZGVsZXRlXG4gICAgICAgICAgICAvL3RoZSBjcmVkZW50aWFsIHNvIHdlIGRvbnQgYmVjb21lIGF1dGhlbnRpY2F0ZWQgbmV4dCB0aW1lIHdlIGNvbm5lY3QuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdCgndW5hdXRoJywge30sICgpID0+IHsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWR1Y2VSZWNvbm5lY3REZWxheUlmQWRtaW5DcmVkZW50aWFsXyh0b2tlbik7XG4gICAgfVxuICAgIHJlZHVjZVJlY29ubmVjdERlbGF5SWZBZG1pbkNyZWRlbnRpYWxfKGNyZWRlbnRpYWwpIHtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpc24ndCBpbnRlbmRlZCB0byBiZSBidWxsZXRwcm9vZiAoYSBtYWxpY2lvdXMgZGV2ZWxvcGVyIGNhbiBhbHdheXMganVzdCBtb2RpZnkgdGhlIGNsaWVudCkuXG4gICAgICAgIC8vIEFkZGl0aW9uYWxseSwgd2UgZG9uJ3QgYm90aGVyIHJlc2V0dGluZyB0aGUgbWF4IGRlbGF5IGJhY2sgdG8gdGhlIGRlZmF1bHQgaWYgYXV0aCBmYWlscyAvIGV4cGlyZXMuXG4gICAgICAgIGNvbnN0IGlzRmlyZWJhc2VTZWNyZXQgPSBjcmVkZW50aWFsICYmIGNyZWRlbnRpYWwubGVuZ3RoID09PSA0MDtcbiAgICAgICAgaWYgKGlzRmlyZWJhc2VTZWNyZXQgfHwgaXNBZG1pbihjcmVkZW50aWFsKSkge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdBZG1pbiBhdXRoIGNyZWRlbnRpYWwgZGV0ZWN0ZWQuICBSZWR1Y2luZyBtYXggcmVjb25uZWN0IHRpbWUuJyk7XG4gICAgICAgICAgICB0aGlzLm1heFJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NQVhfREVMQVlfRk9SX0FETUlOUztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWZyZXNoQXBwQ2hlY2tUb2tlbih0b2tlbikge1xuICAgICAgICB0aGlzLmFwcENoZWNrVG9rZW5fID0gdG9rZW47XG4gICAgICAgIHRoaXMubG9nXygnQXBwIGNoZWNrIHRva2VuIHJlZnJlc2hlZCcpO1xuICAgICAgICBpZiAodGhpcy5hcHBDaGVja1Rva2VuXykge1xuICAgICAgICAgICAgdGhpcy50cnlBcHBDaGVjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy9JZiB3ZSdyZSBjb25uZWN0ZWQgd2Ugd2FudCB0byBsZXQgdGhlIHNlcnZlciBrbm93IHRvIHVuYXV0aGVudGljYXRlIHVzLlxuICAgICAgICAgICAgLy9JZiB3ZSdyZSBub3QgY29ubmVjdGVkLCBzaW1wbHkgZGVsZXRlIHRoZSBjcmVkZW50aWFsIHNvIHdlIGRvbnQgYmVjb21lXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGVkIG5leHQgdGltZSB3ZSBjb25uZWN0LlxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoJ3VuYXBwZWNrJywge30sICgpID0+IHsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIGdpdmVuIGNyZWRlbnRpYWxzLiBJZiB0aGUgYXV0aGVudGljYXRpb24gYXR0ZW1wdCBmYWlscywgaXQncyB0cmlnZ2VyZWQgbGlrZVxuICAgICAqIGEgYXV0aCByZXZva2VkICh0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQpLlxuICAgICAqL1xuICAgIHRyeUF1dGgoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8gJiYgdGhpcy5hdXRoVG9rZW5fKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuYXV0aFRva2VuXztcbiAgICAgICAgICAgIGNvbnN0IGF1dGhNZXRob2QgPSBpc1ZhbGlkRm9ybWF0KHRva2VuKSA/ICdhdXRoJyA6ICdnYXV0aCc7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IHsgY3JlZDogdG9rZW4gfTtcbiAgICAgICAgICAgIGlmICh0aGlzLmF1dGhPdmVycmlkZV8gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YVsnbm9hdXRoJ10gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuYXV0aE92ZXJyaWRlXyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0RGF0YVsnYXV0aHZhciddID0gdGhpcy5hdXRoT3ZlcnJpZGVfO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhdXRoTWV0aG9kLCByZXF1ZXN0RGF0YSwgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHJlc1sgLypzdGF0dXMqLydzJ107XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHJlc1sgLypkYXRhKi8nZCddIHx8ICdlcnJvcic7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0aFRva2VuXyA9PT0gdG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJzIHJlY29ubmVjdCBhbmQgZm9yY2UgcmVmcmVzaCBmb3IgYXV0aCB0b2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkF1dGhSZXZva2VkXyhzdGF0dXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gYXV0aGVudGljYXRlIHdpdGggdGhlIGdpdmVuIHRva2VuLiBJZiB0aGUgYXV0aGVudGljYXRpb25cbiAgICAgKiBhdHRlbXB0IGZhaWxzLCBpdCdzIHRyaWdnZXJlZCBsaWtlIHRoZSB0b2tlbiB3YXMgcmV2b2tlZCAodGhlIGNvbm5lY3Rpb24gaXNcbiAgICAgKiBjbG9zZWQpLlxuICAgICAqL1xuICAgIHRyeUFwcENoZWNrKCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfICYmIHRoaXMuYXBwQ2hlY2tUb2tlbl8pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoJ2FwcGNoZWNrJywgeyAndG9rZW4nOiB0aGlzLmFwcENoZWNrVG9rZW5fIH0sIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSByZXNbIC8qc3RhdHVzKi8ncyddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNbIC8qZGF0YSovJ2QnXSB8fCAnZXJyb3InO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkQXBwQ2hlY2tUb2tlbkNvdW50XyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQXBwQ2hlY2tSZXZva2VkXyhzdGF0dXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgdW5saXN0ZW4ocXVlcnksIHRhZykge1xuICAgICAgICBjb25zdCBwYXRoU3RyaW5nID0gcXVlcnkuX3BhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgcXVlcnlJZCA9IHF1ZXJ5Ll9xdWVyeUlkZW50aWZpZXI7XG4gICAgICAgIHRoaXMubG9nXygnVW5saXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5SWQpO1xuICAgICAgICBhc3NlcnQocXVlcnkuX3F1ZXJ5UGFyYW1zLmlzRGVmYXVsdCgpIHx8ICFxdWVyeS5fcXVlcnlQYXJhbXMubG9hZHNBbGxEYXRhKCksICd1bmxpc3RlbigpIGNhbGxlZCBmb3Igbm9uLWRlZmF1bHQgYnV0IGNvbXBsZXRlIHF1ZXJ5Jyk7XG4gICAgICAgIGNvbnN0IGxpc3RlbiA9IHRoaXMucmVtb3ZlTGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkKTtcbiAgICAgICAgaWYgKGxpc3RlbiAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZFVubGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkLCBxdWVyeS5fcXVlcnlPYmplY3QsIHRhZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VuZFVubGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkLCBxdWVyeU9iaiwgdGFnKSB7XG4gICAgICAgIHRoaXMubG9nXygnVW5saXN0ZW4gb24gJyArIHBhdGhTdHJpbmcgKyAnIGZvciAnICsgcXVlcnlJZCk7XG4gICAgICAgIGNvbnN0IHJlcSA9IHsgLypwYXRoKi8gcDogcGF0aFN0cmluZyB9O1xuICAgICAgICBjb25zdCBhY3Rpb24gPSAnbic7XG4gICAgICAgIC8vIE9ubHkgYm90aGVyIHNlbmRpbmcgcXVlcnlJZCBpZiBpdCdzIG5vbi1kZWZhdWx0LlxuICAgICAgICBpZiAodGFnKSB7XG4gICAgICAgICAgICByZXFbJ3EnXSA9IHF1ZXJ5T2JqO1xuICAgICAgICAgICAgcmVxWyd0J10gPSB0YWc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcSk7XG4gICAgfVxuICAgIG9uRGlzY29ubmVjdFB1dChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuaW5pdENvbm5lY3Rpb25fKCk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uRGlzY29ubmVjdF8oJ28nLCBwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwYXRoU3RyaW5nLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ28nLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EaXNjb25uZWN0TWVyZ2UocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkge1xuICAgICAgICB0aGlzLmluaXRDb25uZWN0aW9uXygpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRPbkRpc2Nvbm5lY3RfKCdvbScsIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RSZXF1ZXN0UXVldWVfLnB1c2goe1xuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnb20nLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EaXNjb25uZWN0Q2FuY2VsKHBhdGhTdHJpbmcsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5pbml0Q29ubmVjdGlvbl8oKTtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICAgICAgdGhpcy5zZW5kT25EaXNjb25uZWN0Xygnb2MnLCBwYXRoU3RyaW5nLCBudWxsLCBvbkNvbXBsZXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwYXRoU3RyaW5nLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ29jJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRPbkRpc2Nvbm5lY3RfKGFjdGlvbiwgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0geyAvKnBhdGgqLyBwOiBwYXRoU3RyaW5nLCAvKmRhdGEqLyBkOiBkYXRhIH07XG4gICAgICAgIHRoaXMubG9nXygnb25EaXNjb25uZWN0ICcgKyBhY3Rpb24sIHJlcXVlc3QpO1xuICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGFjdGlvbiwgcmVxdWVzdCwgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKHJlc3BvbnNlWyAvKnN0YXR1cyovJ3MnXSwgcmVzcG9uc2VbIC8qIGRhdGEgKi8nZCddKTtcbiAgICAgICAgICAgICAgICB9LCBNYXRoLmZsb29yKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1dChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKSB7XG4gICAgICAgIHRoaXMucHV0SW50ZXJuYWwoJ3AnLCBwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKTtcbiAgICB9XG4gICAgbWVyZ2UocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xuICAgICAgICB0aGlzLnB1dEludGVybmFsKCdtJywgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCk7XG4gICAgfVxuICAgIHB1dEludGVybmFsKGFjdGlvbiwgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xuICAgICAgICB0aGlzLmluaXRDb25uZWN0aW9uXygpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgLypwYXRoKi8gcDogcGF0aFN0cmluZyxcbiAgICAgICAgICAgIC8qZGF0YSovIGQ6IGRhdGFcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVxdWVzdFsgLypoYXNoKi8naCddID0gaGFzaDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBPbmx5IGtlZXAgdHJhY2sgb2YgdGhlIG1vc3QgcmVjZW50IHB1dCBmb3IgYSBnaXZlbiBwYXRoP1xuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0c18ucHVzaCh7XG4gICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgb25Db21wbGV0ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1B1dENvdW50XysrO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMub3V0c3RhbmRpbmdQdXRzXy5sZW5ndGggLSAxO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRQdXRfKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnVmZmVyaW5nIHB1dDogJyArIHBhdGhTdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbmRQdXRfKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF0uYWN0aW9uO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2luZGV4XS5yZXF1ZXN0O1xuICAgICAgICBjb25zdCBvbkNvbXBsZXRlID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2luZGV4XS5vbkNvbXBsZXRlO1xuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0c19baW5kZXhdLnF1ZXVlZCA9IHRoaXMuY29ubmVjdGVkXztcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcXVlc3QsIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oYWN0aW9uICsgJyByZXNwb25zZScsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF07XG4gICAgICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfLS07XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBhcnJheSBvY2Nhc2lvbmFsbHkuXG4gICAgICAgICAgICBpZiAodGhpcy5vdXRzdGFuZGluZ1B1dENvdW50XyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0c3RhbmRpbmdQdXRzXyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKG1lc3NhZ2VbIC8qc3RhdHVzKi8ncyddLCBtZXNzYWdlWyAvKiBkYXRhICovJ2QnXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXBvcnRTdGF0cyhzdGF0cykge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3QgY29ubmVjdGVkLCB3ZSBqdXN0IGRyb3AgdGhlIHN0YXRzLlxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0geyAvKmNvdW50ZXJzKi8gYzogc3RhdHMgfTtcbiAgICAgICAgICAgIHRoaXMubG9nXygncmVwb3J0U3RhdHMnLCByZXF1ZXN0KTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoLypzdGF0cyovICdzJywgcmVxdWVzdCwgcmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSByZXN1bHRbIC8qc3RhdHVzKi8ncyddO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09ICdvaycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JSZWFzb24gPSByZXN1bHRbIC8qIGRhdGEgKi8nZCddO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ3JlcG9ydFN0YXRzJywgJ0Vycm9yIHNlbmRpbmcgc3RhdHM6ICcgKyBlcnJvclJlYXNvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25EYXRhTWVzc2FnZV8obWVzc2FnZSkge1xuICAgICAgICBpZiAoJ3InIGluIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSByZXNwb25zZVxuICAgICAgICAgICAgdGhpcy5sb2dfKCdmcm9tIHNlcnZlcjogJyArIHN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgICAgICAgICBjb25zdCByZXFOdW0gPSBtZXNzYWdlWydyJ107XG4gICAgICAgICAgICBjb25zdCBvblJlc3BvbnNlID0gdGhpcy5yZXF1ZXN0Q0JIYXNoX1tyZXFOdW1dO1xuICAgICAgICAgICAgaWYgKG9uUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZXF1ZXN0Q0JIYXNoX1tyZXFOdW1dO1xuICAgICAgICAgICAgICAgIG9uUmVzcG9uc2UobWVzc2FnZVsgLypib2R5Ki8nYiddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgnZXJyb3InIGluIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRocm93ICdBIHNlcnZlci1zaWRlIGVycm9yIGhhcyBvY2N1cnJlZDogJyArIG1lc3NhZ2VbJ2Vycm9yJ107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ2EnIGluIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8vIGEgYW5kIGIgYXJlIGFjdGlvbiBhbmQgYm9keSwgcmVzcGVjdGl2ZWx5XG4gICAgICAgICAgICB0aGlzLm9uRGF0YVB1c2hfKG1lc3NhZ2VbJ2EnXSwgbWVzc2FnZVsnYiddKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRhdGFQdXNoXyhhY3Rpb24sIGJvZHkpIHtcbiAgICAgICAgdGhpcy5sb2dfKCdoYW5kbGVTZXJ2ZXJNZXNzYWdlJywgYWN0aW9uLCBib2R5KTtcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ2QnKSB7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8oYm9keVsgLypwYXRoKi8ncCddLCBib2R5WyAvKmRhdGEqLydkJ10sIFxuICAgICAgICAgICAgLyppc01lcmdlKi8gZmFsc2UsIGJvZHlbJ3QnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnbScpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXRhVXBkYXRlXyhib2R5WyAvKnBhdGgqLydwJ10sIGJvZHlbIC8qZGF0YSovJ2QnXSwgXG4gICAgICAgICAgICAvKmlzTWVyZ2U9Ki8gdHJ1ZSwgYm9keVsndCddKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdjJykge1xuICAgICAgICAgICAgdGhpcy5vbkxpc3RlblJldm9rZWRfKGJvZHlbIC8qcGF0aCovJ3AnXSwgYm9keVsgLypxdWVyeSovJ3EnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnYWMnKSB7XG4gICAgICAgICAgICB0aGlzLm9uQXV0aFJldm9rZWRfKGJvZHlbIC8qc3RhdHVzIGNvZGUqLydzJ10sIGJvZHlbIC8qIGV4cGxhbmF0aW9uICovJ2QnXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnYXBjJykge1xuICAgICAgICAgICAgdGhpcy5vbkFwcENoZWNrUmV2b2tlZF8oYm9keVsgLypzdGF0dXMgY29kZSovJ3MnXSwgYm9keVsgLyogZXhwbGFuYXRpb24gKi8nZCddKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdzZCcpIHtcbiAgICAgICAgICAgIHRoaXMub25TZWN1cml0eURlYnVnUGFja2V0Xyhib2R5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yKCdVbnJlY29nbml6ZWQgYWN0aW9uIHJlY2VpdmVkIGZyb20gc2VydmVyOiAnICtcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoYWN0aW9uKSArXG4gICAgICAgICAgICAgICAgJ1xcbkFyZSB5b3UgdXNpbmcgdGhlIGxhdGVzdCBjbGllbnQ/Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25SZWFkeV8odGltZXN0YW1wLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgdGhpcy5sb2dfKCdjb25uZWN0aW9uIHJlYWR5Jyk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XG4gICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlVGltZXN0YW1wXyh0aW1lc3RhbXApO1xuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgICAgIGlmICh0aGlzLmZpcnN0Q29ubmVjdGlvbl8pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZENvbm5lY3RTdGF0c18oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc3RvcmVTdGF0ZV8oKTtcbiAgICAgICAgdGhpcy5maXJzdENvbm5lY3Rpb25fID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25Db25uZWN0U3RhdHVzXyh0cnVlKTtcbiAgICB9XG4gICAgc2NoZWR1bGVDb25uZWN0Xyh0aW1lb3V0KSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5yZWFsdGltZV8sIFwiU2NoZWR1bGluZyBhIGNvbm5lY3Qgd2hlbiB3ZSdyZSBhbHJlYWR5IGNvbm5lY3RlZC9pbmc/XCIpO1xuICAgICAgICBpZiAodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOT1RFOiBFdmVuIHdoZW4gdGltZW91dCBpcyAwLCBpdCdzIGltcG9ydGFudCB0byBkbyBhIHNldFRpbWVvdXQgdG8gd29yayBhcm91bmQgYW4gaW5mdXJpYXRpbmcgXCJTZWN1cml0eSBFcnJvclwiIGluXG4gICAgICAgIC8vIEZpcmVmb3ggd2hlbiB0cnlpbmcgdG8gd3JpdGUgdG8gb3VyIGxvbmctcG9sbGluZyBpZnJhbWUgaW4gc29tZSBzY2VuYXJpb3MgKGUuZy4gRm9yZ2Ugb3Igb3VyIHVuaXQgdGVzdHMpLlxuICAgICAgICB0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25fKCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB9LCBNYXRoLmZsb29yKHRpbWVvdXQpKTtcbiAgICB9XG4gICAgaW5pdENvbm5lY3Rpb25fKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfICYmIHRoaXMuZmlyc3RDb25uZWN0aW9uXykge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uVmlzaWJsZV8odmlzaWJsZSkge1xuICAgICAgICAvLyBOT1RFOiBUYWJiaW5nIGF3YXkgYW5kIGJhY2sgdG8gYSB3aW5kb3cgd2lsbCBkZWZlYXQgb3VyIHJlY29ubmVjdCBiYWNrb2ZmLCBidXQgSSB0aGluayB0aGF0J3MgZmluZS5cbiAgICAgICAgaWYgKHZpc2libGUgJiZcbiAgICAgICAgICAgICF0aGlzLnZpc2libGVfICYmXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9PT0gdGhpcy5tYXhSZWNvbm5lY3REZWxheV8pIHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnV2luZG93IGJlY2FtZSB2aXNpYmxlLiAgUmVkdWNpbmcgZGVsYXkuJyk7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NSU5fREVMQVk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmlzaWJsZV8gPSB2aXNpYmxlO1xuICAgIH1cbiAgICBvbk9ubGluZV8ob25saW5lKSB7XG4gICAgICAgIGlmIChvbmxpbmUpIHtcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnJvd3NlciB3ZW50IG9ubGluZS4nKTtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWFsdGltZV8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0Jyb3dzZXIgd2VudCBvZmZsaW5lLiAgS2lsbGluZyBjb25uZWN0aW9uLicpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhbHRpbWVfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvblJlYWx0aW1lRGlzY29ubmVjdF8oKSB7XG4gICAgICAgIHRoaXMubG9nXygnZGF0YSBjbGllbnQgZGlzY29ubmVjdGVkJyk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlYWx0aW1lXyA9IG51bGw7XG4gICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgaWYgb3VyIHNlbnQgdHJhbnNhY3Rpb25zIHN1Y2NlZWRlZCBvciBub3QsIHdlIG5lZWQgdG8gY2FuY2VsIHRoZW0uXG4gICAgICAgIHRoaXMuY2FuY2VsU2VudFRyYW5zYWN0aW9uc18oKTtcbiAgICAgICAgLy8gQ2xlYXIgb3V0IHRoZSBwZW5kaW5nIHJlcXVlc3RzLlxuICAgICAgICB0aGlzLnJlcXVlc3RDQkhhc2hfID0ge307XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJlY29ubmVjdF8oKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZpc2libGVfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKFwiV2luZG93IGlzbid0IHZpc2libGUuICBEZWxheWluZyByZWNvbm5lY3QuXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gdGhpcy5tYXhSZWNvbm5lY3REZWxheV87XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkF0dGVtcHRUaW1lXyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSBiZWVuIGNvbm5lY3RlZCBsb25nIGVub3VnaCwgcmVzZXQgcmVjb25uZWN0IGRlbGF5IHRvIG1pbmltdW0uXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZVNpbmNlTGFzdENvbm5lY3RTdWNjZWVkZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMubGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lU2luY2VMYXN0Q29ubmVjdFN1Y2NlZWRlZCA+IFJFQ09OTkVDVF9ERUxBWV9SRVNFVF9USU1FT1VUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGltZVNpbmNlTGFzdENvbm5lY3RBdHRlbXB0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfO1xuICAgICAgICAgICAgbGV0IHJlY29ubmVjdERlbGF5ID0gTWF0aC5tYXgoMCwgdGhpcy5yZWNvbm5lY3REZWxheV8gLSB0aW1lU2luY2VMYXN0Q29ubmVjdEF0dGVtcHQpO1xuICAgICAgICAgICAgcmVjb25uZWN0RGVsYXkgPSBNYXRoLnJhbmRvbSgpICogcmVjb25uZWN0RGVsYXk7XG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1RyeWluZyB0byByZWNvbm5lY3QgaW4gJyArIHJlY29ubmVjdERlbGF5ICsgJ21zJyk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8ocmVjb25uZWN0RGVsYXkpO1xuICAgICAgICAgICAgLy8gQWRqdXN0IHJlY29ubmVjdCBkZWxheSBmb3IgbmV4dCB0aW1lLlxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBNYXRoLm1pbih0aGlzLm1heFJlY29ubmVjdERlbGF5XywgdGhpcy5yZWNvbm5lY3REZWxheV8gKiBSRUNPTk5FQ1RfREVMQVlfTVVMVElQTElFUik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkNvbm5lY3RTdGF0dXNfKGZhbHNlKTtcbiAgICB9XG4gICAgYXN5bmMgZXN0YWJsaXNoQ29ubmVjdGlvbl8oKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJlY29ubmVjdF8oKSkge1xuICAgICAgICAgICAgdGhpcy5sb2dfKCdNYWtpbmcgYSBjb25uZWN0aW9uIGF0dGVtcHQnKTtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25BdHRlbXB0VGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IG9uRGF0YU1lc3NhZ2UgPSB0aGlzLm9uRGF0YU1lc3NhZ2VfLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBvblJlYWR5ID0gdGhpcy5vblJlYWR5Xy5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgY29uc3Qgb25EaXNjb25uZWN0ID0gdGhpcy5vblJlYWx0aW1lRGlzY29ubmVjdF8uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5JZCA9IHRoaXMuaWQgKyAnOicgKyBQZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0Q29ubmVjdGlvbklkXysrO1xuICAgICAgICAgICAgY29uc3QgbGFzdFNlc3Npb25JZCA9IHRoaXMubGFzdFNlc3Npb25JZDtcbiAgICAgICAgICAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgY2xvc2VGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9uRGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBzZW5kUmVxdWVzdEZuID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgICAgIGFzc2VydChjb25uZWN0aW9uLCBcInNlbmRSZXF1ZXN0IGNhbGwgd2hlbiB3ZSdyZSBub3QgY29ubmVjdGVkIG5vdCBhbGxvd2VkLlwiKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnNlbmRSZXF1ZXN0KG1zZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5yZWFsdGltZV8gPSB7XG4gICAgICAgICAgICAgICAgY2xvc2U6IGNsb3NlRm4sXG4gICAgICAgICAgICAgICAgc2VuZFJlcXVlc3Q6IHNlbmRSZXF1ZXN0Rm5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBmb3JjZVJlZnJlc2ggPSB0aGlzLmZvcmNlVG9rZW5SZWZyZXNoXztcbiAgICAgICAgICAgIHRoaXMuZm9yY2VUb2tlblJlZnJlc2hfID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEZpcnN0IGZldGNoIGF1dGggYW5kIGFwcCBjaGVjayB0b2tlbiwgYW5kIGVzdGFibGlzaCBjb25uZWN0aW9uIGFmdGVyXG4gICAgICAgICAgICAgICAgLy8gZmV0Y2hpbmcgdGhlIHRva2VuIHdhcyBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgY29uc3QgW2F1dGhUb2tlbiwgYXBwQ2hlY2tUb2tlbl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aFRva2VuUHJvdmlkZXJfLmdldFRva2VuKGZvcmNlUmVmcmVzaCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwQ2hlY2tUb2tlblByb3ZpZGVyXy5nZXRUb2tlbihmb3JjZVJlZnJlc2gpXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBsb2coJ2dldFRva2VuKCkgY29tcGxldGVkLiBDcmVhdGluZyBjb25uZWN0aW9uLicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhUb2tlbl8gPSBhdXRoVG9rZW4gJiYgYXV0aFRva2VuLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcENoZWNrVG9rZW5fID0gYXBwQ2hlY2tUb2tlbiAmJiBhcHBDaGVja1Rva2VuLnRva2VuO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb24oY29ubklkLCB0aGlzLnJlcG9JbmZvXywgdGhpcy5hcHBsaWNhdGlvbklkXywgdGhpcy5hcHBDaGVja1Rva2VuXywgdGhpcy5hdXRoVG9rZW5fLCBvbkRhdGFNZXNzYWdlLCBvblJlYWR5LCBvbkRpc2Nvbm5lY3QsIFxuICAgICAgICAgICAgICAgICAgICAvKiBvbktpbGw9ICovIHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKHJlYXNvbiArICcgKCcgKyB0aGlzLnJlcG9JbmZvXy50b1N0cmluZygpICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJydXB0KFNFUlZFUl9LSUxMX0lOVEVSUlVQVF9SRUFTT04pO1xuICAgICAgICAgICAgICAgICAgICB9LCBsYXN0U2Vzc2lvbklkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZygnZ2V0VG9rZW4oKSBjb21wbGV0ZWQgYnV0IHdhcyBjYW5jZWxlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnRmFpbGVkIHRvIGdldCB0b2tlbjogJyArIGVycm9yKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlcG9JbmZvXy5ub2RlQWRtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF5IGJlIGEgY3JpdGljYWwgZXJyb3IgZm9yIHRoZSBBZG1pbiBOb2RlLmpzIFNESywgc28gbG9nIGEgd2FybmluZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ1dCBnZXRUb2tlbigpIG1heSBhbHNvIGp1c3QgaGF2ZSB0ZW1wb3JhcmlseSBmYWlsZWQsIHNvIHdlIHN0aWxsIHdhbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRpbnVlIHJldHJ5aW5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xvc2VGbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnRlcnJ1cHQocmVhc29uKSB7XG4gICAgICAgIGxvZygnSW50ZXJydXB0aW5nIGNvbm5lY3Rpb24gZm9yIHJlYXNvbjogJyArIHJlYXNvbik7XG4gICAgICAgIHRoaXMuaW50ZXJydXB0UmVhc29uc19bcmVhc29uXSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnJlYWx0aW1lXykge1xuICAgICAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8pIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICAgICAgICAgIHRoaXMub25SZWFsdGltZURpc2Nvbm5lY3RfKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdW1lKHJlYXNvbikge1xuICAgICAgICBsb2coJ1Jlc3VtaW5nIGNvbm5lY3Rpb24gZm9yIHJlYXNvbjogJyArIHJlYXNvbik7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmludGVycnVwdFJlYXNvbnNfW3JlYXNvbl07XG4gICAgICAgIGlmIChpc0VtcHR5KHRoaXMuaW50ZXJydXB0UmVhc29uc18pKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9IFJFQ09OTkVDVF9NSU5fREVMQVk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZVRpbWVzdGFtcF8odGltZXN0YW1wKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGltZXN0YW1wIC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMub25TZXJ2ZXJJbmZvVXBkYXRlXyh7IHNlcnZlclRpbWVPZmZzZXQ6IGRlbHRhIH0pO1xuICAgIH1cbiAgICBjYW5jZWxTZW50VHJhbnNhY3Rpb25zXygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm91dHN0YW5kaW5nUHV0c18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHB1dCA9IHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpXTtcbiAgICAgICAgICAgIGlmIChwdXQgJiYgLypoYXNoKi8gJ2gnIGluIHB1dC5yZXF1ZXN0ICYmIHB1dC5xdWV1ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocHV0Lm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcHV0Lm9uQ29tcGxldGUoJ2Rpc2Nvbm5lY3QnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xlYW4gdXAgYXJyYXkgb2NjYXNpb25hbGx5LlxuICAgICAgICBpZiAodGhpcy5vdXRzdGFuZGluZ1B1dENvdW50XyA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1B1dHNfID0gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25MaXN0ZW5SZXZva2VkXyhwYXRoU3RyaW5nLCBxdWVyeSkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3RlbiBhbmQgbWFudWZhY3R1cmUgYSBcInBlcm1pc3Npb25fZGVuaWVkXCIgZXJyb3IgZm9yIHRoZSBmYWlsZWQgbGlzdGVuLlxuICAgICAgICBsZXQgcXVlcnlJZDtcbiAgICAgICAgaWYgKCFxdWVyeSkge1xuICAgICAgICAgICAgcXVlcnlJZCA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5SWQgPSBxdWVyeS5tYXAocSA9PiBPYmplY3RUb1VuaXF1ZUtleShxKSkuam9pbignJCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbiA9IHRoaXMucmVtb3ZlTGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkKTtcbiAgICAgICAgaWYgKGxpc3RlbiAmJiBsaXN0ZW4ub25Db21wbGV0ZSkge1xuICAgICAgICAgICAgbGlzdGVuLm9uQ29tcGxldGUoJ3Blcm1pc3Npb25fZGVuaWVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlTGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRQYXRoU3RyaW5nID0gbmV3IFBhdGgocGF0aFN0cmluZykudG9TdHJpbmcoKTsgLy8gbm9ybWFsaXplIHBhdGguXG4gICAgICAgIGxldCBsaXN0ZW47XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbnMuaGFzKG5vcm1hbGl6ZWRQYXRoU3RyaW5nKSkge1xuICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5saXN0ZW5zLmdldChub3JtYWxpemVkUGF0aFN0cmluZyk7XG4gICAgICAgICAgICBsaXN0ZW4gPSBtYXAuZ2V0KHF1ZXJ5SWQpO1xuICAgICAgICAgICAgbWFwLmRlbGV0ZShxdWVyeUlkKTtcbiAgICAgICAgICAgIGlmIChtYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVucy5kZWxldGUobm9ybWFsaXplZFBhdGhTdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYWxsIGxpc3RlbnMgZm9yIHRoaXMgcGF0aCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIGxpc3RlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdGVuO1xuICAgIH1cbiAgICBvbkF1dGhSZXZva2VkXyhzdGF0dXNDb2RlLCBleHBsYW5hdGlvbikge1xuICAgICAgICBsb2coJ0F1dGggdG9rZW4gcmV2b2tlZDogJyArIHN0YXR1c0NvZGUgKyAnLycgKyBleHBsYW5hdGlvbik7XG4gICAgICAgIHRoaXMuYXV0aFRva2VuXyA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9yY2VUb2tlblJlZnJlc2hfID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcbiAgICAgICAgaWYgKHN0YXR1c0NvZGUgPT09ICdpbnZhbGlkX3Rva2VuJyB8fCBzdGF0dXNDb2RlID09PSAncGVybWlzc2lvbl9kZW5pZWQnKSB7XG4gICAgICAgICAgICAvLyBXZSdsbCB3YWl0IGEgY291cGxlIHRpbWVzIGJlZm9yZSBsb2dnaW5nIHRoZSB3YXJuaW5nIC8gaW5jcmVhc2luZyB0aGVcbiAgICAgICAgICAgIC8vIHJldHJ5IHBlcmlvZCBzaW5jZSBvYXV0aCB0b2tlbnMgd2lsbCByZXBvcnQgYXMgXCJpbnZhbGlkXCIgaWYgdGhleSdyZVxuICAgICAgICAgICAgLy8ganVzdCBleHBpcmVkLiBQbHVzIHRoZXJlIG1heSBiZSB0cmFuc2llbnQgaXNzdWVzIHRoYXQgcmVzb2x2ZSB0aGVtc2VsdmVzLlxuICAgICAgICAgICAgdGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfKys7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID49IElOVkFMSURfVE9LRU5fVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0IGEgbG9uZyByZWNvbm5lY3QgZGVsYXkgYmVjYXVzZSByZWNvdmVyeSBpcyB1bmxpa2VseVxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01BWF9ERUxBWV9GT1JfQURNSU5TO1xuICAgICAgICAgICAgICAgIC8vIE5vdGlmeSB0aGUgYXV0aCB0b2tlbiBwcm92aWRlciB0aGF0IHRoZSB0b2tlbiBpcyBpbnZhbGlkLCB3aGljaCB3aWxsIGxvZ1xuICAgICAgICAgICAgICAgIC8vIGEgd2FybmluZ1xuICAgICAgICAgICAgICAgIHRoaXMuYXV0aFRva2VuUHJvdmlkZXJfLm5vdGlmeUZvckludmFsaWRUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG9uQXBwQ2hlY2tSZXZva2VkXyhzdGF0dXNDb2RlLCBleHBsYW5hdGlvbikge1xuICAgICAgICBsb2coJ0FwcCBjaGVjayB0b2tlbiByZXZva2VkOiAnICsgc3RhdHVzQ29kZSArICcvJyArIGV4cGxhbmF0aW9uKTtcbiAgICAgICAgdGhpcy5hcHBDaGVja1Rva2VuXyA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9yY2VUb2tlblJlZnJlc2hfID0gdHJ1ZTtcbiAgICAgICAgLy8gTm90ZTogV2UgZG9uJ3QgY2xvc2UgdGhlIGNvbm5lY3Rpb24gYXMgdGhlIGRldmVsb3BlciBtYXkgbm90IGhhdmVcbiAgICAgICAgLy8gZW5mb3JjZW1lbnQgZW5hYmxlZC4gVGhlIGJhY2tlbmQgY2xvc2VzIGNvbm5lY3Rpb25zIHdpdGggZW5mb3JjZW1lbnRzLlxuICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gJ2ludmFsaWRfdG9rZW4nIHx8IHN0YXR1c0NvZGUgPT09ICdwZXJtaXNzaW9uX2RlbmllZCcpIHtcbiAgICAgICAgICAgIC8vIFdlJ2xsIHdhaXQgYSBjb3VwbGUgdGltZXMgYmVmb3JlIGxvZ2dpbmcgdGhlIHdhcm5pbmcgLyBpbmNyZWFzaW5nIHRoZVxuICAgICAgICAgICAgLy8gcmV0cnkgcGVyaW9kIHNpbmNlIG9hdXRoIHRva2VucyB3aWxsIHJlcG9ydCBhcyBcImludmFsaWRcIiBpZiB0aGV5J3JlXG4gICAgICAgICAgICAvLyBqdXN0IGV4cGlyZWQuIFBsdXMgdGhlcmUgbWF5IGJlIHRyYW5zaWVudCBpc3N1ZXMgdGhhdCByZXNvbHZlIHRoZW1zZWx2ZXMuXG4gICAgICAgICAgICB0aGlzLmludmFsaWRBcHBDaGVja1Rva2VuQ291bnRfKys7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnZhbGlkQXBwQ2hlY2tUb2tlbkNvdW50XyA+PSBJTlZBTElEX1RPS0VOX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwQ2hlY2tUb2tlblByb3ZpZGVyXy5ub3RpZnlGb3JJbnZhbGlkVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvblNlY3VyaXR5RGVidWdQYWNrZXRfKGJvZHkpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXykge1xuICAgICAgICAgICAgdGhpcy5zZWN1cml0eURlYnVnQ2FsbGJhY2tfKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCdtc2cnIGluIGJvZHkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRklSRUJBU0U6ICcgKyBib2R5Wydtc2cnXS5yZXBsYWNlKCdcXG4nLCAnXFxuRklSRUJBU0U6ICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN0b3JlU3RhdGVfKCkge1xuICAgICAgICAvL1JlLWF1dGhlbnRpY2F0ZSBvdXJzZWx2ZXMgaWYgd2UgaGF2ZSBhIGNyZWRlbnRpYWwgc3RvcmVkLlxuICAgICAgICB0aGlzLnRyeUF1dGgoKTtcbiAgICAgICAgdGhpcy50cnlBcHBDaGVjaygpO1xuICAgICAgICAvLyBQdXRzIGRlcGVuZCBvbiBoYXZpbmcgcmVjZWl2ZWQgdGhlIGNvcnJlc3BvbmRpbmcgZGF0YSB1cGRhdGUgZnJvbSB0aGUgc2VydmVyIGJlZm9yZSB0aGV5IGNvbXBsZXRlLCBzbyB3ZSBtdXN0XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0byBzZW5kIGxpc3RlbnMgYmVmb3JlIHB1dHMuXG4gICAgICAgIGZvciAoY29uc3QgcXVlcmllcyBvZiB0aGlzLmxpc3RlbnMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuU3BlYyBvZiBxdWVyaWVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTGlzdGVuXyhsaXN0ZW5TcGVjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3V0c3RhbmRpbmdQdXRzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFB1dF8oaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLm9uRGlzY29ubmVjdFJlcXVlc3RRdWV1ZV8uc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uRGlzY29ubmVjdF8ocmVxdWVzdC5hY3Rpb24sIHJlcXVlc3QucGF0aFN0cmluZywgcmVxdWVzdC5kYXRhLCByZXF1ZXN0Lm9uQ29tcGxldGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vdXRzdGFuZGluZ0dldHNfLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vdXRzdGFuZGluZ0dldHNfW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kR2V0XyhpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBjbGllbnQgc3RhdHMgZm9yIGZpcnN0IGNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBzZW5kQ29ubmVjdFN0YXRzXygpIHtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSB7fTtcbiAgICAgICAgbGV0IGNsaWVudE5hbWUgPSAnanMnO1xuICAgICAgICBpZiAoaXNOb2RlU2RrKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcG9JbmZvXy5ub2RlQWRtaW4pIHtcbiAgICAgICAgICAgICAgICBjbGllbnROYW1lID0gJ2FkbWluX25vZGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xpZW50TmFtZSA9ICdub2RlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0c1snc2RrLicgKyBjbGllbnROYW1lICsgJy4nICsgU0RLX1ZFUlNJT04ucmVwbGFjZSgvXFwuL2csICctJyldID0gMTtcbiAgICAgICAgaWYgKGlzTW9iaWxlQ29yZG92YSgpKSB7XG4gICAgICAgICAgICBzdGF0c1snZnJhbWV3b3JrLmNvcmRvdmEnXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgICAgICAgICBzdGF0c1snZnJhbWV3b3JrLnJlYWN0bmF0aXZlJ10gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwb3J0U3RhdHMoc3RhdHMpO1xuICAgIH1cbiAgICBzaG91bGRSZWNvbm5lY3RfKCkge1xuICAgICAgICBjb25zdCBvbmxpbmUgPSBPbmxpbmVNb25pdG9yLmdldEluc3RhbmNlKCkuY3VycmVudGx5T25saW5lKCk7XG4gICAgICAgIHJldHVybiBpc0VtcHR5KHRoaXMuaW50ZXJydXB0UmVhc29uc18pICYmIG9ubGluZTtcbiAgICB9XG59XG5QZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0UGVyc2lzdGVudENvbm5lY3Rpb25JZF8gPSAwO1xuLyoqXG4gKiBDb3VudGVyIGZvciBudW1iZXIgb2YgY29ubmVjdGlvbnMgY3JlYXRlZC4gTWFpbmx5IHVzZWQgZm9yIHRhZ2dpbmcgaW4gdGhlIGxvZ3NcbiAqL1xuUGVyc2lzdGVudENvbm5lY3Rpb24ubmV4dENvbm5lY3Rpb25JZF8gPSAwO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgTmFtZWROb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBub2RlKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgfVxuICAgIHN0YXRpYyBXcmFwKG5hbWUsIG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobmFtZSwgbm9kZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgSW5kZXgge1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEEgc3RhbmRhbG9uZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvclxuICAgICAqIHRoaXMgaW5kZXhcbiAgICAgKi9cbiAgICBnZXRDb21wYXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgYmVmb3JlIGFuZCBhZnRlciB2YWx1ZSBmb3IgYSBub2RlLCBkZXRlcm1pbmUgaWYgdGhlIGluZGV4ZWQgdmFsdWUgaGFzIGNoYW5nZWQuIEV2ZW4gaWYgdGhleSBhcmUgZGlmZmVyZW50LFxuICAgICAqIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgY2hhbmdlcyBhcmUgaXNvbGF0ZWQgdG8gcGFydHMgb2YgdGhlIHNuYXBzaG90IHRoYXQgYXJlIG5vdCBpbmRleGVkLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBwb3J0aW9uIG9mIHRoZSBzbmFwc2hvdCBiZWluZyBpbmRleGVkIGNoYW5nZWQgYmV0d2VlbiBvbGROb2RlIGFuZCBuZXdOb2RlXG4gICAgICovXG4gICAgaW5kZXhlZFZhbHVlQ2hhbmdlZChvbGROb2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIGNvbnN0IG9sZFdyYXBwZWQgPSBuZXcgTmFtZWROb2RlKE1JTl9OQU1FLCBvbGROb2RlKTtcbiAgICAgICAgY29uc3QgbmV3V3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoTUlOX05BTUUsIG5ld05vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKG9sZFdyYXBwZWQsIG5ld1dyYXBwZWQpICE9PSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBhIG5vZGUgd3JhcHBlciB0aGF0IHdpbGwgc29ydCBlcXVhbCB0byBvciBsZXNzIHRoYW5cbiAgICAgKiBhbnkgb3RoZXIgbm9kZSB3cmFwcGVyLCB1c2luZyB0aGlzIGluZGV4XG4gICAgICovXG4gICAgbWluUG9zdCgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIE5hbWVkTm9kZS5NSU47XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xubGV0IF9fRU1QVFlfTk9ERTtcbmNsYXNzIEtleUluZGV4IGV4dGVuZHMgSW5kZXgge1xuICAgIHN0YXRpYyBnZXQgX19FTVBUWV9OT0RFKCkge1xuICAgICAgICByZXR1cm4gX19FTVBUWV9OT0RFO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0IF9fRU1QVFlfTk9ERSh2YWwpIHtcbiAgICAgICAgX19FTVBUWV9OT0RFID0gdmFsO1xuICAgIH1cbiAgICBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlKGEubmFtZSwgYi5uYW1lKTtcbiAgICB9XG4gICAgaXNEZWZpbmVkT24obm9kZSkge1xuICAgICAgICAvLyBXZSBjb3VsZCBwcm9iYWJseSByZXR1cm4gdHJ1ZSBoZXJlIChzaW5jZSBldmVyeSBub2RlIGhhcyBhIGtleSksIGJ1dCBpdCdzIG5ldmVyIGNhbGxlZFxuICAgICAgICAvLyBzbyBqdXN0IGxlYXZpbmcgdW5pbXBsZW1lbnRlZCBmb3Igbm93LlxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignS2V5SW5kZXguaXNEZWZpbmVkT24gbm90IGV4cGVjdGVkIHRvIGJlIGNhbGxlZC4nKTtcbiAgICB9XG4gICAgaW5kZXhlZFZhbHVlQ2hhbmdlZChvbGROb2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVGhlIGtleSBmb3IgYSBub2RlIG5ldmVyIGNoYW5nZXMuXG4gICAgfVxuICAgIG1pblBvc3QoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBOYW1lZE5vZGUuTUlOO1xuICAgIH1cbiAgICBtYXhQb3N0KCkge1xuICAgICAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCByZWFsbHkgYmUgY3JlYXRlZCBvbmNlIGFuZCBjYWNoZWQgaW4gYSBzdGF0aWMgcHJvcGVydHksIGJ1dFxuICAgICAgICAvLyBOYW1lZE5vZGUgaXNuJ3QgZGVmaW5lZCB5ZXQsIHNvIEkgY2FuJ3QgdXNlIGl0IGluIGEgc3RhdGljLiAgQmxlaC5cbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIF9fRU1QVFlfTk9ERSk7XG4gICAgfVxuICAgIG1ha2VQb3N0KGluZGV4VmFsdWUsIG5hbWUpIHtcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiBpbmRleFZhbHVlID09PSAnc3RyaW5nJywgJ0tleUluZGV4IGluZGV4VmFsdWUgbXVzdCBhbHdheXMgYmUgYSBzdHJpbmcuJyk7XG4gICAgICAgIC8vIFdlIGp1c3QgdXNlIGVtcHR5IG5vZGUsIGJ1dCBpdCdsbCBuZXZlciBiZSBjb21wYXJlZCwgc2luY2Ugb3VyIGNvbXBhcmF0b3Igb25seSBsb29rcyBhdCBuYW1lLlxuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShpbmRleFZhbHVlLCBfX0VNUFRZX05PREUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBTdHJpbmcgcmVwcmVzZW50YXRpb24gZm9yIGluY2x1c2lvbiBpbiBhIHF1ZXJ5IHNwZWNcbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcua2V5JztcbiAgICB9XG59XG5jb25zdCBLRVlfSU5ERVggPSBuZXcgS2V5SW5kZXgoKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQW4gaXRlcmF0b3Igb3ZlciBhbiBMTFJCTm9kZS5cbiAqL1xuY2xhc3MgU29ydGVkTWFwSXRlcmF0b3Ige1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBub2RlIC0gTm9kZSB0byBpdGVyYXRlLlxuICAgICAqIEBwYXJhbSBpc1JldmVyc2VfIC0gV2hldGhlciBvciBub3QgdG8gaXRlcmF0ZSBpbiByZXZlcnNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm9kZSwgc3RhcnRLZXksIGNvbXBhcmF0b3IsIGlzUmV2ZXJzZV8sIHJlc3VsdEdlbmVyYXRvcl8gPSBudWxsKSB7XG4gICAgICAgIHRoaXMuaXNSZXZlcnNlXyA9IGlzUmV2ZXJzZV87XG4gICAgICAgIHRoaXMucmVzdWx0R2VuZXJhdG9yXyA9IHJlc3VsdEdlbmVyYXRvcl87XG4gICAgICAgIHRoaXMubm9kZVN0YWNrXyA9IFtdO1xuICAgICAgICBsZXQgY21wID0gMTtcbiAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGU7XG4gICAgICAgICAgICBjbXAgPSBzdGFydEtleSA/IGNvbXBhcmF0b3Iobm9kZS5rZXksIHN0YXJ0S2V5KSA6IDE7XG4gICAgICAgICAgICAvLyBmbGlwIHRoZSBjb21wYXJpc29uIGlmIHdlJ3JlIGdvaW5nIGluIHJldmVyc2VcbiAgICAgICAgICAgIGlmIChpc1JldmVyc2VfKSB7XG4gICAgICAgICAgICAgICAgY21wICo9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgbGVzcyB0aGFuIG91ciBzdGFydCBrZXkuIGlnbm9yZSBpdFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZV8pIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBleGFjdGx5IGVxdWFsIHRvIG91ciBzdGFydCBrZXkuIFB1c2ggaXQgb24gdGhlIHN0YWNrLCBidXQgc3RvcCBpdGVyYXRpbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZ3JlYXRlciB0aGFuIG91ciBzdGFydCBrZXksIGFkZCBpdCB0byB0aGUgc3RhY2sgYW5kIG1vdmUgdG8gdGhlIG5leHQgb25lXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXZlcnNlXykge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldE5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVTdGFja18ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMubm9kZVN0YWNrXy5wb3AoKTtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0R2VuZXJhdG9yXykge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5yZXN1bHRHZW5lcmF0b3JfKG5vZGUua2V5LCBub2RlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHsga2V5OiBub2RlLmtleSwgdmFsdWU6IG5vZGUudmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc1JldmVyc2VfKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xuICAgICAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrXy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XG4gICAgICAgICAgICB3aGlsZSAoIW5vZGUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBoYXNOZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlU3RhY2tfLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIHBlZWsoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVTdGFja18ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlU3RhY2tfW3RoaXMubm9kZVN0YWNrXy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0R2VuZXJhdG9yXykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0R2VuZXJhdG9yXyhub2RlLmtleSwgbm9kZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IG5vZGUua2V5LCB2YWx1ZTogbm9kZS52YWx1ZSB9O1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbm9kZSBpbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2sgdHJlZS5cbiAqL1xuY2xhc3MgTExSQk5vZGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBLZXkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbm9kZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBWYWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlLlxuICAgICAqIEBwYXJhbSBjb2xvciAtIFdoZXRoZXIgdGhpcyBub2RlIGlzIHJlZC5cbiAgICAgKiBAcGFyYW0gbGVmdCAtIExlZnQgY2hpbGQuXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gUmlnaHQgY2hpbGQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvciAhPSBudWxsID8gY29sb3IgOiBMTFJCTm9kZS5SRUQ7XG4gICAgICAgIHRoaXMubGVmdCA9XG4gICAgICAgICAgICBsZWZ0ICE9IG51bGwgPyBsZWZ0IDogU29ydGVkTWFwLkVNUFRZX05PREU7XG4gICAgICAgIHRoaXMucmlnaHQgPVxuICAgICAgICAgICAgcmlnaHQgIT0gbnVsbCA/IHJpZ2h0IDogU29ydGVkTWFwLkVNUFRZX05PREU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHBpZWNlcyBvZiBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBOZXcga2V5IGZvciB0aGUgbm9kZSwgb3IgbnVsbC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBOZXcgdmFsdWUgZm9yIHRoZSBub2RlLCBvciBudWxsLlxuICAgICAqIEBwYXJhbSBjb2xvciAtIE5ldyBjb2xvciBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXG4gICAgICogQHBhcmFtIGxlZnQgLSBOZXcgbGVmdCBjaGlsZCBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gTmV3IHJpZ2h0IGNoaWxkIGZvciB0aGUgbm9kZSwgb3IgbnVsbC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbm9kZSBjb3B5LlxuICAgICAqL1xuICAgIGNvcHkoa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5ICE9IG51bGwgPyBrZXkgOiB0aGlzLmtleSwgdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogdGhpcy52YWx1ZSwgY29sb3IgIT0gbnVsbCA/IGNvbG9yIDogdGhpcy5jb2xvciwgbGVmdCAhPSBudWxsID8gbGVmdCA6IHRoaXMubGVmdCwgcmlnaHQgIT0gbnVsbCA/IHJpZ2h0IDogdGhpcy5yaWdodCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIHRyZWUuXG4gICAgICovXG4gICAgY291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlZnQuY291bnQoKSArIDEgKyB0aGlzLnJpZ2h0LmNvdW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHRyZWUgaXMgZW1wdHkuXG4gICAgICovXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxuICAgICAqIGZvciBlYWNoIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWN0aW9uIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoXG4gICAgICogICBub2RlLiAgSWYgaXQgcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAgKiBAcmV0dXJucyBUaGUgZmlyc3QgdHJ1dGh5IHZhbHVlIHJldHVybmVkIGJ5IGFjdGlvbiwgb3IgdGhlIGxhc3QgZmFsc2V5XG4gICAgICogICB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb25cbiAgICAgKi9cbiAgICBpbm9yZGVyVHJhdmVyc2FsKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gKHRoaXMubGVmdC5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbikgfHxcbiAgICAgICAgICAgICEhYWN0aW9uKHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fFxuICAgICAgICAgICAgdGhpcy5yaWdodC5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXG4gICAgICogZm9yIGVhY2ggbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gLSBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcbiAgICAgKiBub2RlLiAgSWYgaXQgcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRyYXZlcnNhbCB3YXMgYWJvcnRlZC5cbiAgICAgKi9cbiAgICByZXZlcnNlVHJhdmVyc2FsKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gKHRoaXMucmlnaHQucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pIHx8XG4gICAgICAgICAgICBhY3Rpb24odGhpcy5rZXksIHRoaXMudmFsdWUpIHx8XG4gICAgICAgICAgICB0aGlzLmxlZnQucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIG1pbmltdW0gbm9kZSBpbiB0aGUgdHJlZS5cbiAgICAgKi9cbiAgICBtaW5fKCkge1xuICAgICAgICBpZiAodGhpcy5sZWZ0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0Lm1pbl8oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXG4gICAgICovXG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW5fKCkua2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXG4gICAgICovXG4gICAgbWF4S2V5KCkge1xuICAgICAgICBpZiAodGhpcy5yaWdodC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0Lm1heEtleSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBLZXkgdG8gaW5zZXJ0LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlIHRvIGluc2VydC5cbiAgICAgKiBAcGFyYW0gY29tcGFyYXRvciAtIENvbXBhcmF0b3IuXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIHdpdGggdGhlIGtleS92YWx1ZSBhZGRlZC5cbiAgICAgKi9cbiAgICBpbnNlcnQoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgICAgICBsZXQgbiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNtcCA9IGNvbXBhcmF0b3Ioa2V5LCBuLmtleSk7XG4gICAgICAgIGlmIChjbXAgPCAwKSB7XG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIG51bGwsIG51bGwsIG4ubGVmdC5pbnNlcnQoa2V5LCB2YWx1ZSwgY29tcGFyYXRvciksIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCB2YWx1ZSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIG51bGwsIG51bGwsIG51bGwsIG4ucmlnaHQuaW5zZXJ0KGtleSwgdmFsdWUsIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIHdpdGggdGhlIG1pbmltdW0ga2V5IHJlbW92ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlTWluXygpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBTb3J0ZWRNYXAuRU1QVFlfTk9ERTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbiA9IHRoaXM7XG4gICAgICAgIGlmICghbi5sZWZ0LmlzUmVkXygpICYmICFuLmxlZnQubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgbiA9IG4ubW92ZVJlZExlZnRfKCk7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBuLmxlZnQucmVtb3ZlTWluXygpLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIG4uZml4VXBfKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IG9mIHRoZSBpdGVtIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0gY29tcGFyYXRvciAtIENvbXBhcmF0b3IuXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBpdGVtIHJlbW92ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlKGtleSwgY29tcGFyYXRvcikge1xuICAgICAgICBsZXQgbiwgc21hbGxlc3Q7XG4gICAgICAgIG4gPSB0aGlzO1xuICAgICAgICBpZiAoY29tcGFyYXRvcihrZXksIG4ua2V5KSA8IDApIHtcbiAgICAgICAgICAgIGlmICghbi5sZWZ0LmlzRW1wdHkoKSAmJiAhbi5sZWZ0LmlzUmVkXygpICYmICFuLmxlZnQubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgICAgIG4gPSBuLm1vdmVSZWRMZWZ0XygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBuLmxlZnQucmVtb3ZlKGtleSwgY29tcGFyYXRvciksIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG4ubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0XygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuLnJpZ2h0LmlzRW1wdHkoKSAmJiAhbi5yaWdodC5pc1JlZF8oKSAmJiAhbi5yaWdodC5sZWZ0LmlzUmVkXygpKSB7XG4gICAgICAgICAgICAgICAgbiA9IG4ubW92ZVJlZFJpZ2h0XygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXBhcmF0b3Ioa2V5LCBuLmtleSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAobi5yaWdodC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNvcnRlZE1hcC5FTVBUWV9OT0RFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc21hbGxlc3QgPSBuLnJpZ2h0Lm1pbl8oKTtcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4uY29weShzbWFsbGVzdC5rZXksIHNtYWxsZXN0LnZhbHVlLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJlbW92ZU1pbl8oKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJlbW92ZShrZXksIGNvbXBhcmF0b3IpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGlzIGlzIGEgUkVEIG5vZGUuXG4gICAgICovXG4gICAgaXNSZWRfKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVlZGVkIHJvdGF0aW9ucy5cbiAgICAgKi9cbiAgICBmaXhVcF8oKSB7XG4gICAgICAgIGxldCBuID0gdGhpcztcbiAgICAgICAgaWYgKG4ucmlnaHQuaXNSZWRfKCkgJiYgIW4ubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgbiA9IG4ucm90YXRlTGVmdF8oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobi5sZWZ0LmlzUmVkXygpICYmIG4ubGVmdC5sZWZ0LmlzUmVkXygpKSB7XG4gICAgICAgICAgICBuID0gbi5yb3RhdGVSaWdodF8oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobi5sZWZ0LmlzUmVkXygpICYmIG4ucmlnaHQuaXNSZWRfKCkpIHtcbiAgICAgICAgICAgIG4gPSBuLmNvbG9yRmxpcF8oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIGFmdGVyIG1vdmVSZWRMZWZ0LlxuICAgICAqL1xuICAgIG1vdmVSZWRMZWZ0XygpIHtcbiAgICAgICAgbGV0IG4gPSB0aGlzLmNvbG9yRmxpcF8oKTtcbiAgICAgICAgaWYgKG4ucmlnaHQubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJvdGF0ZVJpZ2h0XygpKTtcbiAgICAgICAgICAgIG4gPSBuLnJvdGF0ZUxlZnRfKCk7XG4gICAgICAgICAgICBuID0gbi5jb2xvckZsaXBfKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIE5ldyB0cmVlLCBhZnRlciBtb3ZlUmVkUmlnaHQuXG4gICAgICovXG4gICAgbW92ZVJlZFJpZ2h0XygpIHtcbiAgICAgICAgbGV0IG4gPSB0aGlzLmNvbG9yRmxpcF8oKTtcbiAgICAgICAgaWYgKG4ubGVmdC5sZWZ0LmlzUmVkXygpKSB7XG4gICAgICAgICAgICBuID0gbi5yb3RhdGVSaWdodF8oKTtcbiAgICAgICAgICAgIG4gPSBuLmNvbG9yRmxpcF8oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIGFmdGVyIHJvdGF0ZUxlZnQuXG4gICAgICovXG4gICAgcm90YXRlTGVmdF8oKSB7XG4gICAgICAgIGNvbnN0IG5sID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgbnVsbCwgdGhpcy5yaWdodC5sZWZ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmlnaHQuY29weShudWxsLCBudWxsLCB0aGlzLmNvbG9yLCBubCwgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIE5ldyB0cmVlLCBhZnRlciByb3RhdGVSaWdodC5cbiAgICAgKi9cbiAgICByb3RhdGVSaWdodF8oKSB7XG4gICAgICAgIGNvbnN0IG5yID0gdGhpcy5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLlJFRCwgdGhpcy5sZWZ0LnJpZ2h0LCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5jb3B5KG51bGwsIG51bGwsIHRoaXMuY29sb3IsIG51bGwsIG5yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgTmV3dCByZWUsIGFmdGVyIGNvbG9yRmxpcC5cbiAgICAgKi9cbiAgICBjb2xvckZsaXBfKCkge1xuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMubGVmdC5jb2xvciwgbnVsbCwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsICF0aGlzLnJpZ2h0LmNvbG9yLCBudWxsLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weShudWxsLCBudWxsLCAhdGhpcy5jb2xvciwgbGVmdCwgcmlnaHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgYWxsIGlzIHdlbGwuXG4gICAgICovXG4gICAgY2hlY2tNYXhEZXB0aF8oKSB7XG4gICAgICAgIGNvbnN0IGJsYWNrRGVwdGggPSB0aGlzLmNoZWNrXygpO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coMi4wLCBibGFja0RlcHRoKSA8PSB0aGlzLmNvdW50KCkgKyAxO1xuICAgIH1cbiAgICBjaGVja18oKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVkXygpICYmIHRoaXMubGVmdC5pc1JlZF8oKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWQgbm9kZSBoYXMgcmVkIGNoaWxkKCcgKyB0aGlzLmtleSArICcsJyArIHRoaXMudmFsdWUgKyAnKScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzUmVkXygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JpZ2h0IGNoaWxkIG9mICgnICsgdGhpcy5rZXkgKyAnLCcgKyB0aGlzLnZhbHVlICsgJykgaXMgcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxhY2tEZXB0aCA9IHRoaXMubGVmdC5jaGVja18oKTtcbiAgICAgICAgaWYgKGJsYWNrRGVwdGggIT09IHRoaXMucmlnaHQuY2hlY2tfKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmxhY2sgZGVwdGhzIGRpZmZlcicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJsYWNrRGVwdGggKyAodGhpcy5pc1JlZF8oKSA/IDAgOiAxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbkxMUkJOb2RlLlJFRCA9IHRydWU7XG5MTFJCTm9kZS5CTEFDSyA9IGZhbHNlO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVtcHR5IG5vZGUgKGEgbGVhZiBub2RlIGluIHRoZSBSZWQtQmxhY2sgVHJlZSkuXG4gKi9cbmNsYXNzIExMUkJFbXB0eU5vZGUge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbm9kZSBjb3B5LlxuICAgICAqL1xuICAgIGNvcHkoa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS92YWx1ZSBhZGRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBLZXkgdG8gYmUgYWRkZWQuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gYmUgYWRkZWQuXG4gICAgICogQHBhcmFtIGNvbXBhcmF0b3IgLSBDb21wYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIE5ldyB0cmVlLCB3aXRoIGl0ZW0gYWRkZWQuXG4gICAgICovXG4gICAgaW5zZXJ0KGtleSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMTFJCTm9kZShrZXksIHZhbHVlLCBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0gY29tcGFyYXRvciAtIENvbXBhcmF0b3IuXG4gICAgICogQHJldHVybnMgTmV3IHRyZWUsIHdpdGggaXRlbSByZW1vdmVkLlxuICAgICAqL1xuICAgIHJlbW92ZShrZXksIGNvbXBhcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIHRyZWUuXG4gICAgICovXG4gICAgY291bnQoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB0cmVlIGlzIGVtcHR5LlxuICAgICAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxuICAgICAqIGZvciBlYWNoIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWN0aW9uIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoXG4gICAgICogbm9kZS4gIElmIGl0IHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXG4gICAgICovXG4gICAgaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXG4gICAgICogZm9yIGVhY2ggbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gLSBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcbiAgICAgKiBub2RlLiAgSWYgaXQgcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRyYXZlcnNhbCB3YXMgYWJvcnRlZC5cbiAgICAgKi9cbiAgICByZXZlcnNlVHJhdmVyc2FsKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG1pbktleSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG1heEtleSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNoZWNrXygpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhpcyBub2RlIGlzIHJlZC5cbiAgICAgKi9cbiAgICBpc1JlZF8oKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEFuIGltbXV0YWJsZSBzb3J0ZWQgbWFwIGltcGxlbWVudGF0aW9uLCBiYXNlZCBvbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2tcbiAqIHRyZWUuXG4gKi9cbmNsYXNzIFNvcnRlZE1hcCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbXBhcmF0b3JfIC0gS2V5IGNvbXBhcmF0b3IuXG4gICAgICogQHBhcmFtIHJvb3RfIC0gT3B0aW9uYWwgcm9vdCBub2RlIGZvciB0aGUgbWFwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbXBhcmF0b3JfLCByb290XyA9IFNvcnRlZE1hcC5FTVBUWV9OT0RFKSB7XG4gICAgICAgIHRoaXMuY29tcGFyYXRvcl8gPSBjb21wYXJhdG9yXztcbiAgICAgICAgdGhpcy5yb290XyA9IHJvb3RfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkIG9yIHJlcGxhY2VkLlxuICAgICAqIChUT0RPOiBXZSBzaG91bGQgcGVyaGFwcyByZW5hbWUgdGhpcyBtZXRob2QgdG8gJ3B1dCcpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gS2V5IHRvIGJlIGFkZGVkLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlIHRvIGJlIGFkZGVkLlxuICAgICAqIEByZXR1cm5zIE5ldyBtYXAsIHdpdGggaXRlbSBhZGRlZC5cbiAgICAgKi9cbiAgICBpbnNlcnQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3JfLCB0aGlzLnJvb3RfXG4gICAgICAgICAgICAuaW5zZXJ0KGtleSwgdmFsdWUsIHRoaXMuY29tcGFyYXRvcl8pXG4gICAgICAgICAgICAuY29weShudWxsLCBudWxsLCBMTFJCTm9kZS5CTEFDSywgbnVsbCwgbnVsbCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgbWFwLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IHJlbW92ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ga2V5IC0gVGhlIGtleSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMgTmV3IG1hcCwgd2l0aCBpdGVtIHJlbW92ZWQuXG4gICAgICovXG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3JfLCB0aGlzLnJvb3RfXG4gICAgICAgICAgICAucmVtb3ZlKGtleSwgdGhpcy5jb21wYXJhdG9yXylcbiAgICAgICAgICAgIC5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGxvb2sgdXAuXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHRoZSBub2RlIHdpdGggdGhlIGdpdmVuIGtleSwgb3IgbnVsbCBpZiB0aGVcbiAgICAgKiBrZXkgZG9lc24ndCBleGlzdC5cbiAgICAgKi9cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGxldCBjbXA7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5yb290XztcbiAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJhdG9yXyhrZXksIG5vZGUua2V5KTtcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGl0ZW0gKmJlZm9yZSogdGhlIHNwZWNpZmllZCBrZXksIG9yIG51bGwgaWYga2V5IGlzIHRoZSBmaXJzdCBpdGVtLlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUga2V5IHRvIGZpbmQgdGhlIHByZWRlY2Vzc29yIG9mXG4gICAgICogQHJldHVybnMgVGhlIHByZWRlY2Vzc29yIGtleS5cbiAgICAgKi9cbiAgICBnZXRQcmVkZWNlc3NvcktleShrZXkpIHtcbiAgICAgICAgbGV0IGNtcCwgbm9kZSA9IHRoaXMucm9vdF8sIHJpZ2h0UGFyZW50ID0gbnVsbDtcbiAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJhdG9yXyhrZXksIG5vZGUua2V5KTtcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUubGVmdC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFub2RlLnJpZ2h0LmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUua2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyaWdodFBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmlnaHRQYXJlbnQua2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIGZpcnN0IGl0ZW0uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21wIDwgMCkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRQYXJlbnQgPSBub2RlO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGZpbmQgcHJlZGVjZXNzb3Iga2V5IGZvciBhIG5vbmV4aXN0ZW50IGtleS4gIFdoYXQgZ2l2ZXM/Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIG1hcCBpcyBlbXB0eS5cbiAgICAgKi9cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG1hcC5cbiAgICAgKi9cbiAgICBjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8uY291bnQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIG1pbmltdW0ga2V5IGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgbWluS2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5taW5LZXkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIG1heGltdW0ga2V5IGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgbWF4S2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5tYXhLZXkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhdmVyc2VzIHRoZSBtYXAgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxuICAgICAqIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFjdGlvbiAtIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxuICAgICAqIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiAgSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXG4gICAgICogQHJldHVybnMgVGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxuICAgICAqICAgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uXG4gICAgICovXG4gICAgaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8uaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIG1hcCBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cbiAgICAgKiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gLSBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWRcbiAgICAgKiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci4gIElmIGFjdGlvbiByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHRyYXZlcnNhbCB3YXMgYWJvcnRlZC5cbiAgICAgKi9cbiAgICByZXZlcnNlVHJhdmVyc2FsKGFjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5yZXZlcnNlVHJhdmVyc2FsKGFjdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gaXRlcmF0b3Igb3ZlciB0aGUgU29ydGVkTWFwLlxuICAgICAqIEByZXR1cm5zIFRoZSBpdGVyYXRvci5cbiAgICAgKi9cbiAgICBnZXRJdGVyYXRvcihyZXN1bHRHZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3RfLCBudWxsLCB0aGlzLmNvbXBhcmF0b3JfLCBmYWxzZSwgcmVzdWx0R2VuZXJhdG9yKTtcbiAgICB9XG4gICAgZ2V0SXRlcmF0b3JGcm9tKGtleSwgcmVzdWx0R2VuZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwSXRlcmF0b3IodGhpcy5yb290Xywga2V5LCB0aGlzLmNvbXBhcmF0b3JfLCBmYWxzZSwgcmVzdWx0R2VuZXJhdG9yKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShrZXksIHJlc3VsdEdlbmVyYXRvcikge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdF8sIGtleSwgdGhpcy5jb21wYXJhdG9yXywgdHJ1ZSwgcmVzdWx0R2VuZXJhdG9yKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yKHJlc3VsdEdlbmVyYXRvcikge1xuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdF8sIG51bGwsIHRoaXMuY29tcGFyYXRvcl8sIHRydWUsIHJlc3VsdEdlbmVyYXRvcik7XG4gICAgfVxufVxuLyoqXG4gKiBBbHdheXMgdXNlIHRoZSBzYW1lIGVtcHR5IG5vZGUsIHRvIHJlZHVjZSBtZW1vcnkuXG4gKi9cblNvcnRlZE1hcC5FTVBUWV9OT0RFID0gbmV3IExMUkJFbXB0eU5vZGUoKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIE5BTUVfT05MWV9DT01QQVJBVE9SKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuIG5hbWVDb21wYXJlKGxlZnQubmFtZSwgcmlnaHQubmFtZSk7XG59XG5mdW5jdGlvbiBOQU1FX0NPTVBBUkFUT1IobGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbmFtZUNvbXBhcmUobGVmdCwgcmlnaHQpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xubGV0IE1BWF9OT0RFJDI7XG5mdW5jdGlvbiBzZXRNYXhOb2RlJDEodmFsKSB7XG4gICAgTUFYX05PREUkMiA9IHZhbDtcbn1cbmNvbnN0IHByaW9yaXR5SGFzaFRleHQgPSBmdW5jdGlvbiAocHJpb3JpdHkpIHtcbiAgICBpZiAodHlwZW9mIHByaW9yaXR5ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gJ251bWJlcjonICsgZG91YmxlVG9JRUVFNzU0U3RyaW5nKHByaW9yaXR5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAnc3RyaW5nOicgKyBwcmlvcml0eTtcbiAgICB9XG59O1xuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBhIHByaW9yaXR5IHNuYXBzaG90IE5vZGUgaXMgdmFsaWQuXG4gKi9cbmNvbnN0IHZhbGlkYXRlUHJpb3JpdHlOb2RlID0gZnVuY3Rpb24gKHByaW9yaXR5Tm9kZSkge1xuICAgIGlmIChwcmlvcml0eU5vZGUuaXNMZWFmTm9kZSgpKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHByaW9yaXR5Tm9kZS52YWwoKTtcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIGNvbnRhaW5zKHZhbCwgJy5zdicpKSwgJ1ByaW9yaXR5IG11c3QgYmUgYSBzdHJpbmcgb3IgbnVtYmVyLicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXNzZXJ0KHByaW9yaXR5Tm9kZSA9PT0gTUFYX05PREUkMiB8fCBwcmlvcml0eU5vZGUuaXNFbXB0eSgpLCAncHJpb3JpdHkgb2YgdW5leHBlY3RlZCB0eXBlLicpO1xuICAgIH1cbiAgICAvLyBEb24ndCBjYWxsIGdldFByaW9yaXR5KCkgb24gTUFYX05PREUgdG8gYXZvaWQgaGl0dGluZyBhc3NlcnRpb24uXG4gICAgYXNzZXJ0KHByaW9yaXR5Tm9kZSA9PT0gTUFYX05PREUkMiB8fCBwcmlvcml0eU5vZGUuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCksIFwiUHJpb3JpdHkgbm9kZXMgY2FuJ3QgaGF2ZSBhIHByaW9yaXR5IG9mIHRoZWlyIG93bi5cIik7XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xubGV0IF9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3I7XG4vKipcbiAqIExlYWZOb2RlIGlzIGEgY2xhc3MgZm9yIHN0b3JpbmcgbGVhZiBub2RlcyBpbiBhIERhdGFTbmFwc2hvdC4gIEl0XG4gKiBpbXBsZW1lbnRzIE5vZGUgYW5kIHN0b3JlcyB0aGUgdmFsdWUgb2YgdGhlIG5vZGUgKGEgc3RyaW5nLFxuICogbnVtYmVyLCBvciBib29sZWFuKSBhY2Nlc3NpYmxlIHZpYSBnZXRWYWx1ZSgpLlxuICovXG5jbGFzcyBMZWFmTm9kZSB7XG4gICAgc3RhdGljIHNldCBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yKHZhbCkge1xuICAgICAgICBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yID0gdmFsO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IF9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmFsdWVfIC0gVGhlIHZhbHVlIHRvIHN0b3JlIGluIHRoaXMgbGVhZiBub2RlLiBUaGUgb2JqZWN0IHR5cGUgaXNcbiAgICAgKiBwb3NzaWJsZSBpbiB0aGUgZXZlbnQgb2YgYSBkZWZlcnJlZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBwcmlvcml0eU5vZGVfIC0gVGhlIHByaW9yaXR5IG9mIHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZV8sIHByaW9yaXR5Tm9kZV8gPSBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yLkVNUFRZX05PREUpIHtcbiAgICAgICAgdGhpcy52YWx1ZV8gPSB2YWx1ZV87XG4gICAgICAgIHRoaXMucHJpb3JpdHlOb2RlXyA9IHByaW9yaXR5Tm9kZV87XG4gICAgICAgIHRoaXMubGF6eUhhc2hfID0gbnVsbDtcbiAgICAgICAgYXNzZXJ0KHRoaXMudmFsdWVfICE9PSB1bmRlZmluZWQgJiYgdGhpcy52YWx1ZV8gIT09IG51bGwsIFwiTGVhZk5vZGUgc2hvdWxkbid0IGJlIGNyZWF0ZWQgd2l0aCBudWxsL3VuZGVmaW5lZCB2YWx1ZS5cIik7XG4gICAgICAgIHZhbGlkYXRlUHJpb3JpdHlOb2RlKHRoaXMucHJpb3JpdHlOb2RlXyk7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGlzTGVhZk5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICBnZXRQcmlvcml0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpb3JpdHlOb2RlXztcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgdXBkYXRlUHJpb3JpdHkobmV3UHJpb3JpdHlOb2RlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUodGhpcy52YWx1ZV8sIG5ld1ByaW9yaXR5Tm9kZSk7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGdldEltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSkge1xuICAgICAgICAvLyBIYWNrIHRvIHRyZWF0IHByaW9yaXR5IGFzIGEgcmVndWxhciBjaGlsZFxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpb3JpdHlOb2RlXztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yLkVNUFRZX05PREU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgZ2V0Q2hpbGQocGF0aCkge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkocGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdGhHZXRGcm9udChwYXRoKSA9PT0gJy5wcmlvcml0eScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByaW9yaXR5Tm9kZV87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTGVhZk5vZGUuX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3Rvci5FTVBUWV9OT0RFO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhc0NoaWxkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGdldFByZWRlY2Vzc29yQ2hpbGROYW1lKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICB1cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSkge1xuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUHJpb3JpdHkobmV3Q2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpICYmIGNoaWxkTmFtZSAhPT0gJy5wcmlvcml0eScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSkudXBkYXRlUHJpb3JpdHkodGhpcy5wcmlvcml0eU5vZGVfKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICB1cGRhdGVDaGlsZChwYXRoLCBuZXdDaGlsZE5vZGUpIHtcbiAgICAgICAgY29uc3QgZnJvbnQgPSBwYXRoR2V0RnJvbnQocGF0aCk7XG4gICAgICAgIGlmIChmcm9udCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ld0NoaWxkTm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpICYmIGZyb250ICE9PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhc3NlcnQoZnJvbnQgIT09ICcucHJpb3JpdHknIHx8IHBhdGhHZXRMZW5ndGgocGF0aCkgPT09IDEsICcucHJpb3JpdHkgbXVzdCBiZSB0aGUgbGFzdCB0b2tlbiBpbiBhIHBhdGgnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGZyb250LCBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yLkVNUFRZX05PREUudXBkYXRlQ2hpbGQocGF0aFBvcEZyb250KHBhdGgpLCBuZXdDaGlsZE5vZGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIG51bUNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgZm9yRWFjaENoaWxkKGluZGV4LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YWwoZXhwb3J0Rm9ybWF0KSB7XG4gICAgICAgIGlmIChleHBvcnRGb3JtYXQgJiYgIXRoaXMuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJy52YWx1ZSc6IHRoaXMuZ2V0VmFsdWUoKSxcbiAgICAgICAgICAgICAgICAnLnByaW9yaXR5JzogdGhpcy5nZXRQcmlvcml0eSgpLnZhbCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICBoYXNoKCkge1xuICAgICAgICBpZiAodGhpcy5sYXp5SGFzaF8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCB0b0hhc2ggPSAnJztcbiAgICAgICAgICAgIGlmICghdGhpcy5wcmlvcml0eU5vZGVfLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHRvSGFzaCArPVxuICAgICAgICAgICAgICAgICAgICAncHJpb3JpdHk6JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eUhhc2hUZXh0KHRoaXMucHJpb3JpdHlOb2RlXy52YWwoKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzonO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB0aGlzLnZhbHVlXztcbiAgICAgICAgICAgIHRvSGFzaCArPSB0eXBlICsgJzonO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdG9IYXNoICs9IGRvdWJsZVRvSUVFRTc1NFN0cmluZyh0aGlzLnZhbHVlXyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b0hhc2ggKz0gdGhpcy52YWx1ZV87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxhenlIYXNoXyA9IHNoYTEodG9IYXNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXp5SGFzaF87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBsZWFmIG5vZGUuXG4gICAgICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZV87XG4gICAgfVxuICAgIGNvbXBhcmVUbyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT09IExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3RoZXIgaW5zdGFuY2VvZiBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhc3NlcnQob3RoZXIuaXNMZWFmTm9kZSgpLCAnVW5rbm93biBub2RlIHR5cGUnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVUb0xlYWZOb2RlXyhvdGhlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGFyaXNvbiBzcGVjaWZpY2FsbHkgZm9yIHR3byBsZWFmIG5vZGVzXG4gICAgICovXG4gICAgY29tcGFyZVRvTGVhZk5vZGVfKG90aGVyTGVhZikge1xuICAgICAgICBjb25zdCBvdGhlckxlYWZUeXBlID0gdHlwZW9mIG90aGVyTGVhZi52YWx1ZV87XG4gICAgICAgIGNvbnN0IHRoaXNMZWFmVHlwZSA9IHR5cGVvZiB0aGlzLnZhbHVlXztcbiAgICAgICAgY29uc3Qgb3RoZXJJbmRleCA9IExlYWZOb2RlLlZBTFVFX1RZUEVfT1JERVIuaW5kZXhPZihvdGhlckxlYWZUeXBlKTtcbiAgICAgICAgY29uc3QgdGhpc0luZGV4ID0gTGVhZk5vZGUuVkFMVUVfVFlQRV9PUkRFUi5pbmRleE9mKHRoaXNMZWFmVHlwZSk7XG4gICAgICAgIGFzc2VydChvdGhlckluZGV4ID49IDAsICdVbmtub3duIGxlYWYgdHlwZTogJyArIG90aGVyTGVhZlR5cGUpO1xuICAgICAgICBhc3NlcnQodGhpc0luZGV4ID49IDAsICdVbmtub3duIGxlYWYgdHlwZTogJyArIHRoaXNMZWFmVHlwZSk7XG4gICAgICAgIGlmIChvdGhlckluZGV4ID09PSB0aGlzSW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFNhbWUgdHlwZSwgY29tcGFyZSB2YWx1ZXNcbiAgICAgICAgICAgIGlmICh0aGlzTGVhZlR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVmZXJyZWQgdmFsdWUgbm9kZXMgYXJlIGFsbCBlcXVhbCwgYnV0IHdlIHNob3VsZCBhbHNvIG5ldmVyIGdldCB0byB0aGlzIHBvaW50Li4uXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyB3b3JrcyBiZWNhdXNlIHRydWUgPiBmYWxzZSwgYWxsIG90aGVycyBhcmUgbnVtYmVyIG9yIHN0cmluZyBjb21wYXJpc29uc1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlXyA8IG90aGVyTGVhZi52YWx1ZV8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnZhbHVlXyA9PT0gb3RoZXJMZWFmLnZhbHVlXykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzSW5kZXggLSBvdGhlckluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHdpdGhJbmRleCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlzSW5kZXhlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG90aGVyLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgY29uc3Qgb3RoZXJMZWFmID0gb3RoZXI7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMudmFsdWVfID09PSBvdGhlckxlYWYudmFsdWVfICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wcmlvcml0eU5vZGVfLmVxdWFscyhvdGhlckxlYWYucHJpb3JpdHlOb2RlXykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgc29ydCBvcmRlciBmb3IgY29tcGFyaW5nIGxlYWYgbm9kZXMgb2YgZGlmZmVyZW50IHR5cGVzLiBJZiB0d28gbGVhZiBub2RlcyBoYXZlXG4gKiB0aGUgc2FtZSB0eXBlLCB0aGUgY29tcGFyaXNvbiBmYWxscyBiYWNrIHRvIHRoZWlyIHZhbHVlXG4gKi9cbkxlYWZOb2RlLlZBTFVFX1RZUEVfT1JERVIgPSBbJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdzdHJpbmcnXTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmxldCBub2RlRnJvbUpTT04kMTtcbmxldCBNQVhfTk9ERSQxO1xuZnVuY3Rpb24gc2V0Tm9kZUZyb21KU09OKHZhbCkge1xuICAgIG5vZGVGcm9tSlNPTiQxID0gdmFsO1xufVxuZnVuY3Rpb24gc2V0TWF4Tm9kZSh2YWwpIHtcbiAgICBNQVhfTk9ERSQxID0gdmFsO1xufVxuY2xhc3MgUHJpb3JpdHlJbmRleCBleHRlbmRzIEluZGV4IHtcbiAgICBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgY29uc3QgYVByaW9yaXR5ID0gYS5ub2RlLmdldFByaW9yaXR5KCk7XG4gICAgICAgIGNvbnN0IGJQcmlvcml0eSA9IGIubm9kZS5nZXRQcmlvcml0eSgpO1xuICAgICAgICBjb25zdCBpbmRleENtcCA9IGFQcmlvcml0eS5jb21wYXJlVG8oYlByaW9yaXR5KTtcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZUNvbXBhcmUoYS5uYW1lLCBiLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4Q21wO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRGVmaW5lZE9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICFub2RlLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpO1xuICAgIH1cbiAgICBpbmRleGVkVmFsdWVDaGFuZ2VkKG9sZE5vZGUsIG5ld05vZGUpIHtcbiAgICAgICAgcmV0dXJuICFvbGROb2RlLmdldFByaW9yaXR5KCkuZXF1YWxzKG5ld05vZGUuZ2V0UHJpb3JpdHkoKSk7XG4gICAgfVxuICAgIG1pblBvc3QoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiBOYW1lZE5vZGUuTUlOO1xuICAgIH1cbiAgICBtYXhQb3N0KCkge1xuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShNQVhfTkFNRSwgbmV3IExlYWZOb2RlKCdbUFJJT1JJVFktUE9TVF0nLCBNQVhfTk9ERSQxKSk7XG4gICAgfVxuICAgIG1ha2VQb3N0KGluZGV4VmFsdWUsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgcHJpb3JpdHlOb2RlID0gbm9kZUZyb21KU09OJDEoaW5kZXhWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG5hbWUsIG5ldyBMZWFmTm9kZSgnW1BSSU9SSVRZLVBPU1RdJywgcHJpb3JpdHlOb2RlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgaW5jbHVzaW9uIGluIGEgcXVlcnkgc3BlY1xuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJy5wcmlvcml0eSc7XG4gICAgfVxufVxuY29uc3QgUFJJT1JJVFlfSU5ERVggPSBuZXcgUHJpb3JpdHlJbmRleCgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgTE9HXzIgPSBNYXRoLmxvZygyKTtcbmNsYXNzIEJhc2UxMk51bSB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGxvZ0Jhc2UyID0gKG51bSkgPT4gXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHBhcnNlSW50KChNYXRoLmxvZyhudW0pIC8gTE9HXzIpLCAxMCk7XG4gICAgICAgIGNvbnN0IGJpdE1hc2sgPSAoYml0cykgPT4gcGFyc2VJbnQoQXJyYXkoYml0cyArIDEpLmpvaW4oJzEnKSwgMik7XG4gICAgICAgIHRoaXMuY291bnQgPSBsb2dCYXNlMihsZW5ndGggKyAxKTtcbiAgICAgICAgdGhpcy5jdXJyZW50XyA9IHRoaXMuY291bnQgLSAxO1xuICAgICAgICBjb25zdCBtYXNrID0gYml0TWFzayh0aGlzLmNvdW50KTtcbiAgICAgICAgdGhpcy5iaXRzXyA9IChsZW5ndGggKyAxKSAmIG1hc2s7XG4gICAgfVxuICAgIG5leHRCaXRJc09uZSgpIHtcbiAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNCaXR3aXNlT3BlcmF0b3JVc2FnZVxuICAgICAgICBjb25zdCByZXN1bHQgPSAhKHRoaXMuYml0c18gJiAoMHgxIDw8IHRoaXMuY3VycmVudF8pKTtcbiAgICAgICAgdGhpcy5jdXJyZW50Xy0tO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIGNoaWxkIG5vZGVzIGFuZCBjb25zdHJ1Y3RzIGEgU29ydGVkU2V0IHVzaW5nIHRoZSBnaXZlbiBjb21wYXJpc29uXG4gKiBmdW5jdGlvblxuICpcbiAqIFVzZXMgdGhlIGFsZ29yaXRobSBkZXNjcmliZWQgaW4gdGhlIHBhcGVyIGxpbmtlZCBoZXJlOlxuICogaHR0cDovL2NpdGVzZWVyeC5pc3QucHN1LmVkdS92aWV3ZG9jL3N1bW1hcnk/ZG9pPTEwLjEuMS40Ni4xNDU4XG4gKlxuICogQHBhcmFtIGNoaWxkTGlzdCAtIFVuc29ydGVkIGxpc3Qgb2YgY2hpbGRyZW5cbiAqIEBwYXJhbSBjbXAgLSBUaGUgY29tcGFyaXNvbiBtZXRob2QgdG8gYmUgdXNlZFxuICogQHBhcmFtIGtleUZuIC0gQW4gb3B0aW9uYWwgZnVuY3Rpb24gdG8gZXh0cmFjdCBLIGZyb20gYSBub2RlIHdyYXBwZXIsIGlmIEsnc1xuICogdHlwZSBpcyBub3QgTmFtZWROb2RlXG4gKiBAcGFyYW0gbWFwU29ydEZuIC0gQW4gb3B0aW9uYWwgb3ZlcnJpZGUgZm9yIGNvbXBhcmF0b3IgdXNlZCBieSB0aGUgZ2VuZXJhdGVkIHNvcnRlZCBtYXBcbiAqL1xuY29uc3QgYnVpbGRDaGlsZFNldCA9IGZ1bmN0aW9uIChjaGlsZExpc3QsIGNtcCwga2V5Rm4sIG1hcFNvcnRGbikge1xuICAgIGNoaWxkTGlzdC5zb3J0KGNtcCk7XG4gICAgY29uc3QgYnVpbGRCYWxhbmNlZFRyZWUgPSBmdW5jdGlvbiAobG93LCBoaWdoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGhpZ2ggLSBsb3c7XG4gICAgICAgIGxldCBuYW1lZE5vZGU7XG4gICAgICAgIGxldCBrZXk7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgbmFtZWROb2RlID0gY2hpbGRMaXN0W2xvd107XG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExMUkJOb2RlKGtleSwgbmFtZWROb2RlLm5vZGUsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBjb25zdCBtaWRkbGUgPSBwYXJzZUludCgobGVuZ3RoIC8gMiksIDEwKSArIGxvdztcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBidWlsZEJhbGFuY2VkVHJlZShsb3csIG1pZGRsZSk7XG4gICAgICAgICAgICBjb25zdCByaWdodCA9IGJ1aWxkQmFsYW5jZWRUcmVlKG1pZGRsZSArIDEsIGhpZ2gpO1xuICAgICAgICAgICAgbmFtZWROb2RlID0gY2hpbGRMaXN0W21pZGRsZV07XG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExMUkJOb2RlKGtleSwgbmFtZWROb2RlLm5vZGUsIExMUkJOb2RlLkJMQUNLLCBsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGJ1aWxkRnJvbTEyQXJyYXkgPSBmdW5jdGlvbiAoYmFzZTEyKSB7XG4gICAgICAgIGxldCBub2RlID0gbnVsbDtcbiAgICAgICAgbGV0IHJvb3QgPSBudWxsO1xuICAgICAgICBsZXQgaW5kZXggPSBjaGlsZExpc3QubGVuZ3RoO1xuICAgICAgICBjb25zdCBidWlsZFBlbm5hbnQgPSBmdW5jdGlvbiAoY2h1bmtTaXplLCBjb2xvcikge1xuICAgICAgICAgICAgY29uc3QgbG93ID0gaW5kZXggLSBjaHVua1NpemU7XG4gICAgICAgICAgICBjb25zdCBoaWdoID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCAtPSBjaHVua1NpemU7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFRyZWUgPSBidWlsZEJhbGFuY2VkVHJlZShsb3cgKyAxLCBoaWdoKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVkTm9kZSA9IGNoaWxkTGlzdFtsb3ddO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5Rm4gPyBrZXlGbihuYW1lZE5vZGUpIDogbmFtZWROb2RlO1xuICAgICAgICAgICAgYXR0YWNoUGVubmFudChuZXcgTExSQk5vZGUoa2V5LCBuYW1lZE5vZGUubm9kZSwgY29sb3IsIG51bGwsIGNoaWxkVHJlZSkpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhdHRhY2hQZW5uYW50ID0gZnVuY3Rpb24gKHBlbm5hbnQpIHtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5sZWZ0ID0gcGVubmFudDtcbiAgICAgICAgICAgICAgICBub2RlID0gcGVubmFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3QgPSBwZW5uYW50O1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwZW5uYW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2UxMi5jb3VudDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBpc09uZSA9IGJhc2UxMi5uZXh0Qml0SXNPbmUoKTtcbiAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2Ygbm9kZXMgdGFrZW4gaW4gZWFjaCBzbGljZSBpcyAyXihhcnIubGVuZ3RoIC0gKGkgKyAxKSlcbiAgICAgICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IE1hdGgucG93KDIsIGJhc2UxMi5jb3VudCAtIChpICsgMSkpO1xuICAgICAgICAgICAgaWYgKGlzT25lKSB7XG4gICAgICAgICAgICAgICAgYnVpbGRQZW5uYW50KGNodW5rU2l6ZSwgTExSQk5vZGUuQkxBQ0spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCA9PSAyXG4gICAgICAgICAgICAgICAgYnVpbGRQZW5uYW50KGNodW5rU2l6ZSwgTExSQk5vZGUuQkxBQ0spO1xuICAgICAgICAgICAgICAgIGJ1aWxkUGVubmFudChjaHVua1NpemUsIExMUkJOb2RlLlJFRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbiAgICBjb25zdCBiYXNlMTIgPSBuZXcgQmFzZTEyTnVtKGNoaWxkTGlzdC5sZW5ndGgpO1xuICAgIGNvbnN0IHJvb3QgPSBidWlsZEZyb20xMkFycmF5KGJhc2UxMik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICByZXR1cm4gbmV3IFNvcnRlZE1hcChtYXBTb3J0Rm4gfHwgY21wLCByb290KTtcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5sZXQgX2RlZmF1bHRJbmRleE1hcDtcbmNvbnN0IGZhbGxiYWNrT2JqZWN0ID0ge307XG5jbGFzcyBJbmRleE1hcCB7XG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgSW5kZXhNYXAgZm9yIG5vZGVzIHdpdGhvdXQgYSBwcmlvcml0eVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgICAgYXNzZXJ0KGZhbGxiYWNrT2JqZWN0ICYmIFBSSU9SSVRZX0lOREVYLCAnQ2hpbGRyZW5Ob2RlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcbiAgICAgICAgX2RlZmF1bHRJbmRleE1hcCA9XG4gICAgICAgICAgICBfZGVmYXVsdEluZGV4TWFwIHx8XG4gICAgICAgICAgICAgICAgbmV3IEluZGV4TWFwKHsgJy5wcmlvcml0eSc6IGZhbGxiYWNrT2JqZWN0IH0sIHsgJy5wcmlvcml0eSc6IFBSSU9SSVRZX0lOREVYIH0pO1xuICAgICAgICByZXR1cm4gX2RlZmF1bHRJbmRleE1hcDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaW5kZXhlc18sIGluZGV4U2V0Xykge1xuICAgICAgICB0aGlzLmluZGV4ZXNfID0gaW5kZXhlc187XG4gICAgICAgIHRoaXMuaW5kZXhTZXRfID0gaW5kZXhTZXRfO1xuICAgIH1cbiAgICBnZXQoaW5kZXhLZXkpIHtcbiAgICAgICAgY29uc3Qgc29ydGVkTWFwID0gc2FmZUdldCh0aGlzLmluZGV4ZXNfLCBpbmRleEtleSk7XG4gICAgICAgIGlmICghc29ydGVkTWFwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGluZGV4IGRlZmluZWQgZm9yICcgKyBpbmRleEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRlZE1hcCBpbnN0YW5jZW9mIFNvcnRlZE1hcCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRlZE1hcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBpbmRleCBleGlzdHMsIGJ1dCBpdCBmYWxscyBiYWNrIHRvIGp1c3QgbmFtZSBjb21wYXJpc29uLiBSZXR1cm4gbnVsbCBzbyB0aGF0IHRoZSBjYWxsaW5nIGNvZGUgdXNlcyB0aGVcbiAgICAgICAgICAgIC8vIHJlZ3VsYXIgY2hpbGQgbWFwXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYXNJbmRleChpbmRleERlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zKHRoaXMuaW5kZXhTZXRfLCBpbmRleERlZmluaXRpb24udG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIGFkZEluZGV4KGluZGV4RGVmaW5pdGlvbiwgZXhpc3RpbmdDaGlsZHJlbikge1xuICAgICAgICBhc3NlcnQoaW5kZXhEZWZpbml0aW9uICE9PSBLRVlfSU5ERVgsIFwiS2V5SW5kZXggYWx3YXlzIGV4aXN0cyBhbmQgaXNuJ3QgbWVhbnQgdG8gYmUgYWRkZWQgdG8gdGhlIEluZGV4TWFwLlwiKTtcbiAgICAgICAgY29uc3QgY2hpbGRMaXN0ID0gW107XG4gICAgICAgIGxldCBzYXdJbmRleGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgaXRlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0SXRlcmF0b3IoTmFtZWROb2RlLldyYXApO1xuICAgICAgICBsZXQgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xuICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgICAgc2F3SW5kZXhlZFZhbHVlID1cbiAgICAgICAgICAgICAgICBzYXdJbmRleGVkVmFsdWUgfHwgaW5kZXhEZWZpbml0aW9uLmlzRGVmaW5lZE9uKG5leHQubm9kZSk7XG4gICAgICAgICAgICBjaGlsZExpc3QucHVzaChuZXh0KTtcbiAgICAgICAgICAgIG5leHQgPSBpdGVyLmdldE5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3SW5kZXg7XG4gICAgICAgIGlmIChzYXdJbmRleGVkVmFsdWUpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gYnVpbGRDaGlsZFNldChjaGlsZExpc3QsIGluZGV4RGVmaW5pdGlvbi5nZXRDb21wYXJlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3SW5kZXggPSBmYWxsYmFja09iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleE5hbWUgPSBpbmRleERlZmluaXRpb24udG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgbmV3SW5kZXhTZXQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmluZGV4U2V0Xyk7XG4gICAgICAgIG5ld0luZGV4U2V0W2luZGV4TmFtZV0gPSBpbmRleERlZmluaXRpb247XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmluZGV4ZXNfKTtcbiAgICAgICAgbmV3SW5kZXhlc1tpbmRleE5hbWVdID0gbmV3SW5kZXg7XG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhNYXAobmV3SW5kZXhlcywgbmV3SW5kZXhTZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmUgdGhhdCB0aGlzIG5vZGUgaXMgcHJvcGVybHkgdHJhY2tlZCBpbiBhbnkgaW5kZXhlcyB0aGF0IHdlJ3JlIG1haW50YWluaW5nXG4gICAgICovXG4gICAgYWRkVG9JbmRleGVzKG5hbWVkTm9kZSwgZXhpc3RpbmdDaGlsZHJlbikge1xuICAgICAgICBjb25zdCBuZXdJbmRleGVzID0gbWFwKHRoaXMuaW5kZXhlc18sIChpbmRleGVkQ2hpbGRyZW4sIGluZGV4TmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzYWZlR2V0KHRoaXMuaW5kZXhTZXRfLCBpbmRleE5hbWUpO1xuICAgICAgICAgICAgYXNzZXJ0KGluZGV4LCAnTWlzc2luZyBpbmRleCBpbXBsZW1lbnRhdGlvbiBmb3IgJyArIGluZGV4TmFtZSk7XG4gICAgICAgICAgICBpZiAoaW5kZXhlZENoaWxkcmVuID09PSBmYWxsYmFja09iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBuZWVkIHRvIGluZGV4IGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXguaXNEZWZpbmVkT24obmFtZWROb2RlLm5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYnVpbGQgdGhpcyBpbmRleFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0SXRlcmF0b3IoTmFtZWROb2RlLldyYXApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQubmFtZSAhPT0gbmFtZWROb2RlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBpdGVyLmdldE5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3QucHVzaChuYW1lZE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRDaGlsZFNldChjaGlsZExpc3QsIGluZGV4LmdldENvbXBhcmUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBObyBjaGFuZ2UsIHRoaXMgcmVtYWlucyBhIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFja09iamVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ1NuYXAgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuYW1lZE5vZGUubmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0NoaWxkcmVuID0gaW5kZXhlZENoaWxkcmVuO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1NuYXApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSBuZXdDaGlsZHJlbi5yZW1vdmUobmV3IE5hbWVkTm9kZShuYW1lZE5vZGUubmFtZSwgZXhpc3RpbmdTbmFwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZHJlbi5pbnNlcnQobmFtZWROb2RlLCBuYW1lZE5vZGUubm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IEluZGV4TWFwKG5ld0luZGV4ZXMsIHRoaXMuaW5kZXhTZXRfKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEluZGV4TWFwIGluc3RhbmNlIHdpdGggdGhlIGdpdmVuIHZhbHVlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmVGcm9tSW5kZXhlcyhuYW1lZE5vZGUsIGV4aXN0aW5nQ2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3QgbmV3SW5kZXhlcyA9IG1hcCh0aGlzLmluZGV4ZXNfLCAoaW5kZXhlZENoaWxkcmVuKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXhlZENoaWxkcmVuID09PSBmYWxsYmFja09iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZhbGxiYWNrLiBKdXN0IHJldHVybiBpdCwgbm90aGluZyB0byBkbyBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlZENoaWxkcmVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdTbmFwID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmFtZWROb2RlLm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1NuYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ZWRDaGlsZHJlbi5yZW1vdmUobmV3IE5hbWVkTm9kZShuYW1lZE5vZGUubmFtZSwgZXhpc3RpbmdTbmFwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBObyByZWNvcmQgb2YgdGhpcyBjaGlsZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlZENoaWxkcmVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhNYXAobmV3SW5kZXhlcywgdGhpcy5pbmRleFNldF8pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFRPRE86IEZvciBtZW1vcnkgc2F2aW5ncywgZG9uJ3Qgc3RvcmUgcHJpb3JpdHlOb2RlXyBpZiBpdCdzIGVtcHR5LlxubGV0IEVNUFRZX05PREU7XG4vKipcbiAqIENoaWxkcmVuTm9kZSBpcyBhIGNsYXNzIGZvciBzdG9yaW5nIGludGVybmFsIG5vZGVzIGluIGEgRGF0YVNuYXBzaG90XG4gKiAoaS5lLiBub2RlcyB3aXRoIGNoaWxkcmVuKS4gIEl0IGltcGxlbWVudHMgTm9kZSBhbmQgc3RvcmVzIHRoZVxuICogbGlzdCBvZiBjaGlsZHJlbiBpbiB0aGUgY2hpbGRyZW4gcHJvcGVydHksIHNvcnRlZCBieSBjaGlsZCBuYW1lLlxuICovXG5jbGFzcyBDaGlsZHJlbk5vZGUge1xuICAgIHN0YXRpYyBnZXQgRU1QVFlfTk9ERSgpIHtcbiAgICAgICAgcmV0dXJuIChFTVBUWV9OT0RFIHx8XG4gICAgICAgICAgICAoRU1QVFlfTk9ERSA9IG5ldyBDaGlsZHJlbk5vZGUobmV3IFNvcnRlZE1hcChOQU1FX0NPTVBBUkFUT1IpLCBudWxsLCBJbmRleE1hcC5EZWZhdWx0KSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW5fIC0gTGlzdCBvZiBjaGlsZHJlbiBvZiB0aGlzIG5vZGUuLlxuICAgICAqIEBwYXJhbSBwcmlvcml0eU5vZGVfIC0gVGhlIHByaW9yaXR5IG9mIHRoaXMgbm9kZSAoYXMgYSBzbmFwc2hvdCBub2RlKS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjaGlsZHJlbl8sIHByaW9yaXR5Tm9kZV8sIGluZGV4TWFwXykge1xuICAgICAgICB0aGlzLmNoaWxkcmVuXyA9IGNoaWxkcmVuXztcbiAgICAgICAgdGhpcy5wcmlvcml0eU5vZGVfID0gcHJpb3JpdHlOb2RlXztcbiAgICAgICAgdGhpcy5pbmRleE1hcF8gPSBpbmRleE1hcF87XG4gICAgICAgIHRoaXMubGF6eUhhc2hfID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vdGU6IFRoZSBvbmx5IHJlYXNvbiB3ZSBhbGxvdyBudWxsIHByaW9yaXR5IGlzIGZvciBFTVBUWV9OT0RFLCBzaW5jZSB3ZSBjYW4ndCB1c2VcbiAgICAgICAgICogRU1QVFlfTk9ERSBhcyB0aGUgcHJpb3JpdHkgb2YgRU1QVFlfTk9ERS4gIFdlIG1pZ2h0IHdhbnQgdG8gY29uc2lkZXIgbWFraW5nIEVNUFRZX05PREUgaXRzIG93blxuICAgICAgICAgKiBjbGFzcyBpbnN0ZWFkIG9mIGFuIGVtcHR5IENoaWxkcmVuTm9kZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aGlzLnByaW9yaXR5Tm9kZV8pIHtcbiAgICAgICAgICAgIHZhbGlkYXRlUHJpb3JpdHlOb2RlKHRoaXMucHJpb3JpdHlOb2RlXyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgYXNzZXJ0KCF0aGlzLnByaW9yaXR5Tm9kZV8gfHwgdGhpcy5wcmlvcml0eU5vZGVfLmlzRW1wdHkoKSwgJ0FuIGVtcHR5IG5vZGUgY2Fubm90IGhhdmUgYSBwcmlvcml0eScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGlzTGVhZk5vZGUoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgZ2V0UHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaW9yaXR5Tm9kZV8gfHwgRU1QVFlfTk9ERTtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgdXBkYXRlUHJpb3JpdHkobmV3UHJpb3JpdHlOb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuXy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGFsbG93IHByaW9yaXRpZXMgb24gZW1wdHkgbm9kZXNcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUodGhpcy5jaGlsZHJlbl8sIG5ld1ByaW9yaXR5Tm9kZSwgdGhpcy5pbmRleE1hcF8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGdldEltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSkge1xuICAgICAgICAvLyBIYWNrIHRvIHRyZWF0IHByaW9yaXR5IGFzIGEgcmVndWxhciBjaGlsZFxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJpb3JpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbl8uZ2V0KGNoaWxkTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQgPT09IG51bGwgPyBFTVBUWV9OT0RFIDogY2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgZ2V0Q2hpbGQocGF0aCkge1xuICAgICAgICBjb25zdCBmcm9udCA9IHBhdGhHZXRGcm9udChwYXRoKTtcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbW1lZGlhdGVDaGlsZChmcm9udCkuZ2V0Q2hpbGQocGF0aFBvcEZyb250KHBhdGgpKTtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgaGFzQ2hpbGQoY2hpbGROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5nZXQoY2hpbGROYW1lKSAhPT0gbnVsbDtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgdXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpIHtcbiAgICAgICAgYXNzZXJ0KG5ld0NoaWxkTm9kZSwgJ1dlIHNob3VsZCBhbHdheXMgYmUgcGFzc2luZyBzbmFwc2hvdCBub2RlcycpO1xuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUHJpb3JpdHkobmV3Q2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVkTm9kZSA9IG5ldyBOYW1lZE5vZGUoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpO1xuICAgICAgICAgICAgbGV0IG5ld0NoaWxkcmVuLCBuZXdJbmRleE1hcDtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuXy5yZW1vdmUoY2hpbGROYW1lKTtcbiAgICAgICAgICAgICAgICBuZXdJbmRleE1hcCA9IHRoaXMuaW5kZXhNYXBfLnJlbW92ZUZyb21JbmRleGVzKG5hbWVkTm9kZSwgdGhpcy5jaGlsZHJlbl8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuXy5pbnNlcnQoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpO1xuICAgICAgICAgICAgICAgIG5ld0luZGV4TWFwID0gdGhpcy5pbmRleE1hcF8uYWRkVG9JbmRleGVzKG5hbWVkTm9kZSwgdGhpcy5jaGlsZHJlbl8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV3UHJpb3JpdHkgPSBuZXdDaGlsZHJlbi5pc0VtcHR5KClcbiAgICAgICAgICAgICAgICA/IEVNUFRZX05PREVcbiAgICAgICAgICAgICAgICA6IHRoaXMucHJpb3JpdHlOb2RlXztcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hpbGRyZW5Ob2RlKG5ld0NoaWxkcmVuLCBuZXdQcmlvcml0eSwgbmV3SW5kZXhNYXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIHVwZGF0ZUNoaWxkKHBhdGgsIG5ld0NoaWxkTm9kZSkge1xuICAgICAgICBjb25zdCBmcm9udCA9IHBhdGhHZXRGcm9udChwYXRoKTtcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3Q2hpbGROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0KHBhdGhHZXRGcm9udChwYXRoKSAhPT0gJy5wcmlvcml0eScgfHwgcGF0aEdldExlbmd0aChwYXRoKSA9PT0gMSwgJy5wcmlvcml0eSBtdXN0IGJlIHRoZSBsYXN0IHRva2VuIGluIGEgcGF0aCcpO1xuICAgICAgICAgICAgY29uc3QgbmV3SW1tZWRpYXRlQ2hpbGQgPSB0aGlzLmdldEltbWVkaWF0ZUNoaWxkKGZyb250KS51cGRhdGVDaGlsZChwYXRoUG9wRnJvbnQocGF0aCksIG5ld0NoaWxkTm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVJbW1lZGlhdGVDaGlsZChmcm9udCwgbmV3SW1tZWRpYXRlQ2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIG51bUNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uY291bnQoKTtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgdmFsKGV4cG9ydEZvcm1hdCkge1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBsZXQgbnVtS2V5cyA9IDAsIG1heEtleSA9IDAsIGFsbEludGVnZXJLZXlzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChrZXksIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBjaGlsZE5vZGUudmFsKGV4cG9ydEZvcm1hdCk7XG4gICAgICAgICAgICBudW1LZXlzKys7XG4gICAgICAgICAgICBpZiAoYWxsSW50ZWdlcktleXMgJiYgQ2hpbGRyZW5Ob2RlLklOVEVHRVJfUkVHRVhQXy50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICBtYXhLZXkgPSBNYXRoLm1heChtYXhLZXksIE51bWJlcihrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFsbEludGVnZXJLZXlzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWV4cG9ydEZvcm1hdCAmJiBhbGxJbnRlZ2VyS2V5cyAmJiBtYXhLZXkgPCAyICogbnVtS2V5cykge1xuICAgICAgICAgICAgLy8gY29udmVydCB0byBhcnJheS5cbiAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBhcnJheVtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZXhwb3J0Rm9ybWF0ICYmICF0aGlzLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgb2JqWycucHJpb3JpdHknXSA9IHRoaXMuZ2V0UHJpb3JpdHkoKS52YWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgaGFzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGF6eUhhc2hfID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgdG9IYXNoID0gJyc7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICB0b0hhc2ggKz1cbiAgICAgICAgICAgICAgICAgICAgJ3ByaW9yaXR5OicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHlIYXNoVGV4dCh0aGlzLmdldFByaW9yaXR5KCkudmFsKCkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc6JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCAoa2V5LCBjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEhhc2ggPSBjaGlsZE5vZGUuaGFzaCgpO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZEhhc2ggIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvSGFzaCArPSAnOicgKyBrZXkgKyAnOicgKyBjaGlsZEhhc2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhenlIYXNoXyA9IHRvSGFzaCA9PT0gJycgPyAnJyA6IHNoYTEodG9IYXNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXp5SGFzaF87XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGdldFByZWRlY2Vzc29yQ2hpbGROYW1lKGNoaWxkTmFtZSwgY2hpbGROb2RlLCBpbmRleCkge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXgpO1xuICAgICAgICBpZiAoaWR4KSB7XG4gICAgICAgICAgICBjb25zdCBwcmVkZWNlc3NvciA9IGlkeC5nZXRQcmVkZWNlc3NvcktleShuZXcgTmFtZWROb2RlKGNoaWxkTmFtZSwgY2hpbGROb2RlKSk7XG4gICAgICAgICAgICByZXR1cm4gcHJlZGVjZXNzb3IgPyBwcmVkZWNlc3Nvci5uYW1lIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5nZXRQcmVkZWNlc3NvcktleShjaGlsZE5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEZpcnN0Q2hpbGROYW1lKGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKGlkeCkge1xuICAgICAgICAgICAgY29uc3QgbWluS2V5ID0gaWR4Lm1pbktleSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1pbktleSAmJiBtaW5LZXkubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5taW5LZXkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRGaXJzdENoaWxkKGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBtaW5LZXkgPSB0aGlzLmdldEZpcnN0Q2hpbGROYW1lKGluZGV4RGVmaW5pdGlvbik7XG4gICAgICAgIGlmIChtaW5LZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG1pbktleSwgdGhpcy5jaGlsZHJlbl8uZ2V0KG1pbktleSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gaW5kZXgsIHJldHVybiB0aGUga2V5IG5hbWUgb2YgdGhlIGxhcmdlc3QgdmFsdWUgd2UgaGF2ZSwgYWNjb3JkaW5nIHRvIHRoYXQgaW5kZXhcbiAgICAgKi9cbiAgICBnZXRMYXN0Q2hpbGROYW1lKGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKGlkeCkge1xuICAgICAgICAgICAgY29uc3QgbWF4S2V5ID0gaWR4Lm1heEtleSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1heEtleSAmJiBtYXhLZXkubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5tYXhLZXkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRMYXN0Q2hpbGQoaW5kZXhEZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1heEtleSA9IHRoaXMuZ2V0TGFzdENoaWxkTmFtZShpbmRleERlZmluaXRpb24pO1xuICAgICAgICBpZiAobWF4S2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShtYXhLZXksIHRoaXMuY2hpbGRyZW5fLmdldChtYXhLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hDaGlsZChpbmRleCwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleCk7XG4gICAgICAgIGlmIChpZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBpZHguaW5vcmRlclRyYXZlcnNhbCh3cmFwcGVkTm9kZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbih3cmFwcGVkTm9kZS5uYW1lLCB3cmFwcGVkTm9kZS5ub2RlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5fLmlub3JkZXJUcmF2ZXJzYWwoYWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJdGVyYXRvcihpbmRleERlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SXRlcmF0b3JGcm9tKGluZGV4RGVmaW5pdGlvbi5taW5Qb3N0KCksIGluZGV4RGVmaW5pdGlvbik7XG4gICAgfVxuICAgIGdldEl0ZXJhdG9yRnJvbShzdGFydFBvc3QsIGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXhEZWZpbml0aW9uKTtcbiAgICAgICAgaWYgKGlkeCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkeC5nZXRJdGVyYXRvckZyb20oc3RhcnRQb3N0LCBrZXkgPT4ga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5jaGlsZHJlbl8uZ2V0SXRlcmF0b3JGcm9tKHN0YXJ0UG9zdC5uYW1lLCBOYW1lZE5vZGUuV3JhcCk7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9IG51bGwgJiYgaW5kZXhEZWZpbml0aW9uLmNvbXBhcmUobmV4dCwgc3RhcnRQb3N0KSA8IDApIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5nZXROZXh0KCk7XG4gICAgICAgICAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRSZXZlcnNlSXRlcmF0b3IoaW5kZXhEZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJldmVyc2VJdGVyYXRvckZyb20oaW5kZXhEZWZpbml0aW9uLm1heFBvc3QoKSwgaW5kZXhEZWZpbml0aW9uKTtcbiAgICB9XG4gICAgZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShlbmRQb3N0LCBpbmRleERlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5yZXNvbHZlSW5kZXhfKGluZGV4RGVmaW5pdGlvbik7XG4gICAgICAgIGlmIChpZHgpIHtcbiAgICAgICAgICAgIHJldHVybiBpZHguZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShlbmRQb3N0LCBrZXkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5jaGlsZHJlbl8uZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShlbmRQb3N0Lm5hbWUsIE5hbWVkTm9kZS5XcmFwKTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gaXRlcmF0b3IucGVlaygpO1xuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT0gbnVsbCAmJiBpbmRleERlZmluaXRpb24uY29tcGFyZShuZXh0LCBlbmRQb3N0KSA+IDApIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5nZXROZXh0KCk7XG4gICAgICAgICAgICAgICAgbmV4dCA9IGl0ZXJhdG9yLnBlZWsoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wYXJlVG8ob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICBpZiAob3RoZXIuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3RoZXIuaXNMZWFmTm9kZSgpIHx8IG90aGVyLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3RoZXIgPT09IE1BWF9OT0RFKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBNdXN0IGJlIGFub3RoZXIgbm9kZSB3aXRoIGNoaWxkcmVuLlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2l0aEluZGV4KGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoaW5kZXhEZWZpbml0aW9uID09PSBLRVlfSU5ERVggfHxcbiAgICAgICAgICAgIHRoaXMuaW5kZXhNYXBfLmhhc0luZGV4KGluZGV4RGVmaW5pdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXhNYXAgPSB0aGlzLmluZGV4TWFwXy5hZGRJbmRleChpbmRleERlZmluaXRpb24sIHRoaXMuY2hpbGRyZW5fKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hpbGRyZW5Ob2RlKHRoaXMuY2hpbGRyZW5fLCB0aGlzLnByaW9yaXR5Tm9kZV8sIG5ld0luZGV4TWFwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0luZGV4ZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSBLRVlfSU5ERVggfHwgdGhpcy5pbmRleE1hcF8uaGFzSW5kZXgoaW5kZXgpO1xuICAgIH1cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyID09PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvdGhlci5pc0xlYWZOb2RlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyQ2hpbGRyZW5Ob2RlID0gb3RoZXI7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0UHJpb3JpdHkoKS5lcXVhbHMob3RoZXJDaGlsZHJlbk5vZGUuZ2V0UHJpb3JpdHkoKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNoaWxkcmVuXy5jb3VudCgpID09PSBvdGhlckNoaWxkcmVuTm9kZS5jaGlsZHJlbl8uY291bnQoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNJdGVyID0gdGhpcy5nZXRJdGVyYXRvcihQUklPUklUWV9JTkRFWCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJJdGVyID0gb3RoZXJDaGlsZHJlbk5vZGUuZ2V0SXRlcmF0b3IoUFJJT1JJVFlfSU5ERVgpO1xuICAgICAgICAgICAgICAgIGxldCB0aGlzQ3VycmVudCA9IHRoaXNJdGVyLmdldE5leHQoKTtcbiAgICAgICAgICAgICAgICBsZXQgb3RoZXJDdXJyZW50ID0gb3RoZXJJdGVyLmdldE5leHQoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpc0N1cnJlbnQgJiYgb3RoZXJDdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzQ3VycmVudC5uYW1lICE9PSBvdGhlckN1cnJlbnQubmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXNDdXJyZW50Lm5vZGUuZXF1YWxzKG90aGVyQ3VycmVudC5ub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNDdXJyZW50ID0gdGhpc0l0ZXIuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBvdGhlckN1cnJlbnQgPSBvdGhlckl0ZXIuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0N1cnJlbnQgPT09IG51bGwgJiYgb3RoZXJDdXJyZW50ID09PSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBTb3J0ZWRNYXAgb3JkZXJlZCBieSBpbmRleCwgb3IgbnVsbCBpZiB0aGUgZGVmYXVsdCAoYnkta2V5KSBvcmRlcmluZyBjYW4gYmUgdXNlZFxuICAgICAqIGluc3RlYWQuXG4gICAgICpcbiAgICAgKi9cbiAgICByZXNvbHZlSW5kZXhfKGluZGV4RGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoaW5kZXhEZWZpbml0aW9uID09PSBLRVlfSU5ERVgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhNYXBfLmdldChpbmRleERlZmluaXRpb24udG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5DaGlsZHJlbk5vZGUuSU5URUdFUl9SRUdFWFBfID0gL14oMHxbMS05XVxcZCopJC87XG5jbGFzcyBNYXhOb2RlIGV4dGVuZHMgQ2hpbGRyZW5Ob2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IFNvcnRlZE1hcChOQU1FX0NPTVBBUkFUT1IpLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgSW5kZXhNYXAuRGVmYXVsdCk7XG4gICAgfVxuICAgIGNvbXBhcmVUbyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIC8vIE5vdCB0aGF0IHdlIGV2ZXJ5IGNvbXBhcmUgaXQsIGJ1dCBNQVhfTk9ERSBpcyBvbmx5IGV2ZXIgZXF1YWwgdG8gaXRzZWxmXG4gICAgICAgIHJldHVybiBvdGhlciA9PT0gdGhpcztcbiAgICB9XG4gICAgZ2V0UHJpb3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBNYXJrZXIgdGhhdCB3aWxsIHNvcnQgaGlnaGVyIHRoYW4gYW55IG90aGVyIHNuYXBzaG90LlxuICovXG5jb25zdCBNQVhfTk9ERSA9IG5ldyBNYXhOb2RlKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhOYW1lZE5vZGUsIHtcbiAgICBNSU46IHtcbiAgICAgICAgdmFsdWU6IG5ldyBOYW1lZE5vZGUoTUlOX05BTUUsIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKVxuICAgIH0sXG4gICAgTUFYOiB7XG4gICAgICAgIHZhbHVlOiBuZXcgTmFtZWROb2RlKE1BWF9OQU1FLCBNQVhfTk9ERSlcbiAgICB9XG59KTtcbi8qKlxuICogUmVmZXJlbmNlIEV4dGVuc2lvbnNcbiAqL1xuS2V5SW5kZXguX19FTVBUWV9OT0RFID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XG5MZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yID0gQ2hpbGRyZW5Ob2RlO1xuc2V0TWF4Tm9kZSQxKE1BWF9OT0RFKTtcbnNldE1heE5vZGUoTUFYX05PREUpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY29uc3QgVVNFX0hJTlpFID0gdHJ1ZTtcbi8qKlxuICogQ29uc3RydWN0cyBhIHNuYXBzaG90IG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwYXNzZWQgSlNPTiBhbmQgcmV0dXJucyBpdC5cbiAqIEBwYXJhbSBqc29uIC0gSlNPTiB0byBjcmVhdGUgYSBub2RlIGZvci5cbiAqIEBwYXJhbSBwcmlvcml0eSAtIE9wdGlvbmFsIHByaW9yaXR5IHRvIHVzZS4gIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIHRoZVxuICogcGFzc2VkIEpTT04gY29udGFpbnMgYSAucHJpb3JpdHkgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIG5vZGVGcm9tSlNPTihqc29uLCBwcmlvcml0eSA9IG51bGwpIHtcbiAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ29iamVjdCcgJiYgJy5wcmlvcml0eScgaW4ganNvbikge1xuICAgICAgICBwcmlvcml0eSA9IGpzb25bJy5wcmlvcml0eSddO1xuICAgIH1cbiAgICBhc3NlcnQocHJpb3JpdHkgPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIHByaW9yaXR5ID09PSAnc3RyaW5nJyB8fFxuICAgICAgICB0eXBlb2YgcHJpb3JpdHkgPT09ICdudW1iZXInIHx8XG4gICAgICAgICh0eXBlb2YgcHJpb3JpdHkgPT09ICdvYmplY3QnICYmICcuc3YnIGluIHByaW9yaXR5KSwgJ0ludmFsaWQgcHJpb3JpdHkgdHlwZSBmb3VuZDogJyArIHR5cGVvZiBwcmlvcml0eSk7XG4gICAgaWYgKHR5cGVvZiBqc29uID09PSAnb2JqZWN0JyAmJiAnLnZhbHVlJyBpbiBqc29uICYmIGpzb25bJy52YWx1ZSddICE9PSBudWxsKSB7XG4gICAgICAgIGpzb24gPSBqc29uWycudmFsdWUnXTtcbiAgICB9XG4gICAgLy8gVmFsaWQgbGVhZiBub2RlcyBpbmNsdWRlIG5vbi1vYmplY3RzIG9yIHNlcnZlci12YWx1ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAodHlwZW9mIGpzb24gIT09ICdvYmplY3QnIHx8ICcuc3YnIGluIGpzb24pIHtcbiAgICAgICAgY29uc3QganNvbkxlYWYgPSBqc29uO1xuICAgICAgICByZXR1cm4gbmV3IExlYWZOb2RlKGpzb25MZWFmLCBub2RlRnJvbUpTT04ocHJpb3JpdHkpKTtcbiAgICB9XG4gICAgaWYgKCEoanNvbiBpbnN0YW5jZW9mIEFycmF5KSAmJiBVU0VfSElOWkUpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgbGV0IGNoaWxkcmVuSGF2ZVByaW9yaXR5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGhpbnplSnNvbk9iaiA9IGpzb247XG4gICAgICAgIGVhY2goaGluemVKc29uT2JqLCAoa2V5LCBjaGlsZCkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleS5zdWJzdHJpbmcoMCwgMSkgIT09ICcuJykge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBtZXRhZGF0YSBub2Rlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5vZGVGcm9tSlNPTihjaGlsZCk7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuSGF2ZVByaW9yaXR5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuSGF2ZVByaW9yaXR5IHx8ICFjaGlsZE5vZGUuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3IE5hbWVkTm9kZShrZXksIGNoaWxkTm9kZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZFNldCA9IGJ1aWxkQ2hpbGRTZXQoY2hpbGRyZW4sIE5BTUVfT05MWV9DT01QQVJBVE9SLCBuYW1lZE5vZGUgPT4gbmFtZWROb2RlLm5hbWUsIE5BTUVfQ09NUEFSQVRPUik7XG4gICAgICAgIGlmIChjaGlsZHJlbkhhdmVQcmlvcml0eSkge1xuICAgICAgICAgICAgY29uc3Qgc29ydGVkQ2hpbGRTZXQgPSBidWlsZENoaWxkU2V0KGNoaWxkcmVuLCBQUklPUklUWV9JTkRFWC5nZXRDb21wYXJlKCkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUoY2hpbGRTZXQsIG5vZGVGcm9tSlNPTihwcmlvcml0eSksIG5ldyBJbmRleE1hcCh7ICcucHJpb3JpdHknOiBzb3J0ZWRDaGlsZFNldCB9LCB7ICcucHJpb3JpdHknOiBQUklPUklUWV9JTkRFWCB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkcmVuTm9kZShjaGlsZFNldCwgbm9kZUZyb21KU09OKHByaW9yaXR5KSwgSW5kZXhNYXAuRGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBub2RlID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XG4gICAgICAgIGVhY2goanNvbiwgKGtleSwgY2hpbGREYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGFpbnMoanNvbiwga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkuc3Vic3RyaW5nKDAsIDEpICE9PSAnLicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG1ldGFkYXRhIG5vZGVzLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBub2RlRnJvbUpTT04oY2hpbGREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5pc0xlYWZOb2RlKCkgfHwgIWNoaWxkTm9kZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGtleSwgY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBub2RlLnVwZGF0ZVByaW9yaXR5KG5vZGVGcm9tSlNPTihwcmlvcml0eSkpO1xuICAgIH1cbn1cbnNldE5vZGVGcm9tSlNPTihub2RlRnJvbUpTT04pO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgUGF0aEluZGV4IGV4dGVuZHMgSW5kZXgge1xuICAgIGNvbnN0cnVjdG9yKGluZGV4UGF0aF8pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pbmRleFBhdGhfID0gaW5kZXhQYXRoXztcbiAgICAgICAgYXNzZXJ0KCFwYXRoSXNFbXB0eShpbmRleFBhdGhfKSAmJiBwYXRoR2V0RnJvbnQoaW5kZXhQYXRoXykgIT09ICcucHJpb3JpdHknLCBcIkNhbid0IGNyZWF0ZSBQYXRoSW5kZXggd2l0aCBlbXB0eSBwYXRoIG9yIC5wcmlvcml0eSBrZXlcIik7XG4gICAgfVxuICAgIGV4dHJhY3RDaGlsZChzbmFwKSB7XG4gICAgICAgIHJldHVybiBzbmFwLmdldENoaWxkKHRoaXMuaW5kZXhQYXRoXyk7XG4gICAgfVxuICAgIGlzRGVmaW5lZE9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICFub2RlLmdldENoaWxkKHRoaXMuaW5kZXhQYXRoXykuaXNFbXB0eSgpO1xuICAgIH1cbiAgICBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgY29uc3QgYUNoaWxkID0gdGhpcy5leHRyYWN0Q2hpbGQoYS5ub2RlKTtcbiAgICAgICAgY29uc3QgYkNoaWxkID0gdGhpcy5leHRyYWN0Q2hpbGQoYi5ub2RlKTtcbiAgICAgICAgY29uc3QgaW5kZXhDbXAgPSBhQ2hpbGQuY29tcGFyZVRvKGJDaGlsZCk7XG4gICAgICAgIGlmIChpbmRleENtcCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlKGEubmFtZSwgYi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleENtcDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYWtlUG9zdChpbmRleFZhbHVlLCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IG5vZGVGcm9tSlNPTihpbmRleFZhbHVlKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLnVwZGF0ZUNoaWxkKHRoaXMuaW5kZXhQYXRoXywgdmFsdWVOb2RlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobmFtZSwgbm9kZSk7XG4gICAgfVxuICAgIG1heFBvc3QoKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS51cGRhdGVDaGlsZCh0aGlzLmluZGV4UGF0aF8sIE1BWF9OT0RFKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIG5vZGUpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhTbGljZSh0aGlzLmluZGV4UGF0aF8sIDApLmpvaW4oJy8nKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBWYWx1ZUluZGV4IGV4dGVuZHMgSW5kZXgge1xuICAgIGNvbXBhcmUoYSwgYikge1xuICAgICAgICBjb25zdCBpbmRleENtcCA9IGEubm9kZS5jb21wYXJlVG8oYi5ub2RlKTtcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZUNvbXBhcmUoYS5uYW1lLCBiLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4Q21wO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzRGVmaW5lZE9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluZGV4ZWRWYWx1ZUNoYW5nZWQob2xkTm9kZSwgbmV3Tm9kZSkge1xuICAgICAgICByZXR1cm4gIW9sZE5vZGUuZXF1YWxzKG5ld05vZGUpO1xuICAgIH1cbiAgICBtaW5Qb3N0KCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcbiAgICB9XG4gICAgbWF4UG9zdCgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIE5hbWVkTm9kZS5NQVg7XG4gICAgfVxuICAgIG1ha2VQb3N0KGluZGV4VmFsdWUsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWVOb2RlID0gbm9kZUZyb21KU09OKGluZGV4VmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShuYW1lLCB2YWx1ZU5vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBTdHJpbmcgcmVwcmVzZW50YXRpb24gZm9yIGluY2x1c2lvbiBpbiBhIHF1ZXJ5IHNwZWNcbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICcudmFsdWUnO1xuICAgIH1cbn1cbmNvbnN0IFZBTFVFX0lOREVYID0gbmV3IFZhbHVlSW5kZXgoKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIGNoYW5nZVZhbHVlKHNuYXBzaG90Tm9kZSkge1xuICAgIHJldHVybiB7IHR5cGU6IFwidmFsdWVcIiAvKiBDaGFuZ2VUeXBlLlZBTFVFICovLCBzbmFwc2hvdE5vZGUgfTtcbn1cbmZ1bmN0aW9uIGNoYW5nZUNoaWxkQWRkZWQoY2hpbGROYW1lLCBzbmFwc2hvdE5vZGUpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImNoaWxkX2FkZGVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9BRERFRCAqLywgc25hcHNob3ROb2RlLCBjaGlsZE5hbWUgfTtcbn1cbmZ1bmN0aW9uIGNoYW5nZUNoaWxkUmVtb3ZlZChjaGlsZE5hbWUsIHNuYXBzaG90Tm9kZSkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiY2hpbGRfcmVtb3ZlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfUkVNT1ZFRCAqLywgc25hcHNob3ROb2RlLCBjaGlsZE5hbWUgfTtcbn1cbmZ1bmN0aW9uIGNoYW5nZUNoaWxkQ2hhbmdlZChjaGlsZE5hbWUsIHNuYXBzaG90Tm9kZSwgb2xkU25hcCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiY2hpbGRfY2hhbmdlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfQ0hBTkdFRCAqLyxcbiAgICAgICAgc25hcHNob3ROb2RlLFxuICAgICAgICBjaGlsZE5hbWUsXG4gICAgICAgIG9sZFNuYXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hhbmdlQ2hpbGRNb3ZlZChjaGlsZE5hbWUsIHNuYXBzaG90Tm9kZSkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiY2hpbGRfbW92ZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX01PVkVEICovLCBzbmFwc2hvdE5vZGUsIGNoaWxkTmFtZSB9O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBEb2Vzbid0IHJlYWxseSBmaWx0ZXIgbm9kZXMgYnV0IGFwcGxpZXMgYW4gaW5kZXggdG8gdGhlIG5vZGUgYW5kIGtlZXBzIHRyYWNrIG9mIGFueSBjaGFuZ2VzXG4gKi9cbmNsYXNzIEluZGV4ZWRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGluZGV4Xykge1xuICAgICAgICB0aGlzLmluZGV4XyA9IGluZGV4XztcbiAgICB9XG4gICAgdXBkYXRlQ2hpbGQoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XG4gICAgICAgIGFzc2VydChzbmFwLmlzSW5kZXhlZCh0aGlzLmluZGV4XyksICdBIG5vZGUgbXVzdCBiZSBpbmRleGVkIGlmIG9ubHkgYSBjaGlsZCBpcyB1cGRhdGVkJyk7XG4gICAgICAgIGNvbnN0IG9sZENoaWxkID0gc25hcC5nZXRJbW1lZGlhdGVDaGlsZChrZXkpO1xuICAgICAgICAvLyBDaGVjayBpZiBhbnl0aGluZyBhY3R1YWxseSBjaGFuZ2VkLlxuICAgICAgICBpZiAob2xkQ2hpbGQuZ2V0Q2hpbGQoYWZmZWN0ZWRQYXRoKS5lcXVhbHMobmV3Q2hpbGQuZ2V0Q2hpbGQoYWZmZWN0ZWRQYXRoKSkpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlJ3MgYW4gZWRnZSBjYXNlIHdoZXJlIGEgY2hpbGQgY2FuIGVudGVyIG9yIGxlYXZlIHRoZSB2aWV3IGJlY2F1c2UgYWZmZWN0ZWRQYXRoIHdhcyBzZXQgdG8gbnVsbC5cbiAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgYWZmZWN0ZWRQYXRoIHdpbGwgYXBwZWFyIG51bGwgaW4gYm90aCB0aGUgb2xkIGFuZCBuZXcgc25hcHNob3RzLiAgU28gd2UgbmVlZFxuICAgICAgICAgICAgLy8gdG8gYXZvaWQgdHJlYXRpbmcgdGhlc2UgY2FzZXMgYXMgXCJub3RoaW5nIGNoYW5nZWQuXCJcbiAgICAgICAgICAgIGlmIChvbGRDaGlsZC5pc0VtcHR5KCkgPT09IG5ld0NoaWxkLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc2VydCBzaG91bGQgYmUgdmFsaWQsIGJ1dCBpdCdzIGV4cGVuc2l2ZSAoY2FuIGRvbWluYXRlIHBlcmYgdGVzdGluZykgc28gZG9uJ3QgYWN0dWFsbHkgZG8gaXQuXG4gICAgICAgICAgICAgICAgLy9hc3NlcnQob2xkQ2hpbGQuZXF1YWxzKG5ld0NoaWxkKSwgJ09sZCBhbmQgbmV3IHNuYXBzaG90cyBzaG91bGQgYmUgZXF1YWwuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNuYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdENoYW5nZUFjY3VtdWxhdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc25hcC5oYXNDaGlsZChrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdENoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoY2hhbmdlQ2hpbGRSZW1vdmVkKGtleSwgb2xkQ2hpbGQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChzbmFwLmlzTGVhZk5vZGUoKSwgJ0EgY2hpbGQgcmVtb3ZlIHdpdGhvdXQgYW4gb2xkIGNoaWxkIG9ubHkgbWFrZXMgc2Vuc2Ugb24gYSBsZWFmIG5vZGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvbGRDaGlsZC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBvcHRDaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKGNoYW5nZUNoaWxkQWRkZWQoa2V5LCBuZXdDaGlsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShjaGFuZ2VDaGlsZENoYW5nZWQoa2V5LCBuZXdDaGlsZCwgb2xkQ2hpbGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc25hcC5pc0xlYWZOb2RlKCkgJiYgbmV3Q2hpbGQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gc25hcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbm9kZSBpcyBpbmRleGVkXG4gICAgICAgICAgICByZXR1cm4gc25hcC51cGRhdGVJbW1lZGlhdGVDaGlsZChrZXksIG5ld0NoaWxkKS53aXRoSW5kZXgodGhpcy5pbmRleF8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUZ1bGxOb2RlKG9sZFNuYXAsIG5ld1NuYXAsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XG4gICAgICAgIGlmIChvcHRDaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoIW9sZFNuYXAuaXNMZWFmTm9kZSgpKSB7XG4gICAgICAgICAgICAgICAgb2xkU25hcC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChrZXksIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1NuYXAuaGFzQ2hpbGQoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShjaGFuZ2VDaGlsZFJlbW92ZWQoa2V5LCBjaGlsZE5vZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuZXdTbmFwLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgICAgIG5ld1NuYXAuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCAoa2V5LCBjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFNuYXAuaGFzQ2hpbGQoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkQ2hpbGQgPSBvbGRTbmFwLmdldEltbWVkaWF0ZUNoaWxkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZENoaWxkLmVxdWFscyhjaGlsZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShjaGFuZ2VDaGlsZENoYW5nZWQoa2V5LCBjaGlsZE5vZGUsIG9sZENoaWxkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRDaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKGNoYW5nZUNoaWxkQWRkZWQoa2V5LCBjaGlsZE5vZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XG4gICAgfVxuICAgIHVwZGF0ZVByaW9yaXR5KG9sZFNuYXAsIG5ld1ByaW9yaXR5KSB7XG4gICAgICAgIGlmIChvbGRTbmFwLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9sZFNuYXAudXBkYXRlUHJpb3JpdHkobmV3UHJpb3JpdHkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbHRlcnNOb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnZXRJbmRleGVkRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4XztcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEZpbHRlcnMgbm9kZXMgYnkgcmFuZ2UgYW5kIHVzZXMgYW4gSW5kZXhGaWx0ZXIgdG8gdHJhY2sgYW55IGNoYW5nZXMgYWZ0ZXIgZmlsdGVyaW5nIHRoZSBub2RlXG4gKi9cbmNsYXNzIFJhbmdlZEZpbHRlciB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuaW5kZXhlZEZpbHRlcl8gPSBuZXcgSW5kZXhlZEZpbHRlcihwYXJhbXMuZ2V0SW5kZXgoKSk7XG4gICAgICAgIHRoaXMuaW5kZXhfID0gcGFyYW1zLmdldEluZGV4KCk7XG4gICAgICAgIHRoaXMuc3RhcnRQb3N0XyA9IFJhbmdlZEZpbHRlci5nZXRTdGFydFBvc3RfKHBhcmFtcyk7XG4gICAgICAgIHRoaXMuZW5kUG9zdF8gPSBSYW5nZWRGaWx0ZXIuZ2V0RW5kUG9zdF8ocGFyYW1zKTtcbiAgICAgICAgdGhpcy5zdGFydElzSW5jbHVzaXZlXyA9ICFwYXJhbXMuc3RhcnRBZnRlclNldF87XG4gICAgICAgIHRoaXMuZW5kSXNJbmNsdXNpdmVfID0gIXBhcmFtcy5lbmRCZWZvcmVTZXRfO1xuICAgIH1cbiAgICBnZXRTdGFydFBvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0UG9zdF87XG4gICAgfVxuICAgIGdldEVuZFBvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZFBvc3RfO1xuICAgIH1cbiAgICBtYXRjaGVzKG5vZGUpIHtcbiAgICAgICAgY29uc3QgaXNXaXRoaW5TdGFydCA9IHRoaXMuc3RhcnRJc0luY2x1c2l2ZV9cbiAgICAgICAgICAgID8gdGhpcy5pbmRleF8uY29tcGFyZSh0aGlzLmdldFN0YXJ0UG9zdCgpLCBub2RlKSA8PSAwXG4gICAgICAgICAgICA6IHRoaXMuaW5kZXhfLmNvbXBhcmUodGhpcy5nZXRTdGFydFBvc3QoKSwgbm9kZSkgPCAwO1xuICAgICAgICBjb25zdCBpc1dpdGhpbkVuZCA9IHRoaXMuZW5kSXNJbmNsdXNpdmVfXG4gICAgICAgICAgICA/IHRoaXMuaW5kZXhfLmNvbXBhcmUobm9kZSwgdGhpcy5nZXRFbmRQb3N0KCkpIDw9IDBcbiAgICAgICAgICAgIDogdGhpcy5pbmRleF8uY29tcGFyZShub2RlLCB0aGlzLmdldEVuZFBvc3QoKSkgPCAwO1xuICAgICAgICByZXR1cm4gaXNXaXRoaW5TdGFydCAmJiBpc1dpdGhpbkVuZDtcbiAgICB9XG4gICAgdXBkYXRlQ2hpbGQoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XG4gICAgICAgIGlmICghdGhpcy5tYXRjaGVzKG5ldyBOYW1lZE5vZGUoa2V5LCBuZXdDaGlsZCkpKSB7XG4gICAgICAgICAgICBuZXdDaGlsZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ZWRGaWx0ZXJfLnVwZGF0ZUNoaWxkKHNuYXAsIGtleSwgbmV3Q2hpbGQsIGFmZmVjdGVkUGF0aCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XG4gICAgfVxuICAgIHVwZGF0ZUZ1bGxOb2RlKG9sZFNuYXAsIG5ld1NuYXAsIG9wdENoYW5nZUFjY3VtdWxhdG9yKSB7XG4gICAgICAgIGlmIChuZXdTbmFwLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBjaGlsZHJlbiBub2RlIHdpdGggdGhlIGNvcnJlY3QgaW5kZXgsIG5vdCBhIGxlYWYgbm9kZTtcbiAgICAgICAgICAgIG5ld1NuYXAgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmlsdGVyZWQgPSBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XG4gICAgICAgIC8vIERvbid0IHN1cHBvcnQgcHJpb3JpdGllcyBvbiBxdWVyaWVzXG4gICAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQudXBkYXRlUHJpb3JpdHkoQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbmV3U25hcC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChrZXksIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzZWxmLm1hdGNoZXMobmV3IE5hbWVkTm9kZShrZXksIGNoaWxkTm9kZSkpKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVJbW1lZGlhdGVDaGlsZChrZXksIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ZWRGaWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG9sZFNuYXAsIGZpbHRlcmVkLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XG4gICAgfVxuICAgIHVwZGF0ZVByaW9yaXR5KG9sZFNuYXAsIG5ld1ByaW9yaXR5KSB7XG4gICAgICAgIC8vIERvbid0IHN1cHBvcnQgcHJpb3JpdGllcyBvbiBxdWVyaWVzXG4gICAgICAgIHJldHVybiBvbGRTbmFwO1xuICAgIH1cbiAgICBmaWx0ZXJzTm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXRJbmRleGVkRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleGVkRmlsdGVyXztcbiAgICB9XG4gICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4XztcbiAgICB9XG4gICAgc3RhdGljIGdldFN0YXJ0UG9zdF8ocGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnROYW1lID0gcGFyYW1zLmdldEluZGV4U3RhcnROYW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWFrZVBvc3QocGFyYW1zLmdldEluZGV4U3RhcnRWYWx1ZSgpLCBzdGFydE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5nZXRJbmRleCgpLm1pblBvc3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0RW5kUG9zdF8ocGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMuaGFzRW5kKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZE5hbWUgPSBwYXJhbXMuZ2V0SW5kZXhFbmROYW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWFrZVBvc3QocGFyYW1zLmdldEluZGV4RW5kVmFsdWUoKSwgZW5kTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWF4UG9zdCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBcHBsaWVzIGEgbGltaXQgYW5kIGEgcmFuZ2UgdG8gYSBub2RlIGFuZCB1c2VzIFJhbmdlZEZpbHRlciB0byBkbyB0aGUgaGVhdnkgbGlmdGluZyB3aGVyZSBwb3NzaWJsZVxuICovXG5jbGFzcyBMaW1pdGVkRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy53aXRoaW5EaXJlY3Rpb25hbFN0YXJ0ID0gKG5vZGUpID0+IHRoaXMucmV2ZXJzZV8gPyB0aGlzLndpdGhpbkVuZFBvc3Qobm9kZSkgOiB0aGlzLndpdGhpblN0YXJ0UG9zdChub2RlKTtcbiAgICAgICAgdGhpcy53aXRoaW5EaXJlY3Rpb25hbEVuZCA9IChub2RlKSA9PiB0aGlzLnJldmVyc2VfID8gdGhpcy53aXRoaW5TdGFydFBvc3Qobm9kZSkgOiB0aGlzLndpdGhpbkVuZFBvc3Qobm9kZSk7XG4gICAgICAgIHRoaXMud2l0aGluU3RhcnRQb3N0ID0gKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBhcmVSZXMgPSB0aGlzLmluZGV4Xy5jb21wYXJlKHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRTdGFydFBvc3QoKSwgbm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydElzSW5jbHVzaXZlXyA/IGNvbXBhcmVSZXMgPD0gMCA6IGNvbXBhcmVSZXMgPCAwO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndpdGhpbkVuZFBvc3QgPSAobm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tcGFyZVJlcyA9IHRoaXMuaW5kZXhfLmNvbXBhcmUobm9kZSwgdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEVuZFBvc3QoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmRJc0luY2x1c2l2ZV8gPyBjb21wYXJlUmVzIDw9IDAgOiBjb21wYXJlUmVzIDwgMDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yYW5nZWRGaWx0ZXJfID0gbmV3IFJhbmdlZEZpbHRlcihwYXJhbXMpO1xuICAgICAgICB0aGlzLmluZGV4XyA9IHBhcmFtcy5nZXRJbmRleCgpO1xuICAgICAgICB0aGlzLmxpbWl0XyA9IHBhcmFtcy5nZXRMaW1pdCgpO1xuICAgICAgICB0aGlzLnJldmVyc2VfID0gIXBhcmFtcy5pc1ZpZXdGcm9tTGVmdCgpO1xuICAgICAgICB0aGlzLnN0YXJ0SXNJbmNsdXNpdmVfID0gIXBhcmFtcy5zdGFydEFmdGVyU2V0XztcbiAgICAgICAgdGhpcy5lbmRJc0luY2x1c2l2ZV8gPSAhcGFyYW1zLmVuZEJlZm9yZVNldF87XG4gICAgfVxuICAgIHVwZGF0ZUNoaWxkKHNuYXAsIGtleSwgbmV3Q2hpbGQsIGFmZmVjdGVkUGF0aCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xuICAgICAgICBpZiAoIXRoaXMucmFuZ2VkRmlsdGVyXy5tYXRjaGVzKG5ldyBOYW1lZE5vZGUoa2V5LCBuZXdDaGlsZCkpKSB7XG4gICAgICAgICAgICBuZXdDaGlsZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbmFwLmdldEltbWVkaWF0ZUNoaWxkKGtleSkuZXF1YWxzKG5ld0NoaWxkKSkge1xuICAgICAgICAgICAgLy8gTm8gY2hhbmdlXG4gICAgICAgICAgICByZXR1cm4gc25hcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzbmFwLm51bUNoaWxkcmVuKCkgPCB0aGlzLmxpbWl0Xykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VkRmlsdGVyX1xuICAgICAgICAgICAgICAgIC5nZXRJbmRleGVkRmlsdGVyKClcbiAgICAgICAgICAgICAgICAudXBkYXRlQ2hpbGQoc25hcCwga2V5LCBuZXdDaGlsZCwgYWZmZWN0ZWRQYXRoLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bGxMaW1pdFVwZGF0ZUNoaWxkXyhzbmFwLCBrZXksIG5ld0NoaWxkLCBzb3VyY2UsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVGdWxsTm9kZShvbGRTbmFwLCBuZXdTbmFwLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xuICAgICAgICBsZXQgZmlsdGVyZWQ7XG4gICAgICAgIGlmIChuZXdTbmFwLmlzTGVhZk5vZGUoKSB8fCBuZXdTbmFwLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBjaGlsZHJlbiBub2RlIHdpdGggdGhlIGNvcnJlY3QgaW5kZXgsIG5vdCBhIGxlYWYgbm9kZTtcbiAgICAgICAgICAgIGZpbHRlcmVkID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUud2l0aEluZGV4KHRoaXMuaW5kZXhfKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbWl0XyAqIDIgPCBuZXdTbmFwLm51bUNoaWxkcmVuKCkgJiZcbiAgICAgICAgICAgICAgICBuZXdTbmFwLmlzSW5kZXhlZCh0aGlzLmluZGV4XykpIHtcbiAgICAgICAgICAgICAgICAvLyBFYXNpZXIgdG8gYnVpbGQgdXAgYSBzbmFwc2hvdCwgc2luY2Ugd2hhdCB3ZSdyZSBnaXZlbiBoYXMgbW9yZSB0aGFuIHR3aWNlIHRoZSBlbGVtZW50cyB3ZSB3YW50XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS53aXRoSW5kZXgodGhpcy5pbmRleF8pO1xuICAgICAgICAgICAgICAgIC8vIGFuY2hvciB0byB0aGUgc3RhcnRQb3N0LCBlbmRQb3N0LCBvciBsYXN0IGVsZW1lbnQgYXMgYXBwcm9wcmlhdGVcbiAgICAgICAgICAgICAgICBsZXQgaXRlcmF0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IgPSBuZXdTbmFwLmdldFJldmVyc2VJdGVyYXRvckZyb20odGhpcy5yYW5nZWRGaWx0ZXJfLmdldEVuZFBvc3QoKSwgdGhpcy5pbmRleF8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IgPSBuZXdTbmFwLmdldEl0ZXJhdG9yRnJvbSh0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0U3RhcnRQb3N0KCksIHRoaXMuaW5kZXhfKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXRlcmF0b3IuaGFzTmV4dCgpICYmIGNvdW50IDwgdGhpcy5saW1pdF8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZXJhdG9yLmdldE5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLndpdGhpbkRpcmVjdGlvbmFsU3RhcnQobmV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgdGhlIHN0YXJ0LCBza2lwIHRvIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLndpdGhpbkRpcmVjdGlvbmFsRW5kKG5leHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCwgc3RvcCBhZGRpbmcgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVJbW1lZGlhdGVDaGlsZChuZXh0Lm5hbWUsIG5leHQubm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHNuYXAgY29udGFpbnMgbGVzcyB0aGFuIHR3aWNlIHRoZSBsaW1pdC4gRmFzdGVyIHRvIGRlbGV0ZSBmcm9tIHRoZSBzbmFwIHRoYW4gYnVpbGQgdXAgYSBuZXcgb25lXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3Qgc3VwcG9ydCBwcmlvcml0aWVzIG9uIHF1ZXJpZXNcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLnVwZGF0ZVByaW9yaXR5KENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcbiAgICAgICAgICAgICAgICBsZXQgaXRlcmF0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IgPSBmaWx0ZXJlZC5nZXRSZXZlcnNlSXRlcmF0b3IodGhpcy5pbmRleF8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IgPSBmaWx0ZXJlZC5nZXRJdGVyYXRvcih0aGlzLmluZGV4Xyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlcmF0b3IuZ2V0TmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpblJhbmdlID0gY291bnQgPCB0aGlzLmxpbWl0XyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aXRoaW5EaXJlY3Rpb25hbFN0YXJ0KG5leHQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpdGhpbkRpcmVjdGlvbmFsRW5kKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5SYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQudXBkYXRlSW1tZWRpYXRlQ2hpbGQobmV4dC5uYW1lLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VkRmlsdGVyX1xuICAgICAgICAgICAgLmdldEluZGV4ZWRGaWx0ZXIoKVxuICAgICAgICAgICAgLnVwZGF0ZUZ1bGxOb2RlKG9sZFNuYXAsIGZpbHRlcmVkLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XG4gICAgfVxuICAgIHVwZGF0ZVByaW9yaXR5KG9sZFNuYXAsIG5ld1ByaW9yaXR5KSB7XG4gICAgICAgIC8vIERvbid0IHN1cHBvcnQgcHJpb3JpdGllcyBvbiBxdWVyaWVzXG4gICAgICAgIHJldHVybiBvbGRTbmFwO1xuICAgIH1cbiAgICBmaWx0ZXJzTm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXRJbmRleGVkRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEluZGV4ZWRGaWx0ZXIoKTtcbiAgICB9XG4gICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4XztcbiAgICB9XG4gICAgZnVsbExpbWl0VXBkYXRlQ2hpbGRfKHNuYXAsIGNoaWxkS2V5LCBjaGlsZFNuYXAsIHNvdXJjZSwgY2hhbmdlQWNjdW11bGF0b3IpIHtcbiAgICAgICAgLy8gVE9ETzogcmVuYW1lIGFsbCBjYWNoZSBzdHVmZiBldGMgdG8gZ2VuZXJhbCBzbmFwIHRlcm1pbm9sb2d5XG4gICAgICAgIGxldCBjbXA7XG4gICAgICAgIGlmICh0aGlzLnJldmVyc2VfKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleENtcCA9IHRoaXMuaW5kZXhfLmdldENvbXBhcmUoKTtcbiAgICAgICAgICAgIGNtcCA9IChhLCBiKSA9PiBpbmRleENtcChiLCBhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNtcCA9IHRoaXMuaW5kZXhfLmdldENvbXBhcmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRFdmVudENhY2hlID0gc25hcDtcbiAgICAgICAgYXNzZXJ0KG9sZEV2ZW50Q2FjaGUubnVtQ2hpbGRyZW4oKSA9PT0gdGhpcy5saW1pdF8sICcnKTtcbiAgICAgICAgY29uc3QgbmV3Q2hpbGROYW1lZE5vZGUgPSBuZXcgTmFtZWROb2RlKGNoaWxkS2V5LCBjaGlsZFNuYXApO1xuICAgICAgICBjb25zdCB3aW5kb3dCb3VuZGFyeSA9IHRoaXMucmV2ZXJzZV9cbiAgICAgICAgICAgID8gb2xkRXZlbnRDYWNoZS5nZXRGaXJzdENoaWxkKHRoaXMuaW5kZXhfKVxuICAgICAgICAgICAgOiBvbGRFdmVudENhY2hlLmdldExhc3RDaGlsZCh0aGlzLmluZGV4Xyk7XG4gICAgICAgIGNvbnN0IGluUmFuZ2UgPSB0aGlzLnJhbmdlZEZpbHRlcl8ubWF0Y2hlcyhuZXdDaGlsZE5hbWVkTm9kZSk7XG4gICAgICAgIGlmIChvbGRFdmVudENhY2hlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xuICAgICAgICAgICAgY29uc3Qgb2xkQ2hpbGRTbmFwID0gb2xkRXZlbnRDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSk7XG4gICAgICAgICAgICBsZXQgbmV4dENoaWxkID0gc291cmNlLmdldENoaWxkQWZ0ZXJDaGlsZCh0aGlzLmluZGV4Xywgd2luZG93Qm91bmRhcnksIHRoaXMucmV2ZXJzZV8pO1xuICAgICAgICAgICAgd2hpbGUgKG5leHRDaGlsZCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgKG5leHRDaGlsZC5uYW1lID09PSBjaGlsZEtleSB8fCBvbGRFdmVudENhY2hlLmhhc0NoaWxkKG5leHRDaGlsZC5uYW1lKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBhIHdlaXJkIGVkZ2UgY2FzZSB3aGVyZSBhIG5vZGUgaXMgdXBkYXRlZCBhcyBwYXJ0IG9mIGEgbWVyZ2UgaW4gdGhlIHdyaXRlIHRyZWUsIGJ1dCBoYXNuJ3RcbiAgICAgICAgICAgICAgICAvLyBiZWVuIGFwcGxpZWQgdG8gdGhlIGxpbWl0ZWQgZmlsdGVyIHlldC4gSWdub3JlIHRoaXMgbmV4dCBjaGlsZCB3aGljaCB3aWxsIGJlIHVwZGF0ZWQgbGF0ZXIgaW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgbGltaXRlZCBmaWx0ZXIuLi5cbiAgICAgICAgICAgICAgICBuZXh0Q2hpbGQgPSBzb3VyY2UuZ2V0Q2hpbGRBZnRlckNoaWxkKHRoaXMuaW5kZXhfLCBuZXh0Q2hpbGQsIHRoaXMucmV2ZXJzZV8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tcGFyZU5leHQgPSBuZXh0Q2hpbGQgPT0gbnVsbCA/IDEgOiBjbXAobmV4dENoaWxkLCBuZXdDaGlsZE5hbWVkTm9kZSk7XG4gICAgICAgICAgICBjb25zdCByZW1haW5zSW5XaW5kb3cgPSBpblJhbmdlICYmICFjaGlsZFNuYXAuaXNFbXB0eSgpICYmIGNvbXBhcmVOZXh0ID49IDA7XG4gICAgICAgICAgICBpZiAocmVtYWluc0luV2luZG93KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZUFjY3VtdWxhdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShjaGFuZ2VDaGlsZENoYW5nZWQoY2hpbGRLZXksIGNoaWxkU25hcCwgb2xkQ2hpbGRTbmFwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRFdmVudENhY2hlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5LCBjaGlsZFNuYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZUFjY3VtdWxhdG9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShjaGFuZ2VDaGlsZFJlbW92ZWQoY2hpbGRLZXksIG9sZENoaWxkU25hcCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFdmVudENhY2hlID0gb2xkRXZlbnRDYWNoZS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZEtleSwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZEluUmFuZ2UgPSBuZXh0Q2hpbGQgIT0gbnVsbCAmJiB0aGlzLnJhbmdlZEZpbHRlcl8ubWF0Y2hlcyhuZXh0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGRJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKGNoYW5nZUNoaWxkQWRkZWQobmV4dENoaWxkLm5hbWUsIG5leHRDaGlsZC5ub2RlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0V2ZW50Q2FjaGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQobmV4dENoaWxkLm5hbWUsIG5leHRDaGlsZC5ub2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdFdmVudENhY2hlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGlsZFNuYXAuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAvLyB3ZSdyZSBkZWxldGluZyBhIG5vZGUsIGJ1dCBpdCB3YXMgbm90IGluIHRoZSB3aW5kb3csIHNvIGlnbm9yZSBpdFxuICAgICAgICAgICAgcmV0dXJuIHNuYXA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5SYW5nZSkge1xuICAgICAgICAgICAgaWYgKGNtcCh3aW5kb3dCb3VuZGFyeSwgbmV3Q2hpbGROYW1lZE5vZGUpID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKGNoYW5nZUNoaWxkUmVtb3ZlZCh3aW5kb3dCb3VuZGFyeS5uYW1lLCB3aW5kb3dCb3VuZGFyeS5ub2RlKSk7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoY2hhbmdlQ2hpbGRBZGRlZChjaGlsZEtleSwgY2hpbGRTbmFwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRFdmVudENhY2hlXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZEtleSwgY2hpbGRTbmFwKVxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlSW1tZWRpYXRlQ2hpbGQod2luZG93Qm91bmRhcnkubmFtZSwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNuYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc25hcDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhbiBpbW11dGFibGUtZnJvbS10aGUtcHVibGljLWFwaSBzdHJ1Y3QgY29udGFpbmluZyBhIHNldCBvZiBxdWVyeSBwYXJhbWV0ZXJzIGRlZmluaW5nIGFcbiAqIHJhbmdlIHRvIGJlIHJldHVybmVkIGZvciBhIHBhcnRpY3VsYXIgbG9jYXRpb24uIEl0IGlzIGFzc3VtZWQgdGhhdCB2YWxpZGF0aW9uIG9mIHBhcmFtZXRlcnMgaXMgZG9uZSBhdCB0aGVcbiAqIHVzZXItZmFjaW5nIEFQSSBsZXZlbCwgc28gaXQgaXMgbm90IGRvbmUgaGVyZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgUXVlcnlQYXJhbXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmxpbWl0U2V0XyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0U2V0XyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXJ0TmFtZVNldF8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGFydEFmdGVyU2V0XyA9IGZhbHNlOyAvLyBjYW4gb25seSBiZSB0cnVlIGlmIHN0YXJ0U2V0XyBpcyB0cnVlXG4gICAgICAgIHRoaXMuZW5kU2V0XyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVuZE5hbWVTZXRfID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW5kQmVmb3JlU2V0XyA9IGZhbHNlOyAvLyBjYW4gb25seSBiZSB0cnVlIGlmIGVuZFNldF8gaXMgdHJ1ZVxuICAgICAgICB0aGlzLmxpbWl0XyA9IDA7XG4gICAgICAgIHRoaXMudmlld0Zyb21fID0gJyc7XG4gICAgICAgIHRoaXMuaW5kZXhTdGFydFZhbHVlXyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5kZXhTdGFydE5hbWVfID0gJyc7XG4gICAgICAgIHRoaXMuaW5kZXhFbmRWYWx1ZV8gPSBudWxsO1xuICAgICAgICB0aGlzLmluZGV4RW5kTmFtZV8gPSAnJztcbiAgICAgICAgdGhpcy5pbmRleF8gPSBQUklPUklUWV9JTkRFWDtcbiAgICB9XG4gICAgaGFzU3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBpdCB3b3VsZCByZXR1cm4gZnJvbSBsZWZ0LlxuICAgICAqL1xuICAgIGlzVmlld0Zyb21MZWZ0KCkge1xuICAgICAgICBpZiAodGhpcy52aWV3RnJvbV8gPT09ICcnKSB7XG4gICAgICAgICAgICAvLyBsaW1pdCgpLCByYXRoZXIgdGhhbiBsaW1pdFRvRmlyc3Qgb3IgbGltaXRUb0xhc3Qgd2FzIGNhbGxlZC5cbiAgICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBvbmx5IG9uZSBvZiBzdGFydFNldF8gYW5kIGVuZFNldF8gaXMgdHJ1ZS4gVXNlIHRoZW1cbiAgICAgICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB3aGljaCBzaWRlIG9mIHRoZSB2aWV3IHRvIGFuY2hvciB0by4gSWYgbmVpdGhlciBpcyBzZXQsXG4gICAgICAgICAgICAvLyBhbmNob3IgdG8gdGhlIGVuZC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZXdGcm9tXyA9PT0gXCJsXCIgLyogV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuVklFV19GUk9NX0xFRlQgKi87XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc1N0YXJ0KCkgcmV0dXJucyB0cnVlXG4gICAgICovXG4gICAgZ2V0SW5kZXhTdGFydFZhbHVlKCkge1xuICAgICAgICBhc3NlcnQodGhpcy5zdGFydFNldF8sICdPbmx5IHZhbGlkIGlmIHN0YXJ0IGhhcyBiZWVuIHNldCcpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleFN0YXJ0VmFsdWVfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHZhbGlkIHRvIGNhbGwgaWYgaGFzU3RhcnQoKSByZXR1cm5zIHRydWUuXG4gICAgICogUmV0dXJucyB0aGUgc3RhcnRpbmcga2V5IG5hbWUgZm9yIHRoZSByYW5nZSBkZWZpbmVkIGJ5IHRoZXNlIHF1ZXJ5IHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBnZXRJbmRleFN0YXJ0TmFtZSgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuc3RhcnRTZXRfLCAnT25seSB2YWxpZCBpZiBzdGFydCBoYXMgYmVlbiBzZXQnKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnROYW1lU2V0Xykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhTdGFydE5hbWVfO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1JTl9OQU1FO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhc0VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kU2V0XztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0VuZCgpIHJldHVybnMgdHJ1ZS5cbiAgICAgKi9cbiAgICBnZXRJbmRleEVuZFZhbHVlKCkge1xuICAgICAgICBhc3NlcnQodGhpcy5lbmRTZXRfLCAnT25seSB2YWxpZCBpZiBlbmQgaGFzIGJlZW4gc2V0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4RW5kVmFsdWVfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IHZhbGlkIHRvIGNhbGwgaWYgaGFzRW5kKCkgcmV0dXJucyB0cnVlLlxuICAgICAqIFJldHVybnMgdGhlIGVuZCBrZXkgbmFtZSBmb3IgdGhlIHJhbmdlIGRlZmluZWQgYnkgdGhlc2UgcXVlcnkgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGdldEluZGV4RW5kTmFtZSgpIHtcbiAgICAgICAgYXNzZXJ0KHRoaXMuZW5kU2V0XywgJ09ubHkgdmFsaWQgaWYgZW5kIGhhcyBiZWVuIHNldCcpO1xuICAgICAgICBpZiAodGhpcy5lbmROYW1lU2V0Xykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhFbmROYW1lXztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNQVhfTkFNRTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYXNMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXRTZXRfO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIGEgbGltaXQgaGFzIGJlZW4gc2V0IGFuZCBpdCBoYXMgYmVlbiBleHBsaWNpdGx5IGFuY2hvcmVkXG4gICAgICovXG4gICAgaGFzQW5jaG9yZWRMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXRTZXRfICYmIHRoaXMudmlld0Zyb21fICE9PSAnJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0xpbWl0KCkgcmV0dXJucyB0cnVlXG4gICAgICovXG4gICAgZ2V0TGltaXQoKSB7XG4gICAgICAgIGFzc2VydCh0aGlzLmxpbWl0U2V0XywgJ09ubHkgdmFsaWQgaWYgbGltaXQgaGFzIGJlZW4gc2V0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbWl0XztcbiAgICB9XG4gICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4XztcbiAgICB9XG4gICAgbG9hZHNBbGxEYXRhKCkge1xuICAgICAgICByZXR1cm4gISh0aGlzLnN0YXJ0U2V0XyB8fCB0aGlzLmVuZFNldF8gfHwgdGhpcy5saW1pdFNldF8pO1xuICAgIH1cbiAgICBpc0RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRzQWxsRGF0YSgpICYmIHRoaXMuaW5kZXhfID09PSBQUklPUklUWV9JTkRFWDtcbiAgICB9XG4gICAgY29weSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBRdWVyeVBhcmFtcygpO1xuICAgICAgICBjb3B5LmxpbWl0U2V0XyA9IHRoaXMubGltaXRTZXRfO1xuICAgICAgICBjb3B5LmxpbWl0XyA9IHRoaXMubGltaXRfO1xuICAgICAgICBjb3B5LnN0YXJ0U2V0XyA9IHRoaXMuc3RhcnRTZXRfO1xuICAgICAgICBjb3B5LnN0YXJ0QWZ0ZXJTZXRfID0gdGhpcy5zdGFydEFmdGVyU2V0XztcbiAgICAgICAgY29weS5pbmRleFN0YXJ0VmFsdWVfID0gdGhpcy5pbmRleFN0YXJ0VmFsdWVfO1xuICAgICAgICBjb3B5LnN0YXJ0TmFtZVNldF8gPSB0aGlzLnN0YXJ0TmFtZVNldF87XG4gICAgICAgIGNvcHkuaW5kZXhTdGFydE5hbWVfID0gdGhpcy5pbmRleFN0YXJ0TmFtZV87XG4gICAgICAgIGNvcHkuZW5kU2V0XyA9IHRoaXMuZW5kU2V0XztcbiAgICAgICAgY29weS5lbmRCZWZvcmVTZXRfID0gdGhpcy5lbmRCZWZvcmVTZXRfO1xuICAgICAgICBjb3B5LmluZGV4RW5kVmFsdWVfID0gdGhpcy5pbmRleEVuZFZhbHVlXztcbiAgICAgICAgY29weS5lbmROYW1lU2V0XyA9IHRoaXMuZW5kTmFtZVNldF87XG4gICAgICAgIGNvcHkuaW5kZXhFbmROYW1lXyA9IHRoaXMuaW5kZXhFbmROYW1lXztcbiAgICAgICAgY29weS5pbmRleF8gPSB0aGlzLmluZGV4XztcbiAgICAgICAgY29weS52aWV3RnJvbV8gPSB0aGlzLnZpZXdGcm9tXztcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxufVxuZnVuY3Rpb24gcXVlcnlQYXJhbXNHZXROb2RlRmlsdGVyKHF1ZXJ5UGFyYW1zKSB7XG4gICAgaWYgKHF1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhlZEZpbHRlcihxdWVyeVBhcmFtcy5nZXRJbmRleCgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocXVlcnlQYXJhbXMuaGFzTGltaXQoKSkge1xuICAgICAgICByZXR1cm4gbmV3IExpbWl0ZWRGaWx0ZXIocXVlcnlQYXJhbXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZWRGaWx0ZXIocXVlcnlQYXJhbXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHF1ZXJ5UGFyYW1zTGltaXRUb0ZpcnN0KHF1ZXJ5UGFyYW1zLCBuZXdMaW1pdCkge1xuICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zLmNvcHkoKTtcbiAgICBuZXdQYXJhbXMubGltaXRTZXRfID0gdHJ1ZTtcbiAgICBuZXdQYXJhbXMubGltaXRfID0gbmV3TGltaXQ7XG4gICAgbmV3UGFyYW1zLnZpZXdGcm9tXyA9IFwibFwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTV9MRUZUICovO1xuICAgIHJldHVybiBuZXdQYXJhbXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc0xpbWl0VG9MYXN0KHF1ZXJ5UGFyYW1zLCBuZXdMaW1pdCkge1xuICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zLmNvcHkoKTtcbiAgICBuZXdQYXJhbXMubGltaXRTZXRfID0gdHJ1ZTtcbiAgICBuZXdQYXJhbXMubGltaXRfID0gbmV3TGltaXQ7XG4gICAgbmV3UGFyYW1zLnZpZXdGcm9tXyA9IFwiclwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTV9SSUdIVCAqLztcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xufVxuZnVuY3Rpb24gcXVlcnlQYXJhbXNTdGFydEF0KHF1ZXJ5UGFyYW1zLCBpbmRleFZhbHVlLCBrZXkpIHtcbiAgICBjb25zdCBuZXdQYXJhbXMgPSBxdWVyeVBhcmFtcy5jb3B5KCk7XG4gICAgbmV3UGFyYW1zLnN0YXJ0U2V0XyA9IHRydWU7XG4gICAgaWYgKGluZGV4VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleFZhbHVlID0gbnVsbDtcbiAgICB9XG4gICAgbmV3UGFyYW1zLmluZGV4U3RhcnRWYWx1ZV8gPSBpbmRleFZhbHVlO1xuICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICBuZXdQYXJhbXMuc3RhcnROYW1lU2V0XyA9IHRydWU7XG4gICAgICAgIG5ld1BhcmFtcy5pbmRleFN0YXJ0TmFtZV8gPSBrZXk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZXdQYXJhbXMuc3RhcnROYW1lU2V0XyA9IGZhbHNlO1xuICAgICAgICBuZXdQYXJhbXMuaW5kZXhTdGFydE5hbWVfID0gJyc7XG4gICAgfVxuICAgIHJldHVybiBuZXdQYXJhbXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc1N0YXJ0QWZ0ZXIocXVlcnlQYXJhbXMsIGluZGV4VmFsdWUsIGtleSkge1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKHF1ZXJ5UGFyYW1zLmluZGV4XyA9PT0gS0VZX0lOREVYIHx8ICEha2V5KSB7XG4gICAgICAgIHBhcmFtcyA9IHF1ZXJ5UGFyYW1zU3RhcnRBdChxdWVyeVBhcmFtcywgaW5kZXhWYWx1ZSwga2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhcmFtcyA9IHF1ZXJ5UGFyYW1zU3RhcnRBdChxdWVyeVBhcmFtcywgaW5kZXhWYWx1ZSwgTUFYX05BTUUpO1xuICAgIH1cbiAgICBwYXJhbXMuc3RhcnRBZnRlclNldF8gPSB0cnVlO1xuICAgIHJldHVybiBwYXJhbXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc0VuZEF0KHF1ZXJ5UGFyYW1zLCBpbmRleFZhbHVlLCBrZXkpIHtcbiAgICBjb25zdCBuZXdQYXJhbXMgPSBxdWVyeVBhcmFtcy5jb3B5KCk7XG4gICAgbmV3UGFyYW1zLmVuZFNldF8gPSB0cnVlO1xuICAgIGlmIChpbmRleFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXhWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIG5ld1BhcmFtcy5pbmRleEVuZFZhbHVlXyA9IGluZGV4VmFsdWU7XG4gICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1BhcmFtcy5lbmROYW1lU2V0XyA9IHRydWU7XG4gICAgICAgIG5ld1BhcmFtcy5pbmRleEVuZE5hbWVfID0ga2V5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmV3UGFyYW1zLmVuZE5hbWVTZXRfID0gZmFsc2U7XG4gICAgICAgIG5ld1BhcmFtcy5pbmRleEVuZE5hbWVfID0gJyc7XG4gICAgfVxuICAgIHJldHVybiBuZXdQYXJhbXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc0VuZEJlZm9yZShxdWVyeVBhcmFtcywgaW5kZXhWYWx1ZSwga2V5KSB7XG4gICAgbGV0IHBhcmFtcztcbiAgICBpZiAocXVlcnlQYXJhbXMuaW5kZXhfID09PSBLRVlfSU5ERVggfHwgISFrZXkpIHtcbiAgICAgICAgcGFyYW1zID0gcXVlcnlQYXJhbXNFbmRBdChxdWVyeVBhcmFtcywgaW5kZXhWYWx1ZSwga2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhcmFtcyA9IHF1ZXJ5UGFyYW1zRW5kQXQocXVlcnlQYXJhbXMsIGluZGV4VmFsdWUsIE1JTl9OQU1FKTtcbiAgICB9XG4gICAgcGFyYW1zLmVuZEJlZm9yZVNldF8gPSB0cnVlO1xuICAgIHJldHVybiBwYXJhbXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc09yZGVyQnkocXVlcnlQYXJhbXMsIGluZGV4KSB7XG4gICAgY29uc3QgbmV3UGFyYW1zID0gcXVlcnlQYXJhbXMuY29weSgpO1xuICAgIG5ld1BhcmFtcy5pbmRleF8gPSBpbmRleDtcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IG9mIFJFU1QgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMgcmVwcmVzZW50aW5nIHRoaXMgcXVlcnkuXG4gKlxuICogQHJldHVybnMgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnNcbiAqL1xuZnVuY3Rpb24gcXVlcnlQYXJhbXNUb1Jlc3RRdWVyeVN0cmluZ1BhcmFtZXRlcnMocXVlcnlQYXJhbXMpIHtcbiAgICBjb25zdCBxcyA9IHt9O1xuICAgIGlmIChxdWVyeVBhcmFtcy5pc0RlZmF1bHQoKSkge1xuICAgICAgICByZXR1cm4gcXM7XG4gICAgfVxuICAgIGxldCBvcmRlckJ5O1xuICAgIGlmIChxdWVyeVBhcmFtcy5pbmRleF8gPT09IFBSSU9SSVRZX0lOREVYKSB7XG4gICAgICAgIG9yZGVyQnkgPSBcIiRwcmlvcml0eVwiIC8qIFJFU1RfUVVFUllfQ09OU1RBTlRTLlBSSU9SSVRZX0lOREVYICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChxdWVyeVBhcmFtcy5pbmRleF8gPT09IFZBTFVFX0lOREVYKSB7XG4gICAgICAgIG9yZGVyQnkgPSBcIiR2YWx1ZVwiIC8qIFJFU1RfUVVFUllfQ09OU1RBTlRTLlZBTFVFX0lOREVYICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChxdWVyeVBhcmFtcy5pbmRleF8gPT09IEtFWV9JTkRFWCkge1xuICAgICAgICBvcmRlckJ5ID0gXCIka2V5XCIgLyogUkVTVF9RVUVSWV9DT05TVEFOVFMuS0VZX0lOREVYICovO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXNzZXJ0KHF1ZXJ5UGFyYW1zLmluZGV4XyBpbnN0YW5jZW9mIFBhdGhJbmRleCwgJ1VucmVjb2duaXplZCBpbmRleCB0eXBlIScpO1xuICAgICAgICBvcmRlckJ5ID0gcXVlcnlQYXJhbXMuaW5kZXhfLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHFzW1wib3JkZXJCeVwiIC8qIFJFU1RfUVVFUllfQ09OU1RBTlRTLk9SREVSX0JZICovXSA9IHN0cmluZ2lmeShvcmRlckJ5KTtcbiAgICBpZiAocXVlcnlQYXJhbXMuc3RhcnRTZXRfKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0UGFyYW0gPSBxdWVyeVBhcmFtcy5zdGFydEFmdGVyU2V0X1xuICAgICAgICAgICAgPyBcInN0YXJ0QWZ0ZXJcIiAvKiBSRVNUX1FVRVJZX0NPTlNUQU5UUy5TVEFSVF9BRlRFUiAqL1xuICAgICAgICAgICAgOiBcInN0YXJ0QXRcIiAvKiBSRVNUX1FVRVJZX0NPTlNUQU5UUy5TVEFSVF9BVCAqLztcbiAgICAgICAgcXNbc3RhcnRQYXJhbV0gPSBzdHJpbmdpZnkocXVlcnlQYXJhbXMuaW5kZXhTdGFydFZhbHVlXyk7XG4gICAgICAgIGlmIChxdWVyeVBhcmFtcy5zdGFydE5hbWVTZXRfKSB7XG4gICAgICAgICAgICBxc1tzdGFydFBhcmFtXSArPSAnLCcgKyBzdHJpbmdpZnkocXVlcnlQYXJhbXMuaW5kZXhTdGFydE5hbWVfKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVlcnlQYXJhbXMuZW5kU2V0Xykge1xuICAgICAgICBjb25zdCBlbmRQYXJhbSA9IHF1ZXJ5UGFyYW1zLmVuZEJlZm9yZVNldF9cbiAgICAgICAgICAgID8gXCJlbmRCZWZvcmVcIiAvKiBSRVNUX1FVRVJZX0NPTlNUQU5UUy5FTkRfQkVGT1JFICovXG4gICAgICAgICAgICA6IFwiZW5kQXRcIiAvKiBSRVNUX1FVRVJZX0NPTlNUQU5UUy5FTkRfQVQgKi87XG4gICAgICAgIHFzW2VuZFBhcmFtXSA9IHN0cmluZ2lmeShxdWVyeVBhcmFtcy5pbmRleEVuZFZhbHVlXyk7XG4gICAgICAgIGlmIChxdWVyeVBhcmFtcy5lbmROYW1lU2V0Xykge1xuICAgICAgICAgICAgcXNbZW5kUGFyYW1dICs9ICcsJyArIHN0cmluZ2lmeShxdWVyeVBhcmFtcy5pbmRleEVuZE5hbWVfKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocXVlcnlQYXJhbXMubGltaXRTZXRfKSB7XG4gICAgICAgIGlmIChxdWVyeVBhcmFtcy5pc1ZpZXdGcm9tTGVmdCgpKSB7XG4gICAgICAgICAgICBxc1tcImxpbWl0VG9GaXJzdFwiIC8qIFJFU1RfUVVFUllfQ09OU1RBTlRTLkxJTUlUX1RPX0ZJUlNUICovXSA9IHF1ZXJ5UGFyYW1zLmxpbWl0XztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHFzW1wibGltaXRUb0xhc3RcIiAvKiBSRVNUX1FVRVJZX0NPTlNUQU5UUy5MSU1JVF9UT19MQVNUICovXSA9IHF1ZXJ5UGFyYW1zLmxpbWl0XztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXM7XG59XG5mdW5jdGlvbiBxdWVyeVBhcmFtc0dldFF1ZXJ5T2JqZWN0KHF1ZXJ5UGFyYW1zKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG4gICAgaWYgKHF1ZXJ5UGFyYW1zLnN0YXJ0U2V0Xykge1xuICAgICAgICBvYmpbXCJzcFwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX1NUQVJUX1ZBTFVFICovXSA9XG4gICAgICAgICAgICBxdWVyeVBhcmFtcy5pbmRleFN0YXJ0VmFsdWVfO1xuICAgICAgICBpZiAocXVlcnlQYXJhbXMuc3RhcnROYW1lU2V0Xykge1xuICAgICAgICAgICAgb2JqW1wic25cIiAvKiBXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5JTkRFWF9TVEFSVF9OQU1FICovXSA9XG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMuaW5kZXhTdGFydE5hbWVfO1xuICAgICAgICB9XG4gICAgICAgIG9ialtcInNpblwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX1NUQVJUX0lTX0lOQ0xVU0lWRSAqL10gPVxuICAgICAgICAgICAgIXF1ZXJ5UGFyYW1zLnN0YXJ0QWZ0ZXJTZXRfO1xuICAgIH1cbiAgICBpZiAocXVlcnlQYXJhbXMuZW5kU2V0Xykge1xuICAgICAgICBvYmpbXCJlcFwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX0VORF9WQUxVRSAqL10gPSBxdWVyeVBhcmFtcy5pbmRleEVuZFZhbHVlXztcbiAgICAgICAgaWYgKHF1ZXJ5UGFyYW1zLmVuZE5hbWVTZXRfKSB7XG4gICAgICAgICAgICBvYmpbXCJlblwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLklOREVYX0VORF9OQU1FICovXSA9IHF1ZXJ5UGFyYW1zLmluZGV4RW5kTmFtZV87XG4gICAgICAgIH1cbiAgICAgICAgb2JqW1wiZWluXCIgLyogV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhfRU5EX0lTX0lOQ0xVU0lWRSAqL10gPVxuICAgICAgICAgICAgIXF1ZXJ5UGFyYW1zLmVuZEJlZm9yZVNldF87XG4gICAgfVxuICAgIGlmIChxdWVyeVBhcmFtcy5saW1pdFNldF8pIHtcbiAgICAgICAgb2JqW1wibFwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLkxJTUlUICovXSA9IHF1ZXJ5UGFyYW1zLmxpbWl0XztcbiAgICAgICAgbGV0IHZpZXdGcm9tID0gcXVlcnlQYXJhbXMudmlld0Zyb21fO1xuICAgICAgICBpZiAodmlld0Zyb20gPT09ICcnKSB7XG4gICAgICAgICAgICBpZiAocXVlcnlQYXJhbXMuaXNWaWV3RnJvbUxlZnQoKSkge1xuICAgICAgICAgICAgICAgIHZpZXdGcm9tID0gXCJsXCIgLyogV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuVklFV19GUk9NX0xFRlQgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3RnJvbSA9IFwiclwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTV9SSUdIVCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmpbXCJ2ZlwiIC8qIFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTSAqL10gPSB2aWV3RnJvbTtcbiAgICB9XG4gICAgLy8gRm9yIG5vdywgcHJpb3JpdHkgaW5kZXggaXMgdGhlIGRlZmF1bHQsIHNvIHdlIG9ubHkgc3BlY2lmeSBpZiBpdCdzIHNvbWUgb3RoZXIgaW5kZXhcbiAgICBpZiAocXVlcnlQYXJhbXMuaW5kZXhfICE9PSBQUklPUklUWV9JTkRFWCkge1xuICAgICAgICBvYmpbXCJpXCIgLyogV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVggKi9dID0gcXVlcnlQYXJhbXMuaW5kZXhfLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIFNlcnZlckFjdGlvbnMgdGhhdCBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgc2VydmVyIHZpYSBSRVNUIHJlcXVlc3RzLlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGZvciBjb21wYXRpYmlsaXR5IHdpdGggY3Jhd2xlcnMsIHdoZXJlIHdlIGRvbid0IHdhbnQgdG8gc3BpbiB1cCBhIGZ1bGxcbiAqIHBlcnNpc3RlbnQgY29ubmVjdGlvbiAodXNpbmcgV2ViU29ja2V0cyBvciBsb25nLXBvbGxpbmcpXG4gKi9cbmNsYXNzIFJlYWRvbmx5UmVzdENsaWVudCBleHRlbmRzIFNlcnZlckFjdGlvbnMge1xuICAgIHJlcG9ydFN0YXRzKHN0YXRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgc3RhdGljIGdldExpc3RlbklkXyhxdWVyeSwgdGFnKSB7XG4gICAgICAgIGlmICh0YWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICd0YWckJyArIHRhZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzc2VydChxdWVyeS5fcXVlcnlQYXJhbXMuaXNEZWZhdWx0KCksIFwic2hvdWxkIGhhdmUgYSB0YWcgaWYgaXQncyBub3QgYSBkZWZhdWx0IHF1ZXJ5LlwiKTtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeS5fcGF0aC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSByZXBvSW5mb18gLSBEYXRhIGFib3V0IHRoZSBuYW1lc3BhY2Ugd2UgYXJlIGNvbm5lY3RpbmcgdG9cbiAgICAgKiBAcGFyYW0gb25EYXRhVXBkYXRlXyAtIEEgY2FsbGJhY2sgZm9yIG5ldyBkYXRhIGZyb20gdGhlIHNlcnZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJlcG9JbmZvXywgb25EYXRhVXBkYXRlXywgYXV0aFRva2VuUHJvdmlkZXJfLCBhcHBDaGVja1Rva2VuUHJvdmlkZXJfKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xuICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8gPSBvbkRhdGFVcGRhdGVfO1xuICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcbiAgICAgICAgdGhpcy5hcHBDaGVja1Rva2VuUHJvdmlkZXJfID0gYXBwQ2hlY2tUb2tlblByb3ZpZGVyXztcbiAgICAgICAgLyoqIEBwcml2YXRlIHtmdW5jdGlvbiguLi5bKl0pfSAqL1xuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKCdwOnJlc3Q6Jyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBkb24ndCBhY3R1YWxseSBuZWVkIHRvIHRyYWNrIGxpc3RlbnMsIGV4Y2VwdCB0byBwcmV2ZW50IHVzIGNhbGxpbmcgYW4gb25Db21wbGV0ZSBmb3IgYSBsaXN0ZW5cbiAgICAgICAgICogdGhhdCdzIGJlZW4gcmVtb3ZlZC4gOi0vXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpc3RlbnNfID0ge307XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIGxpc3RlbihxdWVyeSwgY3VycmVudEhhc2hGbiwgdGFnLCBvbkNvbXBsZXRlKSB7XG4gICAgICAgIGNvbnN0IHBhdGhTdHJpbmcgPSBxdWVyeS5fcGF0aC50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmxvZ18oJ0xpc3RlbiBjYWxsZWQgZm9yICcgKyBwYXRoU3RyaW5nICsgJyAnICsgcXVlcnkuX3F1ZXJ5SWRlbnRpZmllcik7XG4gICAgICAgIC8vIE1hcmsgdGhpcyBsaXN0ZW5lciBzbyB3ZSBjYW4gdGVsbCBpZiBpdCdzIHJlbW92ZWQuXG4gICAgICAgIGNvbnN0IGxpc3RlbklkID0gUmVhZG9ubHlSZXN0Q2xpZW50LmdldExpc3RlbklkXyhxdWVyeSwgdGFnKTtcbiAgICAgICAgY29uc3QgdGhpc0xpc3RlbiA9IHt9O1xuICAgICAgICB0aGlzLmxpc3RlbnNfW2xpc3RlbklkXSA9IHRoaXNMaXN0ZW47XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IHF1ZXJ5UGFyYW1zVG9SZXN0UXVlcnlTdHJpbmdQYXJhbWV0ZXJzKHF1ZXJ5Ll9xdWVyeVBhcmFtcyk7XG4gICAgICAgIHRoaXMucmVzdFJlcXVlc3RfKHBhdGhTdHJpbmcgKyAnLmpzb24nLCBxdWVyeVN0cmluZ1BhcmFtZXRlcnMsIChlcnJvciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkRhdGFVcGRhdGVfKHBhdGhTdHJpbmcsIGRhdGEsIC8qaXNNZXJnZT0qLyBmYWxzZSwgdGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzYWZlR2V0KHRoaXMubGlzdGVuc18sIGxpc3RlbklkKSA9PT0gdGhpc0xpc3Rlbikge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXM7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAnb2snO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvciA9PT0gNDAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9ICdwZXJtaXNzaW9uX2RlbmllZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSAncmVzdF9lcnJvcjonICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoc3RhdHVzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgIHVubGlzdGVuKHF1ZXJ5LCB0YWcpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuSWQgPSBSZWFkb25seVJlc3RDbGllbnQuZ2V0TGlzdGVuSWRfKHF1ZXJ5LCB0YWcpO1xuICAgICAgICBkZWxldGUgdGhpcy5saXN0ZW5zX1tsaXN0ZW5JZF07XG4gICAgfVxuICAgIGdldChxdWVyeSkge1xuICAgICAgICBjb25zdCBxdWVyeVN0cmluZ1BhcmFtZXRlcnMgPSBxdWVyeVBhcmFtc1RvUmVzdFF1ZXJ5U3RyaW5nUGFyYW1ldGVycyhxdWVyeS5fcXVlcnlQYXJhbXMpO1xuICAgICAgICBjb25zdCBwYXRoU3RyaW5nID0gcXVlcnkuX3BhdGgudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgdGhpcy5yZXN0UmVxdWVzdF8ocGF0aFN0cmluZyArICcuanNvbicsIHF1ZXJ5U3RyaW5nUGFyYW1ldGVycywgKGVycm9yLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gcmVzdWx0O1xuICAgICAgICAgICAgaWYgKGVycm9yID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICBlcnJvciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8ocGF0aFN0cmluZywgZGF0YSwgXG4gICAgICAgICAgICAgICAgLyppc01lcmdlPSovIGZhbHNlLCBcbiAgICAgICAgICAgICAgICAvKnRhZz0qLyBudWxsKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KG5ldyBFcnJvcihkYXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgcmVmcmVzaEF1dGhUb2tlbih0b2tlbikge1xuICAgICAgICAvLyBuby1vcCBzaW5jZSB3ZSBqdXN0IGFsd2F5cyBjYWxsIGdldFRva2VuLlxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIFJFU1QgcmVxdWVzdCB0byB0aGUgZ2l2ZW4gcGF0aCwgd2l0aCB0aGUgcHJvdmlkZWQgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMsXG4gICAgICogYW5kIGFueSBhdXRoIGNyZWRlbnRpYWxzIHdlIGhhdmUuXG4gICAgICovXG4gICAgcmVzdFJlcXVlc3RfKHBhdGhTdHJpbmcsIHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IHt9LCBjYWxsYmFjaykge1xuICAgICAgICBxdWVyeVN0cmluZ1BhcmFtZXRlcnNbJ2Zvcm1hdCddID0gJ2V4cG9ydCc7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXy5nZXRUb2tlbigvKmZvcmNlUmVmcmVzaD0qLyBmYWxzZSksXG4gICAgICAgICAgICB0aGlzLmFwcENoZWNrVG9rZW5Qcm92aWRlcl8uZ2V0VG9rZW4oLypmb3JjZVJlZnJlc2g9Ki8gZmFsc2UpXG4gICAgICAgIF0pLnRoZW4oKFthdXRoVG9rZW4sIGFwcENoZWNrVG9rZW5dKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXV0aFRva2VuICYmIGF1dGhUb2tlbi5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1snYXV0aCddID0gYXV0aFRva2VuLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFwcENoZWNrVG9rZW4gJiYgYXBwQ2hlY2tUb2tlbi50b2tlbikge1xuICAgICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1snYWMnXSA9IGFwcENoZWNrVG9rZW4udG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cmwgPSAodGhpcy5yZXBvSW5mb18uc2VjdXJlID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJykgK1xuICAgICAgICAgICAgICAgIHRoaXMucmVwb0luZm9fLmhvc3QgK1xuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcgK1xuICAgICAgICAgICAgICAgICc/JyArXG4gICAgICAgICAgICAgICAgJ25zPScgK1xuICAgICAgICAgICAgICAgIHRoaXMucmVwb0luZm9fLm5hbWVzcGFjZSArXG4gICAgICAgICAgICAgICAgcXVlcnlzdHJpbmcocXVlcnlTdHJpbmdQYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHRoaXMubG9nXygnU2VuZGluZyBSRVNUIHJlcXVlc3QgZm9yICcgKyB1cmwpO1xuICAgICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ1JFU1QgUmVzcG9uc2UgZm9yICcgKyB1cmwgKyAnIHJlY2VpdmVkLiBzdGF0dXM6JywgeGhyLnN0YXR1cywgJ3Jlc3BvbnNlOicsIHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0ganNvbkV2YWwoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ZhaWxlZCB0byBwYXJzZSBKU09OIHJlc3BvbnNlIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQwMSBhbmQgNDA0IGFyZSBleHBlY3RlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSA0MDEgJiYgeGhyLnN0YXR1cyAhPT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybignR290IHVuc3VjY2Vzc2Z1bCBSRVNUIHJlc3BvbnNlIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBTdGF0dXM6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHhoci5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgLyphc3luY2hyb25vdXM9Ki8gdHJ1ZSk7XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIE11dGFibGUgb2JqZWN0IHdoaWNoIGJhc2ljYWxseSBqdXN0IHN0b3JlcyBhIHJlZmVyZW5jZSB0byB0aGUgXCJsYXRlc3RcIiBpbW11dGFibGUgc25hcHNob3QuXG4gKi9cbmNsYXNzIFNuYXBzaG90SG9sZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yb290Tm9kZV8gPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICB9XG4gICAgZ2V0Tm9kZShwYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3ROb2RlXy5nZXRDaGlsZChwYXRoKTtcbiAgICB9XG4gICAgdXBkYXRlU25hcHNob3QocGF0aCwgbmV3U25hcHNob3ROb2RlKSB7XG4gICAgICAgIHRoaXMucm9vdE5vZGVfID0gdGhpcy5yb290Tm9kZV8udXBkYXRlQ2hpbGQocGF0aCwgbmV3U25hcHNob3ROb2RlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5mdW5jdGlvbiBuZXdTcGFyc2VTbmFwc2hvdFRyZWUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuOiBuZXcgTWFwKClcbiAgICB9O1xufVxuLyoqXG4gKiBTdG9yZXMgdGhlIGdpdmVuIG5vZGUgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbm9kZVxuICogYXQgYSBzaGFsbG93ZXIgcGF0aCwgaXQgbWVyZ2VzIHRoZSBuZXcgZGF0YSBpbnRvIHRoYXQgc25hcHNob3Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0gcGF0aCAtIFBhdGggdG8gbG9vayB1cCBzbmFwc2hvdCBmb3IuXG4gKiBAcGFyYW0gZGF0YSAtIFRoZSBuZXcgZGF0YSwgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gc3BhcnNlU25hcHNob3RUcmVlUmVtZW1iZXIoc3BhcnNlU25hcHNob3RUcmVlLCBwYXRoLCBkYXRhKSB7XG4gICAgaWYgKHBhdGhJc0VtcHR5KHBhdGgpKSB7XG4gICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZS52YWx1ZSA9IGRhdGE7XG4gICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5jbGVhcigpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzcGFyc2VTbmFwc2hvdFRyZWUudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgc3BhcnNlU25hcHNob3RUcmVlLnZhbHVlID0gc3BhcnNlU25hcHNob3RUcmVlLnZhbHVlLnVwZGF0ZUNoaWxkKHBhdGgsIGRhdGEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBwYXRoR2V0RnJvbnQocGF0aCk7XG4gICAgICAgIGlmICghc3BhcnNlU25hcHNob3RUcmVlLmNoaWxkcmVuLmhhcyhjaGlsZEtleSkpIHtcbiAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5zZXQoY2hpbGRLZXksIG5ld1NwYXJzZVNuYXBzaG90VHJlZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZCA9IHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5nZXQoY2hpbGRLZXkpO1xuICAgICAgICBwYXRoID0gcGF0aFBvcEZyb250KHBhdGgpO1xuICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWVSZW1lbWJlcihjaGlsZCwgcGF0aCwgZGF0YSk7XG4gICAgfVxufVxuLyoqXG4gKiBQdXJnZSB0aGUgZGF0YSBhdCBwYXRoIGZyb20gdGhlIGNhY2hlLlxuICpcbiAqIEBwYXJhbSBwYXRoIC0gUGF0aCB0byBsb29rIHVwIHNuYXBzaG90IGZvci5cbiAqIEByZXR1cm5zIFRydWUgaWYgdGhpcyBub2RlIHNob3VsZCBub3cgYmUgcmVtb3ZlZC5cbiAqL1xuZnVuY3Rpb24gc3BhcnNlU25hcHNob3RUcmVlRm9yZ2V0KHNwYXJzZVNuYXBzaG90VHJlZSwgcGF0aCkge1xuICAgIGlmIChwYXRoSXNFbXB0eShwYXRoKSkge1xuICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWUudmFsdWUgPSBudWxsO1xuICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWUuY2hpbGRyZW4uY2xlYXIoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoc3BhcnNlU25hcHNob3RUcmVlLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc3BhcnNlU25hcHNob3RUcmVlLnZhbHVlLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIHRyeWluZyB0byBmb3JnZXQgYSBub2RlIHRoYXQgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc3BhcnNlU25hcHNob3RUcmVlLnZhbHVlO1xuICAgICAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZS52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCAoa2V5LCB0cmVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZVJlbWVtYmVyKHNwYXJzZVNuYXBzaG90VHJlZSwgbmV3IFBhdGgoa2V5KSwgdHJlZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwYXJzZVNuYXBzaG90VHJlZUZvcmdldChzcGFyc2VTbmFwc2hvdFRyZWUsIHBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5zaXplID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBwYXRoR2V0RnJvbnQocGF0aCk7XG4gICAgICAgICAgICBwYXRoID0gcGF0aFBvcEZyb250KHBhdGgpO1xuICAgICAgICAgICAgaWYgKHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5oYXMoY2hpbGRLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2FmZVRvUmVtb3ZlID0gc3BhcnNlU25hcHNob3RUcmVlRm9yZ2V0KHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5nZXQoY2hpbGRLZXkpLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2FmZVRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZS5jaGlsZHJlbi5kZWxldGUoY2hpbGRLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcGFyc2VTbmFwc2hvdFRyZWUuY2hpbGRyZW4uc2l6ZSA9PT0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZWN1cnNpdmVseSBpdGVyYXRlcyB0aHJvdWdoIGFsbCBvZiB0aGUgc3RvcmVkIHRyZWUgYW5kIGNhbGxzIHRoZVxuICogY2FsbGJhY2sgb24gZWFjaCBvbmUuXG4gKlxuICogQHBhcmFtIHByZWZpeFBhdGggLSBQYXRoIHRvIGxvb2sgdXAgbm9kZSBmb3IuXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGVhY2ggdHJlZS5cbiAqL1xuZnVuY3Rpb24gc3BhcnNlU25hcHNob3RUcmVlRm9yRWFjaFRyZWUoc3BhcnNlU25hcHNob3RUcmVlLCBwcmVmaXhQYXRoLCBmdW5jKSB7XG4gICAgaWYgKHNwYXJzZVNuYXBzaG90VHJlZS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBmdW5jKHByZWZpeFBhdGgsIHNwYXJzZVNuYXBzaG90VHJlZS52YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWVGb3JFYWNoQ2hpbGQoc3BhcnNlU25hcHNob3RUcmVlLCAoa2V5LCB0cmVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbmV3IFBhdGgocHJlZml4UGF0aC50b1N0cmluZygpICsgJy8nICsga2V5KTtcbiAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZUZvckVhY2hUcmVlKHRyZWUsIHBhdGgsIGZ1bmMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggZWFjaCBpbW1lZGlhdGUgY2hpbGQgYW5kIHRyaWdnZXJzIHRoZSBjYWxsYmFjay5cbiAqIE9ubHkgc2VlbXMgdG8gYmUgdXNlZCBpbiB0ZXN0cy5cbiAqXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBpbnZva2UgZm9yIGVhY2ggY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIHNwYXJzZVNuYXBzaG90VHJlZUZvckVhY2hDaGlsZChzcGFyc2VTbmFwc2hvdFRyZWUsIGZ1bmMpIHtcbiAgICBzcGFyc2VTbmFwc2hvdFRyZWUuY2hpbGRyZW4uZm9yRWFjaCgodHJlZSwga2V5KSA9PiB7XG4gICAgICAgIGZ1bmMoa2V5LCB0cmVlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgZGVsdGEgZnJvbSB0aGUgcHJldmlvdXMgY2FsbCB0byBnZXQgc3RhdHMuXG4gKlxuICogQHBhcmFtIGNvbGxlY3Rpb25fIC0gVGhlIGNvbGxlY3Rpb24gdG8gXCJsaXN0ZW5cIiB0by5cbiAqL1xuY2xhc3MgU3RhdHNMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbl8pIHtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uXyA9IGNvbGxlY3Rpb25fO1xuICAgICAgICB0aGlzLmxhc3RfID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBuZXdTdGF0cyA9IHRoaXMuY29sbGVjdGlvbl8uZ2V0KCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gT2JqZWN0LmFzc2lnbih7fSwgbmV3U3RhdHMpO1xuICAgICAgICBpZiAodGhpcy5sYXN0Xykge1xuICAgICAgICAgICAgZWFjaCh0aGlzLmxhc3RfLCAoc3RhdCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICBkZWx0YVtzdGF0XSA9IGRlbHRhW3N0YXRdIC0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhc3RfID0gbmV3U3RhdHM7XG4gICAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBBc3N1bWluZyBzb21lIGFwcHMgbWF5IGhhdmUgYSBzaG9ydCBhbW91bnQgb2YgdGltZSBvbiBwYWdlLCBhbmQgYSBidWxrIG9mIGZpcmViYXNlIG9wZXJhdGlvbnMgcHJvYmFibHlcbi8vIGhhcHBlbiBvbiBwYWdlIGxvYWQsIHdlIHRyeSB0byByZXBvcnQgb3VyIGZpcnN0IHNldCBvZiBzdGF0cyBwcmV0dHkgcXVpY2tseSwgYnV0IHdlIHdhaXQgYXQgbGVhc3QgMTBcbi8vIHNlY29uZHMgdG8gdHJ5IHRvIGVuc3VyZSB0aGUgRmlyZWJhc2UgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZCAvIHNldHRsZWQuXG5jb25zdCBGSVJTVF9TVEFUU19NSU5fVElNRSA9IDEwICogMTAwMDtcbmNvbnN0IEZJUlNUX1NUQVRTX01BWF9USU1FID0gMzAgKiAxMDAwO1xuLy8gV2UnbGwgY29udGludWUgdG8gcmVwb3J0IHN0YXRzIG9uIGF2ZXJhZ2UgZXZlcnkgNSBtaW51dGVzLlxuY29uc3QgUkVQT1JUX1NUQVRTX0lOVEVSVkFMID0gNSAqIDYwICogMTAwMDtcbmNsYXNzIFN0YXRzUmVwb3J0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIHNlcnZlcl8pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXJfID0gc2VydmVyXztcbiAgICAgICAgdGhpcy5zdGF0c1RvUmVwb3J0XyA9IHt9O1xuICAgICAgICB0aGlzLnN0YXRzTGlzdGVuZXJfID0gbmV3IFN0YXRzTGlzdGVuZXIoY29sbGVjdGlvbik7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBGSVJTVF9TVEFUU19NSU5fVElNRSArXG4gICAgICAgICAgICAoRklSU1RfU1RBVFNfTUFYX1RJTUUgLSBGSVJTVF9TVEFUU19NSU5fVElNRSkgKiBNYXRoLnJhbmRvbSgpO1xuICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcodGhpcy5yZXBvcnRTdGF0c18uYmluZCh0aGlzKSwgTWF0aC5mbG9vcih0aW1lb3V0KSk7XG4gICAgfVxuICAgIHJlcG9ydFN0YXRzXygpIHtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSB0aGlzLnN0YXRzTGlzdGVuZXJfLmdldCgpO1xuICAgICAgICBjb25zdCByZXBvcnRlZFN0YXRzID0ge307XG4gICAgICAgIGxldCBoYXZlU3RhdHNUb1JlcG9ydCA9IGZhbHNlO1xuICAgICAgICBlYWNoKHN0YXRzLCAoc3RhdCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IDAgJiYgY29udGFpbnModGhpcy5zdGF0c1RvUmVwb3J0Xywgc3RhdCkpIHtcbiAgICAgICAgICAgICAgICByZXBvcnRlZFN0YXRzW3N0YXRdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaGF2ZVN0YXRzVG9SZXBvcnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGhhdmVTdGF0c1RvUmVwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlcl8ucmVwb3J0U3RhdHMocmVwb3J0ZWRTdGF0cyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcXVldWUgb3VyIG5leHQgcnVuLlxuICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcodGhpcy5yZXBvcnRTdGF0c18uYmluZCh0aGlzKSwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMiAqIFJFUE9SVF9TVEFUU19JTlRFUlZBTCkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICpcbiAqIEBlbnVtXG4gKi9cbnZhciBPcGVyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChPcGVyYXRpb25UeXBlKSB7XG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiT1ZFUldSSVRFXCJdID0gMF0gPSBcIk9WRVJXUklURVwiO1xuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIk1FUkdFXCJdID0gMV0gPSBcIk1FUkdFXCI7XG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiQUNLX1VTRVJfV1JJVEVcIl0gPSAyXSA9IFwiQUNLX1VTRVJfV1JJVEVcIjtcbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJMSVNURU5fQ09NUExFVEVcIl0gPSAzXSA9IFwiTElTVEVOX0NPTVBMRVRFXCI7XG59KShPcGVyYXRpb25UeXBlIHx8IChPcGVyYXRpb25UeXBlID0ge30pKTtcbmZ1bmN0aW9uIG5ld09wZXJhdGlvblNvdXJjZVVzZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZnJvbVVzZXI6IHRydWUsXG4gICAgICAgIGZyb21TZXJ2ZXI6IGZhbHNlLFxuICAgICAgICBxdWVyeUlkOiBudWxsLFxuICAgICAgICB0YWdnZWQ6IGZhbHNlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5ld09wZXJhdGlvblNvdXJjZVNlcnZlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmcm9tVXNlcjogZmFsc2UsXG4gICAgICAgIGZyb21TZXJ2ZXI6IHRydWUsXG4gICAgICAgIHF1ZXJ5SWQ6IG51bGwsXG4gICAgICAgIHRhZ2dlZDogZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gbmV3T3BlcmF0aW9uU291cmNlU2VydmVyVGFnZ2VkUXVlcnkocXVlcnlJZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGZyb21Vc2VyOiBmYWxzZSxcbiAgICAgICAgZnJvbVNlcnZlcjogdHJ1ZSxcbiAgICAgICAgcXVlcnlJZCxcbiAgICAgICAgdGFnZ2VkOiB0cnVlXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNsYXNzIEFja1VzZXJXcml0ZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFmZmVjdGVkVHJlZSAtIEEgdHJlZSBjb250YWluaW5nIHRydWUgZm9yIGVhY2ggYWZmZWN0ZWQgcGF0aC4gQWZmZWN0ZWQgcGF0aHMgY2FuJ3Qgb3ZlcmxhcC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogQGluaGVyaXREb2MgKi8gcGF0aCwgXG4gICAgLyoqIEBpbmhlcml0RG9jICovIGFmZmVjdGVkVHJlZSwgXG4gICAgLyoqIEBpbmhlcml0RG9jICovIHJldmVydCkge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLmFmZmVjdGVkVHJlZSA9IGFmZmVjdGVkVHJlZTtcbiAgICAgICAgdGhpcy5yZXZlcnQgPSByZXZlcnQ7XG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgICAgICB0aGlzLnR5cGUgPSBPcGVyYXRpb25UeXBlLkFDS19VU0VSX1dSSVRFO1xuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICAgICAgdGhpcy5zb3VyY2UgPSBuZXdPcGVyYXRpb25Tb3VyY2VVc2VyKCk7XG4gICAgfVxuICAgIG9wZXJhdGlvbkZvckNoaWxkKGNoaWxkTmFtZSkge1xuICAgICAgICBpZiAoIXBhdGhJc0VtcHR5KHRoaXMucGF0aCkpIHtcbiAgICAgICAgICAgIGFzc2VydChwYXRoR2V0RnJvbnQodGhpcy5wYXRoKSA9PT0gY2hpbGROYW1lLCAnb3BlcmF0aW9uRm9yQ2hpbGQgY2FsbGVkIGZvciB1bnJlbGF0ZWQgY2hpbGQuJyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFja1VzZXJXcml0ZShwYXRoUG9wRnJvbnQodGhpcy5wYXRoKSwgdGhpcy5hZmZlY3RlZFRyZWUsIHRoaXMucmV2ZXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFmZmVjdGVkVHJlZS52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBhc3NlcnQodGhpcy5hZmZlY3RlZFRyZWUuY2hpbGRyZW4uaXNFbXB0eSgpLCAnYWZmZWN0ZWRUcmVlIHNob3VsZCBub3QgaGF2ZSBvdmVybGFwcGluZyBhZmZlY3RlZCBwYXRocy4nKTtcbiAgICAgICAgICAgIC8vIEFsbCBjaGlsZCBsb2NhdGlvbnMgYXJlIGFmZmVjdGVkIGFzIHdlbGw7IGp1c3QgcmV0dXJuIHNhbWUgb3BlcmF0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFRyZWUgPSB0aGlzLmFmZmVjdGVkVHJlZS5zdWJ0cmVlKG5ldyBQYXRoKGNoaWxkTmFtZSkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBY2tVc2VyV3JpdGUobmV3RW1wdHlQYXRoKCksIGNoaWxkVHJlZSwgdGhpcy5yZXZlcnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuY2xhc3MgTGlzdGVuQ29tcGxldGUge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSwgcGF0aCkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgICAgIHRoaXMudHlwZSA9IE9wZXJhdGlvblR5cGUuTElTVEVOX0NPTVBMRVRFO1xuICAgIH1cbiAgICBvcGVyYXRpb25Gb3JDaGlsZChjaGlsZE5hbWUpIHtcbiAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHRoaXMucGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlzdGVuQ29tcGxldGUodGhpcy5zb3VyY2UsIG5ld0VtcHR5UGF0aCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlzdGVuQ29tcGxldGUodGhpcy5zb3VyY2UsIHBhdGhQb3BGcm9udCh0aGlzLnBhdGgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNsYXNzIE92ZXJ3cml0ZSB7XG4gICAgY29uc3RydWN0b3Ioc291cmNlLCBwYXRoLCBzbmFwKSB7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5PVkVSV1JJVEU7XG4gICAgfVxuICAgIG9wZXJhdGlvbkZvckNoaWxkKGNoaWxkTmFtZSkge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkodGhpcy5wYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPdmVyd3JpdGUodGhpcy5zb3VyY2UsIG5ld0VtcHR5UGF0aCgpLCB0aGlzLnNuYXAuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE92ZXJ3cml0ZSh0aGlzLnNvdXJjZSwgcGF0aFBvcEZyb250KHRoaXMucGF0aCksIHRoaXMuc25hcCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBNZXJnZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIEBpbmhlcml0RG9jICovIHNvdXJjZSwgXG4gICAgLyoqIEBpbmhlcml0RG9jICovIHBhdGgsIFxuICAgIC8qKiBAaW5oZXJpdERvYyAqLyBjaGlsZHJlbikge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5NRVJHRTtcbiAgICB9XG4gICAgb3BlcmF0aW9uRm9yQ2hpbGQoY2hpbGROYW1lKSB7XG4gICAgICAgIGlmIChwYXRoSXNFbXB0eSh0aGlzLnBhdGgpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFRyZWUgPSB0aGlzLmNoaWxkcmVuLnN1YnRyZWUobmV3IFBhdGgoY2hpbGROYW1lKSk7XG4gICAgICAgICAgICBpZiAoY2hpbGRUcmVlLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgY2hpbGQgaXMgdW5hZmZlY3RlZFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGRUcmVlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIHNuYXBzaG90IGZvciB0aGUgY2hpbGQgaW4gcXVlc3Rpb24uICBUaGlzIGJlY29tZXMgYW4gb3ZlcndyaXRlIG9mIHRoZSBjaGlsZC5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE92ZXJ3cml0ZSh0aGlzLnNvdXJjZSwgbmV3RW1wdHlQYXRoKCksIGNoaWxkVHJlZS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWVyZ2UgYXQgYSBkZWVwZXIgbGV2ZWxcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1lcmdlKHRoaXMuc291cmNlLCBuZXdFbXB0eVBhdGgoKSwgY2hpbGRUcmVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzc2VydChwYXRoR2V0RnJvbnQodGhpcy5wYXRoKSA9PT0gY2hpbGROYW1lLCBcIkNhbid0IGdldCBhIG1lcmdlIGZvciBhIGNoaWxkIG5vdCBvbiB0aGUgcGF0aCBvZiB0aGUgb3BlcmF0aW9uXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZXJnZSh0aGlzLnNvdXJjZSwgcGF0aFBvcEZyb250KHRoaXMucGF0aCksIHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKCdPcGVyYXRpb24oJyArXG4gICAgICAgICAgICB0aGlzLnBhdGggK1xuICAgICAgICAgICAgJzogJyArXG4gICAgICAgICAgICB0aGlzLnNvdXJjZS50b1N0cmluZygpICtcbiAgICAgICAgICAgICcgbWVyZ2U6ICcgK1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi50b1N0cmluZygpICtcbiAgICAgICAgICAgICcpJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGNhY2hlIG5vZGUgb25seSBzdG9yZXMgY29tcGxldGUgY2hpbGRyZW4uIEFkZGl0aW9uYWxseSBpdCBob2xkcyBhIGZsYWcgd2hldGhlciB0aGUgbm9kZSBjYW4gYmUgY29uc2lkZXJlZCBmdWxseVxuICogaW5pdGlhbGl6ZWQgaW4gdGhlIHNlbnNlIHRoYXQgd2Uga25vdyBhdCBvbmUgcG9pbnQgaW4gdGltZSB0aGlzIHJlcHJlc2VudGVkIGEgdmFsaWQgc3RhdGUgb2YgdGhlIHdvcmxkLCBlLmcuXG4gKiBpbml0aWFsaXplZCB3aXRoIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBvciBhIGNvbXBsZXRlIG92ZXJ3cml0ZSBieSB0aGUgY2xpZW50LiBUaGUgZmlsdGVyZWQgZmxhZyBhbHNvIHRyYWNrc1xuICogd2hldGhlciBhIG5vZGUgcG90ZW50aWFsbHkgaGFkIGNoaWxkcmVuIHJlbW92ZWQgZHVlIHRvIGEgZmlsdGVyLlxuICovXG5jbGFzcyBDYWNoZU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG5vZGVfLCBmdWxseUluaXRpYWxpemVkXywgZmlsdGVyZWRfKSB7XG4gICAgICAgIHRoaXMubm9kZV8gPSBub2RlXztcbiAgICAgICAgdGhpcy5mdWxseUluaXRpYWxpemVkXyA9IGZ1bGx5SW5pdGlhbGl6ZWRfO1xuICAgICAgICB0aGlzLmZpbHRlcmVkXyA9IGZpbHRlcmVkXztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgbm9kZSB3YXMgZnVsbHkgaW5pdGlhbGl6ZWQgd2l0aCBlaXRoZXIgc2VydmVyIGRhdGEgb3IgYSBjb21wbGV0ZSBvdmVyd3JpdGUgYnkgdGhlIGNsaWVudFxuICAgICAqL1xuICAgIGlzRnVsbHlJbml0aWFsaXplZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVsbHlJbml0aWFsaXplZF87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIG5vZGUgaXMgcG90ZW50aWFsbHkgbWlzc2luZyBjaGlsZHJlbiBkdWUgdG8gYSBmaWx0ZXIgYXBwbGllZCB0byB0aGUgbm9kZVxuICAgICAqL1xuICAgIGlzRmlsdGVyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcmVkXztcbiAgICB9XG4gICAgaXNDb21wbGV0ZUZvclBhdGgocGF0aCkge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkocGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzRnVsbHlJbml0aWFsaXplZCgpICYmICF0aGlzLmZpbHRlcmVkXztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZEtleSA9IHBhdGhHZXRGcm9udChwYXRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KTtcbiAgICB9XG4gICAgaXNDb21wbGV0ZUZvckNoaWxkKGtleSkge1xuICAgICAgICByZXR1cm4gKCh0aGlzLmlzRnVsbHlJbml0aWFsaXplZCgpICYmICF0aGlzLmZpbHRlcmVkXykgfHwgdGhpcy5ub2RlXy5oYXNDaGlsZChrZXkpKTtcbiAgICB9XG4gICAgZ2V0Tm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV87XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBbiBFdmVudEdlbmVyYXRvciBpcyB1c2VkIHRvIGNvbnZlcnQgXCJyYXdcIiBjaGFuZ2VzIChDaGFuZ2UpIGFzIGNvbXB1dGVkIGJ5IHRoZVxuICogQ2FjaGVEaWZmZXIgaW50byBhY3R1YWwgZXZlbnRzIChFdmVudCkgdGhhdCBjYW4gYmUgcmFpc2VkLiAgU2VlIGdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlcygpXG4gKiBmb3IgZGV0YWlscy5cbiAqXG4gKi9cbmNsYXNzIEV2ZW50R2VuZXJhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihxdWVyeV8pIHtcbiAgICAgICAgdGhpcy5xdWVyeV8gPSBxdWVyeV87XG4gICAgICAgIHRoaXMuaW5kZXhfID0gdGhpcy5xdWVyeV8uX3F1ZXJ5UGFyYW1zLmdldEluZGV4KCk7XG4gICAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIHNldCBvZiByYXcgY2hhbmdlcyAobm8gbW92ZWQgZXZlbnRzIGFuZCBwcmV2TmFtZSBub3Qgc3BlY2lmaWVkIHlldCksIGFuZCBhIHNldCBvZlxuICogRXZlbnRSZWdpc3RyYXRpb25zIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkIG9mIHRoZXNlIGNoYW5nZXMsIGdlbmVyYXRlIHRoZSBhY3R1YWwgZXZlbnRzIHRvIGJlIHJhaXNlZC5cbiAqXG4gKiBOb3RlczpcbiAqICAtIGNoaWxkX21vdmVkIGV2ZW50cyB3aWxsIGJlIHN5bnRoZXNpemVkIGF0IHRoaXMgdGltZSBmb3IgYW55IGNoaWxkX2NoYW5nZWQgZXZlbnRzIHRoYXQgYWZmZWN0XG4gKiAgICBvdXIgaW5kZXguXG4gKiAgLSBwcmV2TmFtZSB3aWxsIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGluZGV4IG9yZGVyaW5nLlxuICovXG5mdW5jdGlvbiBldmVudEdlbmVyYXRvckdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlcyhldmVudEdlbmVyYXRvciwgY2hhbmdlcywgZXZlbnRDYWNoZSwgZXZlbnRSZWdpc3RyYXRpb25zKSB7XG4gICAgY29uc3QgZXZlbnRzID0gW107XG4gICAgY29uc3QgbW92ZXMgPSBbXTtcbiAgICBjaGFuZ2VzLmZvckVhY2goY2hhbmdlID0+IHtcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSBcImNoaWxkX2NoYW5nZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX0NIQU5HRUQgKi8gJiZcbiAgICAgICAgICAgIGV2ZW50R2VuZXJhdG9yLmluZGV4Xy5pbmRleGVkVmFsdWVDaGFuZ2VkKGNoYW5nZS5vbGRTbmFwLCBjaGFuZ2Uuc25hcHNob3ROb2RlKSkge1xuICAgICAgICAgICAgbW92ZXMucHVzaChjaGFuZ2VDaGlsZE1vdmVkKGNoYW5nZS5jaGlsZE5hbWUsIGNoYW5nZS5zbmFwc2hvdE5vZGUpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGV2ZW50R2VuZXJhdG9yR2VuZXJhdGVFdmVudHNGb3JUeXBlKGV2ZW50R2VuZXJhdG9yLCBldmVudHMsIFwiY2hpbGRfcmVtb3ZlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfUkVNT1ZFRCAqLywgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcbiAgICBldmVudEdlbmVyYXRvckdlbmVyYXRlRXZlbnRzRm9yVHlwZShldmVudEdlbmVyYXRvciwgZXZlbnRzLCBcImNoaWxkX2FkZGVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9BRERFRCAqLywgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcbiAgICBldmVudEdlbmVyYXRvckdlbmVyYXRlRXZlbnRzRm9yVHlwZShldmVudEdlbmVyYXRvciwgZXZlbnRzLCBcImNoaWxkX21vdmVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9NT1ZFRCAqLywgbW92ZXMsIGV2ZW50UmVnaXN0cmF0aW9ucywgZXZlbnRDYWNoZSk7XG4gICAgZXZlbnRHZW5lcmF0b3JHZW5lcmF0ZUV2ZW50c0ZvclR5cGUoZXZlbnRHZW5lcmF0b3IsIGV2ZW50cywgXCJjaGlsZF9jaGFuZ2VkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9DSEFOR0VEICovLCBjaGFuZ2VzLCBldmVudFJlZ2lzdHJhdGlvbnMsIGV2ZW50Q2FjaGUpO1xuICAgIGV2ZW50R2VuZXJhdG9yR2VuZXJhdGVFdmVudHNGb3JUeXBlKGV2ZW50R2VuZXJhdG9yLCBldmVudHMsIFwidmFsdWVcIiAvKiBDaGFuZ2VUeXBlLlZBTFVFICovLCBjaGFuZ2VzLCBldmVudFJlZ2lzdHJhdGlvbnMsIGV2ZW50Q2FjaGUpO1xuICAgIHJldHVybiBldmVudHM7XG59XG4vKipcbiAqIEdpdmVuIGNoYW5nZXMgb2YgYSBzaW5nbGUgY2hhbmdlIHR5cGUsIGdlbmVyYXRlIHRoZSBjb3JyZXNwb25kaW5nIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gZXZlbnRHZW5lcmF0b3JHZW5lcmF0ZUV2ZW50c0ZvclR5cGUoZXZlbnRHZW5lcmF0b3IsIGV2ZW50cywgZXZlbnRUeXBlLCBjaGFuZ2VzLCByZWdpc3RyYXRpb25zLCBldmVudENhY2hlKSB7XG4gICAgY29uc3QgZmlsdGVyZWRDaGFuZ2VzID0gY2hhbmdlcy5maWx0ZXIoY2hhbmdlID0+IGNoYW5nZS50eXBlID09PSBldmVudFR5cGUpO1xuICAgIGZpbHRlcmVkQ2hhbmdlcy5zb3J0KChhLCBiKSA9PiBldmVudEdlbmVyYXRvckNvbXBhcmVDaGFuZ2VzKGV2ZW50R2VuZXJhdG9yLCBhLCBiKSk7XG4gICAgZmlsdGVyZWRDaGFuZ2VzLmZvckVhY2goY2hhbmdlID0+IHtcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxpemVkQ2hhbmdlID0gZXZlbnRHZW5lcmF0b3JNYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZShldmVudEdlbmVyYXRvciwgY2hhbmdlLCBldmVudENhY2hlKTtcbiAgICAgICAgcmVnaXN0cmF0aW9ucy5mb3JFYWNoKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uLnJlc3BvbmRzVG8oY2hhbmdlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRzLnB1c2gocmVnaXN0cmF0aW9uLmNyZWF0ZUV2ZW50KG1hdGVyaWFsaXplZENoYW5nZSwgZXZlbnRHZW5lcmF0b3IucXVlcnlfKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZXZlbnRHZW5lcmF0b3JNYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZShldmVudEdlbmVyYXRvciwgY2hhbmdlLCBldmVudENhY2hlKSB7XG4gICAgaWYgKGNoYW5nZS50eXBlID09PSAndmFsdWUnIHx8IGNoYW5nZS50eXBlID09PSAnY2hpbGRfcmVtb3ZlZCcpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoYW5nZS5wcmV2TmFtZSA9IGV2ZW50Q2FjaGUuZ2V0UHJlZGVjZXNzb3JDaGlsZE5hbWUoY2hhbmdlLmNoaWxkTmFtZSwgY2hhbmdlLnNuYXBzaG90Tm9kZSwgZXZlbnRHZW5lcmF0b3IuaW5kZXhfKTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG59XG5mdW5jdGlvbiBldmVudEdlbmVyYXRvckNvbXBhcmVDaGFuZ2VzKGV2ZW50R2VuZXJhdG9yLCBhLCBiKSB7XG4gICAgaWYgKGEuY2hpbGROYW1lID09IG51bGwgfHwgYi5jaGlsZE5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignU2hvdWxkIG9ubHkgY29tcGFyZSBjaGlsZF8gZXZlbnRzLicpO1xuICAgIH1cbiAgICBjb25zdCBhV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoYS5jaGlsZE5hbWUsIGEuc25hcHNob3ROb2RlKTtcbiAgICBjb25zdCBiV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoYi5jaGlsZE5hbWUsIGIuc25hcHNob3ROb2RlKTtcbiAgICByZXR1cm4gZXZlbnRHZW5lcmF0b3IuaW5kZXhfLmNvbXBhcmUoYVdyYXBwZWQsIGJXcmFwcGVkKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIG5ld1ZpZXdDYWNoZShldmVudENhY2hlLCBzZXJ2ZXJDYWNoZSkge1xuICAgIHJldHVybiB7IGV2ZW50Q2FjaGUsIHNlcnZlckNhY2hlIH07XG59XG5mdW5jdGlvbiB2aWV3Q2FjaGVVcGRhdGVFdmVudFNuYXAodmlld0NhY2hlLCBldmVudFNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCkge1xuICAgIHJldHVybiBuZXdWaWV3Q2FjaGUobmV3IENhY2hlTm9kZShldmVudFNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCksIHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZSk7XG59XG5mdW5jdGlvbiB2aWV3Q2FjaGVVcGRhdGVTZXJ2ZXJTbmFwKHZpZXdDYWNoZSwgc2VydmVyU25hcCwgY29tcGxldGUsIGZpbHRlcmVkKSB7XG4gICAgcmV0dXJuIG5ld1ZpZXdDYWNoZSh2aWV3Q2FjaGUuZXZlbnRDYWNoZSwgbmV3IENhY2hlTm9kZShzZXJ2ZXJTbmFwLCBjb21wbGV0ZSwgZmlsdGVyZWQpKTtcbn1cbmZ1bmN0aW9uIHZpZXdDYWNoZUdldENvbXBsZXRlRXZlbnRTbmFwKHZpZXdDYWNoZSkge1xuICAgIHJldHVybiB2aWV3Q2FjaGUuZXZlbnRDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKVxuICAgICAgICA/IHZpZXdDYWNoZS5ldmVudENhY2hlLmdldE5vZGUoKVxuICAgICAgICA6IG51bGw7XG59XG5mdW5jdGlvbiB2aWV3Q2FjaGVHZXRDb21wbGV0ZVNlcnZlclNuYXAodmlld0NhY2hlKSB7XG4gICAgcmV0dXJuIHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKVxuICAgICAgICA/IHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5nZXROb2RlKClcbiAgICAgICAgOiBudWxsO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xubGV0IGVtcHR5Q2hpbGRyZW5TaW5nbGV0b247XG4vKipcbiAqIFNpbmdsZXRvbiBlbXB0eSBjaGlsZHJlbiBjb2xsZWN0aW9uLlxuICpcbiAqL1xuY29uc3QgRW1wdHlDaGlsZHJlbiA9ICgpID0+IHtcbiAgICBpZiAoIWVtcHR5Q2hpbGRyZW5TaW5nbGV0b24pIHtcbiAgICAgICAgZW1wdHlDaGlsZHJlblNpbmdsZXRvbiA9IG5ldyBTb3J0ZWRNYXAoc3RyaW5nQ29tcGFyZSk7XG4gICAgfVxuICAgIHJldHVybiBlbXB0eUNoaWxkcmVuU2luZ2xldG9uO1xufTtcbi8qKlxuICogQSB0cmVlIHdpdGggaW1tdXRhYmxlIGVsZW1lbnRzLlxuICovXG5jbGFzcyBJbW11dGFibGVUcmVlIHtcbiAgICBzdGF0aWMgZnJvbU9iamVjdChvYmopIHtcbiAgICAgICAgbGV0IHRyZWUgPSBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcbiAgICAgICAgZWFjaChvYmosIChjaGlsZFBhdGgsIGNoaWxkU25hcCkgPT4ge1xuICAgICAgICAgICAgdHJlZSA9IHRyZWUuc2V0KG5ldyBQYXRoKGNoaWxkUGF0aCksIGNoaWxkU25hcCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJlZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodmFsdWUsIGNoaWxkcmVuID0gRW1wdHlDaGlsZHJlbigpKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBlbXB0eSBhbmQgdGhlcmUgYXJlIG5vIGNoaWxkcmVuXG4gICAgICovXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IG51bGwgJiYgdGhpcy5jaGlsZHJlbi5pc0VtcHR5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcGF0aCBhbmQgcHJlZGljYXRlLCByZXR1cm4gdGhlIGZpcnN0IG5vZGUgYW5kIHRoZSBwYXRoIHRvIHRoYXQgbm9kZVxuICAgICAqIHdoZXJlIHRoZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlLlxuICAgICAqXG4gICAgICogVE9ETyBEbyBhIHBlcmYgdGVzdCAtLSBJZiB3ZSdyZSBjcmVhdGluZyBhIGJ1bmNoIG9mIGB7cGF0aDogdmFsdWU6fWBcbiAgICAgKiBvYmplY3RzIG9uIHRoZSB3YXkgYmFjayBvdXQsIGl0IG1heSBiZSBiZXR0ZXIgdG8gcGFzcyBkb3duIGEgcGF0aFNvRmFyIG9iai5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWxhdGl2ZVBhdGggLSBUaGUgcmVtYWluZGVyIG9mIHRoZSBwYXRoXG4gICAgICogQHBhcmFtIHByZWRpY2F0ZSAtIFRoZSBwcmVkaWNhdGUgdG8gc2F0aXNmeSB0byByZXR1cm4gYSBub2RlXG4gICAgICovXG4gICAgZmluZFJvb3RNb3N0TWF0Y2hpbmdQYXRoQW5kVmFsdWUocmVsYXRpdmVQYXRoLCBwcmVkaWNhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgIT0gbnVsbCAmJiBwcmVkaWNhdGUodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHBhdGg6IG5ld0VtcHR5UGF0aCgpLCB2YWx1ZTogdGhpcy52YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHJlbGF0aXZlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZyb250ID0gcGF0aEdldEZyb250KHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkRXhpc3RpbmdQYXRoQW5kVmFsdWUgPSBjaGlsZC5maW5kUm9vdE1vc3RNYXRjaGluZ1BhdGhBbmRWYWx1ZShwYXRoUG9wRnJvbnQocmVsYXRpdmVQYXRoKSwgcHJlZGljYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkRXhpc3RpbmdQYXRoQW5kVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoQ2hpbGQobmV3IFBhdGgoZnJvbnQpLCBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlLnBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGF0aDogZnVsbFBhdGgsIHZhbHVlOiBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlLnZhbHVlIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbmQsIGlmIGl0IGV4aXN0cywgdGhlIHNob3J0ZXN0IHN1YnBhdGggb2YgdGhlIGdpdmVuIHBhdGggdGhhdCBwb2ludHMgYSBkZWZpbmVkXG4gICAgICogdmFsdWUgaW4gdGhlIHRyZWVcbiAgICAgKi9cbiAgICBmaW5kUm9vdE1vc3RWYWx1ZUFuZFBhdGgocmVsYXRpdmVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRSb290TW9zdE1hdGNoaW5nUGF0aEFuZFZhbHVlKHJlbGF0aXZlUGF0aCwgKCkgPT4gdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBzdWJ0cmVlIGF0IHRoZSBnaXZlbiBwYXRoXG4gICAgICovXG4gICAgc3VidHJlZShyZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHJlbGF0aXZlUGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnJvbnQgPSBwYXRoR2V0RnJvbnQocmVsYXRpdmVQYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkVHJlZSA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRUcmVlLnN1YnRyZWUocGF0aFBvcEZyb250KHJlbGF0aXZlUGF0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVsYXRpdmVQYXRoIC0gUGF0aCB0byBzZXQgdmFsdWUgYXQuXG4gICAgICogQHBhcmFtIHRvU2V0IC0gVmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIFJlc3VsdGluZyB0cmVlLlxuICAgICAqL1xuICAgIHNldChyZWxhdGl2ZVBhdGgsIHRvU2V0KSB7XG4gICAgICAgIGlmIChwYXRoSXNFbXB0eShyZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUodG9TZXQsIHRoaXMuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnJvbnQgPSBwYXRoR2V0RnJvbnQocmVsYXRpdmVQYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpIHx8IG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hpbGQgPSBjaGlsZC5zZXQocGF0aFBvcEZyb250KHJlbGF0aXZlUGF0aCksIHRvU2V0KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW1tdXRhYmxlVHJlZSh0aGlzLnZhbHVlLCBuZXdDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlbGF0aXZlUGF0aCAtIFBhdGggdG8gdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIFJlc3VsdGluZyB0cmVlLlxuICAgICAqL1xuICAgIHJlbW92ZShyZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHJlbGF0aXZlUGF0aCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1tdXRhYmxlVHJlZShudWxsLCB0aGlzLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb250ID0gcGF0aEdldEZyb250KHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcbiAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NoaWxkID0gY2hpbGQucmVtb3ZlKHBhdGhQb3BGcm9udChyZWxhdGl2ZVBhdGgpKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3Q2hpbGRyZW47XG4gICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGZyb250KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IG51bGwgJiYgbmV3Q2hpbGRyZW4uaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW1tdXRhYmxlVHJlZSh0aGlzLnZhbHVlLCBuZXdDaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHRyZWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVsYXRpdmVQYXRoIC0gUGF0aCB0byBnZXQgdmFsdWUgZm9yLlxuICAgICAqIEByZXR1cm5zIFZhbHVlIGF0IHBhdGgsIG9yIG51bGwuXG4gICAgICovXG4gICAgZ2V0KHJlbGF0aXZlUGF0aCkge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkocmVsYXRpdmVQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmcm9udCA9IHBhdGhHZXRGcm9udChyZWxhdGl2ZVBhdGgpO1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XG4gICAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQuZ2V0KHBhdGhQb3BGcm9udChyZWxhdGl2ZVBhdGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIHN1YnRyZWUgYXQgdGhlIHNwZWNpZmllZCBwYXRoIHdpdGggdGhlIGdpdmVuIG5ldyB0cmVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlbGF0aXZlUGF0aCAtIFBhdGggdG8gcmVwbGFjZSBzdWJ0cmVlIGZvci5cbiAgICAgKiBAcGFyYW0gbmV3VHJlZSAtIE5ldyB0cmVlLlxuICAgICAqIEByZXR1cm5zIFJlc3VsdGluZyB0cmVlLlxuICAgICAqL1xuICAgIHNldFRyZWUocmVsYXRpdmVQYXRoLCBuZXdUcmVlKSB7XG4gICAgICAgIGlmIChwYXRoSXNFbXB0eShyZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3VHJlZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb250ID0gcGF0aEdldEZyb250KHJlbGF0aXZlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KSB8fCBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoaWxkID0gY2hpbGQuc2V0VHJlZShwYXRoUG9wRnJvbnQocmVsYXRpdmVQYXRoKSwgbmV3VHJlZSk7XG4gICAgICAgICAgICBsZXQgbmV3Q2hpbGRyZW47XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnJlbW92ZShmcm9udCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uaW5zZXJ0KGZyb250LCBuZXdDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUodGhpcy52YWx1ZSwgbmV3Q2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgZGVwdGggZmlyc3QgZm9sZCBvbiB0aGlzIHRyZWUuIFRyYW5zZm9ybXMgYSB0cmVlIGludG8gYSBzaW5nbGVcbiAgICAgKiB2YWx1ZSwgZ2l2ZW4gYSBmdW5jdGlvbiB0aGF0IG9wZXJhdGVzIG9uIHRoZSBwYXRoIHRvIGEgbm9kZSwgYW4gb3B0aW9uYWxcbiAgICAgKiBjdXJyZW50IHZhbHVlLCBhbmQgYSBtYXAgb2YgY2hpbGQgbmFtZXMgdG8gZm9sZGVkIHN1YnRyZWVzXG4gICAgICovXG4gICAgZm9sZChmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5mb2xkXyhuZXdFbXB0eVBhdGgoKSwgZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmUgaGVscGVyIGZvciBwdWJsaWMtZmFjaW5nIGZvbGQoKSBtZXRob2RcbiAgICAgKi9cbiAgICBmb2xkXyhwYXRoU29GYXIsIGZuKSB7XG4gICAgICAgIGNvbnN0IGFjY3VtID0ge307XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbCgoY2hpbGRLZXksIGNoaWxkVHJlZSkgPT4ge1xuICAgICAgICAgICAgYWNjdW1bY2hpbGRLZXldID0gY2hpbGRUcmVlLmZvbGRfKHBhdGhDaGlsZChwYXRoU29GYXIsIGNoaWxkS2V5KSwgZm4pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZuKHBhdGhTb0ZhciwgdGhpcy52YWx1ZSwgYWNjdW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBmaXJzdCBtYXRjaGluZyB2YWx1ZSBvbiB0aGUgZ2l2ZW4gcGF0aC4gUmV0dXJuIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgZiB0byBpdC5cbiAgICAgKi9cbiAgICBmaW5kT25QYXRoKHBhdGgsIGYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZE9uUGF0aF8ocGF0aCwgbmV3RW1wdHlQYXRoKCksIGYpO1xuICAgIH1cbiAgICBmaW5kT25QYXRoXyhwYXRoVG9Gb2xsb3csIHBhdGhTb0ZhciwgZikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnZhbHVlID8gZihwYXRoU29GYXIsIHRoaXMudmFsdWUpIDogZmFsc2U7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocGF0aElzRW1wdHkocGF0aFRvRm9sbG93KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbnQgPSBwYXRoR2V0RnJvbnQocGF0aFRvRm9sbG93KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dENoaWxkLmZpbmRPblBhdGhfKHBhdGhQb3BGcm9udChwYXRoVG9Gb2xsb3cpLCBwYXRoQ2hpbGQocGF0aFNvRmFyLCBmcm9udCksIGYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvcmVhY2hPblBhdGgocGF0aCwgZikge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JlYWNoT25QYXRoXyhwYXRoLCBuZXdFbXB0eVBhdGgoKSwgZik7XG4gICAgfVxuICAgIGZvcmVhY2hPblBhdGhfKHBhdGhUb0ZvbGxvdywgY3VycmVudFJlbGF0aXZlUGF0aCwgZikge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkocGF0aFRvRm9sbG93KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGYoY3VycmVudFJlbGF0aXZlUGF0aCwgdGhpcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmcm9udCA9IHBhdGhHZXRGcm9udChwYXRoVG9Gb2xsb3cpO1xuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpO1xuICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Q2hpbGQuZm9yZWFjaE9uUGF0aF8ocGF0aFBvcEZyb250KHBhdGhUb0ZvbGxvdyksIHBhdGhDaGlsZChjdXJyZW50UmVsYXRpdmVQYXRoLCBmcm9udCksIGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxzIHRoZSBnaXZlbiBmdW5jdGlvbiBmb3IgZWFjaCBub2RlIGluIHRoZSB0cmVlIHRoYXQgaGFzIGEgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZiAtIEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdpdGggdGhlIHBhdGggZnJvbSB0aGUgcm9vdCBvZiB0aGUgdHJlZSB0b1xuICAgICAqIGEgbm9kZSwgYW5kIHRoZSB2YWx1ZSBhdCB0aGF0IG5vZGUuIENhbGxlZCBpbiBkZXB0aC1maXJzdCBvcmRlci5cbiAgICAgKi9cbiAgICBmb3JlYWNoKGYpIHtcbiAgICAgICAgdGhpcy5mb3JlYWNoXyhuZXdFbXB0eVBhdGgoKSwgZik7XG4gICAgfVxuICAgIGZvcmVhY2hfKGN1cnJlbnRSZWxhdGl2ZVBhdGgsIGYpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKChjaGlsZE5hbWUsIGNoaWxkVHJlZSkgPT4ge1xuICAgICAgICAgICAgY2hpbGRUcmVlLmZvcmVhY2hfKHBhdGhDaGlsZChjdXJyZW50UmVsYXRpdmVQYXRoLCBjaGlsZE5hbWUpLCBmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICBmKGN1cnJlbnRSZWxhdGl2ZVBhdGgsIHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcmVhY2hDaGlsZChmKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbCgoY2hpbGROYW1lLCBjaGlsZFRyZWUpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBmKGNoaWxkTmFtZSwgY2hpbGRUcmVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGlzIGNsYXNzIGhvbGRzIGEgY29sbGVjdGlvbiBvZiB3cml0ZXMgdGhhdCBjYW4gYmUgYXBwbGllZCB0byBub2RlcyBpbiB1bmlzb24uIEl0IGFic3RyYWN0cyBhd2F5IHRoZSBsb2dpYyB3aXRoXG4gKiBkZWFsaW5nIHdpdGggcHJpb3JpdHkgd3JpdGVzIGFuZCBtdWx0aXBsZSBuZXN0ZWQgd3JpdGVzLiBBdCBhbnkgZ2l2ZW4gcGF0aCB0aGVyZSBpcyBvbmx5IGFsbG93ZWQgdG8gYmUgb25lIHdyaXRlXG4gKiBtb2RpZnlpbmcgdGhhdCBwYXRoLiBBbnkgd3JpdGUgdG8gYW4gZXhpc3RpbmcgcGF0aCBvciBzaGFkb3dpbmcgYW4gZXhpc3RpbmcgcGF0aCB3aWxsIG1vZGlmeSB0aGF0IGV4aXN0aW5nIHdyaXRlXG4gKiB0byByZWZsZWN0IHRoZSB3cml0ZSBhZGRlZC5cbiAqL1xuY2xhc3MgQ29tcG91bmRXcml0ZSB7XG4gICAgY29uc3RydWN0b3Iod3JpdGVUcmVlXykge1xuICAgICAgICB0aGlzLndyaXRlVHJlZV8gPSB3cml0ZVRyZWVfO1xuICAgIH1cbiAgICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXcgSW1tdXRhYmxlVHJlZShudWxsKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29tcG91bmRXcml0ZUFkZFdyaXRlKGNvbXBvdW5kV3JpdGUsIHBhdGgsIG5vZGUpIHtcbiAgICBpZiAocGF0aElzRW1wdHkocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKG5ldyBJbW11dGFibGVUcmVlKG5vZGUpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHJvb3Rtb3N0ID0gY29tcG91bmRXcml0ZS53cml0ZVRyZWVfLmZpbmRSb290TW9zdFZhbHVlQW5kUGF0aChwYXRoKTtcbiAgICAgICAgaWYgKHJvb3Rtb3N0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3RNb3N0UGF0aCA9IHJvb3Rtb3N0LnBhdGg7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSByb290bW9zdC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IG5ld1JlbGF0aXZlUGF0aChyb290TW9zdFBhdGgsIHBhdGgpO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGgsIG5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKGNvbXBvdW5kV3JpdGUud3JpdGVUcmVlXy5zZXQocm9vdE1vc3RQYXRoLCB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3VidHJlZSA9IG5ldyBJbW11dGFibGVUcmVlKG5vZGUpO1xuICAgICAgICAgICAgY29uc3QgbmV3V3JpdGVUcmVlID0gY29tcG91bmRXcml0ZS53cml0ZVRyZWVfLnNldFRyZWUocGF0aCwgc3VidHJlZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBvdW5kV3JpdGUobmV3V3JpdGVUcmVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbXBvdW5kV3JpdGVBZGRXcml0ZXMoY29tcG91bmRXcml0ZSwgcGF0aCwgdXBkYXRlcykge1xuICAgIGxldCBuZXdXcml0ZSA9IGNvbXBvdW5kV3JpdGU7XG4gICAgZWFjaCh1cGRhdGVzLCAoY2hpbGRLZXksIG5vZGUpID0+IHtcbiAgICAgICAgbmV3V3JpdGUgPSBjb21wb3VuZFdyaXRlQWRkV3JpdGUobmV3V3JpdGUsIHBhdGhDaGlsZChwYXRoLCBjaGlsZEtleSksIG5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdXcml0ZTtcbn1cbi8qKlxuICogV2lsbCByZW1vdmUgYSB3cml0ZSBhdCB0aGUgZ2l2ZW4gcGF0aCBhbmQgZGVlcGVyIHBhdGhzLiBUaGlzIHdpbGwgPGVtPm5vdDwvZW0+IG1vZGlmeSBhIHdyaXRlIGF0IGEgaGlnaGVyXG4gKiBsb2NhdGlvbiwgd2hpY2ggbXVzdCBiZSByZW1vdmVkIGJ5IGNhbGxpbmcgdGhpcyBtZXRob2Qgd2l0aCB0aGF0IHBhdGguXG4gKlxuICogQHBhcmFtIGNvbXBvdW5kV3JpdGUgLSBUaGUgQ29tcG91bmRXcml0ZSB0byByZW1vdmUuXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIGF0IHdoaWNoIGEgd3JpdGUgYW5kIGFsbCBkZWVwZXIgd3JpdGVzIHNob3VsZCBiZSByZW1vdmVkXG4gKiBAcmV0dXJucyBUaGUgbmV3IENvbXBvdW5kV3JpdGUgd2l0aCB0aGUgcmVtb3ZlZCBwYXRoXG4gKi9cbmZ1bmN0aW9uIGNvbXBvdW5kV3JpdGVSZW1vdmVXcml0ZShjb21wb3VuZFdyaXRlLCBwYXRoKSB7XG4gICAgaWYgKHBhdGhJc0VtcHR5KHBhdGgpKSB7XG4gICAgICAgIHJldHVybiBDb21wb3VuZFdyaXRlLmVtcHR5KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdXcml0ZVRyZWUgPSBjb21wb3VuZFdyaXRlLndyaXRlVHJlZV8uc2V0VHJlZShwYXRoLCBuZXcgSW1tdXRhYmxlVHJlZShudWxsKSk7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXdXcml0ZVRyZWUpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgQ29tcG91bmRXcml0ZSB3aWxsIGZ1bGx5IG92ZXJ3cml0ZSBhIG5vZGUgYXQgYSBnaXZlbiBsb2NhdGlvbiBhbmQgY2FuIHRoZXJlZm9yZSBiZVxuICogY29uc2lkZXJlZCBcImNvbXBsZXRlXCIuXG4gKlxuICogQHBhcmFtIGNvbXBvdW5kV3JpdGUgLSBUaGUgQ29tcG91bmRXcml0ZSB0byBjaGVjay5cbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gY2hlY2sgZm9yXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZXJlIGlzIGEgY29tcGxldGUgd3JpdGUgYXQgdGhhdCBwYXRoXG4gKi9cbmZ1bmN0aW9uIGNvbXBvdW5kV3JpdGVIYXNDb21wbGV0ZVdyaXRlKGNvbXBvdW5kV3JpdGUsIHBhdGgpIHtcbiAgICByZXR1cm4gY29tcG91bmRXcml0ZUdldENvbXBsZXRlTm9kZShjb21wb3VuZFdyaXRlLCBwYXRoKSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgbm9kZSBmb3IgYSBwYXRoIGlmIGFuZCBvbmx5IGlmIHRoZSBub2RlIGlzIGEgXCJjb21wbGV0ZVwiIG92ZXJ3cml0ZSBhdCB0aGF0IHBhdGguIFRoaXMgd2lsbCBub3QgYWdncmVnYXRlXG4gKiB3cml0ZXMgZnJvbSBkZWVwZXIgcGF0aHMsIGJ1dCB3aWxsIHJldHVybiBjaGlsZCBub2RlcyBmcm9tIGEgbW9yZSBzaGFsbG93IHBhdGguXG4gKlxuICogQHBhcmFtIGNvbXBvdW5kV3JpdGUgLSBUaGUgQ29tcG91bmRXcml0ZSB0byBnZXQgdGhlIG5vZGUgZnJvbS5cbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gZ2V0IGEgY29tcGxldGUgd3JpdGVcbiAqIEByZXR1cm5zIFRoZSBub2RlIGlmIGNvbXBsZXRlIGF0IHRoYXQgcGF0aCwgb3IgbnVsbCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvdW5kV3JpdGVHZXRDb21wbGV0ZU5vZGUoY29tcG91bmRXcml0ZSwgcGF0aCkge1xuICAgIGNvbnN0IHJvb3Rtb3N0ID0gY29tcG91bmRXcml0ZS53cml0ZVRyZWVfLmZpbmRSb290TW9zdFZhbHVlQW5kUGF0aChwYXRoKTtcbiAgICBpZiAocm9vdG1vc3QgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29tcG91bmRXcml0ZS53cml0ZVRyZWVfXG4gICAgICAgICAgICAuZ2V0KHJvb3Rtb3N0LnBhdGgpXG4gICAgICAgICAgICAuZ2V0Q2hpbGQobmV3UmVsYXRpdmVQYXRoKHJvb3Rtb3N0LnBhdGgsIHBhdGgpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhbGwgY2hpbGRyZW4gdGhhdCBhcmUgZ3VhcmFudGVlZCB0byBiZSBhIGNvbXBsZXRlIG92ZXJ3cml0ZS5cbiAqXG4gKiBAcGFyYW0gY29tcG91bmRXcml0ZSAtIFRoZSBDb21wb3VuZFdyaXRlIHRvIGdldCBjaGlsZHJlbiBmcm9tLlxuICogQHJldHVybnMgQSBsaXN0IG9mIGFsbCBjb21wbGV0ZSBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gY29tcG91bmRXcml0ZUdldENvbXBsZXRlQ2hpbGRyZW4oY29tcG91bmRXcml0ZSkge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgY29uc3Qgbm9kZSA9IGNvbXBvdW5kV3JpdGUud3JpdGVUcmVlXy52YWx1ZTtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIElmIGl0J3MgYSBsZWFmIG5vZGUsIGl0IGhhcyBubyBjaGlsZHJlbjsgc28gbm90aGluZyB0byBkby5cbiAgICAgICAgaWYgKCFub2RlLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgbm9kZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChjaGlsZE5hbWUsIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3IE5hbWVkTm9kZShjaGlsZE5hbWUsIGNoaWxkTm9kZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbXBvdW5kV3JpdGUud3JpdGVUcmVlXy5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKChjaGlsZE5hbWUsIGNoaWxkVHJlZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkVHJlZS52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChuZXcgTmFtZWROb2RlKGNoaWxkTmFtZSwgY2hpbGRUcmVlLnZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG59XG5mdW5jdGlvbiBjb21wb3VuZFdyaXRlQ2hpbGRDb21wb3VuZFdyaXRlKGNvbXBvdW5kV3JpdGUsIHBhdGgpIHtcbiAgICBpZiAocGF0aElzRW1wdHkocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvdW5kV3JpdGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzaGFkb3dpbmdOb2RlID0gY29tcG91bmRXcml0ZUdldENvbXBsZXRlTm9kZShjb21wb3VuZFdyaXRlLCBwYXRoKTtcbiAgICAgICAgaWYgKHNoYWRvd2luZ05vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKG5ldyBJbW11dGFibGVUcmVlKHNoYWRvd2luZ05vZGUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShjb21wb3VuZFdyaXRlLndyaXRlVHJlZV8uc3VidHJlZShwYXRoKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIENvbXBvdW5kV3JpdGUgaXMgZW1wdHkgYW5kIHRoZXJlZm9yZSBkb2VzIG5vdCBtb2RpZnkgYW55IG5vZGVzLlxuICogQHJldHVybnMgV2hldGhlciB0aGlzIENvbXBvdW5kV3JpdGUgaXMgZW1wdHlcbiAqL1xuZnVuY3Rpb24gY29tcG91bmRXcml0ZUlzRW1wdHkoY29tcG91bmRXcml0ZSkge1xuICAgIHJldHVybiBjb21wb3VuZFdyaXRlLndyaXRlVHJlZV8uaXNFbXB0eSgpO1xufVxuLyoqXG4gKiBBcHBsaWVzIHRoaXMgQ29tcG91bmRXcml0ZSB0byBhIG5vZGUuIFRoZSBub2RlIGlzIHJldHVybmVkIHdpdGggYWxsIHdyaXRlcyBmcm9tIHRoaXMgQ29tcG91bmRXcml0ZSBhcHBsaWVkIHRvIHRoZVxuICogbm9kZVxuICogQHBhcmFtIG5vZGUgLSBUaGUgbm9kZSB0byBhcHBseSB0aGlzIENvbXBvdW5kV3JpdGUgdG9cbiAqIEByZXR1cm5zIFRoZSBub2RlIHdpdGggYWxsIHdyaXRlcyBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXBvdW5kV3JpdGVBcHBseShjb21wb3VuZFdyaXRlLCBub2RlKSB7XG4gICAgcmV0dXJuIGFwcGx5U3VidHJlZVdyaXRlKG5ld0VtcHR5UGF0aCgpLCBjb21wb3VuZFdyaXRlLndyaXRlVHJlZV8sIG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwbHlTdWJ0cmVlV3JpdGUocmVsYXRpdmVQYXRoLCB3cml0ZVRyZWUsIG5vZGUpIHtcbiAgICBpZiAod3JpdGVUcmVlLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgLy8gU2luY2UgdGhlcmUgYSB3cml0ZSBpcyBhbHdheXMgYSBsZWFmLCB3ZSdyZSBkb25lIGhlcmVcbiAgICAgICAgcmV0dXJuIG5vZGUudXBkYXRlQ2hpbGQocmVsYXRpdmVQYXRoLCB3cml0ZVRyZWUudmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHByaW9yaXR5V3JpdGUgPSBudWxsO1xuICAgICAgICB3cml0ZVRyZWUuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbCgoY2hpbGRLZXksIGNoaWxkVHJlZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkS2V5ID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHByaW9yaXRpZXMgYXQgdGhlIGVuZCBzbyB3ZSBkb24ndCB1cGRhdGUgcHJpb3JpdGllcyBmb3IgZWl0aGVyIGVtcHR5IG5vZGVzIG9yIGZvcmdldFxuICAgICAgICAgICAgICAgIC8vIHRvIGFwcGx5IHByaW9yaXRpZXMgdG8gZW1wdHkgbm9kZXMgdGhhdCBhcmUgbGF0ZXIgZmlsbGVkXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGNoaWxkVHJlZS52YWx1ZSAhPT0gbnVsbCwgJ1ByaW9yaXR5IHdyaXRlcyBtdXN0IGFsd2F5cyBiZSBsZWFmIG5vZGVzJyk7XG4gICAgICAgICAgICAgICAgcHJpb3JpdHlXcml0ZSA9IGNoaWxkVHJlZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBhcHBseVN1YnRyZWVXcml0ZShwYXRoQ2hpbGQocmVsYXRpdmVQYXRoLCBjaGlsZEtleSksIGNoaWxkVHJlZSwgbm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwcmlvcml0eSB3cml0ZSwgd2Ugb25seSBhcHBseSBpdCBpZiB0aGUgbm9kZSBpcyBub3QgZW1wdHlcbiAgICAgICAgaWYgKCFub2RlLmdldENoaWxkKHJlbGF0aXZlUGF0aCkuaXNFbXB0eSgpICYmIHByaW9yaXR5V3JpdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnVwZGF0ZUNoaWxkKHBhdGhDaGlsZChyZWxhdGl2ZVBhdGgsICcucHJpb3JpdHknKSwgcHJpb3JpdHlXcml0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgV3JpdGVUcmVlUmVmIGZvciB0aGUgZ2l2ZW4gcGF0aC4gRm9yIHVzZSB3aXRoIGEgbmV3IHN5bmMgcG9pbnQgYXQgdGhlIGdpdmVuIHBhdGguXG4gKlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVDaGlsZFdyaXRlcyh3cml0ZVRyZWUsIHBhdGgpIHtcbiAgICByZXR1cm4gbmV3V3JpdGVUcmVlUmVmKHBhdGgsIHdyaXRlVHJlZSk7XG59XG4vKipcbiAqIFJlY29yZCBhIG5ldyBvdmVyd3JpdGUgZnJvbSB1c2VyIGNvZGUuXG4gKlxuICogQHBhcmFtIHZpc2libGUgLSBUaGlzIGlzIHNldCB0byBmYWxzZSBieSBzb21lIHRyYW5zYWN0aW9ucy4gSXQgc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gZXZlbnQgY2FjaGVzXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZUFkZE92ZXJ3cml0ZSh3cml0ZVRyZWUsIHBhdGgsIHNuYXAsIHdyaXRlSWQsIHZpc2libGUpIHtcbiAgICBhc3NlcnQod3JpdGVJZCA+IHdyaXRlVHJlZS5sYXN0V3JpdGVJZCwgJ1N0YWNraW5nIGFuIG9sZGVyIHdyaXRlIG9uIHRvcCBvZiBuZXdlciBvbmVzJyk7XG4gICAgaWYgKHZpc2libGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgd3JpdGVUcmVlLmFsbFdyaXRlcy5wdXNoKHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc25hcCxcbiAgICAgICAgd3JpdGVJZCxcbiAgICAgICAgdmlzaWJsZVxuICAgIH0pO1xuICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgIHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzID0gY29tcG91bmRXcml0ZUFkZFdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoLCBzbmFwKTtcbiAgICB9XG4gICAgd3JpdGVUcmVlLmxhc3RXcml0ZUlkID0gd3JpdGVJZDtcbn1cbi8qKlxuICogUmVjb3JkIGEgbmV3IG1lcmdlIGZyb20gdXNlciBjb2RlLlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVBZGRNZXJnZSh3cml0ZVRyZWUsIHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVJZCkge1xuICAgIGFzc2VydCh3cml0ZUlkID4gd3JpdGVUcmVlLmxhc3RXcml0ZUlkLCAnU3RhY2tpbmcgYW4gb2xkZXIgbWVyZ2Ugb24gdG9wIG9mIG5ld2VyIG9uZXMnKTtcbiAgICB3cml0ZVRyZWUuYWxsV3JpdGVzLnB1c2goe1xuICAgICAgICBwYXRoLFxuICAgICAgICBjaGlsZHJlbjogY2hhbmdlZENoaWxkcmVuLFxuICAgICAgICB3cml0ZUlkLFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgd3JpdGVUcmVlLnZpc2libGVXcml0ZXMgPSBjb21wb3VuZFdyaXRlQWRkV3JpdGVzKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4pO1xuICAgIHdyaXRlVHJlZS5sYXN0V3JpdGVJZCA9IHdyaXRlSWQ7XG59XG5mdW5jdGlvbiB3cml0ZVRyZWVHZXRXcml0ZSh3cml0ZVRyZWUsIHdyaXRlSWQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdyaXRlVHJlZS5hbGxXcml0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcmVjb3JkID0gd3JpdGVUcmVlLmFsbFdyaXRlc1tpXTtcbiAgICAgICAgaWYgKHJlY29yZC53cml0ZUlkID09PSB3cml0ZUlkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBSZW1vdmUgYSB3cml0ZSAoZWl0aGVyIGFuIG92ZXJ3cml0ZSBvciBtZXJnZSkgdGhhdCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgYWNrbm93bGVkZ2UgYnkgdGhlIHNlcnZlci4gUmVjYWxjdWxhdGVzXG4gKiB0aGUgdHJlZSBpZiBuZWNlc3NhcnkuICBXZSByZXR1cm4gdHJ1ZSBpZiBpdCBtYXkgaGF2ZSBiZWVuIHZpc2libGUsIG1lYW5pbmcgdmlld3MgbmVlZCB0byByZWV2YWx1YXRlLlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHdyaXRlIG1heSBoYXZlIGJlZW4gdmlzaWJsZSAobWVhbmluZyB3ZSdsbCBuZWVkIHRvIHJlZXZhbHVhdGUgLyByYWlzZVxuICogZXZlbnRzIGFzIGEgcmVzdWx0KS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVUcmVlUmVtb3ZlV3JpdGUod3JpdGVUcmVlLCB3cml0ZUlkKSB7XG4gICAgLy8gTm90ZTogZGlzYWJsaW5nIHRoaXMgY2hlY2suIEl0IGNvdWxkIGJlIGEgdHJhbnNhY3Rpb24gdGhhdCBwcmVlbXB0ZWQgYW5vdGhlciB0cmFuc2FjdGlvbiwgYW5kIHRodXMgd2FzIGFwcGxpZWRcbiAgICAvLyBvdXQgb2Ygb3JkZXIuXG4gICAgLy9jb25zdCB2YWxpZENsZWFyID0gcmV2ZXJ0IHx8IHRoaXMuYWxsV3JpdGVzXy5sZW5ndGggPT09IDAgfHwgd3JpdGVJZCA8PSB0aGlzLmFsbFdyaXRlc19bMF0ud3JpdGVJZDtcbiAgICAvL2Fzc2VydCh2YWxpZENsZWFyLCBcIkVpdGhlciB3ZSBkb24ndCBoYXZlIHRoaXMgd3JpdGUsIG9yIGl0J3MgdGhlIGZpcnN0IG9uZSBpbiB0aGUgcXVldWVcIik7XG4gICAgY29uc3QgaWR4ID0gd3JpdGVUcmVlLmFsbFdyaXRlcy5maW5kSW5kZXgocyA9PiB7XG4gICAgICAgIHJldHVybiBzLndyaXRlSWQgPT09IHdyaXRlSWQ7XG4gICAgfSk7XG4gICAgYXNzZXJ0KGlkeCA+PSAwLCAncmVtb3ZlV3JpdGUgY2FsbGVkIHdpdGggbm9uZXhpc3RlbnQgd3JpdGVJZC4nKTtcbiAgICBjb25zdCB3cml0ZVRvUmVtb3ZlID0gd3JpdGVUcmVlLmFsbFdyaXRlc1tpZHhdO1xuICAgIHdyaXRlVHJlZS5hbGxXcml0ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgbGV0IHJlbW92ZWRXcml0ZVdhc1Zpc2libGUgPSB3cml0ZVRvUmVtb3ZlLnZpc2libGU7XG4gICAgbGV0IHJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzID0gZmFsc2U7XG4gICAgbGV0IGkgPSB3cml0ZVRyZWUuYWxsV3JpdGVzLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHJlbW92ZWRXcml0ZVdhc1Zpc2libGUgJiYgaSA+PSAwKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRXcml0ZSA9IHdyaXRlVHJlZS5hbGxXcml0ZXNbaV07XG4gICAgICAgIGlmIChjdXJyZW50V3JpdGUudmlzaWJsZSkge1xuICAgICAgICAgICAgaWYgKGkgPj0gaWR4ICYmXG4gICAgICAgICAgICAgICAgd3JpdGVUcmVlUmVjb3JkQ29udGFpbnNQYXRoXyhjdXJyZW50V3JpdGUsIHdyaXRlVG9SZW1vdmUucGF0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVtb3ZlZCB3cml0ZSB3YXMgY29tcGxldGVseSBzaGFkb3dlZCBieSBhIHN1YnNlcXVlbnQgd3JpdGUuXG4gICAgICAgICAgICAgICAgcmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF0aENvbnRhaW5zKHdyaXRlVG9SZW1vdmUucGF0aCwgY3VycmVudFdyaXRlLnBhdGgpKSB7XG4gICAgICAgICAgICAgICAgLy8gRWl0aGVyIHdlJ3JlIGNvdmVyaW5nIHNvbWUgd3JpdGVzIG9yIHRoZXkncmUgY292ZXJpbmcgcGFydCBvZiB1cyAoZGVwZW5kaW5nIG9uIHdoaWNoIGNhbWUgZmlyc3QpLlxuICAgICAgICAgICAgICAgIHJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpLS07XG4gICAgfVxuICAgIGlmICghcmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzKSB7XG4gICAgICAgIC8vIFRoZXJlJ3Mgc29tZSBzaGFkb3dpbmcgZ29pbmcgb24uIEp1c3QgcmVidWlsZCB0aGUgdmlzaWJsZSB3cml0ZXMgZnJvbSBzY3JhdGNoLlxuICAgICAgICB3cml0ZVRyZWVSZXNldFRyZWVfKHdyaXRlVHJlZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhlcmUncyBubyBzaGFkb3dpbmcuICBXZSBjYW4gc2FmZWx5IGp1c3QgcmVtb3ZlIHRoZSB3cml0ZShzKSBmcm9tIHZpc2libGVXcml0ZXMuXG4gICAgICAgIGlmICh3cml0ZVRvUmVtb3ZlLnNuYXApIHtcbiAgICAgICAgICAgIHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzID0gY29tcG91bmRXcml0ZVJlbW92ZVdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCB3cml0ZVRvUmVtb3ZlLnBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB3cml0ZVRvUmVtb3ZlLmNoaWxkcmVuO1xuICAgICAgICAgICAgZWFjaChjaGlsZHJlbiwgKGNoaWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzID0gY29tcG91bmRXcml0ZVJlbW92ZVdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoQ2hpbGQod3JpdGVUb1JlbW92ZS5wYXRoLCBjaGlsZE5hbWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHdyaXRlVHJlZVJlY29yZENvbnRhaW5zUGF0aF8od3JpdGVSZWNvcmQsIHBhdGgpIHtcbiAgICBpZiAod3JpdGVSZWNvcmQuc25hcCkge1xuICAgICAgICByZXR1cm4gcGF0aENvbnRhaW5zKHdyaXRlUmVjb3JkLnBhdGgsIHBhdGgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZE5hbWUgaW4gd3JpdGVSZWNvcmQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmICh3cml0ZVJlY29yZC5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShjaGlsZE5hbWUpICYmXG4gICAgICAgICAgICAgICAgcGF0aENvbnRhaW5zKHBhdGhDaGlsZCh3cml0ZVJlY29yZC5wYXRoLCBjaGlsZE5hbWUpLCBwYXRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFJlLWxheWVyIHRoZSB3cml0ZXMgYW5kIG1lcmdlcyBpbnRvIGEgdHJlZSBzbyB3ZSBjYW4gZWZmaWNpZW50bHkgY2FsY3VsYXRlIGV2ZW50IHNuYXBzaG90c1xuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVSZXNldFRyZWVfKHdyaXRlVHJlZSkge1xuICAgIHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzID0gd3JpdGVUcmVlTGF5ZXJUcmVlXyh3cml0ZVRyZWUuYWxsV3JpdGVzLCB3cml0ZVRyZWVEZWZhdWx0RmlsdGVyXywgbmV3RW1wdHlQYXRoKCkpO1xuICAgIGlmICh3cml0ZVRyZWUuYWxsV3JpdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd3JpdGVUcmVlLmxhc3RXcml0ZUlkID1cbiAgICAgICAgICAgIHdyaXRlVHJlZS5hbGxXcml0ZXNbd3JpdGVUcmVlLmFsbFdyaXRlcy5sZW5ndGggLSAxXS53cml0ZUlkO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd3JpdGVUcmVlLmxhc3RXcml0ZUlkID0gLTE7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgZGVmYXVsdCBmaWx0ZXIgdXNlZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUgdHJlZS4gS2VlcCBldmVyeXRoaW5nIHRoYXQncyB2aXNpYmxlLlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVEZWZhdWx0RmlsdGVyXyh3cml0ZSkge1xuICAgIHJldHVybiB3cml0ZS52aXNpYmxlO1xufVxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kLiBHaXZlbiBhbiBhcnJheSBvZiBXcml0ZVJlY29yZHMsIGEgZmlsdGVyIGZvciB3aGljaCBvbmVzIHRvIGluY2x1ZGUsIGFuZCBhIHBhdGgsIGNvbnN0cnVjdCB0aGUgdHJlZSBvZlxuICogZXZlbnQgZGF0YSBhdCB0aGF0IHBhdGguXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZUxheWVyVHJlZV8od3JpdGVzLCBmaWx0ZXIsIHRyZWVSb290KSB7XG4gICAgbGV0IGNvbXBvdW5kV3JpdGUgPSBDb21wb3VuZFdyaXRlLmVtcHR5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cml0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3Qgd3JpdGUgPSB3cml0ZXNbaV07XG4gICAgICAgIC8vIFRoZW9yeSwgYSBsYXRlciBzZXQgd2lsbCBlaXRoZXI6XG4gICAgICAgIC8vIGEpIGFib3J0IGEgcmVsZXZhbnQgdHJhbnNhY3Rpb24sIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgZXhjbHVkaW5nIGl0IGZyb20gY2FsY3VsYXRpbmcgdGhhdCB0cmFuc2FjdGlvblxuICAgICAgICAvLyBiKSBub3QgYmUgcmVsZXZhbnQgdG8gYSB0cmFuc2FjdGlvbiAoc2VwYXJhdGUgYnJhbmNoKSwgc28gYWdhaW4gd2lsbCBub3QgYWZmZWN0IHRoZSBkYXRhIGZvciB0aGF0IHRyYW5zYWN0aW9uXG4gICAgICAgIGlmIChmaWx0ZXIod3JpdGUpKSB7XG4gICAgICAgICAgICBjb25zdCB3cml0ZVBhdGggPSB3cml0ZS5wYXRoO1xuICAgICAgICAgICAgbGV0IHJlbGF0aXZlUGF0aDtcbiAgICAgICAgICAgIGlmICh3cml0ZS5zbmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGhDb250YWlucyh0cmVlUm9vdCwgd3JpdGVQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGggPSBuZXdSZWxhdGl2ZVBhdGgodHJlZVJvb3QsIHdyaXRlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlQWRkV3JpdGUoY29tcG91bmRXcml0ZSwgcmVsYXRpdmVQYXRoLCB3cml0ZS5zbmFwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGF0aENvbnRhaW5zKHdyaXRlUGF0aCwgdHJlZVJvb3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aCA9IG5ld1JlbGF0aXZlUGF0aCh3cml0ZVBhdGgsIHRyZWVSb290KTtcbiAgICAgICAgICAgICAgICAgICAgY29tcG91bmRXcml0ZSA9IGNvbXBvdW5kV3JpdGVBZGRXcml0ZShjb21wb3VuZFdyaXRlLCBuZXdFbXB0eVBhdGgoKSwgd3JpdGUuc25hcC5nZXRDaGlsZChyZWxhdGl2ZVBhdGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh3cml0ZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGlmIChwYXRoQ29udGFpbnModHJlZVJvb3QsIHdyaXRlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gbmV3UmVsYXRpdmVQYXRoKHRyZWVSb290LCB3cml0ZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICBjb21wb3VuZFdyaXRlID0gY29tcG91bmRXcml0ZUFkZFdyaXRlcyhjb21wb3VuZFdyaXRlLCByZWxhdGl2ZVBhdGgsIHdyaXRlLmNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGF0aENvbnRhaW5zKHdyaXRlUGF0aCwgdHJlZVJvb3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aCA9IG5ld1JlbGF0aXZlUGF0aCh3cml0ZVBhdGgsIHRyZWVSb290KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHJlbGF0aXZlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlQWRkV3JpdGVzKGNvbXBvdW5kV3JpdGUsIG5ld0VtcHR5UGF0aCgpLCB3cml0ZS5jaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNhZmVHZXQod3JpdGUuY2hpbGRyZW4sIHBhdGhHZXRGcm9udChyZWxhdGl2ZVBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGV4aXN0cyBhIGNoaWxkIGluIHRoaXMgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIHJvb3QgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZXBOb2RlID0gY2hpbGQuZ2V0Q2hpbGQocGF0aFBvcEZyb250KHJlbGF0aXZlUGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlQWRkV3JpdGUoY29tcG91bmRXcml0ZSwgbmV3RW1wdHlQYXRoKCksIGRlZXBOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGFzc2VydGlvbkVycm9yKCdXcml0ZVJlY29yZCBzaG91bGQgaGF2ZSAuc25hcCBvciAuY2hpbGRyZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29tcG91bmRXcml0ZTtcbn1cbi8qKlxuICogR2l2ZW4gb3B0aW9uYWwsIHVuZGVybHlpbmcgc2VydmVyIGRhdGEsIGFuZCBhbiBvcHRpb25hbCBzZXQgb2YgY29uc3RyYWludHMgKGV4Y2x1ZGUgc29tZSBzZXRzLCBpbmNsdWRlIGhpZGRlblxuICogd3JpdGVzKSwgYXR0ZW1wdCB0byBjYWxjdWxhdGUgYSBjb21wbGV0ZSBzbmFwc2hvdCBmb3IgdGhlIGdpdmVuIHBhdGhcbiAqXG4gKiBAcGFyYW0gd3JpdGVJZHNUb0V4Y2x1ZGUgLSBBbiBvcHRpb25hbCBzZXQgdG8gYmUgZXhjbHVkZWRcbiAqIEBwYXJhbSBpbmNsdWRlSGlkZGVuV3JpdGVzIC0gRGVmYXVsdHMgdG8gZmFsc2UsIHdoZXRoZXIgb3Igbm90IHRvIGxheWVyIG9uIHdyaXRlcyB3aXRoIHZpc2libGUgc2V0IHRvIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUod3JpdGVUcmVlLCB0cmVlUGF0aCwgY29tcGxldGVTZXJ2ZXJDYWNoZSwgd3JpdGVJZHNUb0V4Y2x1ZGUsIGluY2x1ZGVIaWRkZW5Xcml0ZXMpIHtcbiAgICBpZiAoIXdyaXRlSWRzVG9FeGNsdWRlICYmICFpbmNsdWRlSGlkZGVuV3JpdGVzKSB7XG4gICAgICAgIGNvbnN0IHNoYWRvd2luZ05vZGUgPSBjb21wb3VuZFdyaXRlR2V0Q29tcGxldGVOb2RlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCB0cmVlUGF0aCk7XG4gICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFkb3dpbmdOb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3ViTWVyZ2UgPSBjb21wb3VuZFdyaXRlQ2hpbGRDb21wb3VuZFdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCB0cmVlUGF0aCk7XG4gICAgICAgICAgICBpZiAoY29tcG91bmRXcml0ZUlzRW1wdHkoc3ViTWVyZ2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlU2VydmVyQ2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb21wbGV0ZVNlcnZlckNhY2hlID09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAhY29tcG91bmRXcml0ZUhhc0NvbXBsZXRlV3JpdGUoc3ViTWVyZ2UsIG5ld0VtcHR5UGF0aCgpKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHdvdWxkbid0IGhhdmUgYSBjb21wbGV0ZSBzbmFwc2hvdCwgc2luY2UgdGhlcmUncyBubyB1bmRlcmx5aW5nIGRhdGEgYW5kIG5vIGNvbXBsZXRlIHNoYWRvd1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJlZENhY2hlID0gY29tcGxldGVTZXJ2ZXJDYWNoZSB8fCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG91bmRXcml0ZUFwcGx5KHN1Yk1lcmdlLCBsYXllcmVkQ2FjaGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtZXJnZSA9IGNvbXBvdW5kV3JpdGVDaGlsZENvbXBvdW5kV3JpdGUod3JpdGVUcmVlLnZpc2libGVXcml0ZXMsIHRyZWVQYXRoKTtcbiAgICAgICAgaWYgKCFpbmNsdWRlSGlkZGVuV3JpdGVzICYmIGNvbXBvdW5kV3JpdGVJc0VtcHR5KG1lcmdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRlU2VydmVyQ2FjaGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgc2VydmVyIGNhY2hlIGlzIG51bGwsIGFuZCB3ZSBkb24ndCBoYXZlIGEgY29tcGxldGUgY2FjaGUsIHdlIG5lZWQgdG8gcmV0dXJuIG51bGxcbiAgICAgICAgICAgIGlmICghaW5jbHVkZUhpZGRlbldyaXRlcyAmJlxuICAgICAgICAgICAgICAgIGNvbXBsZXRlU2VydmVyQ2FjaGUgPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgICFjb21wb3VuZFdyaXRlSGFzQ29tcGxldGVXcml0ZShtZXJnZSwgbmV3RW1wdHlQYXRoKCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBmdW5jdGlvbiAod3JpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgod3JpdGUudmlzaWJsZSB8fCBpbmNsdWRlSGlkZGVuV3JpdGVzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCF3cml0ZUlkc1RvRXhjbHVkZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICF+d3JpdGVJZHNUb0V4Y2x1ZGUuaW5kZXhPZih3cml0ZS53cml0ZUlkKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChwYXRoQ29udGFpbnMod3JpdGUucGF0aCwgdHJlZVBhdGgpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aENvbnRhaW5zKHRyZWVQYXRoLCB3cml0ZS5wYXRoKSkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VBdFBhdGggPSB3cml0ZVRyZWVMYXllclRyZWVfKHdyaXRlVHJlZS5hbGxXcml0ZXMsIGZpbHRlciwgdHJlZVBhdGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyZWRDYWNoZSA9IGNvbXBsZXRlU2VydmVyQ2FjaGUgfHwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBvdW5kV3JpdGVBcHBseShtZXJnZUF0UGF0aCwgbGF5ZXJlZENhY2hlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogV2l0aCBvcHRpb25hbCwgdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSwgYXR0ZW1wdCB0byByZXR1cm4gYSBjaGlsZHJlbiBub2RlIG9mIGNoaWxkcmVuIHRoYXQgd2UgaGF2ZSBjb21wbGV0ZSBkYXRhIGZvci5cbiAqIFVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmlld3MsIHRvIHByZS1maWxsIHRoZWlyIGNvbXBsZXRlIGV2ZW50IGNoaWxkcmVuIHNuYXBzaG90LlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVDYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKHdyaXRlVHJlZSwgdHJlZVBhdGgsIGNvbXBsZXRlU2VydmVyQ2hpbGRyZW4pIHtcbiAgICBsZXQgY29tcGxldGVDaGlsZHJlbiA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgIGNvbnN0IHRvcExldmVsU2V0ID0gY29tcG91bmRXcml0ZUdldENvbXBsZXRlTm9kZSh3cml0ZVRyZWUudmlzaWJsZVdyaXRlcywgdHJlZVBhdGgpO1xuICAgIGlmICh0b3BMZXZlbFNldCkge1xuICAgICAgICBpZiAoIXRvcExldmVsU2V0LmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgLy8gd2UncmUgc2hhZG93aW5nIGV2ZXJ5dGhpbmcuIFJldHVybiB0aGUgY2hpbGRyZW4uXG4gICAgICAgICAgICB0b3BMZXZlbFNldC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChjaGlsZE5hbWUsIGNoaWxkU25hcCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSwgY2hpbGRTbmFwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wbGV0ZUNoaWxkcmVuO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb21wbGV0ZVNlcnZlckNoaWxkcmVuKSB7XG4gICAgICAgIC8vIExheWVyIGFueSBjaGlsZHJlbiB3ZSBoYXZlIG9uIHRvcCBvZiB0aGlzXG4gICAgICAgIC8vIFdlIGtub3cgd2UgZG9uJ3QgaGF2ZSBhIHRvcC1sZXZlbCBzZXQsIHNvIGp1c3QgZW51bWVyYXRlIGV4aXN0aW5nIGNoaWxkcmVuXG4gICAgICAgIGNvbnN0IG1lcmdlID0gY29tcG91bmRXcml0ZUNoaWxkQ29tcG91bmRXcml0ZSh3cml0ZVRyZWUudmlzaWJsZVdyaXRlcywgdHJlZVBhdGgpO1xuICAgICAgICBjb21wbGV0ZVNlcnZlckNoaWxkcmVuLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgKGNoaWxkTmFtZSwgY2hpbGROb2RlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY29tcG91bmRXcml0ZUFwcGx5KGNvbXBvdW5kV3JpdGVDaGlsZENvbXBvdW5kV3JpdGUobWVyZ2UsIG5ldyBQYXRoKGNoaWxkTmFtZSkpLCBjaGlsZE5vZGUpO1xuICAgICAgICAgICAgY29tcGxldGVDaGlsZHJlbiA9IGNvbXBsZXRlQ2hpbGRyZW4udXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lLCBub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkZCBhbnkgY29tcGxldGUgY2hpbGRyZW4gd2UgaGF2ZSBmcm9tIHRoZSBzZXRcbiAgICAgICAgY29tcG91bmRXcml0ZUdldENvbXBsZXRlQ2hpbGRyZW4obWVyZ2UpLmZvckVhY2gobmFtZWROb2RlID0+IHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5hbWVkTm9kZS5uYW1lLCBuYW1lZE5vZGUubm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29tcGxldGVDaGlsZHJlbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFdlIGRvbid0IGhhdmUgYW55dGhpbmcgdG8gbGF5ZXIgb24gdG9wIG9mLiBMYXllciBvbiBhbnkgY2hpbGRyZW4gd2UgaGF2ZVxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgY2FuIHJldHVybiBhbiBlbXB0eSBzbmFwIGlmIHdlIGhhdmUgYSBkZWZpbmVkIGRlbGV0ZVxuICAgICAgICBjb25zdCBtZXJnZSA9IGNvbXBvdW5kV3JpdGVDaGlsZENvbXBvdW5kV3JpdGUod3JpdGVUcmVlLnZpc2libGVXcml0ZXMsIHRyZWVQYXRoKTtcbiAgICAgICAgY29tcG91bmRXcml0ZUdldENvbXBsZXRlQ2hpbGRyZW4obWVyZ2UpLmZvckVhY2gobmFtZWROb2RlID0+IHtcbiAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5hbWVkTm9kZS5uYW1lLCBuYW1lZE5vZGUubm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29tcGxldGVDaGlsZHJlbjtcbiAgICB9XG59XG4vKipcbiAqIEdpdmVuIHRoYXQgdGhlIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgaGFzIHVwZGF0ZWQsIGRldGVybWluZSB3aGF0LCBpZiBhbnl0aGluZywgbmVlZHMgdG8gYmVcbiAqIGFwcGxpZWQgdG8gdGhlIGV2ZW50IGNhY2hlLlxuICpcbiAqIFBvc3NpYmlsaXRpZXM6XG4gKlxuICogMS4gTm8gd3JpdGVzIGFyZSBzaGFkb3dpbmcuIEV2ZW50cyBzaG91bGQgYmUgcmFpc2VkLCB0aGUgc25hcCB0byBiZSBhcHBsaWVkIGNvbWVzIGZyb20gdGhlIHNlcnZlciBkYXRhXG4gKlxuICogMi4gU29tZSB3cml0ZSBpcyBjb21wbGV0ZWx5IHNoYWRvd2luZy4gTm8gZXZlbnRzIHRvIGJlIHJhaXNlZFxuICpcbiAqIDMuIElzIHBhcnRpYWxseSBzaGFkb3dlZC4gRXZlbnRzXG4gKlxuICogRWl0aGVyIGV4aXN0aW5nRXZlbnRTbmFwIG9yIGV4aXN0aW5nU2VydmVyU25hcCBtdXN0IGV4aXN0XG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZUNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUod3JpdGVUcmVlLCB0cmVlUGF0aCwgY2hpbGRQYXRoLCBleGlzdGluZ0V2ZW50U25hcCwgZXhpc3RpbmdTZXJ2ZXJTbmFwKSB7XG4gICAgYXNzZXJ0KGV4aXN0aW5nRXZlbnRTbmFwIHx8IGV4aXN0aW5nU2VydmVyU25hcCwgJ0VpdGhlciBleGlzdGluZ0V2ZW50U25hcCBvciBleGlzdGluZ1NlcnZlclNuYXAgbXVzdCBleGlzdCcpO1xuICAgIGNvbnN0IHBhdGggPSBwYXRoQ2hpbGQodHJlZVBhdGgsIGNoaWxkUGF0aCk7XG4gICAgaWYgKGNvbXBvdW5kV3JpdGVIYXNDb21wbGV0ZVdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoKSkge1xuICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGNhbiBwcm9iYWJseSBndWFyYW50ZWUgdGhhdCB3ZSdyZSBpbiBjYXNlIDIsIG1lYW5pbmcgbm8gZXZlbnRzXG4gICAgICAgIC8vIE1heSBuZWVkIHRvIGNoZWNrIHZpc2liaWxpdHkgd2hpbGUgZG9pbmcgdGhlIGZpbmRSb290TW9zdFZhbHVlQW5kUGF0aCBjYWxsXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gTm8gY29tcGxldGUgc2hhZG93aW5nLiBXZSdyZSBlaXRoZXIgcGFydGlhbGx5IHNoYWRvd2luZyBvciBub3Qgc2hhZG93aW5nIGF0IGFsbC5cbiAgICAgICAgY29uc3QgY2hpbGRNZXJnZSA9IGNvbXBvdW5kV3JpdGVDaGlsZENvbXBvdW5kV3JpdGUod3JpdGVUcmVlLnZpc2libGVXcml0ZXMsIHBhdGgpO1xuICAgICAgICBpZiAoY29tcG91bmRXcml0ZUlzRW1wdHkoY2hpbGRNZXJnZSkpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIG5vdCBzaGFkb3dpbmcgYXQgYWxsLiBDYXNlIDFcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ1NlcnZlclNuYXAuZ2V0Q2hpbGQoY2hpbGRQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY291bGQgYmUgbW9yZSBlZmZpY2llbnQgaWYgdGhlIHNlcnZlck5vZGUgKyB1cGRhdGVzIGRvZXNuJ3QgY2hhbmdlIHRoZSBldmVudFNuYXBcbiAgICAgICAgICAgIC8vIEhvd2V2ZXIgdGhpcyBpcyB0cmlja3kgdG8gZmluZCBvdXQsIHNpbmNlIHVzZXIgdXBkYXRlcyBkb24ndCBuZWNlc3NhcnkgY2hhbmdlIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgIC8vIHNuYXAsIGUuZy4gcHJpb3JpdHkgdXBkYXRlcyBvbiBlbXB0eSBub2Rlcywgb3IgZGVlcCBkZWxldGVzLiBBbm90aGVyIHNwZWNpYWwgY2FzZSBpcyBpZiB0aGUgc2VydmVyXG4gICAgICAgICAgICAvLyBhZGRzIG5vZGVzLCBidXQgZG9lc24ndCBjaGFuZ2UgYW55IGV4aXN0aW5nIHdyaXRlcy4gSXQgaXMgdGhlcmVmb3JlIG5vdCBlbm91Z2ggdG9cbiAgICAgICAgICAgIC8vIG9ubHkgY2hlY2sgaWYgdGhlIHVwZGF0ZXMgY2hhbmdlIHRoZSBzZXJ2ZXJOb2RlLlxuICAgICAgICAgICAgLy8gTWF5YmUgY2hlY2sgaWYgdGhlIG1lcmdlIHRyZWUgY29udGFpbnMgdGhlc2Ugc3BlY2lhbCBjYXNlcyBhbmQgb25seSBkbyBhIGZ1bGwgb3ZlcndyaXRlIGluIHRoYXQgY2FzZT9cbiAgICAgICAgICAgIHJldHVybiBjb21wb3VuZFdyaXRlQXBwbHkoY2hpbGRNZXJnZSwgZXhpc3RpbmdTZXJ2ZXJTbmFwLmdldENoaWxkKGNoaWxkUGF0aCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgY29tcGxldGUgY2hpbGQgZm9yIGEgZ2l2ZW4gc2VydmVyIHNuYXAgYWZ0ZXIgYXBwbHlpbmcgYWxsIHVzZXIgd3JpdGVzIG9yIG51bGwgaWYgdGhlcmUgaXMgbm9cbiAqIGNvbXBsZXRlIGNoaWxkIGZvciB0aGlzIENoaWxkS2V5LlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVDYWxjQ29tcGxldGVDaGlsZCh3cml0ZVRyZWUsIHRyZWVQYXRoLCBjaGlsZEtleSwgZXhpc3RpbmdTZXJ2ZXJTbmFwKSB7XG4gICAgY29uc3QgcGF0aCA9IHBhdGhDaGlsZCh0cmVlUGF0aCwgY2hpbGRLZXkpO1xuICAgIGNvbnN0IHNoYWRvd2luZ05vZGUgPSBjb21wb3VuZFdyaXRlR2V0Q29tcGxldGVOb2RlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoKTtcbiAgICBpZiAoc2hhZG93aW5nTm9kZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzaGFkb3dpbmdOb2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGV4aXN0aW5nU2VydmVyU25hcC5pc0NvbXBsZXRlRm9yQ2hpbGQoY2hpbGRLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZE1lcmdlID0gY29tcG91bmRXcml0ZUNoaWxkQ29tcG91bmRXcml0ZSh3cml0ZVRyZWUudmlzaWJsZVdyaXRlcywgcGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gY29tcG91bmRXcml0ZUFwcGx5KGNoaWxkTWVyZ2UsIGV4aXN0aW5nU2VydmVyU25hcC5nZXROb2RlKCkuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgbm9kZSBpZiB0aGVyZSBpcyBhIGNvbXBsZXRlIG92ZXJ3cml0ZSBmb3IgdGhpcyBwYXRoLiBNb3JlIHNwZWNpZmljYWxseSwgaWYgdGhlcmUgaXMgYSB3cml0ZSBhdFxuICogYSBoaWdoZXIgcGF0aCwgdGhpcyB3aWxsIHJldHVybiB0aGUgY2hpbGQgb2YgdGhhdCB3cml0ZSByZWxhdGl2ZSB0byB0aGUgd3JpdGUgYW5kIHRoaXMgcGF0aC5cbiAqIFJldHVybnMgbnVsbCBpZiB0aGVyZSBpcyBubyB3cml0ZSBhdCB0aGlzIHBhdGguXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZVNoYWRvd2luZ1dyaXRlKHdyaXRlVHJlZSwgcGF0aCkge1xuICAgIHJldHVybiBjb21wb3VuZFdyaXRlR2V0Q29tcGxldGVOb2RlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCBwYXRoKTtcbn1cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aGVuIHByb2Nlc3NpbmcgY2hpbGQgcmVtb3ZlIGV2ZW50cyBvbiBhIHF1ZXJ5LiBJZiB3ZSBjYW4sIHdlIHB1bGwgaW4gY2hpbGRyZW4gdGhhdCB3ZXJlIG91dHNpZGVcbiAqIHRoZSB3aW5kb3csIGJ1dCBtYXkgbm93IGJlIGluIHRoZSB3aW5kb3cuXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZUNhbGNJbmRleGVkU2xpY2Uod3JpdGVUcmVlLCB0cmVlUGF0aCwgY29tcGxldGVTZXJ2ZXJEYXRhLCBzdGFydFBvc3QsIGNvdW50LCByZXZlcnNlLCBpbmRleCkge1xuICAgIGxldCB0b0l0ZXJhdGU7XG4gICAgY29uc3QgbWVyZ2UgPSBjb21wb3VuZFdyaXRlQ2hpbGRDb21wb3VuZFdyaXRlKHdyaXRlVHJlZS52aXNpYmxlV3JpdGVzLCB0cmVlUGF0aCk7XG4gICAgY29uc3Qgc2hhZG93aW5nTm9kZSA9IGNvbXBvdW5kV3JpdGVHZXRDb21wbGV0ZU5vZGUobWVyZ2UsIG5ld0VtcHR5UGF0aCgpKTtcbiAgICBpZiAoc2hhZG93aW5nTm9kZSAhPSBudWxsKSB7XG4gICAgICAgIHRvSXRlcmF0ZSA9IHNoYWRvd2luZ05vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvbXBsZXRlU2VydmVyRGF0YSAhPSBudWxsKSB7XG4gICAgICAgIHRvSXRlcmF0ZSA9IGNvbXBvdW5kV3JpdGVBcHBseShtZXJnZSwgY29tcGxldGVTZXJ2ZXJEYXRhKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIG5vIGNoaWxkcmVuIHRvIGl0ZXJhdGUgb25cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICB0b0l0ZXJhdGUgPSB0b0l0ZXJhdGUud2l0aEluZGV4KGluZGV4KTtcbiAgICBpZiAoIXRvSXRlcmF0ZS5pc0VtcHR5KCkgJiYgIXRvSXRlcmF0ZS5pc0xlYWZOb2RlKCkpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY21wID0gaW5kZXguZ2V0Q29tcGFyZSgpO1xuICAgICAgICBjb25zdCBpdGVyID0gcmV2ZXJzZVxuICAgICAgICAgICAgPyB0b0l0ZXJhdGUuZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShzdGFydFBvc3QsIGluZGV4KVxuICAgICAgICAgICAgOiB0b0l0ZXJhdGUuZ2V0SXRlcmF0b3JGcm9tKHN0YXJ0UG9zdCwgaW5kZXgpO1xuICAgICAgICBsZXQgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xuICAgICAgICB3aGlsZSAobmV4dCAmJiBub2Rlcy5sZW5ndGggPCBjb3VudCkge1xuICAgICAgICAgICAgaWYgKGNtcChuZXh0LCBzdGFydFBvc3QpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaChuZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBpdGVyLmdldE5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbmV3V3JpdGVUcmVlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGVXcml0ZXM6IENvbXBvdW5kV3JpdGUuZW1wdHkoKSxcbiAgICAgICAgYWxsV3JpdGVzOiBbXSxcbiAgICAgICAgbGFzdFdyaXRlSWQ6IC0xXG4gICAgfTtcbn1cbi8qKlxuICogSWYgcG9zc2libGUsIHJldHVybnMgYSBjb21wbGV0ZSBldmVudCBjYWNoZSwgdXNpbmcgdGhlIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgaWYgcG9zc2libGUuIEluIGFkZGl0aW9uLCBjYW4gYmUgdXNlZFxuICogdG8gZ2V0IGEgY2FjaGUgdGhhdCBpbmNsdWRlcyBoaWRkZW4gd3JpdGVzLCBhbmQgZXhjbHVkZXMgYXJiaXRyYXJ5IHdyaXRlcy4gTm90ZSB0aGF0IGN1c3RvbWl6aW5nIHRoZSByZXR1cm5lZCBub2RlXG4gKiBjYW4gbGVhZCB0byBhIG1vcmUgZXhwZW5zaXZlIGNhbGN1bGF0aW9uLlxuICpcbiAqIEBwYXJhbSB3cml0ZUlkc1RvRXhjbHVkZSAtIE9wdGlvbmFsIHdyaXRlcyB0byBleGNsdWRlLlxuICogQHBhcmFtIGluY2x1ZGVIaWRkZW5Xcml0ZXMgLSBEZWZhdWx0cyB0byBmYWxzZSwgd2hldGhlciBvciBub3QgdG8gbGF5ZXIgb24gd3JpdGVzIHdpdGggdmlzaWJsZSBzZXQgdG8gZmFsc2VcbiAqL1xuZnVuY3Rpb24gd3JpdGVUcmVlUmVmQ2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh3cml0ZVRyZWVSZWYsIGNvbXBsZXRlU2VydmVyQ2FjaGUsIHdyaXRlSWRzVG9FeGNsdWRlLCBpbmNsdWRlSGlkZGVuV3JpdGVzKSB7XG4gICAgcmV0dXJuIHdyaXRlVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUod3JpdGVUcmVlUmVmLndyaXRlVHJlZSwgd3JpdGVUcmVlUmVmLnRyZWVQYXRoLCBjb21wbGV0ZVNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlbldyaXRlcyk7XG59XG4vKipcbiAqIElmIHBvc3NpYmxlLCByZXR1cm5zIGEgY2hpbGRyZW4gbm9kZSBjb250YWluaW5nIGFsbCBvZiB0aGUgY29tcGxldGUgY2hpbGRyZW4gd2UgaGF2ZSBkYXRhIGZvci4gVGhlIHJldHVybmVkIGRhdGEgaXMgYVxuICogbWl4IG9mIHRoZSBnaXZlbiBzZXJ2ZXIgZGF0YSBhbmQgd3JpdGUgZGF0YS5cbiAqXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZVJlZkNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4od3JpdGVUcmVlUmVmLCBjb21wbGV0ZVNlcnZlckNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHdyaXRlVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4od3JpdGVUcmVlUmVmLndyaXRlVHJlZSwgd3JpdGVUcmVlUmVmLnRyZWVQYXRoLCBjb21wbGV0ZVNlcnZlckNoaWxkcmVuKTtcbn1cbi8qKlxuICogR2l2ZW4gdGhhdCBlaXRoZXIgdGhlIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgaGFzIHVwZGF0ZWQgb3IgdGhlIG91dHN0YW5kaW5nIHdyaXRlcyBoYXZlIHVwZGF0ZWQsIGRldGVybWluZSB3aGF0LFxuICogaWYgYW55dGhpbmcsIG5lZWRzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGV2ZW50IGNhY2hlLlxuICpcbiAqIFBvc3NpYmlsaXRpZXM6XG4gKlxuICogMS4gTm8gd3JpdGVzIGFyZSBzaGFkb3dpbmcuIEV2ZW50cyBzaG91bGQgYmUgcmFpc2VkLCB0aGUgc25hcCB0byBiZSBhcHBsaWVkIGNvbWVzIGZyb20gdGhlIHNlcnZlciBkYXRhXG4gKlxuICogMi4gU29tZSB3cml0ZSBpcyBjb21wbGV0ZWx5IHNoYWRvd2luZy4gTm8gZXZlbnRzIHRvIGJlIHJhaXNlZFxuICpcbiAqIDMuIElzIHBhcnRpYWxseSBzaGFkb3dlZC4gRXZlbnRzIHNob3VsZCBiZSByYWlzZWRcbiAqXG4gKiBFaXRoZXIgZXhpc3RpbmdFdmVudFNuYXAgb3IgZXhpc3RpbmdTZXJ2ZXJTbmFwIG11c3QgZXhpc3QsIHRoaXMgaXMgdmFsaWRhdGVkIHZpYSBhbiBhc3NlcnRcbiAqXG4gKlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVSZWZDYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlKHdyaXRlVHJlZVJlZiwgcGF0aCwgZXhpc3RpbmdFdmVudFNuYXAsIGV4aXN0aW5nU2VydmVyU25hcCkge1xuICAgIHJldHVybiB3cml0ZVRyZWVDYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlKHdyaXRlVHJlZVJlZi53cml0ZVRyZWUsIHdyaXRlVHJlZVJlZi50cmVlUGF0aCwgcGF0aCwgZXhpc3RpbmdFdmVudFNuYXAsIGV4aXN0aW5nU2VydmVyU25hcCk7XG59XG4vKipcbiAqIFJldHVybnMgYSBub2RlIGlmIHRoZXJlIGlzIGEgY29tcGxldGUgb3ZlcndyaXRlIGZvciB0aGlzIHBhdGguIE1vcmUgc3BlY2lmaWNhbGx5LCBpZiB0aGVyZSBpcyBhIHdyaXRlIGF0XG4gKiBhIGhpZ2hlciBwYXRoLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBjaGlsZCBvZiB0aGF0IHdyaXRlIHJlbGF0aXZlIHRvIHRoZSB3cml0ZSBhbmQgdGhpcyBwYXRoLlxuICogUmV0dXJucyBudWxsIGlmIHRoZXJlIGlzIG5vIHdyaXRlIGF0IHRoaXMgcGF0aC5cbiAqXG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZVJlZlNoYWRvd2luZ1dyaXRlKHdyaXRlVHJlZVJlZiwgcGF0aCkge1xuICAgIHJldHVybiB3cml0ZVRyZWVTaGFkb3dpbmdXcml0ZSh3cml0ZVRyZWVSZWYud3JpdGVUcmVlLCBwYXRoQ2hpbGQod3JpdGVUcmVlUmVmLnRyZWVQYXRoLCBwYXRoKSk7XG59XG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgd2hlbiBwcm9jZXNzaW5nIGNoaWxkIHJlbW92ZSBldmVudHMgb24gYSBxdWVyeS4gSWYgd2UgY2FuLCB3ZSBwdWxsIGluIGNoaWxkcmVuIHRoYXQgd2VyZSBvdXRzaWRlXG4gKiB0aGUgd2luZG93LCBidXQgbWF5IG5vdyBiZSBpbiB0aGUgd2luZG93XG4gKi9cbmZ1bmN0aW9uIHdyaXRlVHJlZVJlZkNhbGNJbmRleGVkU2xpY2Uod3JpdGVUcmVlUmVmLCBjb21wbGV0ZVNlcnZlckRhdGEsIHN0YXJ0UG9zdCwgY291bnQsIHJldmVyc2UsIGluZGV4KSB7XG4gICAgcmV0dXJuIHdyaXRlVHJlZUNhbGNJbmRleGVkU2xpY2Uod3JpdGVUcmVlUmVmLndyaXRlVHJlZSwgd3JpdGVUcmVlUmVmLnRyZWVQYXRoLCBjb21wbGV0ZVNlcnZlckRhdGEsIHN0YXJ0UG9zdCwgY291bnQsIHJldmVyc2UsIGluZGV4KTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGNvbXBsZXRlIGNoaWxkIGZvciBhIGdpdmVuIHNlcnZlciBzbmFwIGFmdGVyIGFwcGx5aW5nIGFsbCB1c2VyIHdyaXRlcyBvciBudWxsIGlmIHRoZXJlIGlzIG5vXG4gKiBjb21wbGV0ZSBjaGlsZCBmb3IgdGhpcyBDaGlsZEtleS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVUcmVlUmVmQ2FsY0NvbXBsZXRlQ2hpbGQod3JpdGVUcmVlUmVmLCBjaGlsZEtleSwgZXhpc3RpbmdTZXJ2ZXJDYWNoZSkge1xuICAgIHJldHVybiB3cml0ZVRyZWVDYWxjQ29tcGxldGVDaGlsZCh3cml0ZVRyZWVSZWYud3JpdGVUcmVlLCB3cml0ZVRyZWVSZWYudHJlZVBhdGgsIGNoaWxkS2V5LCBleGlzdGluZ1NlcnZlckNhY2hlKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgV3JpdGVUcmVlUmVmIGZvciBhIGNoaWxkLlxuICovXG5mdW5jdGlvbiB3cml0ZVRyZWVSZWZDaGlsZCh3cml0ZVRyZWVSZWYsIGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBuZXdXcml0ZVRyZWVSZWYocGF0aENoaWxkKHdyaXRlVHJlZVJlZi50cmVlUGF0aCwgY2hpbGROYW1lKSwgd3JpdGVUcmVlUmVmLndyaXRlVHJlZSk7XG59XG5mdW5jdGlvbiBuZXdXcml0ZVRyZWVSZWYocGF0aCwgd3JpdGVUcmVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHJlZVBhdGg6IHBhdGgsXG4gICAgICAgIHdyaXRlVHJlZVxuICAgIH07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBDaGlsZENoYW5nZUFjY3VtdWxhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHRyYWNrQ2hpbGRDaGFuZ2UoY2hhbmdlKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGFuZ2UudHlwZTtcbiAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBjaGFuZ2UuY2hpbGROYW1lO1xuICAgICAgICBhc3NlcnQodHlwZSA9PT0gXCJjaGlsZF9hZGRlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfQURERUQgKi8gfHxcbiAgICAgICAgICAgIHR5cGUgPT09IFwiY2hpbGRfY2hhbmdlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfQ0hBTkdFRCAqLyB8fFxuICAgICAgICAgICAgdHlwZSA9PT0gXCJjaGlsZF9yZW1vdmVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9SRU1PVkVEICovLCAnT25seSBjaGlsZCBjaGFuZ2VzIHN1cHBvcnRlZCBmb3IgdHJhY2tpbmcnKTtcbiAgICAgICAgYXNzZXJ0KGNoaWxkS2V5ICE9PSAnLnByaW9yaXR5JywgJ09ubHkgbm9uLXByaW9yaXR5IGNoaWxkIGNoYW5nZXMgY2FuIGJlIHRyYWNrZWQuJyk7XG4gICAgICAgIGNvbnN0IG9sZENoYW5nZSA9IHRoaXMuY2hhbmdlTWFwLmdldChjaGlsZEtleSk7XG4gICAgICAgIGlmIChvbGRDaGFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZFR5cGUgPSBvbGRDaGFuZ2UudHlwZTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImNoaWxkX2FkZGVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9BRERFRCAqLyAmJlxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT09IFwiY2hpbGRfcmVtb3ZlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfUkVNT1ZFRCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwLnNldChjaGlsZEtleSwgY2hhbmdlQ2hpbGRDaGFuZ2VkKGNoaWxkS2V5LCBjaGFuZ2Uuc25hcHNob3ROb2RlLCBvbGRDaGFuZ2Uuc25hcHNob3ROb2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcImNoaWxkX3JlbW92ZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX1JFTU9WRUQgKi8gJiZcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09PSBcImNoaWxkX2FkZGVkXCIgLyogQ2hhbmdlVHlwZS5DSElMRF9BRERFRCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwLmRlbGV0ZShjaGlsZEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcImNoaWxkX3JlbW92ZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX1JFTU9WRUQgKi8gJiZcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09PSBcImNoaWxkX2NoYW5nZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX0NIQU5HRUQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU1hcC5zZXQoY2hpbGRLZXksIGNoYW5nZUNoaWxkUmVtb3ZlZChjaGlsZEtleSwgb2xkQ2hhbmdlLm9sZFNuYXApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiY2hpbGRfY2hhbmdlZFwiIC8qIENoYW5nZVR5cGUuQ0hJTERfQ0hBTkdFRCAqLyAmJlxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT09IFwiY2hpbGRfYWRkZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX0FEREVEICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VNYXAuc2V0KGNoaWxkS2V5LCBjaGFuZ2VDaGlsZEFkZGVkKGNoaWxkS2V5LCBjaGFuZ2Uuc25hcHNob3ROb2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSBcImNoaWxkX2NoYW5nZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX0NIQU5HRUQgKi8gJiZcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09PSBcImNoaWxkX2NoYW5nZWRcIiAvKiBDaGFuZ2VUeXBlLkNISUxEX0NIQU5HRUQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU1hcC5zZXQoY2hpbGRLZXksIGNoYW5nZUNoaWxkQ2hhbmdlZChjaGlsZEtleSwgY2hhbmdlLnNuYXBzaG90Tm9kZSwgb2xkQ2hhbmdlLm9sZFNuYXApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGFzc2VydGlvbkVycm9yKCdJbGxlZ2FsIGNvbWJpbmF0aW9uIG9mIGNoYW5nZXM6ICcgK1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgK1xuICAgICAgICAgICAgICAgICAgICAnIG9jY3VycmVkIGFmdGVyICcgK1xuICAgICAgICAgICAgICAgICAgICBvbGRDaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VNYXAuc2V0KGNoaWxkS2V5LCBjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldENoYW5nZXMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2hhbmdlTWFwLnZhbHVlcygpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIENvbXBsZXRlQ2hpbGRTb3VyY2UgdGhhdCBuZXZlciByZXR1cm5zIGFueSBhZGRpdGlvbmFsIGNoaWxkcmVuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmNsYXNzIE5vQ29tcGxldGVDaGlsZFNvdXJjZV8ge1xuICAgIGdldENvbXBsZXRlQ2hpbGQoY2hpbGRLZXkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldENoaWxkQWZ0ZXJDaGlsZChpbmRleCwgY2hpbGQsIHJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLyoqXG4gKiBTaW5nbGV0b24gaW5zdGFuY2UuXG4gKi9cbmNvbnN0IE5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSA9IG5ldyBOb0NvbXBsZXRlQ2hpbGRTb3VyY2VfKCk7XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIENvbXBsZXRlQ2hpbGRTb3VyY2UgdGhhdCB1c2VzIGEgV3JpdGVUcmVlIGluIGFkZGl0aW9uIHRvIGFueSBvdGhlciBzZXJ2ZXIgZGF0YSBvclxuICogb2xkIGV2ZW50IGNhY2hlcyBhdmFpbGFibGUgdG8gY2FsY3VsYXRlIGNvbXBsZXRlIGNoaWxkcmVuLlxuICovXG5jbGFzcyBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlIHtcbiAgICBjb25zdHJ1Y3Rvcih3cml0ZXNfLCB2aWV3Q2FjaGVfLCBvcHRDb21wbGV0ZVNlcnZlckNhY2hlXyA9IG51bGwpIHtcbiAgICAgICAgdGhpcy53cml0ZXNfID0gd3JpdGVzXztcbiAgICAgICAgdGhpcy52aWV3Q2FjaGVfID0gdmlld0NhY2hlXztcbiAgICAgICAgdGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlXyA9IG9wdENvbXBsZXRlU2VydmVyQ2FjaGVfO1xuICAgIH1cbiAgICBnZXRDb21wbGV0ZUNoaWxkKGNoaWxkS2V5KSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLnZpZXdDYWNoZV8uZXZlbnRDYWNoZTtcbiAgICAgICAgaWYgKG5vZGUuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlck5vZGUgPSB0aGlzLm9wdENvbXBsZXRlU2VydmVyQ2FjaGVfICE9IG51bGxcbiAgICAgICAgICAgICAgICA/IG5ldyBDYWNoZU5vZGUodGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlXywgdHJ1ZSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnZpZXdDYWNoZV8uc2VydmVyQ2FjaGU7XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVUcmVlUmVmQ2FsY0NvbXBsZXRlQ2hpbGQodGhpcy53cml0ZXNfLCBjaGlsZEtleSwgc2VydmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q2hpbGRBZnRlckNoaWxkKGluZGV4LCBjaGlsZCwgcmV2ZXJzZSkge1xuICAgICAgICBjb25zdCBjb21wbGV0ZVNlcnZlckRhdGEgPSB0aGlzLm9wdENvbXBsZXRlU2VydmVyQ2FjaGVfICE9IG51bGxcbiAgICAgICAgICAgID8gdGhpcy5vcHRDb21wbGV0ZVNlcnZlckNhY2hlX1xuICAgICAgICAgICAgOiB2aWV3Q2FjaGVHZXRDb21wbGV0ZVNlcnZlclNuYXAodGhpcy52aWV3Q2FjaGVfKTtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB3cml0ZVRyZWVSZWZDYWxjSW5kZXhlZFNsaWNlKHRoaXMud3JpdGVzXywgY29tcGxldGVTZXJ2ZXJEYXRhLCBjaGlsZCwgMSwgcmV2ZXJzZSwgaW5kZXgpO1xuICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub2Rlc1swXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIG5ld1ZpZXdQcm9jZXNzb3IoZmlsdGVyKSB7XG4gICAgcmV0dXJuIHsgZmlsdGVyIH07XG59XG5mdW5jdGlvbiB2aWV3UHJvY2Vzc29yQXNzZXJ0SW5kZXhlZCh2aWV3UHJvY2Vzc29yLCB2aWV3Q2FjaGUpIHtcbiAgICBhc3NlcnQodmlld0NhY2hlLmV2ZW50Q2FjaGUuZ2V0Tm9kZSgpLmlzSW5kZXhlZCh2aWV3UHJvY2Vzc29yLmZpbHRlci5nZXRJbmRleCgpKSwgJ0V2ZW50IHNuYXAgbm90IGluZGV4ZWQnKTtcbiAgICBhc3NlcnQodmlld0NhY2hlLnNlcnZlckNhY2hlLmdldE5vZGUoKS5pc0luZGV4ZWQodmlld1Byb2Nlc3Nvci5maWx0ZXIuZ2V0SW5kZXgoKSksICdTZXJ2ZXIgc25hcCBub3QgaW5kZXhlZCcpO1xufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3NvckFwcGx5T3BlcmF0aW9uKHZpZXdQcm9jZXNzb3IsIG9sZFZpZXdDYWNoZSwgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSkge1xuICAgIGNvbnN0IGFjY3VtdWxhdG9yID0gbmV3IENoaWxkQ2hhbmdlQWNjdW11bGF0b3IoKTtcbiAgICBsZXQgbmV3Vmlld0NhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlO1xuICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5PVkVSV1JJVEUpIHtcbiAgICAgICAgY29uc3Qgb3ZlcndyaXRlID0gb3BlcmF0aW9uO1xuICAgICAgICBpZiAob3ZlcndyaXRlLnNvdXJjZS5mcm9tVXNlcikge1xuICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdmlld1Byb2Nlc3NvckFwcGx5VXNlck92ZXJ3cml0ZSh2aWV3UHJvY2Vzc29yLCBvbGRWaWV3Q2FjaGUsIG92ZXJ3cml0ZS5wYXRoLCBvdmVyd3JpdGUuc25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzc2VydChvdmVyd3JpdGUuc291cmNlLmZyb21TZXJ2ZXIsICdVbmtub3duIHNvdXJjZS4nKTtcbiAgICAgICAgICAgIC8vIFdlIGZpbHRlciB0aGUgbm9kZSBpZiBpdCdzIGEgdGFnZ2VkIHVwZGF0ZSBvciB0aGUgbm9kZSBoYXMgYmVlbiBwcmV2aW91c2x5IGZpbHRlcmVkICBhbmQgdGhlXG4gICAgICAgICAgICAvLyB1cGRhdGUgaXMgbm90IGF0IHRoZSByb290IGluIHdoaWNoIGNhc2UgaXQgaXMgb2sgKGFuZCBuZWNlc3NhcnkpIHRvIG1hcmsgdGhlIG5vZGUgdW5maWx0ZXJlZFxuICAgICAgICAgICAgLy8gYWdhaW5cbiAgICAgICAgICAgIGZpbHRlclNlcnZlck5vZGUgPVxuICAgICAgICAgICAgICAgIG92ZXJ3cml0ZS5zb3VyY2UudGFnZ2VkIHx8XG4gICAgICAgICAgICAgICAgICAgIChvbGRWaWV3Q2FjaGUuc2VydmVyQ2FjaGUuaXNGaWx0ZXJlZCgpICYmICFwYXRoSXNFbXB0eShvdmVyd3JpdGUucGF0aCkpO1xuICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdmlld1Byb2Nlc3NvckFwcGx5U2VydmVyT3ZlcndyaXRlKHZpZXdQcm9jZXNzb3IsIG9sZFZpZXdDYWNoZSwgb3ZlcndyaXRlLnBhdGgsIG92ZXJ3cml0ZS5zbmFwLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wZXJhdGlvbi50eXBlID09PSBPcGVyYXRpb25UeXBlLk1FUkdFKSB7XG4gICAgICAgIGNvbnN0IG1lcmdlID0gb3BlcmF0aW9uO1xuICAgICAgICBpZiAobWVyZ2Uuc291cmNlLmZyb21Vc2VyKSB7XG4gICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSB2aWV3UHJvY2Vzc29yQXBwbHlVc2VyTWVyZ2Uodmlld1Byb2Nlc3Nvciwgb2xkVmlld0NhY2hlLCBtZXJnZS5wYXRoLCBtZXJnZS5jaGlsZHJlbiwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFzc2VydChtZXJnZS5zb3VyY2UuZnJvbVNlcnZlciwgJ1Vua25vd24gc291cmNlLicpO1xuICAgICAgICAgICAgLy8gV2UgZmlsdGVyIHRoZSBub2RlIGlmIGl0J3MgYSB0YWdnZWQgdXBkYXRlIG9yIHRoZSBub2RlIGhhcyBiZWVuIHByZXZpb3VzbHkgZmlsdGVyZWRcbiAgICAgICAgICAgIGZpbHRlclNlcnZlck5vZGUgPVxuICAgICAgICAgICAgICAgIG1lcmdlLnNvdXJjZS50YWdnZWQgfHwgb2xkVmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRmlsdGVyZWQoKTtcbiAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHZpZXdQcm9jZXNzb3JBcHBseVNlcnZlck1lcmdlKHZpZXdQcm9jZXNzb3IsIG9sZFZpZXdDYWNoZSwgbWVyZ2UucGF0aCwgbWVyZ2UuY2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob3BlcmF0aW9uLnR5cGUgPT09IE9wZXJhdGlvblR5cGUuQUNLX1VTRVJfV1JJVEUpIHtcbiAgICAgICAgY29uc3QgYWNrVXNlcldyaXRlID0gb3BlcmF0aW9uO1xuICAgICAgICBpZiAoIWFja1VzZXJXcml0ZS5yZXZlcnQpIHtcbiAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHZpZXdQcm9jZXNzb3JBY2tVc2VyV3JpdGUodmlld1Byb2Nlc3Nvciwgb2xkVmlld0NhY2hlLCBhY2tVc2VyV3JpdGUucGF0aCwgYWNrVXNlcldyaXRlLmFmZmVjdGVkVHJlZSwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHZpZXdQcm9jZXNzb3JSZXZlcnRVc2VyV3JpdGUodmlld1Byb2Nlc3Nvciwgb2xkVmlld0NhY2hlLCBhY2tVc2VyV3JpdGUucGF0aCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5MSVNURU5fQ09NUExFVEUpIHtcbiAgICAgICAgbmV3Vmlld0NhY2hlID0gdmlld1Byb2Nlc3Nvckxpc3RlbkNvbXBsZXRlKHZpZXdQcm9jZXNzb3IsIG9sZFZpZXdDYWNoZSwgb3BlcmF0aW9uLnBhdGgsIHdyaXRlc0NhY2hlLCBhY2N1bXVsYXRvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignVW5rbm93biBvcGVyYXRpb24gdHlwZTogJyArIG9wZXJhdGlvbi50eXBlKTtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlcyA9IGFjY3VtdWxhdG9yLmdldENoYW5nZXMoKTtcbiAgICB2aWV3UHJvY2Vzc29yTWF5YmVBZGRWYWx1ZUV2ZW50KG9sZFZpZXdDYWNoZSwgbmV3Vmlld0NhY2hlLCBjaGFuZ2VzKTtcbiAgICByZXR1cm4geyB2aWV3Q2FjaGU6IG5ld1ZpZXdDYWNoZSwgY2hhbmdlcyB9O1xufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3Nvck1heWJlQWRkVmFsdWVFdmVudChvbGRWaWV3Q2FjaGUsIG5ld1ZpZXdDYWNoZSwgYWNjdW11bGF0b3IpIHtcbiAgICBjb25zdCBldmVudFNuYXAgPSBuZXdWaWV3Q2FjaGUuZXZlbnRDYWNoZTtcbiAgICBpZiAoZXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpKSB7XG4gICAgICAgIGNvbnN0IGlzTGVhZk9yRW1wdHkgPSBldmVudFNuYXAuZ2V0Tm9kZSgpLmlzTGVhZk5vZGUoKSB8fCBldmVudFNuYXAuZ2V0Tm9kZSgpLmlzRW1wdHkoKTtcbiAgICAgICAgY29uc3Qgb2xkQ29tcGxldGVTbmFwID0gdmlld0NhY2hlR2V0Q29tcGxldGVFdmVudFNuYXAob2xkVmlld0NhY2hlKTtcbiAgICAgICAgaWYgKGFjY3VtdWxhdG9yLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICFvbGRWaWV3Q2FjaGUuZXZlbnRDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSB8fFxuICAgICAgICAgICAgKGlzTGVhZk9yRW1wdHkgJiYgIWV2ZW50U25hcC5nZXROb2RlKCkuZXF1YWxzKG9sZENvbXBsZXRlU25hcCkpIHx8XG4gICAgICAgICAgICAhZXZlbnRTbmFwLmdldE5vZGUoKS5nZXRQcmlvcml0eSgpLmVxdWFscyhvbGRDb21wbGV0ZVNuYXAuZ2V0UHJpb3JpdHkoKSkpIHtcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yLnB1c2goY2hhbmdlVmFsdWUodmlld0NhY2hlR2V0Q29tcGxldGVFdmVudFNuYXAobmV3Vmlld0NhY2hlKSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3NvckdlbmVyYXRlRXZlbnRDYWNoZUFmdGVyU2VydmVyRXZlbnQodmlld1Byb2Nlc3Nvciwgdmlld0NhY2hlLCBjaGFuZ2VQYXRoLCB3cml0ZXNDYWNoZSwgc291cmNlLCBhY2N1bXVsYXRvcikge1xuICAgIGNvbnN0IG9sZEV2ZW50U25hcCA9IHZpZXdDYWNoZS5ldmVudENhY2hlO1xuICAgIGlmICh3cml0ZVRyZWVSZWZTaGFkb3dpbmdXcml0ZSh3cml0ZXNDYWNoZSwgY2hhbmdlUGF0aCkgIT0gbnVsbCkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgc2hhZG93aW5nIHdyaXRlLCBpZ25vcmUgY2hhbmdlc1xuICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IG5ld0V2ZW50Q2FjaGUsIHNlcnZlck5vZGU7XG4gICAgICAgIGlmIChwYXRoSXNFbXB0eShjaGFuZ2VQYXRoKSkge1xuICAgICAgICAgICAgLy8gVE9ETzogZmlndXJlIG91dCBob3cgdGhpcyBwbGF5cyB3aXRoIFwic2xpZGluZyBhY2sgd2luZG93c1wiXG4gICAgICAgICAgICBhc3NlcnQodmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpLCAnSWYgY2hhbmdlIHBhdGggaXMgZW1wdHksIHdlIG11c3QgaGF2ZSBjb21wbGV0ZSBzZXJ2ZXIgZGF0YScpO1xuICAgICAgICAgICAgaWYgKHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5pc0ZpbHRlcmVkKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHNwZWNpYWwgY2FzZSB0aGlzLCBiZWNhdXNlIHdlIG5lZWQgdG8gb25seSBhcHBseSB3cml0ZXMgdG8gY29tcGxldGUgY2hpbGRyZW4sIG9yXG4gICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgZW5kIHVwIHJhaXNpbmcgZXZlbnRzIGZvciBpbmNvbXBsZXRlIGNoaWxkcmVuLiBJZiB0aGUgc2VydmVyIGRhdGEgaXMgZmlsdGVyZWQgZGVlcFxuICAgICAgICAgICAgICAgIC8vIHdyaXRlcyBjYW5ub3QgYmUgZ3VhcmFudGVlZCB0byBiZSBjb21wbGV0ZVxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlckNhY2hlID0gdmlld0NhY2hlR2V0Q29tcGxldGVTZXJ2ZXJTbmFwKHZpZXdDYWNoZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGVDaGlsZHJlbiA9IHNlcnZlckNhY2hlIGluc3RhbmNlb2YgQ2hpbGRyZW5Ob2RlXG4gICAgICAgICAgICAgICAgICAgID8gc2VydmVyQ2FjaGVcbiAgICAgICAgICAgICAgICAgICAgOiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wbGV0ZUV2ZW50Q2hpbGRyZW4gPSB3cml0ZVRyZWVSZWZDYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlRnVsbE5vZGUodmlld0NhY2hlLmV2ZW50Q2FjaGUuZ2V0Tm9kZSgpLCBjb21wbGV0ZUV2ZW50Q2hpbGRyZW4sIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlTm9kZSA9IHdyaXRlVHJlZVJlZkNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUod3JpdGVzQ2FjaGUsIHZpZXdDYWNoZUdldENvbXBsZXRlU2VydmVyU25hcCh2aWV3Q2FjaGUpKTtcbiAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlRnVsbE5vZGUodmlld0NhY2hlLmV2ZW50Q2FjaGUuZ2V0Tm9kZSgpLCBjb21wbGV0ZU5vZGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkS2V5ID0gcGF0aEdldEZyb250KGNoYW5nZVBhdGgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkS2V5ID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgICAgIGFzc2VydChwYXRoR2V0TGVuZ3RoKGNoYW5nZVBhdGgpID09PSAxLCBcIkNhbid0IGhhdmUgYSBwcmlvcml0eSB3aXRoIGFkZGl0aW9uYWwgcGF0aCBjb21wb25lbnRzXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9sZEV2ZW50Tm9kZSA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgc2VydmVyTm9kZSA9IHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgLy8gd2UgbWlnaHQgaGF2ZSBvdmVyd3JpdGVzIGZvciB0aGlzIHByaW9yaXR5XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFByaW9yaXR5ID0gd3JpdGVUcmVlUmVmQ2FsY0V2ZW50Q2FjaGVBZnRlclNlcnZlck92ZXJ3cml0ZSh3cml0ZXNDYWNoZSwgY2hhbmdlUGF0aCwgb2xkRXZlbnROb2RlLCBzZXJ2ZXJOb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlZFByaW9yaXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHZpZXdQcm9jZXNzb3IuZmlsdGVyLnVwZGF0ZVByaW9yaXR5KG9sZEV2ZW50Tm9kZSwgdXBkYXRlZFByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByaW9yaXR5IGRpZG4ndCBjaGFuZ2UsIGtlZXAgb2xkIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRDaGFuZ2VQYXRoID0gcGF0aFBvcEZyb250KGNoYW5nZVBhdGgpO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjaGlsZFxuICAgICAgICAgICAgICAgIGxldCBuZXdFdmVudENoaWxkO1xuICAgICAgICAgICAgICAgIGlmIChvbGRFdmVudFNuYXAuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOb2RlID0gdmlld0NhY2hlLnNlcnZlckNhY2hlLmdldE5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRDaGlsZFVwZGF0ZSA9IHdyaXRlVHJlZVJlZkNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUod3JpdGVzQ2FjaGUsIGNoYW5nZVBhdGgsIG9sZEV2ZW50U25hcC5nZXROb2RlKCksIHNlcnZlck5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRDaGlsZFVwZGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENoaWxkID0gb2xkRXZlbnRTbmFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldE5vZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlQ2hpbGQoY2hpbGRDaGFuZ2VQYXRoLCBldmVudENoaWxkVXBkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgY2hhbmdlZCwganVzdCBrZWVwIHRoZSBvbGQgY2hpbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2hpbGQgPSBvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDaGlsZCA9IHdyaXRlVHJlZVJlZkNhbGNDb21wbGV0ZUNoaWxkKHdyaXRlc0NhY2hlLCBjaGlsZEtleSwgdmlld0NhY2hlLnNlcnZlckNhY2hlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ld0V2ZW50Q2hpbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlQ2hpbGQob2xkRXZlbnRTbmFwLmdldE5vZGUoKSwgY2hpbGRLZXksIG5ld0V2ZW50Q2hpbGQsIGNoaWxkQ2hhbmdlUGF0aCwgc291cmNlLCBhY2N1bXVsYXRvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBjb21wbGV0ZSBjaGlsZCBhdmFpbGFibGUgb3Igbm8gY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSBvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlld0NhY2hlVXBkYXRlRXZlbnRTbmFwKHZpZXdDYWNoZSwgbmV3RXZlbnRDYWNoZSwgb2xkRXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IHBhdGhJc0VtcHR5KGNoYW5nZVBhdGgpLCB2aWV3UHJvY2Vzc29yLmZpbHRlci5maWx0ZXJzTm9kZXMoKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3NvckFwcGx5U2VydmVyT3ZlcndyaXRlKHZpZXdQcm9jZXNzb3IsIG9sZFZpZXdDYWNoZSwgY2hhbmdlUGF0aCwgY2hhbmdlZFNuYXAsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcikge1xuICAgIGNvbnN0IG9sZFNlcnZlclNuYXAgPSBvbGRWaWV3Q2FjaGUuc2VydmVyQ2FjaGU7XG4gICAgbGV0IG5ld1NlcnZlckNhY2hlO1xuICAgIGNvbnN0IHNlcnZlckZpbHRlciA9IGZpbHRlclNlcnZlck5vZGVcbiAgICAgICAgPyB2aWV3UHJvY2Vzc29yLmZpbHRlclxuICAgICAgICA6IHZpZXdQcm9jZXNzb3IuZmlsdGVyLmdldEluZGV4ZWRGaWx0ZXIoKTtcbiAgICBpZiAocGF0aElzRW1wdHkoY2hhbmdlUGF0aCkpIHtcbiAgICAgICAgbmV3U2VydmVyQ2FjaGUgPSBzZXJ2ZXJGaWx0ZXIudXBkYXRlRnVsbE5vZGUob2xkU2VydmVyU25hcC5nZXROb2RlKCksIGNoYW5nZWRTbmFwLCBudWxsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VydmVyRmlsdGVyLmZpbHRlcnNOb2RlcygpICYmICFvbGRTZXJ2ZXJTbmFwLmlzRmlsdGVyZWQoKSkge1xuICAgICAgICAvLyB3ZSB3YW50IHRvIGZpbHRlciB0aGUgc2VydmVyIG5vZGUsIGJ1dCB3ZSBkaWRuJ3QgZmlsdGVyIHRoZSBzZXJ2ZXIgbm9kZSB5ZXQsIHNvIHNpbXVsYXRlIGEgZnVsbCB1cGRhdGVcbiAgICAgICAgY29uc3QgbmV3U2VydmVyTm9kZSA9IG9sZFNlcnZlclNuYXBcbiAgICAgICAgICAgIC5nZXROb2RlKClcbiAgICAgICAgICAgIC51cGRhdGVDaGlsZChjaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCk7XG4gICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBuZXdTZXJ2ZXJOb2RlLCBudWxsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoaWxkS2V5ID0gcGF0aEdldEZyb250KGNoYW5nZVBhdGgpO1xuICAgICAgICBpZiAoIW9sZFNlcnZlclNuYXAuaXNDb21wbGV0ZUZvclBhdGgoY2hhbmdlUGF0aCkgJiZcbiAgICAgICAgICAgIHBhdGhHZXRMZW5ndGgoY2hhbmdlUGF0aCkgPiAxKSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCB1cGRhdGUgaW5jb21wbGV0ZSBub2RlcyB3aXRoIHVwZGF0ZXMgaW50ZW5kZWQgZm9yIG90aGVyIGxpc3RlbmVyc1xuICAgICAgICAgICAgcmV0dXJuIG9sZFZpZXdDYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZENoYW5nZVBhdGggPSBwYXRoUG9wRnJvbnQoY2hhbmdlUGF0aCk7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgY29uc3QgbmV3Q2hpbGROb2RlID0gY2hpbGROb2RlLnVwZGF0ZUNoaWxkKGNoaWxkQ2hhbmdlUGF0aCwgY2hhbmdlZFNuYXApO1xuICAgICAgICBpZiAoY2hpbGRLZXkgPT09ICcucHJpb3JpdHknKSB7XG4gICAgICAgICAgICBuZXdTZXJ2ZXJDYWNoZSA9IHNlcnZlckZpbHRlci51cGRhdGVQcmlvcml0eShvbGRTZXJ2ZXJTbmFwLmdldE5vZGUoKSwgbmV3Q2hpbGROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUNoaWxkKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3Q2hpbGROb2RlLCBjaGlsZENoYW5nZVBhdGgsIE5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV3Vmlld0NhY2hlID0gdmlld0NhY2hlVXBkYXRlU2VydmVyU25hcChvbGRWaWV3Q2FjaGUsIG5ld1NlcnZlckNhY2hlLCBvbGRTZXJ2ZXJTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IHBhdGhJc0VtcHR5KGNoYW5nZVBhdGgpLCBzZXJ2ZXJGaWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xuICAgIGNvbnN0IHNvdXJjZSA9IG5ldyBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlKHdyaXRlc0NhY2hlLCBuZXdWaWV3Q2FjaGUsIGNvbXBsZXRlQ2FjaGUpO1xuICAgIHJldHVybiB2aWV3UHJvY2Vzc29yR2VuZXJhdGVFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJFdmVudCh2aWV3UHJvY2Vzc29yLCBuZXdWaWV3Q2FjaGUsIGNoYW5nZVBhdGgsIHdyaXRlc0NhY2hlLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcbn1cbmZ1bmN0aW9uIHZpZXdQcm9jZXNzb3JBcHBseVVzZXJPdmVyd3JpdGUodmlld1Byb2Nlc3Nvciwgb2xkVmlld0NhY2hlLCBjaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XG4gICAgY29uc3Qgb2xkRXZlbnRTbmFwID0gb2xkVmlld0NhY2hlLmV2ZW50Q2FjaGU7XG4gICAgbGV0IG5ld1ZpZXdDYWNoZSwgbmV3RXZlbnRDYWNoZTtcbiAgICBjb25zdCBzb3VyY2UgPSBuZXcgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZSh3cml0ZXNDYWNoZSwgb2xkVmlld0NhY2hlLCBjb21wbGV0ZUNhY2hlKTtcbiAgICBpZiAocGF0aElzRW1wdHkoY2hhbmdlUGF0aCkpIHtcbiAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHZpZXdQcm9jZXNzb3IuZmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKG9sZFZpZXdDYWNoZS5ldmVudENhY2hlLmdldE5vZGUoKSwgY2hhbmdlZFNuYXAsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgbmV3Vmlld0NhY2hlID0gdmlld0NhY2hlVXBkYXRlRXZlbnRTbmFwKG9sZFZpZXdDYWNoZSwgbmV3RXZlbnRDYWNoZSwgdHJ1ZSwgdmlld1Byb2Nlc3Nvci5maWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBwYXRoR2V0RnJvbnQoY2hhbmdlUGF0aCk7XG4gICAgICAgIGlmIChjaGlsZEtleSA9PT0gJy5wcmlvcml0eScpIHtcbiAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB2aWV3UHJvY2Vzc29yLmZpbHRlci51cGRhdGVQcmlvcml0eShvbGRWaWV3Q2FjaGUuZXZlbnRDYWNoZS5nZXROb2RlKCksIGNoYW5nZWRTbmFwKTtcbiAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHZpZXdDYWNoZVVwZGF0ZUV2ZW50U25hcChvbGRWaWV3Q2FjaGUsIG5ld0V2ZW50Q2FjaGUsIG9sZEV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgb2xkRXZlbnRTbmFwLmlzRmlsdGVyZWQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZENoYW5nZVBhdGggPSBwYXRoUG9wRnJvbnQoY2hhbmdlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IG9sZEV2ZW50U25hcC5nZXROb2RlKCkuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXkpO1xuICAgICAgICAgICAgbGV0IG5ld0NoaWxkO1xuICAgICAgICAgICAgaWYgKHBhdGhJc0VtcHR5KGNoaWxkQ2hhbmdlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGlsZCBvdmVyd3JpdGUsIHdlIGNhbiByZXBsYWNlIHRoZSBjaGlsZFxuICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gY2hhbmdlZFNuYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBzb3VyY2UuZ2V0Q29tcGxldGVDaGlsZChjaGlsZEtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkTm9kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoR2V0QmFjayhjaGlsZENoYW5nZVBhdGgpID09PSAnLnByaW9yaXR5JyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlLmdldENoaWxkKHBhdGhQYXJlbnQoY2hpbGRDaGFuZ2VQYXRoKSkuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgcHJpb3JpdHkgdXBkYXRlIG9uIGFuIGVtcHR5IG5vZGUuIElmIHRoaXMgbm9kZSBleGlzdHMgb24gdGhlIHNlcnZlciwgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXIgd2lsbCBzZW5kIGRvd24gdGhlIHByaW9yaXR5IGluIHRoZSB1cGRhdGUsIHNvIGlnbm9yZSBmb3Igbm93XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZCA9IGNoaWxkTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gY2hpbGROb2RlLnVwZGF0ZUNoaWxkKGNoaWxkQ2hhbmdlUGF0aCwgY2hhbmdlZFNuYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBjb21wbGV0ZSBjaGlsZCBub2RlIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghb2xkQ2hpbGQuZXF1YWxzKG5ld0NoaWxkKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0V2ZW50U25hcCA9IHZpZXdQcm9jZXNzb3IuZmlsdGVyLnVwZGF0ZUNoaWxkKG9sZEV2ZW50U25hcC5nZXROb2RlKCksIGNoaWxkS2V5LCBuZXdDaGlsZCwgY2hpbGRDaGFuZ2VQYXRoLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSB2aWV3Q2FjaGVVcGRhdGVFdmVudFNuYXAob2xkVmlld0NhY2hlLCBuZXdFdmVudFNuYXAsIG9sZEV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgdmlld1Byb2Nlc3Nvci5maWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gb2xkVmlld0NhY2hlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdWaWV3Q2FjaGU7XG59XG5mdW5jdGlvbiB2aWV3UHJvY2Vzc29yQ2FjaGVIYXNDaGlsZCh2aWV3Q2FjaGUsIGNoaWxkS2V5KSB7XG4gICAgcmV0dXJuIHZpZXdDYWNoZS5ldmVudENhY2hlLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSk7XG59XG5mdW5jdGlvbiB2aWV3UHJvY2Vzc29yQXBwbHlVc2VyTWVyZ2Uodmlld1Byb2Nlc3Nvciwgdmlld0NhY2hlLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgYWNjdW11bGF0b3IpIHtcbiAgICAvLyBIQUNLOiBJbiB0aGUgY2FzZSBvZiBhIGxpbWl0IHF1ZXJ5LCB0aGVyZSBtYXkgYmUgc29tZSBjaGFuZ2VzIHRoYXQgYnVtcCB0aGluZ3Mgb3V0IG9mIHRoZVxuICAgIC8vIHdpbmRvdyBsZWF2aW5nIHJvb20gZm9yIG5ldyBpdGVtcy4gIEl0J3MgaW1wb3J0YW50IHdlIHByb2Nlc3MgdGhlc2UgY2hhbmdlcyBmaXJzdCwgc28gd2VcbiAgICAvLyBpdGVyYXRlIHRoZSBjaGFuZ2VzIHR3aWNlLCBmaXJzdCBwcm9jZXNzaW5nIGFueSB0aGF0IGFmZmVjdCBpdGVtcyBjdXJyZW50bHkgaW4gdmlldy5cbiAgICAvLyBUT0RPOiBJIGNvbnNpZGVyIGFuIGl0ZW0gXCJpbiB2aWV3XCIgaWYgY2FjaGVIYXNDaGlsZCBpcyB0cnVlLCB3aGljaCBjaGVja3MgYm90aCB0aGUgc2VydmVyXG4gICAgLy8gYW5kIGV2ZW50IHNuYXAuICBJJ20gbm90IHN1cmUgaWYgdGhpcyB3aWxsIHJlc3VsdCBpbiBlZGdlIGNhc2VzIHdoZW4gYSBjaGlsZCBpcyBpbiBvbmUgYnV0XG4gICAgLy8gbm90IHRoZSBvdGhlci5cbiAgICBsZXQgY3VyVmlld0NhY2hlID0gdmlld0NhY2hlO1xuICAgIGNoYW5nZWRDaGlsZHJlbi5mb3JlYWNoKChyZWxhdGl2ZVBhdGgsIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICBjb25zdCB3cml0ZVBhdGggPSBwYXRoQ2hpbGQocGF0aCwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgaWYgKHZpZXdQcm9jZXNzb3JDYWNoZUhhc0NoaWxkKHZpZXdDYWNoZSwgcGF0aEdldEZyb250KHdyaXRlUGF0aCkpKSB7XG4gICAgICAgICAgICBjdXJWaWV3Q2FjaGUgPSB2aWV3UHJvY2Vzc29yQXBwbHlVc2VyT3ZlcndyaXRlKHZpZXdQcm9jZXNzb3IsIGN1clZpZXdDYWNoZSwgd3JpdGVQYXRoLCBjaGlsZE5vZGUsIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgY2hhbmdlZENoaWxkcmVuLmZvcmVhY2goKHJlbGF0aXZlUGF0aCwgY2hpbGROb2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IHdyaXRlUGF0aCA9IHBhdGhDaGlsZChwYXRoLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICBpZiAoIXZpZXdQcm9jZXNzb3JDYWNoZUhhc0NoaWxkKHZpZXdDYWNoZSwgcGF0aEdldEZyb250KHdyaXRlUGF0aCkpKSB7XG4gICAgICAgICAgICBjdXJWaWV3Q2FjaGUgPSB2aWV3UHJvY2Vzc29yQXBwbHlVc2VyT3ZlcndyaXRlKHZpZXdQcm9jZXNzb3IsIGN1clZpZXdDYWNoZSwgd3JpdGVQYXRoLCBjaGlsZE5vZGUsIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1clZpZXdDYWNoZTtcbn1cbmZ1bmN0aW9uIHZpZXdQcm9jZXNzb3JBcHBseU1lcmdlKHZpZXdQcm9jZXNzb3IsIG5vZGUsIG1lcmdlKSB7XG4gICAgbWVyZ2UuZm9yZWFjaCgocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgbm9kZSA9IG5vZGUudXBkYXRlQ2hpbGQocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3NvckFwcGx5U2VydmVyTWVyZ2Uodmlld1Byb2Nlc3Nvciwgdmlld0NhY2hlLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpIHtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2FjaGUgeWV0LCB0aGlzIG1lcmdlIHdhcyBpbnRlbmRlZCBmb3IgYSBwcmV2aW91c2x5IGxpc3RlbiBpbiB0aGUgc2FtZSBsb2NhdGlvbi4gSWdub3JlIGl0IGFuZFxuICAgIC8vIHdhaXQgZm9yIHRoZSBjb21wbGV0ZSBkYXRhIHVwZGF0ZSBjb21pbmcgc29vbi5cbiAgICBpZiAodmlld0NhY2hlLnNlcnZlckNhY2hlLmdldE5vZGUoKS5pc0VtcHR5KCkgJiZcbiAgICAgICAgIXZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkge1xuICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xuICAgIH1cbiAgICAvLyBIQUNLOiBJbiB0aGUgY2FzZSBvZiBhIGxpbWl0IHF1ZXJ5LCB0aGVyZSBtYXkgYmUgc29tZSBjaGFuZ2VzIHRoYXQgYnVtcCB0aGluZ3Mgb3V0IG9mIHRoZVxuICAgIC8vIHdpbmRvdyBsZWF2aW5nIHJvb20gZm9yIG5ldyBpdGVtcy4gIEl0J3MgaW1wb3J0YW50IHdlIHByb2Nlc3MgdGhlc2UgY2hhbmdlcyBmaXJzdCwgc28gd2VcbiAgICAvLyBpdGVyYXRlIHRoZSBjaGFuZ2VzIHR3aWNlLCBmaXJzdCBwcm9jZXNzaW5nIGFueSB0aGF0IGFmZmVjdCBpdGVtcyBjdXJyZW50bHkgaW4gdmlldy5cbiAgICAvLyBUT0RPOiBJIGNvbnNpZGVyIGFuIGl0ZW0gXCJpbiB2aWV3XCIgaWYgY2FjaGVIYXNDaGlsZCBpcyB0cnVlLCB3aGljaCBjaGVja3MgYm90aCB0aGUgc2VydmVyXG4gICAgLy8gYW5kIGV2ZW50IHNuYXAuICBJJ20gbm90IHN1cmUgaWYgdGhpcyB3aWxsIHJlc3VsdCBpbiBlZGdlIGNhc2VzIHdoZW4gYSBjaGlsZCBpcyBpbiBvbmUgYnV0XG4gICAgLy8gbm90IHRoZSBvdGhlci5cbiAgICBsZXQgY3VyVmlld0NhY2hlID0gdmlld0NhY2hlO1xuICAgIGxldCB2aWV3TWVyZ2VUcmVlO1xuICAgIGlmIChwYXRoSXNFbXB0eShwYXRoKSkge1xuICAgICAgICB2aWV3TWVyZ2VUcmVlID0gY2hhbmdlZENoaWxkcmVuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlld01lcmdlVHJlZSA9IG5ldyBJbW11dGFibGVUcmVlKG51bGwpLnNldFRyZWUocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcbiAgICB9XG4gICAgY29uc3Qgc2VydmVyTm9kZSA9IHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5nZXROb2RlKCk7XG4gICAgdmlld01lcmdlVHJlZS5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKChjaGlsZEtleSwgY2hpbGRUcmVlKSA9PiB7XG4gICAgICAgIGlmIChzZXJ2ZXJOb2RlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyQ2hpbGQgPSB2aWV3Q2FjaGUuc2VydmVyQ2FjaGVcbiAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXG4gICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoaWxkID0gdmlld1Byb2Nlc3NvckFwcGx5TWVyZ2Uodmlld1Byb2Nlc3Nvciwgc2VydmVyQ2hpbGQsIGNoaWxkVHJlZSk7XG4gICAgICAgICAgICBjdXJWaWV3Q2FjaGUgPSB2aWV3UHJvY2Vzc29yQXBwbHlTZXJ2ZXJPdmVyd3JpdGUodmlld1Byb2Nlc3NvciwgY3VyVmlld0NhY2hlLCBuZXcgUGF0aChjaGlsZEtleSksIG5ld0NoaWxkLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZpZXdNZXJnZVRyZWUuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbCgoY2hpbGRLZXksIGNoaWxkTWVyZ2VUcmVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzVW5rbm93bkRlZXBNZXJnZSA9ICF2aWV3Q2FjaGUuc2VydmVyQ2FjaGUuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KSAmJlxuICAgICAgICAgICAgY2hpbGRNZXJnZVRyZWUudmFsdWUgPT09IG51bGw7XG4gICAgICAgIGlmICghc2VydmVyTm9kZS5oYXNDaGlsZChjaGlsZEtleSkgJiYgIWlzVW5rbm93bkRlZXBNZXJnZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyQ2hpbGQgPSB2aWV3Q2FjaGUuc2VydmVyQ2FjaGVcbiAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXG4gICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NoaWxkID0gdmlld1Byb2Nlc3NvckFwcGx5TWVyZ2Uodmlld1Byb2Nlc3Nvciwgc2VydmVyQ2hpbGQsIGNoaWxkTWVyZ2VUcmVlKTtcbiAgICAgICAgICAgIGN1clZpZXdDYWNoZSA9IHZpZXdQcm9jZXNzb3JBcHBseVNlcnZlck92ZXJ3cml0ZSh2aWV3UHJvY2Vzc29yLCBjdXJWaWV3Q2FjaGUsIG5ldyBQYXRoKGNoaWxkS2V5KSwgbmV3Q2hpbGQsIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1clZpZXdDYWNoZTtcbn1cbmZ1bmN0aW9uIHZpZXdQcm9jZXNzb3JBY2tVc2VyV3JpdGUodmlld1Byb2Nlc3Nvciwgdmlld0NhY2hlLCBhY2tQYXRoLCBhZmZlY3RlZFRyZWUsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcikge1xuICAgIGlmICh3cml0ZVRyZWVSZWZTaGFkb3dpbmdXcml0ZSh3cml0ZXNDYWNoZSwgYWNrUGF0aCkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xuICAgIH1cbiAgICAvLyBPbmx5IGZpbHRlciBzZXJ2ZXIgbm9kZSBpZiBpdCBpcyBjdXJyZW50bHkgZmlsdGVyZWRcbiAgICBjb25zdCBmaWx0ZXJTZXJ2ZXJOb2RlID0gdmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRmlsdGVyZWQoKTtcbiAgICAvLyBFc3NlbnRpYWxseSB3ZSdsbCBqdXN0IGdldCBvdXIgZXhpc3Rpbmcgc2VydmVyIGNhY2hlIGZvciB0aGUgYWZmZWN0ZWQgcGF0aHMgYW5kIHJlLWFwcGx5IGl0IGFzIGEgc2VydmVyIHVwZGF0ZVxuICAgIC8vIG5vdyB0aGF0IGl0IHdvbid0IGJlIHNoYWRvd2VkLlxuICAgIGNvbnN0IHNlcnZlckNhY2hlID0gdmlld0NhY2hlLnNlcnZlckNhY2hlO1xuICAgIGlmIChhZmZlY3RlZFRyZWUudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIG92ZXJ3cml0ZS5cbiAgICAgICAgaWYgKChwYXRoSXNFbXB0eShhY2tQYXRoKSAmJiBzZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkgfHxcbiAgICAgICAgICAgIHNlcnZlckNhY2hlLmlzQ29tcGxldGVGb3JQYXRoKGFja1BhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlld1Byb2Nlc3NvckFwcGx5U2VydmVyT3ZlcndyaXRlKHZpZXdQcm9jZXNzb3IsIHZpZXdDYWNoZSwgYWNrUGF0aCwgc2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLmdldENoaWxkKGFja1BhdGgpLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhdGhJc0VtcHR5KGFja1BhdGgpKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgZ29vZnkgZWRnZSBjYXNlIHdoZXJlIHdlIGFyZSBhY2tpbmcgZGF0YSBhdCB0aGlzIGxvY2F0aW9uIGJ1dCBkb24ndCBoYXZlIGZ1bGwgZGF0YS4gIFdlXG4gICAgICAgICAgICAvLyBzaG91bGQganVzdCByZS1hcHBseSB3aGF0ZXZlciB3ZSBoYXZlIGluIG91ciBjYWNoZSBhcyBhIG1lcmdlLlxuICAgICAgICAgICAgbGV0IGNoYW5nZWRDaGlsZHJlbiA9IG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xuICAgICAgICAgICAgc2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLmZvckVhY2hDaGlsZChLRVlfSU5ERVgsIChuYW1lLCBub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZENoaWxkcmVuID0gY2hhbmdlZENoaWxkcmVuLnNldChuZXcgUGF0aChuYW1lKSwgbm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3UHJvY2Vzc29yQXBwbHlTZXJ2ZXJNZXJnZSh2aWV3UHJvY2Vzc29yLCB2aWV3Q2FjaGUsIGFja1BhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3Q2FjaGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBtZXJnZS5cbiAgICAgICAgbGV0IGNoYW5nZWRDaGlsZHJlbiA9IG5ldyBJbW11dGFibGVUcmVlKG51bGwpO1xuICAgICAgICBhZmZlY3RlZFRyZWUuZm9yZWFjaCgobWVyZ2VQYXRoLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyQ2FjaGVQYXRoID0gcGF0aENoaWxkKGFja1BhdGgsIG1lcmdlUGF0aCk7XG4gICAgICAgICAgICBpZiAoc2VydmVyQ2FjaGUuaXNDb21wbGV0ZUZvclBhdGgoc2VydmVyQ2FjaGVQYXRoKSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZWRDaGlsZHJlbiA9IGNoYW5nZWRDaGlsZHJlbi5zZXQobWVyZ2VQYXRoLCBzZXJ2ZXJDYWNoZS5nZXROb2RlKCkuZ2V0Q2hpbGQoc2VydmVyQ2FjaGVQYXRoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdmlld1Byb2Nlc3NvckFwcGx5U2VydmVyTWVyZ2Uodmlld1Byb2Nlc3Nvciwgdmlld0NhY2hlLCBhY2tQYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gdmlld1Byb2Nlc3Nvckxpc3RlbkNvbXBsZXRlKHZpZXdQcm9jZXNzb3IsIHZpZXdDYWNoZSwgcGF0aCwgd3JpdGVzQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XG4gICAgY29uc3Qgb2xkU2VydmVyTm9kZSA9IHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZTtcbiAgICBjb25zdCBuZXdWaWV3Q2FjaGUgPSB2aWV3Q2FjaGVVcGRhdGVTZXJ2ZXJTbmFwKHZpZXdDYWNoZSwgb2xkU2VydmVyTm9kZS5nZXROb2RlKCksIG9sZFNlcnZlck5vZGUuaXNGdWxseUluaXRpYWxpemVkKCkgfHwgcGF0aElzRW1wdHkocGF0aCksIG9sZFNlcnZlck5vZGUuaXNGaWx0ZXJlZCgpKTtcbiAgICByZXR1cm4gdmlld1Byb2Nlc3NvckdlbmVyYXRlRXZlbnRDYWNoZUFmdGVyU2VydmVyRXZlbnQodmlld1Byb2Nlc3NvciwgbmV3Vmlld0NhY2hlLCBwYXRoLCB3cml0ZXNDYWNoZSwgTk9fQ09NUExFVEVfQ0hJTERfU09VUkNFLCBhY2N1bXVsYXRvcik7XG59XG5mdW5jdGlvbiB2aWV3UHJvY2Vzc29yUmV2ZXJ0VXNlcldyaXRlKHZpZXdQcm9jZXNzb3IsIHZpZXdDYWNoZSwgcGF0aCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlU2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XG4gICAgbGV0IGNvbXBsZXRlO1xuICAgIGlmICh3cml0ZVRyZWVSZWZTaGFkb3dpbmdXcml0ZSh3cml0ZXNDYWNoZSwgcGF0aCkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gbmV3IFdyaXRlVHJlZUNvbXBsZXRlQ2hpbGRTb3VyY2Uod3JpdGVzQ2FjaGUsIHZpZXdDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSk7XG4gICAgICAgIGNvbnN0IG9sZEV2ZW50Q2FjaGUgPSB2aWV3Q2FjaGUuZXZlbnRDYWNoZS5nZXROb2RlKCk7XG4gICAgICAgIGxldCBuZXdFdmVudENhY2hlO1xuICAgICAgICBpZiAocGF0aElzRW1wdHkocGF0aCkgfHwgcGF0aEdldEZyb250KHBhdGgpID09PSAnLnByaW9yaXR5Jykge1xuICAgICAgICAgICAgbGV0IG5ld05vZGU7XG4gICAgICAgICAgICBpZiAodmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpKSB7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IHdyaXRlVHJlZVJlZkNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUod3JpdGVzQ2FjaGUsIHZpZXdDYWNoZUdldENvbXBsZXRlU2VydmVyU25hcCh2aWV3Q2FjaGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZlckNoaWxkcmVuID0gdmlld0NhY2hlLnNlcnZlckNhY2hlLmdldE5vZGUoKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoc2VydmVyQ2hpbGRyZW4gaW5zdGFuY2VvZiBDaGlsZHJlbk5vZGUsICdzZXJ2ZXJDaGlsZHJlbiB3b3VsZCBiZSBjb21wbGV0ZSBpZiBsZWFmIG5vZGUnKTtcbiAgICAgICAgICAgICAgICBuZXdOb2RlID0gd3JpdGVUcmVlUmVmQ2FsY0NvbXBsZXRlRXZlbnRDaGlsZHJlbih3cml0ZXNDYWNoZSwgc2VydmVyQ2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGU7XG4gICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlRnVsbE5vZGUob2xkRXZlbnRDYWNoZSwgbmV3Tm9kZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRLZXkgPSBwYXRoR2V0RnJvbnQocGF0aCk7XG4gICAgICAgICAgICBsZXQgbmV3Q2hpbGQgPSB3cml0ZVRyZWVSZWZDYWxjQ29tcGxldGVDaGlsZCh3cml0ZXNDYWNoZSwgY2hpbGRLZXksIHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZSk7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQgPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHZpZXdDYWNoZS5zZXJ2ZXJDYWNoZS5pc0NvbXBsZXRlRm9yQ2hpbGQoY2hpbGRLZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3Q2hpbGQgPSBvbGRFdmVudENhY2hlLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXdDaGlsZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHZpZXdQcm9jZXNzb3IuZmlsdGVyLnVwZGF0ZUNoaWxkKG9sZEV2ZW50Q2FjaGUsIGNoaWxkS2V5LCBuZXdDaGlsZCwgcGF0aFBvcEZyb250KHBhdGgpLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZpZXdDYWNoZS5ldmVudENhY2hlLmdldE5vZGUoKS5oYXNDaGlsZChjaGlsZEtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBObyBjb21wbGV0ZSBjaGlsZCBhdmFpbGFibGUsIGRlbGV0ZSB0aGUgZXhpc3Rpbmcgb25lLCBpZiBhbnlcbiAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlQ2hpbGQob2xkRXZlbnRDYWNoZSwgY2hpbGRLZXksIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBwYXRoUG9wRnJvbnQocGF0aCksIHNvdXJjZSwgYWNjdW11bGF0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IG9sZEV2ZW50Q2FjaGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3RXZlbnRDYWNoZS5pc0VtcHR5KCkgJiZcbiAgICAgICAgICAgICAgICB2aWV3Q2FjaGUuc2VydmVyQ2FjaGUuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBtaWdodCBoYXZlIHJldmVydGVkIGFsbCBjaGlsZCB3cml0ZXMuIE1heWJlIHRoZSBvbGQgZXZlbnQgd2FzIGEgbGVhZiBub2RlXG4gICAgICAgICAgICAgICAgY29tcGxldGUgPSB3cml0ZVRyZWVSZWZDYWxjQ29tcGxldGVFdmVudENhY2hlKHdyaXRlc0NhY2hlLCB2aWV3Q2FjaGVHZXRDb21wbGV0ZVNlcnZlclNuYXAodmlld0NhY2hlKSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdmlld1Byb2Nlc3Nvci5maWx0ZXIudXBkYXRlRnVsbE5vZGUobmV3RXZlbnRDYWNoZSwgY29tcGxldGUsIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29tcGxldGUgPVxuICAgICAgICAgICAgdmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8XG4gICAgICAgICAgICAgICAgd3JpdGVUcmVlUmVmU2hhZG93aW5nV3JpdGUod3JpdGVzQ2FjaGUsIG5ld0VtcHR5UGF0aCgpKSAhPSBudWxsO1xuICAgICAgICByZXR1cm4gdmlld0NhY2hlVXBkYXRlRXZlbnRTbmFwKHZpZXdDYWNoZSwgbmV3RXZlbnRDYWNoZSwgY29tcGxldGUsIHZpZXdQcm9jZXNzb3IuZmlsdGVyLmZpbHRlcnNOb2RlcygpKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgdmlldyByZXByZXNlbnRzIGEgc3BlY2lmaWMgbG9jYXRpb24gYW5kIHF1ZXJ5IHRoYXQgaGFzIDEgb3IgbW9yZSBldmVudCByZWdpc3RyYXRpb25zLlxuICpcbiAqIEl0IGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4gKiAgLSBNYWludGFpbnMgdGhlIGxpc3Qgb2YgZXZlbnQgcmVnaXN0cmF0aW9ucyBmb3IgdGhpcyBsb2NhdGlvbi9xdWVyeS5cbiAqICAtIE1haW50YWlucyBhIGNhY2hlIG9mIHRoZSBkYXRhIHZpc2libGUgZm9yIHRoaXMgbG9jYXRpb24vcXVlcnkuXG4gKiAgLSBBcHBsaWVzIG5ldyBvcGVyYXRpb25zICh2aWEgYXBwbHlPcGVyYXRpb24pLCB1cGRhdGVzIHRoZSBjYWNoZSwgYW5kIGJhc2VkIG9uIHRoZSBldmVudFxuICogICAgcmVnaXN0cmF0aW9ucyByZXR1cm5zIHRoZSBzZXQgb2YgZXZlbnRzIHRvIGJlIHJhaXNlZC5cbiAqL1xuY2xhc3MgVmlldyB7XG4gICAgY29uc3RydWN0b3IocXVlcnlfLCBpbml0aWFsVmlld0NhY2hlKSB7XG4gICAgICAgIHRoaXMucXVlcnlfID0gcXVlcnlfO1xuICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc18gPSBbXTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5xdWVyeV8uX3F1ZXJ5UGFyYW1zO1xuICAgICAgICBjb25zdCBpbmRleEZpbHRlciA9IG5ldyBJbmRleGVkRmlsdGVyKHBhcmFtcy5nZXRJbmRleCgpKTtcbiAgICAgICAgY29uc3QgZmlsdGVyID0gcXVlcnlQYXJhbXNHZXROb2RlRmlsdGVyKHBhcmFtcyk7XG4gICAgICAgIHRoaXMucHJvY2Vzc29yXyA9IG5ld1ZpZXdQcm9jZXNzb3IoZmlsdGVyKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbFNlcnZlckNhY2hlID0gaW5pdGlhbFZpZXdDYWNoZS5zZXJ2ZXJDYWNoZTtcbiAgICAgICAgY29uc3QgaW5pdGlhbEV2ZW50Q2FjaGUgPSBpbml0aWFsVmlld0NhY2hlLmV2ZW50Q2FjaGU7XG4gICAgICAgIC8vIERvbid0IGZpbHRlciBzZXJ2ZXIgbm9kZSB3aXRoIG90aGVyIGZpbHRlciB0aGFuIGluZGV4LCB3YWl0IGZvciB0YWdnZWQgbGlzdGVuXG4gICAgICAgIGNvbnN0IHNlcnZlclNuYXAgPSBpbmRleEZpbHRlci51cGRhdGVGdWxsTm9kZShDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgaW5pdGlhbFNlcnZlckNhY2hlLmdldE5vZGUoKSwgbnVsbCk7XG4gICAgICAgIGNvbnN0IGV2ZW50U25hcCA9IGZpbHRlci51cGRhdGVGdWxsTm9kZShDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgaW5pdGlhbEV2ZW50Q2FjaGUuZ2V0Tm9kZSgpLCBudWxsKTtcbiAgICAgICAgY29uc3QgbmV3U2VydmVyQ2FjaGUgPSBuZXcgQ2FjaGVOb2RlKHNlcnZlclNuYXAsIGluaXRpYWxTZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgaW5kZXhGaWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xuICAgICAgICBjb25zdCBuZXdFdmVudENhY2hlID0gbmV3IENhY2hlTm9kZShldmVudFNuYXAsIGluaXRpYWxFdmVudENhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpLCBmaWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xuICAgICAgICB0aGlzLnZpZXdDYWNoZV8gPSBuZXdWaWV3Q2FjaGUobmV3RXZlbnRDYWNoZSwgbmV3U2VydmVyQ2FjaGUpO1xuICAgICAgICB0aGlzLmV2ZW50R2VuZXJhdG9yXyA9IG5ldyBFdmVudEdlbmVyYXRvcih0aGlzLnF1ZXJ5Xyk7XG4gICAgfVxuICAgIGdldCBxdWVyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlfO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZpZXdHZXRTZXJ2ZXJDYWNoZSh2aWV3KSB7XG4gICAgcmV0dXJuIHZpZXcudmlld0NhY2hlXy5zZXJ2ZXJDYWNoZS5nZXROb2RlKCk7XG59XG5mdW5jdGlvbiB2aWV3R2V0Q29tcGxldGVOb2RlKHZpZXcpIHtcbiAgICByZXR1cm4gdmlld0NhY2hlR2V0Q29tcGxldGVFdmVudFNuYXAodmlldy52aWV3Q2FjaGVfKTtcbn1cbmZ1bmN0aW9uIHZpZXdHZXRDb21wbGV0ZVNlcnZlckNhY2hlKHZpZXcsIHBhdGgpIHtcbiAgICBjb25zdCBjYWNoZSA9IHZpZXdDYWNoZUdldENvbXBsZXRlU2VydmVyU25hcCh2aWV3LnZpZXdDYWNoZV8pO1xuICAgIGlmIChjYWNoZSkge1xuICAgICAgICAvLyBJZiB0aGlzIGlzbid0IGEgXCJsb2Fkc0FsbERhdGFcIiB2aWV3LCB0aGVuIGNhY2hlIGlzbid0IGFjdHVhbGx5IGEgY29tcGxldGUgY2FjaGUgYW5kXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc2VlIGlmIGl0IGNvbnRhaW5zIHRoZSBjaGlsZCB3ZSdyZSBpbnRlcmVzdGVkIGluLlxuICAgICAgICBpZiAodmlldy5xdWVyeS5fcXVlcnlQYXJhbXMubG9hZHNBbGxEYXRhKCkgfHxcbiAgICAgICAgICAgICghcGF0aElzRW1wdHkocGF0aCkgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUuZ2V0SW1tZWRpYXRlQ2hpbGQocGF0aEdldEZyb250KHBhdGgpKS5pc0VtcHR5KCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGUuZ2V0Q2hpbGQocGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB2aWV3SXNFbXB0eSh2aWV3KSB7XG4gICAgcmV0dXJuIHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXy5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2aWV3QWRkRXZlbnRSZWdpc3RyYXRpb24odmlldywgZXZlbnRSZWdpc3RyYXRpb24pIHtcbiAgICB2aWV3LmV2ZW50UmVnaXN0cmF0aW9uc18ucHVzaChldmVudFJlZ2lzdHJhdGlvbik7XG59XG4vKipcbiAqIEBwYXJhbSBldmVudFJlZ2lzdHJhdGlvbiAtIElmIG51bGwsIHJlbW92ZSBhbGwgY2FsbGJhY2tzLlxuICogQHBhcmFtIGNhbmNlbEVycm9yIC0gSWYgYSBjYW5jZWxFcnJvciBpcyBwcm92aWRlZCwgYXBwcm9wcmlhdGUgY2FuY2VsIGV2ZW50cyB3aWxsIGJlIHJldHVybmVkLlxuICogQHJldHVybnMgQ2FuY2VsIGV2ZW50cywgaWYgY2FuY2VsRXJyb3Igd2FzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiB2aWV3UmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24odmlldywgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XG4gICAgY29uc3QgY2FuY2VsRXZlbnRzID0gW107XG4gICAgaWYgKGNhbmNlbEVycm9yKSB7XG4gICAgICAgIGFzc2VydChldmVudFJlZ2lzdHJhdGlvbiA9PSBudWxsLCAnQSBjYW5jZWwgc2hvdWxkIGNhbmNlbCBhbGwgZXZlbnQgcmVnaXN0cmF0aW9ucy4nKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IHZpZXcucXVlcnkuX3BhdGg7XG4gICAgICAgIHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXy5mb3JFYWNoKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXliZUV2ZW50ID0gcmVnaXN0cmF0aW9uLmNyZWF0ZUNhbmNlbEV2ZW50KGNhbmNlbEVycm9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChtYXliZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsRXZlbnRzLnB1c2gobWF5YmVFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZXZlbnRSZWdpc3RyYXRpb24pIHtcbiAgICAgICAgbGV0IHJlbWFpbmluZyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB2aWV3LmV2ZW50UmVnaXN0cmF0aW9uc19baV07XG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nLm1hdGNoZXMoZXZlbnRSZWdpc3RyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgcmVtYWluaW5nLnB1c2goZXhpc3RpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRSZWdpc3RyYXRpb24uaGFzQW55Q2FsbGJhY2soKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3JlIHJlbW92aW5nIGp1c3QgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICByZW1haW5pbmcgPSByZW1haW5pbmcuY29uY2F0KHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXy5zbGljZShpICsgMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXyA9IHJlbWFpbmluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXcuZXZlbnRSZWdpc3RyYXRpb25zXyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gY2FuY2VsRXZlbnRzO1xufVxuLyoqXG4gKiBBcHBsaWVzIHRoZSBnaXZlbiBPcGVyYXRpb24sIHVwZGF0ZXMgb3VyIGNhY2hlLCBhbmQgcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgZXZlbnRzLlxuICovXG5mdW5jdGlvbiB2aWV3QXBwbHlPcGVyYXRpb24odmlldywgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSkge1xuICAgIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5NRVJHRSAmJlxuICAgICAgICBvcGVyYXRpb24uc291cmNlLnF1ZXJ5SWQgIT09IG51bGwpIHtcbiAgICAgICAgYXNzZXJ0KHZpZXdDYWNoZUdldENvbXBsZXRlU2VydmVyU25hcCh2aWV3LnZpZXdDYWNoZV8pLCAnV2Ugc2hvdWxkIGFsd2F5cyBoYXZlIGEgZnVsbCBjYWNoZSBiZWZvcmUgaGFuZGxpbmcgbWVyZ2VzJyk7XG4gICAgICAgIGFzc2VydCh2aWV3Q2FjaGVHZXRDb21wbGV0ZUV2ZW50U25hcCh2aWV3LnZpZXdDYWNoZV8pLCAnTWlzc2luZyBldmVudCBjYWNoZSwgZXZlbiB0aG91Z2ggd2UgaGF2ZSBhIHNlcnZlciBjYWNoZScpO1xuICAgIH1cbiAgICBjb25zdCBvbGRWaWV3Q2FjaGUgPSB2aWV3LnZpZXdDYWNoZV87XG4gICAgY29uc3QgcmVzdWx0ID0gdmlld1Byb2Nlc3NvckFwcGx5T3BlcmF0aW9uKHZpZXcucHJvY2Vzc29yXywgb2xkVmlld0NhY2hlLCBvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZVNlcnZlckNhY2hlKTtcbiAgICB2aWV3UHJvY2Vzc29yQXNzZXJ0SW5kZXhlZCh2aWV3LnByb2Nlc3Nvcl8sIHJlc3VsdC52aWV3Q2FjaGUpO1xuICAgIGFzc2VydChyZXN1bHQudmlld0NhY2hlLnNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8XG4gICAgICAgICFvbGRWaWV3Q2FjaGUuc2VydmVyQ2FjaGUuaXNGdWxseUluaXRpYWxpemVkKCksICdPbmNlIGEgc2VydmVyIHNuYXAgaXMgY29tcGxldGUsIGl0IHNob3VsZCBuZXZlciBnbyBiYWNrJyk7XG4gICAgdmlldy52aWV3Q2FjaGVfID0gcmVzdWx0LnZpZXdDYWNoZTtcbiAgICByZXR1cm4gdmlld0dlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlc18odmlldywgcmVzdWx0LmNoYW5nZXMsIHJlc3VsdC52aWV3Q2FjaGUuZXZlbnRDYWNoZS5nZXROb2RlKCksIG51bGwpO1xufVxuZnVuY3Rpb24gdmlld0dldEluaXRpYWxFdmVudHModmlldywgcmVnaXN0cmF0aW9uKSB7XG4gICAgY29uc3QgZXZlbnRTbmFwID0gdmlldy52aWV3Q2FjaGVfLmV2ZW50Q2FjaGU7XG4gICAgY29uc3QgaW5pdGlhbENoYW5nZXMgPSBbXTtcbiAgICBpZiAoIWV2ZW50U25hcC5nZXROb2RlKCkuaXNMZWFmTm9kZSgpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50Tm9kZSA9IGV2ZW50U25hcC5nZXROb2RlKCk7XG4gICAgICAgIGV2ZW50Tm9kZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChrZXksIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgaW5pdGlhbENoYW5nZXMucHVzaChjaGFuZ2VDaGlsZEFkZGVkKGtleSwgY2hpbGROb2RlKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpKSB7XG4gICAgICAgIGluaXRpYWxDaGFuZ2VzLnB1c2goY2hhbmdlVmFsdWUoZXZlbnRTbmFwLmdldE5vZGUoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gdmlld0dlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlc18odmlldywgaW5pdGlhbENoYW5nZXMsIGV2ZW50U25hcC5nZXROb2RlKCksIHJlZ2lzdHJhdGlvbik7XG59XG5mdW5jdGlvbiB2aWV3R2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzXyh2aWV3LCBjaGFuZ2VzLCBldmVudENhY2hlLCBldmVudFJlZ2lzdHJhdGlvbikge1xuICAgIGNvbnN0IHJlZ2lzdHJhdGlvbnMgPSBldmVudFJlZ2lzdHJhdGlvblxuICAgICAgICA/IFtldmVudFJlZ2lzdHJhdGlvbl1cbiAgICAgICAgOiB2aWV3LmV2ZW50UmVnaXN0cmF0aW9uc187XG4gICAgcmV0dXJuIGV2ZW50R2VuZXJhdG9yR2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzKHZpZXcuZXZlbnRHZW5lcmF0b3JfLCBjaGFuZ2VzLCBldmVudENhY2hlLCByZWdpc3RyYXRpb25zKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmxldCByZWZlcmVuY2VDb25zdHJ1Y3RvciQxO1xuLyoqXG4gKiBTeW5jUG9pbnQgcmVwcmVzZW50cyBhIHNpbmdsZSBsb2NhdGlvbiBpbiBhIFN5bmNUcmVlIHdpdGggMSBvciBtb3JlIGV2ZW50IHJlZ2lzdHJhdGlvbnMsIG1lYW5pbmcgd2UgbmVlZCB0b1xuICogbWFpbnRhaW4gMSBvciBtb3JlIFZpZXdzIGF0IHRoaXMgbG9jYXRpb24gdG8gY2FjaGUgc2VydmVyIGRhdGEgYW5kIHJhaXNlIGFwcHJvcHJpYXRlIGV2ZW50cyBmb3Igc2VydmVyIGNoYW5nZXNcbiAqIGFuZCB1c2VyIHdyaXRlcyAoc2V0LCB0cmFuc2FjdGlvbiwgdXBkYXRlKS5cbiAqXG4gKiBJdCdzIHJlc3BvbnNpYmxlIGZvcjpcbiAqICAtIE1haW50YWluaW5nIHRoZSBzZXQgb2YgMSBvciBtb3JlIHZpZXdzIG5lY2Vzc2FyeSBhdCB0aGlzIGxvY2F0aW9uIChhIFN5bmNQb2ludCB3aXRoIDAgdmlld3Mgc2hvdWxkIGJlIHJlbW92ZWQpLlxuICogIC0gUHJveHlpbmcgdXNlciAvIHNlcnZlciBvcGVyYXRpb25zIHRvIHRoZSB2aWV3cyBhcyBhcHByb3ByaWF0ZSAoaS5lLiBhcHBseVNlcnZlck92ZXJ3cml0ZSxcbiAqICAgIGFwcGx5VXNlck92ZXJ3cml0ZSwgZXRjLilcbiAqL1xuY2xhc3MgU3luY1BvaW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBWaWV3cyBiZWluZyB0cmFja2VkIGF0IHRoaXMgbG9jYXRpb24gaW4gdGhlIHRyZWUsIHN0b3JlZCBhcyBhIG1hcCB3aGVyZSB0aGUga2V5IGlzIGFcbiAgICAgICAgICogcXVlcnlJZCBhbmQgdGhlIHZhbHVlIGlzIHRoZSBWaWV3IGZvciB0aGF0IHF1ZXJ5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBOT1RFOiBUaGlzIGxpc3Qgd2lsbCBiZSBxdWl0ZSBzbWFsbCAodXN1YWxseSAxLCBidXQgcGVyaGFwcyAyIG9yIDM7IGFueSBtb3JlIGlzIGFuIG9kZCB1c2UgY2FzZSkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZpZXdzID0gbmV3IE1hcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN5bmNQb2ludFNldFJlZmVyZW5jZUNvbnN0cnVjdG9yKHZhbCkge1xuICAgIGFzc2VydCghcmVmZXJlbmNlQ29uc3RydWN0b3IkMSwgJ19fcmVmZXJlbmNlQ29uc3RydWN0b3IgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkJyk7XG4gICAgcmVmZXJlbmNlQ29uc3RydWN0b3IkMSA9IHZhbDtcbn1cbmZ1bmN0aW9uIHN5bmNQb2ludEdldFJlZmVyZW5jZUNvbnN0cnVjdG9yKCkge1xuICAgIGFzc2VydChyZWZlcmVuY2VDb25zdHJ1Y3RvciQxLCAnUmVmZXJlbmNlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcbiAgICByZXR1cm4gcmVmZXJlbmNlQ29uc3RydWN0b3IkMTtcbn1cbmZ1bmN0aW9uIHN5bmNQb2ludElzRW1wdHkoc3luY1BvaW50KSB7XG4gICAgcmV0dXJuIHN5bmNQb2ludC52aWV3cy5zaXplID09PSAwO1xufVxuZnVuY3Rpb24gc3luY1BvaW50QXBwbHlPcGVyYXRpb24oc3luY1BvaW50LCBvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBvcHRDb21wbGV0ZVNlcnZlckNhY2hlKSB7XG4gICAgY29uc3QgcXVlcnlJZCA9IG9wZXJhdGlvbi5zb3VyY2UucXVlcnlJZDtcbiAgICBpZiAocXVlcnlJZCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCB2aWV3ID0gc3luY1BvaW50LnZpZXdzLmdldChxdWVyeUlkKTtcbiAgICAgICAgYXNzZXJ0KHZpZXcgIT0gbnVsbCwgJ1N5bmNUcmVlIGdhdmUgdXMgYW4gb3AgZm9yIGFuIGludmFsaWQgcXVlcnkuJyk7XG4gICAgICAgIHJldHVybiB2aWV3QXBwbHlPcGVyYXRpb24odmlldywgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZXZlbnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdmlldyBvZiBzeW5jUG9pbnQudmlld3MudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodmlld0FwcGx5T3BlcmF0aW9uKHZpZXcsIG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIG9wdENvbXBsZXRlU2VydmVyQ2FjaGUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH1cbn1cbi8qKlxuICogR2V0IGEgdmlldyBmb3IgdGhlIHNwZWNpZmllZCBxdWVyeS5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgdG8gcmV0dXJuIGEgdmlldyBmb3JcbiAqIEBwYXJhbSB3cml0ZXNDYWNoZVxuICogQHBhcmFtIHNlcnZlckNhY2hlXG4gKiBAcGFyYW0gc2VydmVyQ2FjaGVDb21wbGV0ZVxuICogQHJldHVybnMgRXZlbnRzIHRvIHJhaXNlLlxuICovXG5mdW5jdGlvbiBzeW5jUG9pbnRHZXRWaWV3KHN5bmNQb2ludCwgcXVlcnksIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSwgc2VydmVyQ2FjaGVDb21wbGV0ZSkge1xuICAgIGNvbnN0IHF1ZXJ5SWQgPSBxdWVyeS5fcXVlcnlJZGVudGlmaWVyO1xuICAgIGNvbnN0IHZpZXcgPSBzeW5jUG9pbnQudmlld3MuZ2V0KHF1ZXJ5SWQpO1xuICAgIGlmICghdmlldykge1xuICAgICAgICAvLyBUT0RPOiBtYWtlIHdyaXRlc0NhY2hlIHRha2UgZmxhZyBmb3IgY29tcGxldGUgc2VydmVyIG5vZGVcbiAgICAgICAgbGV0IGV2ZW50Q2FjaGUgPSB3cml0ZVRyZWVSZWZDYWxjQ29tcGxldGVFdmVudENhY2hlKHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlID8gc2VydmVyQ2FjaGUgOiBudWxsKTtcbiAgICAgICAgbGV0IGV2ZW50Q2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBpZiAoZXZlbnRDYWNoZSkge1xuICAgICAgICAgICAgZXZlbnRDYWNoZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZXJ2ZXJDYWNoZSBpbnN0YW5jZW9mIENoaWxkcmVuTm9kZSkge1xuICAgICAgICAgICAgZXZlbnRDYWNoZSA9IHdyaXRlVHJlZVJlZkNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4od3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlKTtcbiAgICAgICAgICAgIGV2ZW50Q2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZlbnRDYWNoZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xuICAgICAgICAgICAgZXZlbnRDYWNoZUNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdmlld0NhY2hlID0gbmV3Vmlld0NhY2hlKG5ldyBDYWNoZU5vZGUoZXZlbnRDYWNoZSwgZXZlbnRDYWNoZUNvbXBsZXRlLCBmYWxzZSksIG5ldyBDYWNoZU5vZGUoc2VydmVyQ2FjaGUsIHNlcnZlckNhY2hlQ29tcGxldGUsIGZhbHNlKSk7XG4gICAgICAgIHJldHVybiBuZXcgVmlldyhxdWVyeSwgdmlld0NhY2hlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpZXc7XG59XG4vKipcbiAqIEFkZCBhbiBldmVudCBjYWxsYmFjayBmb3IgdGhlIHNwZWNpZmllZCBxdWVyeS5cbiAqXG4gKiBAcGFyYW0gcXVlcnlcbiAqIEBwYXJhbSBldmVudFJlZ2lzdHJhdGlvblxuICogQHBhcmFtIHdyaXRlc0NhY2hlXG4gKiBAcGFyYW0gc2VydmVyQ2FjaGUgLSBDb21wbGV0ZSBzZXJ2ZXIgY2FjaGUsIGlmIHdlIGhhdmUgaXQuXG4gKiBAcGFyYW0gc2VydmVyQ2FjaGVDb21wbGV0ZVxuICogQHJldHVybnMgRXZlbnRzIHRvIHJhaXNlLlxuICovXG5mdW5jdGlvbiBzeW5jUG9pbnRBZGRFdmVudFJlZ2lzdHJhdGlvbihzeW5jUG9pbnQsIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlKSB7XG4gICAgY29uc3QgdmlldyA9IHN5bmNQb2ludEdldFZpZXcoc3luY1BvaW50LCBxdWVyeSwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlKTtcbiAgICBpZiAoIXN5bmNQb2ludC52aWV3cy5oYXMocXVlcnkuX3F1ZXJ5SWRlbnRpZmllcikpIHtcbiAgICAgICAgc3luY1BvaW50LnZpZXdzLnNldChxdWVyeS5fcXVlcnlJZGVudGlmaWVyLCB2aWV3KTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyBndWFyYW50ZWVkIHRvIGV4aXN0IG5vdywgd2UganVzdCBjcmVhdGVkIGFueXRoaW5nIHRoYXQgd2FzIG1pc3NpbmdcbiAgICB2aWV3QWRkRXZlbnRSZWdpc3RyYXRpb24odmlldywgZXZlbnRSZWdpc3RyYXRpb24pO1xuICAgIHJldHVybiB2aWV3R2V0SW5pdGlhbEV2ZW50cyh2aWV3LCBldmVudFJlZ2lzdHJhdGlvbik7XG59XG4vKipcbiAqIFJlbW92ZSBldmVudCBjYWxsYmFjayhzKS4gIFJldHVybiBjYW5jZWxFdmVudHMgaWYgYSBjYW5jZWxFcnJvciBpcyBzcGVjaWZpZWQuXG4gKlxuICogSWYgcXVlcnkgaXMgdGhlIGRlZmF1bHQgcXVlcnksIHdlJ2xsIGNoZWNrIGFsbCB2aWV3cyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFJlZ2lzdHJhdGlvbi5cbiAqIElmIGV2ZW50UmVnaXN0cmF0aW9uIGlzIG51bGwsIHdlJ2xsIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciB0aGUgc3BlY2lmaWVkIHZpZXcocykuXG4gKlxuICogQHBhcmFtIGV2ZW50UmVnaXN0cmF0aW9uIC0gSWYgbnVsbCwgcmVtb3ZlIGFsbCBjYWxsYmFja3MuXG4gKiBAcGFyYW0gY2FuY2VsRXJyb3IgLSBJZiBhIGNhbmNlbEVycm9yIGlzIHByb3ZpZGVkLCBhcHByb3ByaWF0ZSBjYW5jZWwgZXZlbnRzIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcmV0dXJucyByZW1vdmVkIHF1ZXJpZXMgYW5kIGFueSBjYW5jZWwgZXZlbnRzXG4gKi9cbmZ1bmN0aW9uIHN5bmNQb2ludFJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKHN5bmNQb2ludCwgcXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCBjYW5jZWxFcnJvcikge1xuICAgIGNvbnN0IHF1ZXJ5SWQgPSBxdWVyeS5fcXVlcnlJZGVudGlmaWVyO1xuICAgIGNvbnN0IHJlbW92ZWQgPSBbXTtcbiAgICBsZXQgY2FuY2VsRXZlbnRzID0gW107XG4gICAgY29uc3QgaGFkQ29tcGxldGVWaWV3ID0gc3luY1BvaW50SGFzQ29tcGxldGVWaWV3KHN5bmNQb2ludCk7XG4gICAgaWYgKHF1ZXJ5SWQgPT09ICdkZWZhdWx0Jykge1xuICAgICAgICAvLyBXaGVuIHlvdSBkbyByZWYub2ZmKC4uLiksIHdlIHNlYXJjaCBhbGwgdmlld3MgZm9yIHRoZSByZWdpc3RyYXRpb24gdG8gcmVtb3ZlLlxuICAgICAgICBmb3IgKGNvbnN0IFt2aWV3UXVlcnlJZCwgdmlld10gb2Ygc3luY1BvaW50LnZpZXdzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY2FuY2VsRXZlbnRzID0gY2FuY2VsRXZlbnRzLmNvbmNhdCh2aWV3UmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24odmlldywgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSk7XG4gICAgICAgICAgICBpZiAodmlld0lzRW1wdHkodmlldykpIHtcbiAgICAgICAgICAgICAgICBzeW5jUG9pbnQudmlld3MuZGVsZXRlKHZpZXdRdWVyeUlkKTtcbiAgICAgICAgICAgICAgICAvLyBXZSdsbCBkZWFsIHdpdGggY29tcGxldGUgdmlld3MgbGF0ZXIuXG4gICAgICAgICAgICAgICAgaWYgKCF2aWV3LnF1ZXJ5Ll9xdWVyeVBhcmFtcy5sb2Fkc0FsbERhdGEoKSkge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2godmlldy5xdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyByZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gdGhlIHNwZWNpZmljIHZpZXcuXG4gICAgICAgIGNvbnN0IHZpZXcgPSBzeW5jUG9pbnQudmlld3MuZ2V0KHF1ZXJ5SWQpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgY2FuY2VsRXZlbnRzID0gY2FuY2VsRXZlbnRzLmNvbmNhdCh2aWV3UmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24odmlldywgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSk7XG4gICAgICAgICAgICBpZiAodmlld0lzRW1wdHkodmlldykpIHtcbiAgICAgICAgICAgICAgICBzeW5jUG9pbnQudmlld3MuZGVsZXRlKHF1ZXJ5SWQpO1xuICAgICAgICAgICAgICAgIC8vIFdlJ2xsIGRlYWwgd2l0aCBjb21wbGV0ZSB2aWV3cyBsYXRlci5cbiAgICAgICAgICAgICAgICBpZiAoIXZpZXcucXVlcnkuX3F1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaCh2aWV3LnF1ZXJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGhhZENvbXBsZXRlVmlldyAmJiAhc3luY1BvaW50SGFzQ29tcGxldGVWaWV3KHN5bmNQb2ludCkpIHtcbiAgICAgICAgLy8gV2UgcmVtb3ZlZCBvdXIgbGFzdCBjb21wbGV0ZSB2aWV3LlxuICAgICAgICByZW1vdmVkLnB1c2gobmV3IChzeW5jUG9pbnRHZXRSZWZlcmVuY2VDb25zdHJ1Y3RvcigpKShxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgcmVtb3ZlZCwgZXZlbnRzOiBjYW5jZWxFdmVudHMgfTtcbn1cbmZ1bmN0aW9uIHN5bmNQb2ludEdldFF1ZXJ5Vmlld3Moc3luY1BvaW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCB2aWV3IG9mIHN5bmNQb2ludC52aWV3cy52YWx1ZXMoKSkge1xuICAgICAgICBpZiAoIXZpZXcucXVlcnkuX3F1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2aWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBkZXNpcmVkIGNvbXBsZXRlIHNuYXBzaG90XG4gKiBAcmV0dXJucyBBIGNvbXBsZXRlIGNhY2hlLCBpZiBpdCBleGlzdHNcbiAqL1xuZnVuY3Rpb24gc3luY1BvaW50R2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShzeW5jUG9pbnQsIHBhdGgpIHtcbiAgICBsZXQgc2VydmVyQ2FjaGUgPSBudWxsO1xuICAgIGZvciAoY29uc3QgdmlldyBvZiBzeW5jUG9pbnQudmlld3MudmFsdWVzKCkpIHtcbiAgICAgICAgc2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZSB8fCB2aWV3R2V0Q29tcGxldGVTZXJ2ZXJDYWNoZSh2aWV3LCBwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcnZlckNhY2hlO1xufVxuZnVuY3Rpb24gc3luY1BvaW50Vmlld0ZvclF1ZXJ5KHN5bmNQb2ludCwgcXVlcnkpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBxdWVyeS5fcXVlcnlQYXJhbXM7XG4gICAgaWYgKHBhcmFtcy5sb2Fkc0FsbERhdGEoKSkge1xuICAgICAgICByZXR1cm4gc3luY1BvaW50R2V0Q29tcGxldGVWaWV3KHN5bmNQb2ludCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBxdWVyeUlkID0gcXVlcnkuX3F1ZXJ5SWRlbnRpZmllcjtcbiAgICAgICAgcmV0dXJuIHN5bmNQb2ludC52aWV3cy5nZXQocXVlcnlJZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3luY1BvaW50Vmlld0V4aXN0c0ZvclF1ZXJ5KHN5bmNQb2ludCwgcXVlcnkpIHtcbiAgICByZXR1cm4gc3luY1BvaW50Vmlld0ZvclF1ZXJ5KHN5bmNQb2ludCwgcXVlcnkpICE9IG51bGw7XG59XG5mdW5jdGlvbiBzeW5jUG9pbnRIYXNDb21wbGV0ZVZpZXcoc3luY1BvaW50KSB7XG4gICAgcmV0dXJuIHN5bmNQb2ludEdldENvbXBsZXRlVmlldyhzeW5jUG9pbnQpICE9IG51bGw7XG59XG5mdW5jdGlvbiBzeW5jUG9pbnRHZXRDb21wbGV0ZVZpZXcoc3luY1BvaW50KSB7XG4gICAgZm9yIChjb25zdCB2aWV3IG9mIHN5bmNQb2ludC52aWV3cy52YWx1ZXMoKSkge1xuICAgICAgICBpZiAodmlldy5xdWVyeS5fcXVlcnlQYXJhbXMubG9hZHNBbGxEYXRhKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xubGV0IHJlZmVyZW5jZUNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gc3luY1RyZWVTZXRSZWZlcmVuY2VDb25zdHJ1Y3Rvcih2YWwpIHtcbiAgICBhc3NlcnQoIXJlZmVyZW5jZUNvbnN0cnVjdG9yLCAnX19yZWZlcmVuY2VDb25zdHJ1Y3RvciBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQnKTtcbiAgICByZWZlcmVuY2VDb25zdHJ1Y3RvciA9IHZhbDtcbn1cbmZ1bmN0aW9uIHN5bmNUcmVlR2V0UmVmZXJlbmNlQ29uc3RydWN0b3IoKSB7XG4gICAgYXNzZXJ0KHJlZmVyZW5jZUNvbnN0cnVjdG9yLCAnUmVmZXJlbmNlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcbiAgICByZXR1cm4gcmVmZXJlbmNlQ29uc3RydWN0b3I7XG59XG4vKipcbiAqIFN0YXRpYyB0cmFja2VyIGZvciBuZXh0IHF1ZXJ5IHRhZy5cbiAqL1xubGV0IHN5bmNUcmVlTmV4dFF1ZXJ5VGFnXyA9IDE7XG4vKipcbiAqIFN5bmNUcmVlIGlzIHRoZSBjZW50cmFsIGNsYXNzIGZvciBtYW5hZ2luZyBldmVudCBjYWxsYmFjayByZWdpc3RyYXRpb24sIGRhdGEgY2FjaGluZywgdmlld3NcbiAqIChxdWVyeSBwcm9jZXNzaW5nKSwgYW5kIGV2ZW50IGdlbmVyYXRpb24uICBUaGVyZSBhcmUgdHlwaWNhbGx5IHR3byBTeW5jVHJlZSBpbnN0YW5jZXMgZm9yXG4gKiBlYWNoIFJlcG8sIG9uZSBmb3IgdGhlIG5vcm1hbCBGaXJlYmFzZSBkYXRhLCBhbmQgb25lIGZvciB0aGUgLmluZm8gZGF0YS5cbiAqXG4gKiBJdCBoYXMgYSBudW1iZXIgb2YgcmVzcG9uc2liaWxpdGllcywgaW5jbHVkaW5nOlxuICogIC0gVHJhY2tpbmcgYWxsIHVzZXIgZXZlbnQgY2FsbGJhY2tzIChyZWdpc3RlcmVkIHZpYSBhZGRFdmVudFJlZ2lzdHJhdGlvbigpIGFuZCByZW1vdmVFdmVudFJlZ2lzdHJhdGlvbigpKS5cbiAqICAtIEFwcGx5aW5nIGFuZCBjYWNoaW5nIGRhdGEgY2hhbmdlcyBmb3IgdXNlciBzZXQoKSwgdHJhbnNhY3Rpb24oKSwgYW5kIHVwZGF0ZSgpIGNhbGxzXG4gKiAgICAoYXBwbHlVc2VyT3ZlcndyaXRlKCksIGFwcGx5VXNlck1lcmdlKCkpLlxuICogIC0gQXBwbHlpbmcgYW5kIGNhY2hpbmcgZGF0YSBjaGFuZ2VzIGZvciBzZXJ2ZXIgZGF0YSBjaGFuZ2VzIChhcHBseVNlcnZlck92ZXJ3cml0ZSgpLFxuICogICAgYXBwbHlTZXJ2ZXJNZXJnZSgpKS5cbiAqICAtIEdlbmVyYXRpbmcgdXNlci1mYWNpbmcgZXZlbnRzIGZvciBzZXJ2ZXIgYW5kIHVzZXIgY2hhbmdlcyAoYWxsIG9mIHRoZSBhcHBseSogbWV0aG9kc1xuICogICAgcmV0dXJuIHRoZSBzZXQgb2YgZXZlbnRzIHRoYXQgbmVlZCB0byBiZSByYWlzZWQgYXMgYSByZXN1bHQpLlxuICogIC0gTWFpbnRhaW5pbmcgdGhlIGFwcHJvcHJpYXRlIHNldCBvZiBzZXJ2ZXIgbGlzdGVucyB0byBlbnN1cmUgd2UgYXJlIGFsd2F5cyBzdWJzY3JpYmVkXG4gKiAgICB0byB0aGUgY29ycmVjdCBzZXQgb2YgcGF0aHMgYW5kIHF1ZXJpZXMgdG8gc2F0aXNmeSB0aGUgY3VycmVudCBzZXQgb2YgdXNlciBldmVudFxuICogICAgY2FsbGJhY2tzIChsaXN0ZW5zIGFyZSBzdGFydGVkL3N0b3BwZWQgdXNpbmcgdGhlIHByb3ZpZGVkIGxpc3RlblByb3ZpZGVyKS5cbiAqXG4gKiBOT1RFOiBBbHRob3VnaCBTeW5jVHJlZSB0cmFja3MgZXZlbnQgY2FsbGJhY2tzIGFuZCBjYWxjdWxhdGVzIGV2ZW50cyB0byByYWlzZSwgdGhlIGFjdHVhbFxuICogZXZlbnRzIGFyZSByZXR1cm5lZCB0byB0aGUgY2FsbGVyIHJhdGhlciB0aGFuIHJhaXNlZCBzeW5jaHJvbm91c2x5LlxuICpcbiAqL1xuY2xhc3MgU3luY1RyZWUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5Qcm92aWRlcl8gLSBVc2VkIGJ5IFN5bmNUcmVlIHRvIHN0YXJ0IC8gc3RvcCBsaXN0ZW5pbmdcbiAgICAgKiAgIHRvIHNlcnZlciBkYXRhLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxpc3RlblByb3ZpZGVyXykge1xuICAgICAgICB0aGlzLmxpc3RlblByb3ZpZGVyXyA9IGxpc3RlblByb3ZpZGVyXztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyZWUgb2YgU3luY1BvaW50cy4gIFRoZXJlJ3MgYSBTeW5jUG9pbnQgYXQgYW55IGxvY2F0aW9uIHRoYXQgaGFzIDEgb3IgbW9yZSB2aWV3cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3luY1BvaW50VHJlZV8gPSBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdHJlZSBvZiBhbGwgcGVuZGluZyB1c2VyIHdyaXRlcyAodXNlci1pbml0aWF0ZWQgc2V0KCkncywgdHJhbnNhY3Rpb24oKSdzLCB1cGRhdGUoKSdzLCBldGMuKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGVuZGluZ1dyaXRlVHJlZV8gPSBuZXdXcml0ZVRyZWUoKTtcbiAgICAgICAgdGhpcy50YWdUb1F1ZXJ5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnF1ZXJ5VG9UYWdNYXAgPSBuZXcgTWFwKCk7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBseSB0aGUgZGF0YSBjaGFuZ2VzIGZvciBhIHVzZXItZ2VuZXJhdGVkIHNldCgpIG9yIHRyYW5zYWN0aW9uKCkgY2FsbC5cbiAqXG4gKiBAcmV0dXJucyBFdmVudHMgdG8gcmFpc2UuXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlQXBwbHlVc2VyT3ZlcndyaXRlKHN5bmNUcmVlLCBwYXRoLCBuZXdEYXRhLCB3cml0ZUlkLCB2aXNpYmxlKSB7XG4gICAgLy8gUmVjb3JkIHBlbmRpbmcgd3JpdGUuXG4gICAgd3JpdGVUcmVlQWRkT3ZlcndyaXRlKHN5bmNUcmVlLnBlbmRpbmdXcml0ZVRyZWVfLCBwYXRoLCBuZXdEYXRhLCB3cml0ZUlkLCB2aXNpYmxlKTtcbiAgICBpZiAoIXZpc2libGUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKHN5bmNUcmVlLCBuZXcgT3ZlcndyaXRlKG5ld09wZXJhdGlvblNvdXJjZVVzZXIoKSwgcGF0aCwgbmV3RGF0YSkpO1xuICAgIH1cbn1cbi8qKlxuICogQXBwbHkgdGhlIGRhdGEgZnJvbSBhIHVzZXItZ2VuZXJhdGVkIHVwZGF0ZSgpIGNhbGxcbiAqXG4gKiBAcmV0dXJucyBFdmVudHMgdG8gcmFpc2UuXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlQXBwbHlVc2VyTWVyZ2Uoc3luY1RyZWUsIHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVJZCkge1xuICAgIC8vIFJlY29yZCBwZW5kaW5nIG1lcmdlLlxuICAgIHdyaXRlVHJlZUFkZE1lcmdlKHN5bmNUcmVlLnBlbmRpbmdXcml0ZVRyZWVfLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlSWQpO1xuICAgIGNvbnN0IGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcbiAgICByZXR1cm4gc3luY1RyZWVBcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18oc3luY1RyZWUsIG5ldyBNZXJnZShuZXdPcGVyYXRpb25Tb3VyY2VVc2VyKCksIHBhdGgsIGNoYW5nZVRyZWUpKTtcbn1cbi8qKlxuICogQWNrbm93bGVkZ2UgYSBwZW5kaW5nIHVzZXIgd3JpdGUgdGhhdCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkIHdpdGggYXBwbHlVc2VyT3ZlcndyaXRlKCkgb3IgYXBwbHlVc2VyTWVyZ2UoKS5cbiAqXG4gKiBAcGFyYW0gcmV2ZXJ0IC0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gd3JpdGUgZmFpbGVkIGFuZCBuZWVkcyB0byBiZSByZXZlcnRlZFxuICogQHJldHVybnMgRXZlbnRzIHRvIHJhaXNlLlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFja1VzZXJXcml0ZShzeW5jVHJlZSwgd3JpdGVJZCwgcmV2ZXJ0ID0gZmFsc2UpIHtcbiAgICBjb25zdCB3cml0ZSA9IHdyaXRlVHJlZUdldFdyaXRlKHN5bmNUcmVlLnBlbmRpbmdXcml0ZVRyZWVfLCB3cml0ZUlkKTtcbiAgICBjb25zdCBuZWVkVG9SZWV2YWx1YXRlID0gd3JpdGVUcmVlUmVtb3ZlV3JpdGUoc3luY1RyZWUucGVuZGluZ1dyaXRlVHJlZV8sIHdyaXRlSWQpO1xuICAgIGlmICghbmVlZFRvUmVldmFsdWF0ZSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgYWZmZWN0ZWRUcmVlID0gbmV3IEltbXV0YWJsZVRyZWUobnVsbCk7XG4gICAgICAgIGlmICh3cml0ZS5zbmFwICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG92ZXJ3cml0ZVxuICAgICAgICAgICAgYWZmZWN0ZWRUcmVlID0gYWZmZWN0ZWRUcmVlLnNldChuZXdFbXB0eVBhdGgoKSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlYWNoKHdyaXRlLmNoaWxkcmVuLCAocGF0aFN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGFmZmVjdGVkVHJlZSA9IGFmZmVjdGVkVHJlZS5zZXQobmV3IFBhdGgocGF0aFN0cmluZyksIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKHN5bmNUcmVlLCBuZXcgQWNrVXNlcldyaXRlKHdyaXRlLnBhdGgsIGFmZmVjdGVkVHJlZSwgcmV2ZXJ0KSk7XG4gICAgfVxufVxuLyoqXG4gKiBBcHBseSBuZXcgc2VydmVyIGRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgcGF0aC4uXG4gKlxuICogQHJldHVybnMgRXZlbnRzIHRvIHJhaXNlLlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFwcGx5U2VydmVyT3ZlcndyaXRlKHN5bmNUcmVlLCBwYXRoLCBuZXdEYXRhKSB7XG4gICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKHN5bmNUcmVlLCBuZXcgT3ZlcndyaXRlKG5ld09wZXJhdGlvblNvdXJjZVNlcnZlcigpLCBwYXRoLCBuZXdEYXRhKSk7XG59XG4vKipcbiAqIEFwcGx5IG5ldyBzZXJ2ZXIgZGF0YSB0byBiZSBtZXJnZWQgaW4gYXQgdGhlIHNwZWNpZmllZCBwYXRoLlxuICpcbiAqIEByZXR1cm5zIEV2ZW50cyB0byByYWlzZS5cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVBcHBseVNlcnZlck1lcmdlKHN5bmNUcmVlLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4pIHtcbiAgICBjb25zdCBjaGFuZ2VUcmVlID0gSW1tdXRhYmxlVHJlZS5mcm9tT2JqZWN0KGNoYW5nZWRDaGlsZHJlbik7XG4gICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKHN5bmNUcmVlLCBuZXcgTWVyZ2UobmV3T3BlcmF0aW9uU291cmNlU2VydmVyKCksIHBhdGgsIGNoYW5nZVRyZWUpKTtcbn1cbi8qKlxuICogQXBwbHkgYSBsaXN0ZW4gY29tcGxldGUgZm9yIGEgcXVlcnlcbiAqXG4gKiBAcmV0dXJucyBFdmVudHMgdG8gcmFpc2UuXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlQXBwbHlMaXN0ZW5Db21wbGV0ZShzeW5jVHJlZSwgcGF0aCkge1xuICAgIHJldHVybiBzeW5jVHJlZUFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhzeW5jVHJlZSwgbmV3IExpc3RlbkNvbXBsZXRlKG5ld09wZXJhdGlvblNvdXJjZVNlcnZlcigpLCBwYXRoKSk7XG59XG4vKipcbiAqIEFwcGx5IGEgbGlzdGVuIGNvbXBsZXRlIGZvciBhIHRhZ2dlZCBxdWVyeVxuICpcbiAqIEByZXR1cm5zIEV2ZW50cyB0byByYWlzZS5cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVBcHBseVRhZ2dlZExpc3RlbkNvbXBsZXRlKHN5bmNUcmVlLCBwYXRoLCB0YWcpIHtcbiAgICBjb25zdCBxdWVyeUtleSA9IHN5bmNUcmVlUXVlcnlLZXlGb3JUYWdfKHN5bmNUcmVlLCB0YWcpO1xuICAgIGlmIChxdWVyeUtleSkge1xuICAgICAgICBjb25zdCByID0gc3luY1RyZWVQYXJzZVF1ZXJ5S2V5XyhxdWVyeUtleSk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGF0aCA9IHIucGF0aCwgcXVlcnlJZCA9IHIucXVlcnlJZDtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gbmV3UmVsYXRpdmVQYXRoKHF1ZXJ5UGF0aCwgcGF0aCk7XG4gICAgICAgIGNvbnN0IG9wID0gbmV3IExpc3RlbkNvbXBsZXRlKG5ld09wZXJhdGlvblNvdXJjZVNlcnZlclRhZ2dlZFF1ZXJ5KHF1ZXJ5SWQpLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICByZXR1cm4gc3luY1RyZWVBcHBseVRhZ2dlZE9wZXJhdGlvbl8oc3luY1RyZWUsIHF1ZXJ5UGF0aCwgb3ApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gV2UndmUgYWxyZWFkeSByZW1vdmVkIHRoZSBxdWVyeS4gTm8gYmlnIGRlYWwsIGlnbm9yZSB0aGUgdXBkYXRlXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKipcbiAqIFJlbW92ZSBldmVudCBjYWxsYmFjayhzKS5cbiAqXG4gKiBJZiBxdWVyeSBpcyB0aGUgZGVmYXVsdCBxdWVyeSwgd2UnbGwgY2hlY2sgYWxsIHF1ZXJpZXMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnRSZWdpc3RyYXRpb24uXG4gKiBJZiBldmVudFJlZ2lzdHJhdGlvbiBpcyBudWxsLCB3ZSdsbCByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIHNwZWNpZmllZCBxdWVyeS9xdWVyaWVzLlxuICpcbiAqIEBwYXJhbSBldmVudFJlZ2lzdHJhdGlvbiAtIElmIG51bGwsIGFsbCBjYWxsYmFja3MgYXJlIHJlbW92ZWQuXG4gKiBAcGFyYW0gY2FuY2VsRXJyb3IgLSBJZiBhIGNhbmNlbEVycm9yIGlzIHByb3ZpZGVkLCBhcHByb3ByaWF0ZSBjYW5jZWwgZXZlbnRzIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0gc2tpcExpc3RlbmVyRGVkdXAgLSBXaGVuIHBlcmZvcm1pbmcgYSBgZ2V0KClgLCB3ZSBkb24ndCBhZGQgYW55IG5ldyBsaXN0ZW5lcnMsIHNvIG5vXG4gKiAgZGVkdXBpbmcgbmVlZHMgdG8gdGFrZSBwbGFjZS4gVGhpcyBmbGFnIGFsbG93cyB0b2dnbGluZyBvZiB0aGF0IGJlaGF2aW9yXG4gKiBAcmV0dXJucyBDYW5jZWwgZXZlbnRzLCBpZiBjYW5jZWxFcnJvciB3YXMgcHJvdmlkZWQuXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlUmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24oc3luY1RyZWUsIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IsIHNraXBMaXN0ZW5lckRlZHVwID0gZmFsc2UpIHtcbiAgICAvLyBGaW5kIHRoZSBzeW5jUG9pbnQgZmlyc3QuIFRoZW4gZGVhbCB3aXRoIHdoZXRoZXIgb3Igbm90IGl0IGhhcyBtYXRjaGluZyBsaXN0ZW5lcnNcbiAgICBjb25zdCBwYXRoID0gcXVlcnkuX3BhdGg7XG4gICAgY29uc3QgbWF5YmVTeW5jUG9pbnQgPSBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5nZXQocGF0aCk7XG4gICAgbGV0IGNhbmNlbEV2ZW50cyA9IFtdO1xuICAgIC8vIEEgcmVtb3ZhbCBvbiBhIGRlZmF1bHQgcXVlcnkgYWZmZWN0cyBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBBIHJlbW92YWwgb24gYW4gaW5kZXhlZCBxdWVyeSwgZXZlbiBvbmUgd2l0aG91dFxuICAgIC8vIG90aGVyIHF1ZXJ5IGNvbnN0cmFpbnRzLCBkb2VzICpub3QqIGFmZmVjdCBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBTbyB0aGlzIGNoZWNrIG11c3QgYmUgZm9yICdkZWZhdWx0JywgYW5kXG4gICAgLy8gbm90IGxvYWRzQWxsRGF0YSgpLlxuICAgIGlmIChtYXliZVN5bmNQb2ludCAmJlxuICAgICAgICAocXVlcnkuX3F1ZXJ5SWRlbnRpZmllciA9PT0gJ2RlZmF1bHQnIHx8XG4gICAgICAgICAgICBzeW5jUG9pbnRWaWV3RXhpc3RzRm9yUXVlcnkobWF5YmVTeW5jUG9pbnQsIHF1ZXJ5KSkpIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZEFuZEV2ZW50cyA9IHN5bmNQb2ludFJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKG1heWJlU3luY1BvaW50LCBxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKTtcbiAgICAgICAgaWYgKHN5bmNQb2ludElzRW1wdHkobWF5YmVTeW5jUG9pbnQpKSB7XG4gICAgICAgICAgICBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXyA9IHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfLnJlbW92ZShwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdmVkID0gcmVtb3ZlZEFuZEV2ZW50cy5yZW1vdmVkO1xuICAgICAgICBjYW5jZWxFdmVudHMgPSByZW1vdmVkQW5kRXZlbnRzLmV2ZW50cztcbiAgICAgICAgaWYgKCFza2lwTGlzdGVuZXJEZWR1cCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBtYXkgaGF2ZSBqdXN0IHJlbW92ZWQgb25lIG9mIG1hbnkgbGlzdGVuZXJzIGFuZCBjYW4gc2hvcnQtY2lyY3VpdCB0aGlzIHdob2xlIHByb2Nlc3NcbiAgICAgICAgICAgICAqIFdlIG1heSBhbHNvIG5vdCBoYXZlIHJlbW92ZWQgYSBkZWZhdWx0IGxpc3RlbmVyLCBpbiB3aGljaCBjYXNlIGFsbCBvZiB0aGUgZGVzY2VuZGFudCBsaXN0ZW5lcnMgc2hvdWxkIGFscmVhZHkgYmVcbiAgICAgICAgICAgICAqIHByb3Blcmx5IHNldCB1cC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gU2luY2UgaW5kZXhlZCBxdWVyaWVzIGNhbiBzaGFkb3cgaWYgdGhleSBkb24ndCBoYXZlIG90aGVyIHF1ZXJ5IGNvbnN0cmFpbnRzLCBjaGVjayBmb3IgbG9hZHNBbGxEYXRhKCksIGluc3RlYWQgb2ZcbiAgICAgICAgICAgIC8vIHF1ZXJ5SWQgPT09ICdkZWZhdWx0J1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZpbmdEZWZhdWx0ID0gLTEgIT09XG4gICAgICAgICAgICAgICAgcmVtb3ZlZC5maW5kSW5kZXgocXVlcnkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkuX3F1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgY292ZXJlZCA9IHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfLmZpbmRPblBhdGgocGF0aCwgKHJlbGF0aXZlUGF0aCwgcGFyZW50U3luY1BvaW50KSA9PiBzeW5jUG9pbnRIYXNDb21wbGV0ZVZpZXcocGFyZW50U3luY1BvaW50KSk7XG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0ICYmICFjb3ZlcmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VidHJlZSA9IHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfLnN1YnRyZWUocGF0aCk7XG4gICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIHBvdGVudGlhbGx5IGNoaWxkIGxpc3RlbmVycy4gRGV0ZXJtaW5lIHdoYXQgaWYgYW55IGxpc3RlbnMgd2UgbmVlZCB0byBzZW5kIGJlZm9yZSBleGVjdXRpbmcgdGhlXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZhbFxuICAgICAgICAgICAgICAgIGlmICghc3VidHJlZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBmb2xkIG92ZXIgb3VyIHN1YnRyZWUgYW5kIGNvbGxlY3QgdGhlIGxpc3RlbmVycyB0byBzZW5kXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZpZXdzID0gc3luY1RyZWVDb2xsZWN0RGlzdGluY3RWaWV3c0ZvclN1YlRyZWVfKHN1YnRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBPaywgd2UndmUgY29sbGVjdGVkIGFsbCB0aGUgbGlzdGVucyB3ZSBuZWVkLiBTZXQgdGhlbSB1cC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdWaWV3cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ld1ZpZXdzW2ldLCBuZXdRdWVyeSA9IHZpZXcucXVlcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IHN5bmNUcmVlQ3JlYXRlTGlzdGVuZXJGb3JWaWV3XyhzeW5jVHJlZSwgdmlldyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeW5jVHJlZS5saXN0ZW5Qcm92aWRlcl8uc3RhcnRMaXN0ZW5pbmcoc3luY1RyZWVRdWVyeUZvckxpc3RlbmluZ18obmV3UXVlcnkpLCBzeW5jVHJlZVRhZ0ZvclF1ZXJ5KHN5bmNUcmVlLCBuZXdRdWVyeSksIGxpc3RlbmVyLmhhc2hGbiwgbGlzdGVuZXIub25Db21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHRoZXJlJ3Mgbm90aGluZyBiZWxvdyB1cywgc28gbm90aGluZyB3ZSBuZWVkIHRvIHN0YXJ0IGxpc3RlbmluZyBvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCBhbnl0aGluZyBhbmQgd2UncmUgbm90IGNvdmVyZWQgYnkgYSBoaWdoZXIgdXAgbGlzdGVuLCB3ZSBuZWVkIHRvIHN0b3AgbGlzdGVuaW5nIG9uIHRoaXMgcXVlcnlcbiAgICAgICAgICAgIC8vIFRoZSBhYm92ZSBibG9jayBoYXMgdXMgY292ZXJlZCBpbiB0ZXJtcyBvZiBtYWtpbmcgc3VyZSB3ZSdyZSBzZXQgdXAgb24gbGlzdGVucyBsb3dlciBpbiB0aGUgdHJlZS5cbiAgICAgICAgICAgIC8vIEFsc28sIG5vdGUgdGhhdCBpZiB3ZSBoYXZlIGEgY2FuY2VsRXJyb3IsIGl0J3MgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYXQgdGhlIHByb3ZpZGVyIGxldmVsLlxuICAgICAgICAgICAgaWYgKCFjb3ZlcmVkICYmIHJlbW92ZWQubGVuZ3RoID4gMCAmJiAhY2FuY2VsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZW1vdmVkIGEgZGVmYXVsdCwgdGhlbiB3ZSB3ZXJlbid0IGxpc3RlbmluZyBvbiBhbnkgb2YgdGhlIG90aGVyIHF1ZXJpZXMgaGVyZS4gSnVzdCBjYW5jZWwgdGhlIG9uZVxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQuIE90aGVyd2lzZSwgd2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggYW5kIGNhbmNlbCBlYWNoIGluZGl2aWR1YWwgcXVlcnlcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHRhZyBkZWZhdWx0IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VGFnID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3luY1RyZWUubGlzdGVuUHJvdmlkZXJfLnN0b3BMaXN0ZW5pbmcoc3luY1RyZWVRdWVyeUZvckxpc3RlbmluZ18ocXVlcnkpLCBkZWZhdWx0VGFnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWQuZm9yRWFjaCgocXVlcnlUb1JlbW92ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnVG9SZW1vdmUgPSBzeW5jVHJlZS5xdWVyeVRvVGFnTWFwLmdldChzeW5jVHJlZU1ha2VRdWVyeUtleV8ocXVlcnlUb1JlbW92ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3luY1RyZWUubGlzdGVuUHJvdmlkZXJfLnN0b3BMaXN0ZW5pbmcoc3luY1RyZWVRdWVyeUZvckxpc3RlbmluZ18ocXVlcnlUb1JlbW92ZSksIHRhZ1RvUmVtb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vdywgY2xlYXIgYWxsIG9mIHRoZSB0YWdzIHdlJ3JlIHRyYWNraW5nIGZvciB0aGUgcmVtb3ZlZCBsaXN0ZW5zXG4gICAgICAgIHN5bmNUcmVlUmVtb3ZlVGFnc18oc3luY1RyZWUsIHJlbW92ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2FuY2VsRXZlbnRzO1xufVxuLyoqXG4gKiBBcHBseSBuZXcgc2VydmVyIGRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgdGFnZ2VkIHF1ZXJ5LlxuICpcbiAqIEByZXR1cm5zIEV2ZW50cyB0byByYWlzZS5cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVBcHBseVRhZ2dlZFF1ZXJ5T3ZlcndyaXRlKHN5bmNUcmVlLCBwYXRoLCBzbmFwLCB0YWcpIHtcbiAgICBjb25zdCBxdWVyeUtleSA9IHN5bmNUcmVlUXVlcnlLZXlGb3JUYWdfKHN5bmNUcmVlLCB0YWcpO1xuICAgIGlmIChxdWVyeUtleSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHIgPSBzeW5jVHJlZVBhcnNlUXVlcnlLZXlfKHF1ZXJ5S2V5KTtcbiAgICAgICAgY29uc3QgcXVlcnlQYXRoID0gci5wYXRoLCBxdWVyeUlkID0gci5xdWVyeUlkO1xuICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBuZXdSZWxhdGl2ZVBhdGgocXVlcnlQYXRoLCBwYXRoKTtcbiAgICAgICAgY29uc3Qgb3AgPSBuZXcgT3ZlcndyaXRlKG5ld09wZXJhdGlvblNvdXJjZVNlcnZlclRhZ2dlZFF1ZXJ5KHF1ZXJ5SWQpLCByZWxhdGl2ZVBhdGgsIHNuYXApO1xuICAgICAgICByZXR1cm4gc3luY1RyZWVBcHBseVRhZ2dlZE9wZXJhdGlvbl8oc3luY1RyZWUsIHF1ZXJ5UGF0aCwgb3ApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gUXVlcnkgbXVzdCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKipcbiAqIEFwcGx5IHNlcnZlciBkYXRhIHRvIGJlIG1lcmdlZCBpbiBmb3IgdGhlIHNwZWNpZmllZCB0YWdnZWQgcXVlcnkuXG4gKlxuICogQHJldHVybnMgRXZlbnRzIHRvIHJhaXNlLlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFwcGx5VGFnZ2VkUXVlcnlNZXJnZShzeW5jVHJlZSwgcGF0aCwgY2hhbmdlZENoaWxkcmVuLCB0YWcpIHtcbiAgICBjb25zdCBxdWVyeUtleSA9IHN5bmNUcmVlUXVlcnlLZXlGb3JUYWdfKHN5bmNUcmVlLCB0YWcpO1xuICAgIGlmIChxdWVyeUtleSkge1xuICAgICAgICBjb25zdCByID0gc3luY1RyZWVQYXJzZVF1ZXJ5S2V5XyhxdWVyeUtleSk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UGF0aCA9IHIucGF0aCwgcXVlcnlJZCA9IHIucXVlcnlJZDtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gbmV3UmVsYXRpdmVQYXRoKHF1ZXJ5UGF0aCwgcGF0aCk7XG4gICAgICAgIGNvbnN0IGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcbiAgICAgICAgY29uc3Qgb3AgPSBuZXcgTWVyZ2UobmV3T3BlcmF0aW9uU291cmNlU2VydmVyVGFnZ2VkUXVlcnkocXVlcnlJZCksIHJlbGF0aXZlUGF0aCwgY2hhbmdlVHJlZSk7XG4gICAgICAgIHJldHVybiBzeW5jVHJlZUFwcGx5VGFnZ2VkT3BlcmF0aW9uXyhzeW5jVHJlZSwgcXVlcnlQYXRoLCBvcCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBXZSd2ZSBhbHJlYWR5IHJlbW92ZWQgdGhlIHF1ZXJ5LiBObyBiaWcgZGVhbCwgaWdub3JlIHRoZSB1cGRhdGVcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbi8qKlxuICogQWRkIGFuIGV2ZW50IGNhbGxiYWNrIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5LlxuICpcbiAqIEByZXR1cm5zIEV2ZW50cyB0byByYWlzZS5cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVBZGRFdmVudFJlZ2lzdHJhdGlvbihzeW5jVHJlZSwgcXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCBza2lwU2V0dXBMaXN0ZW5lciA9IGZhbHNlKSB7XG4gICAgY29uc3QgcGF0aCA9IHF1ZXJ5Ll9wYXRoO1xuICAgIGxldCBzZXJ2ZXJDYWNoZSA9IG51bGw7XG4gICAgbGV0IGZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyA9IGZhbHNlO1xuICAgIC8vIEFueSBjb3ZlcmluZyB3cml0ZXMgd2lsbCBuZWNlc3NhcmlseSBiZSBhdCB0aGUgcm9vdCwgc28gcmVhbGx5IGFsbCB3ZSBuZWVkIHRvIGZpbmQgaXMgdGhlIHNlcnZlciBjYWNoZS5cbiAgICAvLyBDb25zaWRlciBvcHRpbWl6aW5nIHRoaXMgb25jZSB0aGVyZSdzIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBhY3R1YWwgYmVoYXZpb3Igd2lsbCBiZS5cbiAgICBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5mb3JlYWNoT25QYXRoKHBhdGgsIChwYXRoVG9TeW5jUG9pbnQsIHNwKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IG5ld1JlbGF0aXZlUGF0aChwYXRoVG9TeW5jUG9pbnQsIHBhdGgpO1xuICAgICAgICBzZXJ2ZXJDYWNoZSA9XG4gICAgICAgICAgICBzZXJ2ZXJDYWNoZSB8fCBzeW5jUG9pbnRHZXRDb21wbGV0ZVNlcnZlckNhY2hlKHNwLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICBmb3VuZEFuY2VzdG9yRGVmYXVsdFZpZXcgPVxuICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3IHx8IHN5bmNQb2ludEhhc0NvbXBsZXRlVmlldyhzcCk7XG4gICAgfSk7XG4gICAgbGV0IHN5bmNQb2ludCA9IHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfLmdldChwYXRoKTtcbiAgICBpZiAoIXN5bmNQb2ludCkge1xuICAgICAgICBzeW5jUG9pbnQgPSBuZXcgU3luY1BvaW50KCk7XG4gICAgICAgIHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfID0gc3luY1RyZWUuc3luY1BvaW50VHJlZV8uc2V0KHBhdGgsIHN5bmNQb2ludCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3VuZEFuY2VzdG9yRGVmYXVsdFZpZXcgPVxuICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3IHx8IHN5bmNQb2ludEhhc0NvbXBsZXRlVmlldyhzeW5jUG9pbnQpO1xuICAgICAgICBzZXJ2ZXJDYWNoZSA9XG4gICAgICAgICAgICBzZXJ2ZXJDYWNoZSB8fCBzeW5jUG9pbnRHZXRDb21wbGV0ZVNlcnZlckNhY2hlKHN5bmNQb2ludCwgbmV3RW1wdHlQYXRoKCkpO1xuICAgIH1cbiAgICBsZXQgc2VydmVyQ2FjaGVDb21wbGV0ZTtcbiAgICBpZiAoc2VydmVyQ2FjaGUgIT0gbnVsbCkge1xuICAgICAgICBzZXJ2ZXJDYWNoZUNvbXBsZXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNlcnZlckNhY2hlQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgc2VydmVyQ2FjaGUgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgY29uc3Qgc3VidHJlZSA9IHN5bmNUcmVlLnN5bmNQb2ludFRyZWVfLnN1YnRyZWUocGF0aCk7XG4gICAgICAgIHN1YnRyZWUuZm9yZWFjaENoaWxkKChjaGlsZE5hbWUsIGNoaWxkU3luY1BvaW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0ZUNhY2hlID0gc3luY1BvaW50R2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShjaGlsZFN5bmNQb2ludCwgbmV3RW1wdHlQYXRoKCkpO1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXJDYWNoZSA9IHNlcnZlckNhY2hlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSwgY29tcGxldGVDYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB2aWV3QWxyZWFkeUV4aXN0cyA9IHN5bmNQb2ludFZpZXdFeGlzdHNGb3JRdWVyeShzeW5jUG9pbnQsIHF1ZXJ5KTtcbiAgICBpZiAoIXZpZXdBbHJlYWR5RXhpc3RzICYmICFxdWVyeS5fcXVlcnlQYXJhbXMubG9hZHNBbGxEYXRhKCkpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB0cmFjayBhIHRhZyBmb3IgdGhpcyBxdWVyeVxuICAgICAgICBjb25zdCBxdWVyeUtleSA9IHN5bmNUcmVlTWFrZVF1ZXJ5S2V5XyhxdWVyeSk7XG4gICAgICAgIGFzc2VydCghc3luY1RyZWUucXVlcnlUb1RhZ01hcC5oYXMocXVlcnlLZXkpLCAnVmlldyBkb2VzIG5vdCBleGlzdCwgYnV0IHdlIGhhdmUgYSB0YWcnKTtcbiAgICAgICAgY29uc3QgdGFnID0gc3luY1RyZWVHZXROZXh0UXVlcnlUYWdfKCk7XG4gICAgICAgIHN5bmNUcmVlLnF1ZXJ5VG9UYWdNYXAuc2V0KHF1ZXJ5S2V5LCB0YWcpO1xuICAgICAgICBzeW5jVHJlZS50YWdUb1F1ZXJ5TWFwLnNldCh0YWcsIHF1ZXJ5S2V5KTtcbiAgICB9XG4gICAgY29uc3Qgd3JpdGVzQ2FjaGUgPSB3cml0ZVRyZWVDaGlsZFdyaXRlcyhzeW5jVHJlZS5wZW5kaW5nV3JpdGVUcmVlXywgcGF0aCk7XG4gICAgbGV0IGV2ZW50cyA9IHN5bmNQb2ludEFkZEV2ZW50UmVnaXN0cmF0aW9uKHN5bmNQb2ludCwgcXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIHNlcnZlckNhY2hlQ29tcGxldGUpO1xuICAgIGlmICghdmlld0FscmVhZHlFeGlzdHMgJiYgIWZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyAmJiAhc2tpcFNldHVwTGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHN5bmNQb2ludFZpZXdGb3JRdWVyeShzeW5jUG9pbnQsIHF1ZXJ5KTtcbiAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChzeW5jVHJlZVNldHVwTGlzdGVuZXJfKHN5bmNUcmVlLCBxdWVyeSwgdmlldykpO1xuICAgIH1cbiAgICByZXR1cm4gZXZlbnRzO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgY29tcGxldGUgY2FjaGUsIGlmIHdlIGhhdmUgb25lLCBvZiB0aGUgZGF0YSBhdCBhIHBhcnRpY3VsYXIgcGF0aC4gSWYgdGhlIGxvY2F0aW9uIGRvZXMgbm90IGhhdmUgYVxuICogbGlzdGVuZXIgYWJvdmUgaXQsIHdlIHdpbGwgZ2V0IGEgZmFsc2UgXCJudWxsXCIuIFRoaXMgc2hvdWxkbid0IGJlIGEgcHJvYmxlbSBiZWNhdXNlIHRyYW5zYWN0aW9ucyB3aWxsIGFsd2F5c1xuICogaGF2ZSBhIGxpc3RlbmVyIGFib3ZlLCBhbmQgYXRvbWljIG9wZXJhdGlvbnMgd291bGQgY29ycmVjdGx5IHNob3cgYSBqaXR0ZXIgb2YgPGluY3JlbWVudCB2YWx1ZT4gLT5cbiAqICAgICA8aW5jcmVtZW50ZWQgdG90YWw+IGFzIHRoZSB3cml0ZSBpcyBhcHBsaWVkIGxvY2FsbHkgYW5kIHRoZW4gYWNrbm93bGVkZ2VkIGF0IHRoZSBzZXJ2ZXIuXG4gKlxuICogTm90ZTogdGhpcyBtZXRob2Qgd2lsbCAqaW5jbHVkZSogaGlkZGVuIHdyaXRlcyBmcm9tIHRyYW5zYWN0aW9uIHdpdGggYXBwbHlMb2NhbGx5IHNldCB0byBmYWxzZS5cbiAqXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBkYXRhIHdlIHdhbnRcbiAqIEBwYXJhbSB3cml0ZUlkc1RvRXhjbHVkZSAtIEEgc3BlY2lmaWMgc2V0IHRvIGJlIGV4Y2x1ZGVkXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlQ2FsY0NvbXBsZXRlRXZlbnRDYWNoZShzeW5jVHJlZSwgcGF0aCwgd3JpdGVJZHNUb0V4Y2x1ZGUpIHtcbiAgICBjb25zdCBpbmNsdWRlSGlkZGVuU2V0cyA9IHRydWU7XG4gICAgY29uc3Qgd3JpdGVUcmVlID0gc3luY1RyZWUucGVuZGluZ1dyaXRlVHJlZV87XG4gICAgY29uc3Qgc2VydmVyQ2FjaGUgPSBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5maW5kT25QYXRoKHBhdGgsIChwYXRoU29GYXIsIHN5bmNQb2ludCkgPT4ge1xuICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBuZXdSZWxhdGl2ZVBhdGgocGF0aFNvRmFyLCBwYXRoKTtcbiAgICAgICAgY29uc3Qgc2VydmVyQ2FjaGUgPSBzeW5jUG9pbnRHZXRDb21wbGV0ZVNlcnZlckNhY2hlKHN5bmNQb2ludCwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgaWYgKHNlcnZlckNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VydmVyQ2FjaGU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gd3JpdGVUcmVlQ2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh3cml0ZVRyZWUsIHBhdGgsIHNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlblNldHMpO1xufVxuZnVuY3Rpb24gc3luY1RyZWVHZXRTZXJ2ZXJWYWx1ZShzeW5jVHJlZSwgcXVlcnkpIHtcbiAgICBjb25zdCBwYXRoID0gcXVlcnkuX3BhdGg7XG4gICAgbGV0IHNlcnZlckNhY2hlID0gbnVsbDtcbiAgICAvLyBBbnkgY292ZXJpbmcgd3JpdGVzIHdpbGwgbmVjZXNzYXJpbHkgYmUgYXQgdGhlIHJvb3QsIHNvIHJlYWxseSBhbGwgd2UgbmVlZCB0byBmaW5kIGlzIHRoZSBzZXJ2ZXIgY2FjaGUuXG4gICAgLy8gQ29uc2lkZXIgb3B0aW1pemluZyB0aGlzIG9uY2UgdGhlcmUncyBhIGJldHRlciB1bmRlcnN0YW5kaW5nIG9mIHdoYXQgYWN0dWFsIGJlaGF2aW9yIHdpbGwgYmUuXG4gICAgc3luY1RyZWUuc3luY1BvaW50VHJlZV8uZm9yZWFjaE9uUGF0aChwYXRoLCAocGF0aFRvU3luY1BvaW50LCBzcCkgPT4ge1xuICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBuZXdSZWxhdGl2ZVBhdGgocGF0aFRvU3luY1BvaW50LCBwYXRoKTtcbiAgICAgICAgc2VydmVyQ2FjaGUgPVxuICAgICAgICAgICAgc2VydmVyQ2FjaGUgfHwgc3luY1BvaW50R2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShzcCwgcmVsYXRpdmVQYXRoKTtcbiAgICB9KTtcbiAgICBsZXQgc3luY1BvaW50ID0gc3luY1RyZWUuc3luY1BvaW50VHJlZV8uZ2V0KHBhdGgpO1xuICAgIGlmICghc3luY1BvaW50KSB7XG4gICAgICAgIHN5bmNQb2ludCA9IG5ldyBTeW5jUG9pbnQoKTtcbiAgICAgICAgc3luY1RyZWUuc3luY1BvaW50VHJlZV8gPSBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5zZXQocGF0aCwgc3luY1BvaW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNlcnZlckNhY2hlID1cbiAgICAgICAgICAgIHNlcnZlckNhY2hlIHx8IHN5bmNQb2ludEdldENvbXBsZXRlU2VydmVyQ2FjaGUoc3luY1BvaW50LCBuZXdFbXB0eVBhdGgoKSk7XG4gICAgfVxuICAgIGNvbnN0IHNlcnZlckNhY2hlQ29tcGxldGUgPSBzZXJ2ZXJDYWNoZSAhPSBudWxsO1xuICAgIGNvbnN0IHNlcnZlckNhY2hlTm9kZSA9IHNlcnZlckNhY2hlQ29tcGxldGVcbiAgICAgICAgPyBuZXcgQ2FjaGVOb2RlKHNlcnZlckNhY2hlLCB0cnVlLCBmYWxzZSlcbiAgICAgICAgOiBudWxsO1xuICAgIGNvbnN0IHdyaXRlc0NhY2hlID0gd3JpdGVUcmVlQ2hpbGRXcml0ZXMoc3luY1RyZWUucGVuZGluZ1dyaXRlVHJlZV8sIHF1ZXJ5Ll9wYXRoKTtcbiAgICBjb25zdCB2aWV3ID0gc3luY1BvaW50R2V0VmlldyhzeW5jUG9pbnQsIHF1ZXJ5LCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGVDb21wbGV0ZSA/IHNlcnZlckNhY2hlTm9kZS5nZXROb2RlKCkgOiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgc2VydmVyQ2FjaGVDb21wbGV0ZSk7XG4gICAgcmV0dXJuIHZpZXdHZXRDb21wbGV0ZU5vZGUodmlldyk7XG59XG4vKipcbiAqIEEgaGVscGVyIG1ldGhvZCB0aGF0IHZpc2l0cyBhbGwgZGVzY2VuZGFudCBhbmQgYW5jZXN0b3IgU3luY1BvaW50cywgYXBwbHlpbmcgdGhlIG9wZXJhdGlvbi5cbiAqXG4gKiBOT1RFUzpcbiAqIC0gRGVzY2VuZGFudCBTeW5jUG9pbnRzIHdpbGwgYmUgdmlzaXRlZCBmaXJzdCAoc2luY2Ugd2UgcmFpc2UgZXZlbnRzIGRlcHRoLWZpcnN0KS5cbiAqXG4gKiAtIFdlIGNhbGwgYXBwbHlPcGVyYXRpb24oKSBvbiBlYWNoIFN5bmNQb2ludCBwYXNzaW5nIHRocmVlIHRoaW5nczpcbiAqICAgMS4gQSB2ZXJzaW9uIG9mIHRoZSBPcGVyYXRpb24gdGhhdCBoYXMgYmVlbiBtYWRlIHJlbGF0aXZlIHRvIHRoZSBTeW5jUG9pbnQgbG9jYXRpb24uXG4gKiAgIDIuIEEgV3JpdGVUcmVlUmVmIG9mIGFueSB3cml0ZXMgd2UgaGF2ZSBjYWNoZWQgYXQgdGhlIFN5bmNQb2ludCBsb2NhdGlvbi5cbiAqICAgMy4gQSBzbmFwc2hvdCBOb2RlIHdpdGggY2FjaGVkIHNlcnZlciBkYXRhLCBpZiB3ZSBoYXZlIGl0LlxuICpcbiAqIC0gV2UgY29uY2F0ZW5hdGUgYWxsIG9mIHRoZSBldmVudHMgcmV0dXJuZWQgYnkgZWFjaCBTeW5jUG9pbnQgYW5kIHJldHVybiB0aGUgcmVzdWx0LlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhzeW5jVHJlZSwgb3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25IZWxwZXJfKG9wZXJhdGlvbiwgc3luY1RyZWUuc3luY1BvaW50VHJlZV8sIFxuICAgIC8qc2VydmVyQ2FjaGU9Ki8gbnVsbCwgd3JpdGVUcmVlQ2hpbGRXcml0ZXMoc3luY1RyZWUucGVuZGluZ1dyaXRlVHJlZV8sIG5ld0VtcHR5UGF0aCgpKSk7XG59XG4vKipcbiAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzX1xuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFwcGx5T3BlcmF0aW9uSGVscGVyXyhvcGVyYXRpb24sIHN5bmNQb2ludFRyZWUsIHNlcnZlckNhY2hlLCB3cml0ZXNDYWNoZSkge1xuICAgIGlmIChwYXRoSXNFbXB0eShvcGVyYXRpb24ucGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlPcGVyYXRpb25EZXNjZW5kYW50c0hlbHBlcl8ob3BlcmF0aW9uLCBzeW5jUG9pbnRUcmVlLCBzZXJ2ZXJDYWNoZSwgd3JpdGVzQ2FjaGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3luY1BvaW50ID0gc3luY1BvaW50VHJlZS5nZXQobmV3RW1wdHlQYXRoKCkpO1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGNhY2hlZCBzZXJ2ZXIgZGF0YSwgc2VlIGlmIHdlIGNhbiBnZXQgaXQgZnJvbSB0aGlzIFN5bmNQb2ludC5cbiAgICAgICAgaWYgKHNlcnZlckNhY2hlID09IG51bGwgJiYgc3luY1BvaW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc3luY1BvaW50R2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShzeW5jUG9pbnQsIG5ld0VtcHR5UGF0aCgpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZXZlbnRzID0gW107XG4gICAgICAgIGNvbnN0IGNoaWxkTmFtZSA9IHBhdGhHZXRGcm9udChvcGVyYXRpb24ucGF0aCk7XG4gICAgICAgIGNvbnN0IGNoaWxkT3BlcmF0aW9uID0gb3BlcmF0aW9uLm9wZXJhdGlvbkZvckNoaWxkKGNoaWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IGNoaWxkVHJlZSA9IHN5bmNQb2ludFRyZWUuY2hpbGRyZW4uZ2V0KGNoaWxkTmFtZSk7XG4gICAgICAgIGlmIChjaGlsZFRyZWUgJiYgY2hpbGRPcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkU2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZVxuICAgICAgICAgICAgICAgID8gc2VydmVyQ2FjaGUuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkV3JpdGVzQ2FjaGUgPSB3cml0ZVRyZWVSZWZDaGlsZCh3cml0ZXNDYWNoZSwgY2hpbGROYW1lKTtcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1RyZWVBcHBseU9wZXJhdGlvbkhlbHBlcl8oY2hpbGRPcGVyYXRpb24sIGNoaWxkVHJlZSwgY2hpbGRTZXJ2ZXJDYWNoZSwgY2hpbGRXcml0ZXNDYWNoZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzeW5jUG9pbnQpIHtcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1BvaW50QXBwbHlPcGVyYXRpb24oc3luY1BvaW50LCBvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudHM7XG4gICAgfVxufVxuLyoqXG4gKiBSZWN1cnNpdmUgaGVscGVyIGZvciBhcHBseU9wZXJhdGlvblRvU3luY1BvaW50c19cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVBcHBseU9wZXJhdGlvbkRlc2NlbmRhbnRzSGVscGVyXyhvcGVyYXRpb24sIHN5bmNQb2ludFRyZWUsIHNlcnZlckNhY2hlLCB3cml0ZXNDYWNoZSkge1xuICAgIGNvbnN0IHN5bmNQb2ludCA9IHN5bmNQb2ludFRyZWUuZ2V0KG5ld0VtcHR5UGF0aCgpKTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGNhY2hlZCBzZXJ2ZXIgZGF0YSwgc2VlIGlmIHdlIGNhbiBnZXQgaXQgZnJvbSB0aGlzIFN5bmNQb2ludC5cbiAgICBpZiAoc2VydmVyQ2FjaGUgPT0gbnVsbCAmJiBzeW5jUG9pbnQgIT0gbnVsbCkge1xuICAgICAgICBzZXJ2ZXJDYWNoZSA9IHN5bmNQb2ludEdldENvbXBsZXRlU2VydmVyQ2FjaGUoc3luY1BvaW50LCBuZXdFbXB0eVBhdGgoKSk7XG4gICAgfVxuICAgIGxldCBldmVudHMgPSBbXTtcbiAgICBzeW5jUG9pbnRUcmVlLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkU2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZVxuICAgICAgICAgICAgPyBzZXJ2ZXJDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNvbnN0IGNoaWxkV3JpdGVzQ2FjaGUgPSB3cml0ZVRyZWVSZWZDaGlsZCh3cml0ZXNDYWNoZSwgY2hpbGROYW1lKTtcbiAgICAgICAgY29uc3QgY2hpbGRPcGVyYXRpb24gPSBvcGVyYXRpb24ub3BlcmF0aW9uRm9yQ2hpbGQoY2hpbGROYW1lKTtcbiAgICAgICAgaWYgKGNoaWxkT3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNUcmVlQXBwbHlPcGVyYXRpb25EZXNjZW5kYW50c0hlbHBlcl8oY2hpbGRPcGVyYXRpb24sIGNoaWxkVHJlZSwgY2hpbGRTZXJ2ZXJDYWNoZSwgY2hpbGRXcml0ZXNDYWNoZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN5bmNQb2ludCkge1xuICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNQb2ludEFwcGx5T3BlcmF0aW9uKHN5bmNQb2ludCwgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50cztcbn1cbmZ1bmN0aW9uIHN5bmNUcmVlQ3JlYXRlTGlzdGVuZXJGb3JWaWV3XyhzeW5jVHJlZSwgdmlldykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdmlldy5xdWVyeTtcbiAgICBjb25zdCB0YWcgPSBzeW5jVHJlZVRhZ0ZvclF1ZXJ5KHN5bmNUcmVlLCBxdWVyeSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaEZuOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHZpZXdHZXRTZXJ2ZXJDYWNoZSh2aWV3KSB8fCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5oYXNoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ29tcGxldGU6IChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW5jVHJlZUFwcGx5VGFnZ2VkTGlzdGVuQ29tcGxldGUoc3luY1RyZWUsIHF1ZXJ5Ll9wYXRoLCB0YWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bmNUcmVlQXBwbHlMaXN0ZW5Db21wbGV0ZShzeW5jVHJlZSwgcXVlcnkuX3BhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIElmIGEgbGlzdGVuIGZhaWxlZCwga2lsbCBhbGwgb2YgdGhlIGxpc3RlbmVycyBoZXJlLCBub3QganVzdCB0aGUgb25lIHRoYXQgdHJpZ2dlcmVkIHRoZSBlcnJvci5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgbmVlZCB0byBiZSBzY29wZWQgdG8ganVzdCB0aGlzIGxpc3RlbmVyIGlmIHdlIGNoYW5nZSBwZXJtaXNzaW9ucyBvbiBmaWx0ZXJlZCBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXJyb3JGb3JTZXJ2ZXJDb2RlKHN0YXR1cywgcXVlcnkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW5jVHJlZVJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKHN5bmNUcmVlLCBxdWVyeSwgXG4gICAgICAgICAgICAgICAgLypldmVudFJlZ2lzdHJhdGlvbiovIG51bGwsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIFJldHVybiB0aGUgdGFnIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gcXVlcnkuXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlVGFnRm9yUXVlcnkoc3luY1RyZWUsIHF1ZXJ5KSB7XG4gICAgY29uc3QgcXVlcnlLZXkgPSBzeW5jVHJlZU1ha2VRdWVyeUtleV8ocXVlcnkpO1xuICAgIHJldHVybiBzeW5jVHJlZS5xdWVyeVRvVGFnTWFwLmdldChxdWVyeUtleSk7XG59XG4vKipcbiAqIEdpdmVuIGEgcXVlcnksIGNvbXB1dGVzIGEgXCJxdWVyeUtleVwiIHN1aXRhYmxlIGZvciB1c2UgaW4gb3VyIHF1ZXJ5VG9UYWdNYXBfLlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZU1ha2VRdWVyeUtleV8ocXVlcnkpIHtcbiAgICByZXR1cm4gcXVlcnkuX3BhdGgudG9TdHJpbmcoKSArICckJyArIHF1ZXJ5Ll9xdWVyeUlkZW50aWZpZXI7XG59XG4vKipcbiAqIFJldHVybiB0aGUgcXVlcnkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiB0YWcsIGlmIHdlIGhhdmUgb25lXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlUXVlcnlLZXlGb3JUYWdfKHN5bmNUcmVlLCB0YWcpIHtcbiAgICByZXR1cm4gc3luY1RyZWUudGFnVG9RdWVyeU1hcC5nZXQodGFnKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBxdWVyeUtleSAoY3JlYXRlZCBieSBtYWtlUXVlcnlLZXkpLCBwYXJzZSBpdCBiYWNrIGludG8gYSBwYXRoIGFuZCBxdWVyeUlkLlxuICovXG5mdW5jdGlvbiBzeW5jVHJlZVBhcnNlUXVlcnlLZXlfKHF1ZXJ5S2V5KSB7XG4gICAgY29uc3Qgc3BsaXRJbmRleCA9IHF1ZXJ5S2V5LmluZGV4T2YoJyQnKTtcbiAgICBhc3NlcnQoc3BsaXRJbmRleCAhPT0gLTEgJiYgc3BsaXRJbmRleCA8IHF1ZXJ5S2V5Lmxlbmd0aCAtIDEsICdCYWQgcXVlcnlLZXkuJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcXVlcnlJZDogcXVlcnlLZXkuc3Vic3RyKHNwbGl0SW5kZXggKyAxKSxcbiAgICAgICAgcGF0aDogbmV3IFBhdGgocXVlcnlLZXkuc3Vic3RyKDAsIHNwbGl0SW5kZXgpKVxuICAgIH07XG59XG4vKipcbiAqIEEgaGVscGVyIG1ldGhvZCB0byBhcHBseSB0YWdnZWQgb3BlcmF0aW9uc1xuICovXG5mdW5jdGlvbiBzeW5jVHJlZUFwcGx5VGFnZ2VkT3BlcmF0aW9uXyhzeW5jVHJlZSwgcXVlcnlQYXRoLCBvcGVyYXRpb24pIHtcbiAgICBjb25zdCBzeW5jUG9pbnQgPSBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5nZXQocXVlcnlQYXRoKTtcbiAgICBhc3NlcnQoc3luY1BvaW50LCBcIk1pc3Npbmcgc3luYyBwb2ludCBmb3IgcXVlcnkgdGFnIHRoYXQgd2UncmUgdHJhY2tpbmdcIik7XG4gICAgY29uc3Qgd3JpdGVzQ2FjaGUgPSB3cml0ZVRyZWVDaGlsZFdyaXRlcyhzeW5jVHJlZS5wZW5kaW5nV3JpdGVUcmVlXywgcXVlcnlQYXRoKTtcbiAgICByZXR1cm4gc3luY1BvaW50QXBwbHlPcGVyYXRpb24oc3luY1BvaW50LCBvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBudWxsKTtcbn1cbi8qKlxuICogVGhpcyBjb2xsYXBzZXMgbXVsdGlwbGUgdW5maWx0ZXJlZCB2aWV3cyBpbnRvIGEgc2luZ2xlIHZpZXcsIHNpbmNlIHdlIG9ubHkgbmVlZCBhIHNpbmdsZVxuICogbGlzdGVuZXIgZm9yIHRoZW0uXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlQ29sbGVjdERpc3RpbmN0Vmlld3NGb3JTdWJUcmVlXyhzdWJ0cmVlKSB7XG4gICAgcmV0dXJuIHN1YnRyZWUuZm9sZCgocmVsYXRpdmVQYXRoLCBtYXliZUNoaWxkU3luY1BvaW50LCBjaGlsZE1hcCkgPT4ge1xuICAgICAgICBpZiAobWF5YmVDaGlsZFN5bmNQb2ludCAmJiBzeW5jUG9pbnRIYXNDb21wbGV0ZVZpZXcobWF5YmVDaGlsZFN5bmNQb2ludCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlVmlldyA9IHN5bmNQb2ludEdldENvbXBsZXRlVmlldyhtYXliZUNoaWxkU3luY1BvaW50KTtcbiAgICAgICAgICAgIHJldHVybiBbY29tcGxldGVWaWV3XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vIGNvbXBsZXRlIHZpZXcgaGVyZSwgZmxhdHRlbiBhbnkgZGVlcGVyIGxpc3RlbnMgaW50byBhbiBhcnJheVxuICAgICAgICAgICAgbGV0IHZpZXdzID0gW107XG4gICAgICAgICAgICBpZiAobWF5YmVDaGlsZFN5bmNQb2ludCkge1xuICAgICAgICAgICAgICAgIHZpZXdzID0gc3luY1BvaW50R2V0UXVlcnlWaWV3cyhtYXliZUNoaWxkU3luY1BvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2goY2hpbGRNYXAsIChfa2V5LCBjaGlsZFZpZXdzKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlld3MgPSB2aWV3cy5jb25jYXQoY2hpbGRWaWV3cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2aWV3cztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcXVlcnkgdG8gYSBxdWVyeSB3ZSBzZW5kIHRoZSBzZXJ2ZXIgZm9yIGxpc3RlbmluZ1xuICpcbiAqIEByZXR1cm5zIFRoZSBub3JtYWxpemVkIHF1ZXJ5XG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlUXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5Ll9xdWVyeVBhcmFtcy5sb2Fkc0FsbERhdGEoKSAmJiAhcXVlcnkuX3F1ZXJ5UGFyYW1zLmlzRGVmYXVsdCgpKSB7XG4gICAgICAgIC8vIFdlIHRyZWF0IHF1ZXJpZXMgdGhhdCBsb2FkIGFsbCBkYXRhIGFzIGRlZmF1bHQgcXVlcmllc1xuICAgICAgICAvLyBDYXN0IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHJlZigpIHRlY2huaWNhbGx5IHJldHVybnMgRmlyZWJhc2Ugd2hpY2ggaXMgYWN0dWFsbHkgZmIuYXBpLkZpcmViYXNlIHdoaWNoIGluaGVyaXRzXG4gICAgICAgIC8vIGZyb20gUXVlcnlcbiAgICAgICAgcmV0dXJuIG5ldyAoc3luY1RyZWVHZXRSZWZlcmVuY2VDb25zdHJ1Y3RvcigpKShxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN5bmNUcmVlUmVtb3ZlVGFnc18oc3luY1RyZWUsIHF1ZXJpZXMpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHF1ZXJpZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgY29uc3QgcmVtb3ZlZFF1ZXJ5ID0gcXVlcmllc1tqXTtcbiAgICAgICAgaWYgKCFyZW1vdmVkUXVlcnkuX3F1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpKSB7XG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgaGF2ZSBhIHRhZyBmb3IgdGhpc1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZFF1ZXJ5S2V5ID0gc3luY1RyZWVNYWtlUXVlcnlLZXlfKHJlbW92ZWRRdWVyeSk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkUXVlcnlUYWcgPSBzeW5jVHJlZS5xdWVyeVRvVGFnTWFwLmdldChyZW1vdmVkUXVlcnlLZXkpO1xuICAgICAgICAgICAgc3luY1RyZWUucXVlcnlUb1RhZ01hcC5kZWxldGUocmVtb3ZlZFF1ZXJ5S2V5KTtcbiAgICAgICAgICAgIHN5bmNUcmVlLnRhZ1RvUXVlcnlNYXAuZGVsZXRlKHJlbW92ZWRRdWVyeVRhZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFN0YXRpYyBhY2Nlc3NvciBmb3IgcXVlcnkgdGFncy5cbiAqL1xuZnVuY3Rpb24gc3luY1RyZWVHZXROZXh0UXVlcnlUYWdfKCkge1xuICAgIHJldHVybiBzeW5jVHJlZU5leHRRdWVyeVRhZ18rKztcbn1cbi8qKlxuICogRm9yIGEgZ2l2ZW4gbmV3IGxpc3RlbiwgbWFuYWdlIHRoZSBkZS1kdXBsaWNhdGlvbiBvZiBvdXRzdGFuZGluZyBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEByZXR1cm5zIFRoaXMgbWV0aG9kIGNhbiByZXR1cm4gZXZlbnRzIHRvIHN1cHBvcnQgc3luY2hyb25vdXMgZGF0YSBzb3VyY2VzXG4gKi9cbmZ1bmN0aW9uIHN5bmNUcmVlU2V0dXBMaXN0ZW5lcl8oc3luY1RyZWUsIHF1ZXJ5LCB2aWV3KSB7XG4gICAgY29uc3QgcGF0aCA9IHF1ZXJ5Ll9wYXRoO1xuICAgIGNvbnN0IHRhZyA9IHN5bmNUcmVlVGFnRm9yUXVlcnkoc3luY1RyZWUsIHF1ZXJ5KTtcbiAgICBjb25zdCBsaXN0ZW5lciA9IHN5bmNUcmVlQ3JlYXRlTGlzdGVuZXJGb3JWaWV3XyhzeW5jVHJlZSwgdmlldyk7XG4gICAgY29uc3QgZXZlbnRzID0gc3luY1RyZWUubGlzdGVuUHJvdmlkZXJfLnN0YXJ0TGlzdGVuaW5nKHN5bmNUcmVlUXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSwgdGFnLCBsaXN0ZW5lci5oYXNoRm4sIGxpc3RlbmVyLm9uQ29tcGxldGUpO1xuICAgIGNvbnN0IHN1YnRyZWUgPSBzeW5jVHJlZS5zeW5jUG9pbnRUcmVlXy5zdWJ0cmVlKHBhdGgpO1xuICAgIC8vIFRoZSByb290IG9mIHRoaXMgc3VidHJlZSBoYXMgb3VyIHF1ZXJ5LiBXZSdyZSBoZXJlIGJlY2F1c2Ugd2UgZGVmaW5pdGVseSBuZWVkIHRvIHNlbmQgYSBsaXN0ZW4gZm9yIHRoYXQsIGJ1dCB3ZVxuICAgIC8vIG1heSBuZWVkIHRvIHNoYWRvdyBvdGhlciBsaXN0ZW5zIGFzIHdlbGwuXG4gICAgaWYgKHRhZykge1xuICAgICAgICBhc3NlcnQoIXN5bmNQb2ludEhhc0NvbXBsZXRlVmlldyhzdWJ0cmVlLnZhbHVlKSwgXCJJZiB3ZSdyZSBhZGRpbmcgYSBxdWVyeSwgaXQgc2hvdWxkbid0IGJlIHNoYWRvd2VkXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gU2hhZG93IGV2ZXJ5dGhpbmcgYXQgb3IgYmVsb3cgdGhpcyBsb2NhdGlvbiwgdGhpcyBpcyBhIGRlZmF1bHQgbGlzdGVuZXIuXG4gICAgICAgIGNvbnN0IHF1ZXJpZXNUb1N0b3AgPSBzdWJ0cmVlLmZvbGQoKHJlbGF0aXZlUGF0aCwgbWF5YmVDaGlsZFN5bmNQb2ludCwgY2hpbGRNYXApID0+IHtcbiAgICAgICAgICAgIGlmICghcGF0aElzRW1wdHkocmVsYXRpdmVQYXRoKSAmJlxuICAgICAgICAgICAgICAgIG1heWJlQ2hpbGRTeW5jUG9pbnQgJiZcbiAgICAgICAgICAgICAgICBzeW5jUG9pbnRIYXNDb21wbGV0ZVZpZXcobWF5YmVDaGlsZFN5bmNQb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3N5bmNQb2ludEdldENvbXBsZXRlVmlldyhtYXliZUNoaWxkU3luY1BvaW50KS5xdWVyeV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBObyBkZWZhdWx0IGxpc3RlbmVyIGhlcmUsIGZsYXR0ZW4gYW55IGRlZXBlciBxdWVyaWVzIGludG8gYW4gYXJyYXlcbiAgICAgICAgICAgICAgICBsZXQgcXVlcmllcyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChtYXliZUNoaWxkU3luY1BvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXMgPSBxdWVyaWVzLmNvbmNhdChzeW5jUG9pbnRHZXRRdWVyeVZpZXdzKG1heWJlQ2hpbGRTeW5jUG9pbnQpLm1hcCh2aWV3ID0+IHZpZXcucXVlcnkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWFjaChjaGlsZE1hcCwgKF9rZXksIGNoaWxkUXVlcmllcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBxdWVyaWVzID0gcXVlcmllcy5jb25jYXQoY2hpbGRRdWVyaWVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcmllcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlcmllc1RvU3RvcC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgcXVlcnlUb1N0b3AgPSBxdWVyaWVzVG9TdG9wW2ldO1xuICAgICAgICAgICAgc3luY1RyZWUubGlzdGVuUHJvdmlkZXJfLnN0b3BMaXN0ZW5pbmcoc3luY1RyZWVRdWVyeUZvckxpc3RlbmluZ18ocXVlcnlUb1N0b3ApLCBzeW5jVHJlZVRhZ0ZvclF1ZXJ5KHN5bmNUcmVlLCBxdWVyeVRvU3RvcCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5jbGFzcyBFeGlzdGluZ1ZhbHVlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKG5vZGVfKSB7XG4gICAgICAgIHRoaXMubm9kZV8gPSBub2RlXztcbiAgICB9XG4gICAgZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5ub2RlXy5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpO1xuICAgICAgICByZXR1cm4gbmV3IEV4aXN0aW5nVmFsdWVQcm92aWRlcihjaGlsZCk7XG4gICAgfVxuICAgIG5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVfO1xuICAgIH1cbn1cbmNsYXNzIERlZmVycmVkVmFsdWVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3Ioc3luY1RyZWUsIHBhdGgpIHtcbiAgICAgICAgdGhpcy5zeW5jVHJlZV8gPSBzeW5jVHJlZTtcbiAgICAgICAgdGhpcy5wYXRoXyA9IHBhdGg7XG4gICAgfVxuICAgIGdldEltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSkge1xuICAgICAgICBjb25zdCBjaGlsZFBhdGggPSBwYXRoQ2hpbGQodGhpcy5wYXRoXywgY2hpbGROYW1lKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZlcnJlZFZhbHVlUHJvdmlkZXIodGhpcy5zeW5jVHJlZV8sIGNoaWxkUGF0aCk7XG4gICAgfVxuICAgIG5vZGUoKSB7XG4gICAgICAgIHJldHVybiBzeW5jVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUodGhpcy5zeW5jVHJlZV8sIHRoaXMucGF0aF8pO1xuICAgIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgcGxhY2Vob2xkZXJzIGZvciBkZWZlcnJlZCB2YWx1ZXMuXG4gKi9cbmNvbnN0IGdlbmVyYXRlV2l0aFZhbHVlcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMgfHwge307XG4gICAgdmFsdWVzWyd0aW1lc3RhbXAnXSA9IHZhbHVlc1sndGltZXN0YW1wJ10gfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIHZhbHVlcztcbn07XG4vKipcbiAqIFZhbHVlIHRvIHVzZSB3aGVuIGZpcmluZyBsb2NhbCBldmVudHMuIFdoZW4gd3JpdGluZyBzZXJ2ZXIgdmFsdWVzLCBmaXJlXG4gKiBsb2NhbCBldmVudHMgd2l0aCBhbiBhcHByb3hpbWF0ZSB2YWx1ZSwgb3RoZXJ3aXNlIHJldHVybiB2YWx1ZSBhcy1pcy5cbiAqL1xuY29uc3QgcmVzb2x2ZURlZmVycmVkTGVhZlZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBleGlzdGluZ1ZhbCwgc2VydmVyVmFsdWVzKSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgYXNzZXJ0KCcuc3YnIGluIHZhbHVlLCAnVW5leHBlY3RlZCBsZWFmIG5vZGUgb3IgcHJpb3JpdHkgY29udGVudHMnKTtcbiAgICBpZiAodHlwZW9mIHZhbHVlWycuc3YnXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVTY2FsYXJEZWZlcnJlZFZhbHVlKHZhbHVlWycuc3YnXSwgZXhpc3RpbmdWYWwsIHNlcnZlclZhbHVlcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZVsnLnN2J10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQ29tcGxleERlZmVycmVkVmFsdWUodmFsdWVbJy5zdiddLCBleGlzdGluZ1ZhbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3NlcnQoZmFsc2UsICdVbmV4cGVjdGVkIHNlcnZlciB2YWx1ZTogJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAyKSk7XG4gICAgfVxufTtcbmNvbnN0IHJlc29sdmVTY2FsYXJEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKG9wLCBleGlzdGluZywgc2VydmVyVmFsdWVzKSB7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlICd0aW1lc3RhbXAnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcnZlclZhbHVlc1sndGltZXN0YW1wJ107XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UsICdVbmV4cGVjdGVkIHNlcnZlciB2YWx1ZTogJyArIG9wKTtcbiAgICB9XG59O1xuY29uc3QgcmVzb2x2ZUNvbXBsZXhEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKG9wLCBleGlzdGluZywgdW51c2VkKSB7XG4gICAgaWYgKCFvcC5oYXNPd25Qcm9wZXJ0eSgnaW5jcmVtZW50JykpIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCAnVW5leHBlY3RlZCBzZXJ2ZXIgdmFsdWU6ICcgKyBKU09OLnN0cmluZ2lmeShvcCwgbnVsbCwgMikpO1xuICAgIH1cbiAgICBjb25zdCBkZWx0YSA9IG9wWydpbmNyZW1lbnQnXTtcbiAgICBpZiAodHlwZW9mIGRlbHRhICE9PSAnbnVtYmVyJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsICdVbmV4cGVjdGVkIGluY3JlbWVudCB2YWx1ZTogJyArIGRlbHRhKTtcbiAgICB9XG4gICAgY29uc3QgZXhpc3RpbmdOb2RlID0gZXhpc3Rpbmcubm9kZSgpO1xuICAgIGFzc2VydChleGlzdGluZ05vZGUgIT09IG51bGwgJiYgdHlwZW9mIGV4aXN0aW5nTm9kZSAhPT0gJ3VuZGVmaW5lZCcsICdFeHBlY3RlZCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSBmb3IgbnVsbHMnKTtcbiAgICAvLyBJbmNyZW1lbnRpbmcgYSBub24tbnVtYmVyIHNldHMgdGhlIHZhbHVlIHRvIHRoZSBpbmNyZW1lbnRlZCBhbW91bnRcbiAgICBpZiAoIWV4aXN0aW5nTm9kZS5pc0xlYWZOb2RlKCkpIHtcbiAgICAgICAgcmV0dXJuIGRlbHRhO1xuICAgIH1cbiAgICBjb25zdCBsZWFmID0gZXhpc3RpbmdOb2RlO1xuICAgIGNvbnN0IGV4aXN0aW5nVmFsID0gbGVhZi5nZXRWYWx1ZSgpO1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmdWYWwgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9XG4gICAgLy8gTm8gbmVlZCB0byBkbyBvdmVyL3VuZGVyZmxvdyBhcml0aG1ldGljIGhlcmUgYmVjYXVzZSBKUyBvbmx5IGhhbmRsZXMgZmxvYXRzIHVuZGVyIHRoZSBjb3ZlcnNcbiAgICByZXR1cm4gZXhpc3RpbmdWYWwgKyBkZWx0YTtcbn07XG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHJlcGxhY2UgYWxsIGRlZmVycmVkIHZhbHVlcyBhbmQgcHJpb3JpdGllcyBpbiB0aGUgdHJlZSB3aXRoIHRoZVxuICogc3BlY2lmaWVkIGdlbmVyYXRlZCByZXBsYWNlbWVudCB2YWx1ZXMuXG4gKiBAcGFyYW0gcGF0aCAtIHBhdGggdG8gd2hpY2ggd3JpdGUgaXMgcmVsYXRpdmVcbiAqIEBwYXJhbSBub2RlIC0gbmV3IGRhdGEgd3JpdHRlbiBhdCBwYXRoXG4gKiBAcGFyYW0gc3luY1RyZWUgLSBjdXJyZW50IGRhdGFcbiAqL1xuY29uc3QgcmVzb2x2ZURlZmVycmVkVmFsdWVUcmVlID0gZnVuY3Rpb24gKHBhdGgsIG5vZGUsIHN5bmNUcmVlLCBzZXJ2ZXJWYWx1ZXMpIHtcbiAgICByZXR1cm4gcmVzb2x2ZURlZmVycmVkVmFsdWUobm9kZSwgbmV3IERlZmVycmVkVmFsdWVQcm92aWRlcihzeW5jVHJlZSwgcGF0aCksIHNlcnZlclZhbHVlcyk7XG59O1xuLyoqXG4gKiBSZWN1cnNpdmVseSByZXBsYWNlIGFsbCBkZWZlcnJlZCB2YWx1ZXMgYW5kIHByaW9yaXRpZXMgaW4gdGhlIG5vZGUgd2l0aCB0aGVcbiAqIHNwZWNpZmllZCBnZW5lcmF0ZWQgcmVwbGFjZW1lbnQgdmFsdWVzLiAgSWYgdGhlcmUgYXJlIG5vIHNlcnZlciB2YWx1ZXMgaW4gdGhlIG5vZGUsXG4gKiBpdCdsbCBiZSByZXR1cm5lZCBhcy1pcy5cbiAqL1xuY29uc3QgcmVzb2x2ZURlZmVycmVkVmFsdWVTbmFwc2hvdCA9IGZ1bmN0aW9uIChub2RlLCBleGlzdGluZywgc2VydmVyVmFsdWVzKSB7XG4gICAgcmV0dXJuIHJlc29sdmVEZWZlcnJlZFZhbHVlKG5vZGUsIG5ldyBFeGlzdGluZ1ZhbHVlUHJvdmlkZXIoZXhpc3RpbmcpLCBzZXJ2ZXJWYWx1ZXMpO1xufTtcbmZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFZhbHVlKG5vZGUsIGV4aXN0aW5nVmFsLCBzZXJ2ZXJWYWx1ZXMpIHtcbiAgICBjb25zdCByYXdQcmkgPSBub2RlLmdldFByaW9yaXR5KCkudmFsKCk7XG4gICAgY29uc3QgcHJpb3JpdHkgPSByZXNvbHZlRGVmZXJyZWRMZWFmVmFsdWUocmF3UHJpLCBleGlzdGluZ1ZhbC5nZXRJbW1lZGlhdGVDaGlsZCgnLnByaW9yaXR5JyksIHNlcnZlclZhbHVlcyk7XG4gICAgbGV0IG5ld05vZGU7XG4gICAgaWYgKG5vZGUuaXNMZWFmTm9kZSgpKSB7XG4gICAgICAgIGNvbnN0IGxlYWZOb2RlID0gbm9kZTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXNvbHZlRGVmZXJyZWRMZWFmVmFsdWUobGVhZk5vZGUuZ2V0VmFsdWUoKSwgZXhpc3RpbmdWYWwsIHNlcnZlclZhbHVlcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbGVhZk5vZGUuZ2V0VmFsdWUoKSB8fFxuICAgICAgICAgICAgcHJpb3JpdHkgIT09IGxlYWZOb2RlLmdldFByaW9yaXR5KCkudmFsKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUodmFsdWUsIG5vZGVGcm9tSlNPTihwcmlvcml0eSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuTm9kZSA9IG5vZGU7XG4gICAgICAgIG5ld05vZGUgPSBjaGlsZHJlbk5vZGU7XG4gICAgICAgIGlmIChwcmlvcml0eSAhPT0gY2hpbGRyZW5Ob2RlLmdldFByaW9yaXR5KCkudmFsKCkpIHtcbiAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnVwZGF0ZVByaW9yaXR5KG5ldyBMZWFmTm9kZShwcmlvcml0eSkpO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuTm9kZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIChjaGlsZE5hbWUsIGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3Q2hpbGROb2RlID0gcmVzb2x2ZURlZmVycmVkVmFsdWUoY2hpbGROb2RlLCBleGlzdGluZ1ZhbC5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUpLCBzZXJ2ZXJWYWx1ZXMpO1xuICAgICAgICAgICAgaWYgKG5ld0NoaWxkTm9kZSAhPT0gY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZSA9IG5ld05vZGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIGxpZ2h0LXdlaWdodCB0cmVlLCB0cmF2ZXJzYWJsZSBieSBwYXRoLiAgTm9kZXMgY2FuIGhhdmUgYm90aCB2YWx1ZXMgYW5kIGNoaWxkcmVuLlxuICogTm9kZXMgYXJlIG5vdCBlbnVtZXJhdGVkIChieSBmb3JFYWNoQ2hpbGQpIHVubGVzcyB0aGV5IGhhdmUgYSB2YWx1ZSBvciBub24tZW1wdHlcbiAqIGNoaWxkcmVuLlxuICovXG5jbGFzcyBUcmVlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbmFtZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIG5vZGUuXG4gICAgICogQHBhcmFtIHBhcmVudCAtIE9wdGlvbmFsIHBhcmVudCBub2RlLlxuICAgICAqIEBwYXJhbSBub2RlIC0gT3B0aW9uYWwgbm9kZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUgPSAnJywgcGFyZW50ID0gbnVsbCwgbm9kZSA9IHsgY2hpbGRyZW46IHt9LCBjaGlsZENvdW50OiAwIH0pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3ViLVRyZWUgZm9yIHRoZSBnaXZlbiBwYXRoLlxuICpcbiAqIEBwYXJhbSBwYXRoT2JqIC0gUGF0aCB0byBsb29rIHVwLlxuICogQHJldHVybnMgVHJlZSBmb3IgcGF0aC5cbiAqL1xuZnVuY3Rpb24gdHJlZVN1YlRyZWUodHJlZSwgcGF0aE9iaikge1xuICAgIC8vIFRPRE86IFJlcXVpcmUgcGF0aE9iaiB0byBiZSBQYXRoP1xuICAgIGxldCBwYXRoID0gcGF0aE9iaiBpbnN0YW5jZW9mIFBhdGggPyBwYXRoT2JqIDogbmV3IFBhdGgocGF0aE9iaik7XG4gICAgbGV0IGNoaWxkID0gdHJlZSwgbmV4dCA9IHBhdGhHZXRGcm9udChwYXRoKTtcbiAgICB3aGlsZSAobmV4dCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBzYWZlR2V0KGNoaWxkLm5vZGUuY2hpbGRyZW4sIG5leHQpIHx8IHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiB7fSxcbiAgICAgICAgICAgIGNoaWxkQ291bnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgY2hpbGQgPSBuZXcgVHJlZShuZXh0LCBjaGlsZCwgY2hpbGROb2RlKTtcbiAgICAgICAgcGF0aCA9IHBhdGhQb3BGcm9udChwYXRoKTtcbiAgICAgICAgbmV4dCA9IHBhdGhHZXRGcm9udChwYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHRyZWUgbm9kZS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0YSBvciBudWxsIGlmIG5vIGRhdGEgZXhpc3RzLlxuICovXG5mdW5jdGlvbiB0cmVlR2V0VmFsdWUodHJlZSkge1xuICAgIHJldHVybiB0cmVlLm5vZGUudmFsdWU7XG59XG4vKipcbiAqIFNldHMgZGF0YSB0byB0aGlzIHRyZWUgbm9kZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBWYWx1ZSB0byBzZXQuXG4gKi9cbmZ1bmN0aW9uIHRyZWVTZXRWYWx1ZSh0cmVlLCB2YWx1ZSkge1xuICAgIHRyZWUubm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgIHRyZWVVcGRhdGVQYXJlbnRzKHRyZWUpO1xufVxuLyoqXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB0cmVlIGhhcyBhbnkgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIHRyZWVIYXNDaGlsZHJlbih0cmVlKSB7XG4gICAgcmV0dXJuIHRyZWUubm9kZS5jaGlsZENvdW50ID4gMDtcbn1cbi8qKlxuICogQHJldHVybnMgV2hldGhlciB0aGUgdHJlZSBpcyBlbXB0eSAobm8gdmFsdWUgb3IgY2hpbGRyZW4pLlxuICovXG5mdW5jdGlvbiB0cmVlSXNFbXB0eSh0cmVlKSB7XG4gICAgcmV0dXJuIHRyZWVHZXRWYWx1ZSh0cmVlKSA9PT0gdW5kZWZpbmVkICYmICF0cmVlSGFzQ2hpbGRyZW4odHJlZSk7XG59XG4vKipcbiAqIENhbGxzIGFjdGlvbiBmb3IgZWFjaCBjaGlsZCBvZiB0aGlzIHRyZWUgbm9kZS5cbiAqXG4gKiBAcGFyYW0gYWN0aW9uIC0gQWN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gdHJlZUZvckVhY2hDaGlsZCh0cmVlLCBhY3Rpb24pIHtcbiAgICBlYWNoKHRyZWUubm9kZS5jaGlsZHJlbiwgKGNoaWxkLCBjaGlsZFRyZWUpID0+IHtcbiAgICAgICAgYWN0aW9uKG5ldyBUcmVlKGNoaWxkLCB0cmVlLCBjaGlsZFRyZWUpKTtcbiAgICB9KTtcbn1cbi8qKlxuICogRG9lcyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCBvZiB0aGlzIG5vZGUncyBkZXNjZW5kYW50cywgY2FsbGluZyBhY3Rpb24gZm9yIGVhY2ggb25lLlxuICpcbiAqIEBwYXJhbSBhY3Rpb24gLSBBY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoIGNoaWxkLlxuICogQHBhcmFtIGluY2x1ZGVTZWxmIC0gV2hldGhlciB0byBjYWxsIGFjdGlvbiBvbiB0aGlzIG5vZGUgYXMgd2VsbC4gRGVmYXVsdHMgdG9cbiAqICAgZmFsc2UuXG4gKiBAcGFyYW0gY2hpbGRyZW5GaXJzdCAtIFdoZXRoZXIgdG8gY2FsbCBhY3Rpb24gb24gY2hpbGRyZW4gYmVmb3JlIGNhbGxpbmcgaXQgb25cbiAqICAgcGFyZW50LlxuICovXG5mdW5jdGlvbiB0cmVlRm9yRWFjaERlc2NlbmRhbnQodHJlZSwgYWN0aW9uLCBpbmNsdWRlU2VsZiwgY2hpbGRyZW5GaXJzdCkge1xuICAgIGlmIChpbmNsdWRlU2VsZiAmJiAhY2hpbGRyZW5GaXJzdCkge1xuICAgICAgICBhY3Rpb24odHJlZSk7XG4gICAgfVxuICAgIHRyZWVGb3JFYWNoQ2hpbGQodHJlZSwgY2hpbGQgPT4ge1xuICAgICAgICB0cmVlRm9yRWFjaERlc2NlbmRhbnQoY2hpbGQsIGFjdGlvbiwgdHJ1ZSwgY2hpbGRyZW5GaXJzdCk7XG4gICAgfSk7XG4gICAgaWYgKGluY2x1ZGVTZWxmICYmIGNoaWxkcmVuRmlyc3QpIHtcbiAgICAgICAgYWN0aW9uKHRyZWUpO1xuICAgIH1cbn1cbi8qKlxuICogQ2FsbHMgYWN0aW9uIG9uIGVhY2ggYW5jZXN0b3Igbm9kZS5cbiAqXG4gKiBAcGFyYW0gYWN0aW9uIC0gQWN0aW9uIHRvIGJlIGNhbGxlZCBvbiBlYWNoIHBhcmVudDsgcmV0dXJuXG4gKiAgIHRydWUgdG8gYWJvcnQuXG4gKiBAcGFyYW0gaW5jbHVkZVNlbGYgLSBXaGV0aGVyIHRvIGNhbGwgYWN0aW9uIG9uIHRoaXMgbm9kZSBhcyB3ZWxsLlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgYWN0aW9uIGNhbGxiYWNrIHJldHVybmVkIHRydWUuXG4gKi9cbmZ1bmN0aW9uIHRyZWVGb3JFYWNoQW5jZXN0b3IodHJlZSwgYWN0aW9uLCBpbmNsdWRlU2VsZikge1xuICAgIGxldCBub2RlID0gaW5jbHVkZVNlbGYgPyB0cmVlIDogdHJlZS5wYXJlbnQ7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGFjdGlvbihub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEByZXR1cm5zIFRoZSBwYXRoIG9mIHRoaXMgdHJlZSBub2RlLCBhcyBhIFBhdGguXG4gKi9cbmZ1bmN0aW9uIHRyZWVHZXRQYXRoKHRyZWUpIHtcbiAgICByZXR1cm4gbmV3IFBhdGgodHJlZS5wYXJlbnQgPT09IG51bGxcbiAgICAgICAgPyB0cmVlLm5hbWVcbiAgICAgICAgOiB0cmVlR2V0UGF0aCh0cmVlLnBhcmVudCkgKyAnLycgKyB0cmVlLm5hbWUpO1xufVxuLyoqXG4gKiBBZGRzIG9yIHJlbW92ZXMgdGhpcyBjaGlsZCBmcm9tIGl0cyBwYXJlbnQgYmFzZWQgb24gd2hldGhlciBpdCdzIGVtcHR5IG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gdHJlZVVwZGF0ZVBhcmVudHModHJlZSkge1xuICAgIGlmICh0cmVlLnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICB0cmVlVXBkYXRlQ2hpbGQodHJlZS5wYXJlbnQsIHRyZWUubmFtZSwgdHJlZSk7XG4gICAgfVxufVxuLyoqXG4gKiBBZGRzIG9yIHJlbW92ZXMgdGhlIHBhc3NlZCBjaGlsZCB0byB0aGlzIHRyZWUgbm9kZSwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQncyBlbXB0eS5cbiAqXG4gKiBAcGFyYW0gY2hpbGROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGNoaWxkIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSBjaGlsZCAtIFRoZSBjaGlsZCB0byB1cGRhdGUuXG4gKi9cbmZ1bmN0aW9uIHRyZWVVcGRhdGVDaGlsZCh0cmVlLCBjaGlsZE5hbWUsIGNoaWxkKSB7XG4gICAgY29uc3QgY2hpbGRFbXB0eSA9IHRyZWVJc0VtcHR5KGNoaWxkKTtcbiAgICBjb25zdCBjaGlsZEV4aXN0cyA9IGNvbnRhaW5zKHRyZWUubm9kZS5jaGlsZHJlbiwgY2hpbGROYW1lKTtcbiAgICBpZiAoY2hpbGRFbXB0eSAmJiBjaGlsZEV4aXN0cykge1xuICAgICAgICBkZWxldGUgdHJlZS5ub2RlLmNoaWxkcmVuW2NoaWxkTmFtZV07XG4gICAgICAgIHRyZWUubm9kZS5jaGlsZENvdW50LS07XG4gICAgICAgIHRyZWVVcGRhdGVQYXJlbnRzKHRyZWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghY2hpbGRFbXB0eSAmJiAhY2hpbGRFeGlzdHMpIHtcbiAgICAgICAgdHJlZS5ub2RlLmNoaWxkcmVuW2NoaWxkTmFtZV0gPSBjaGlsZC5ub2RlO1xuICAgICAgICB0cmVlLm5vZGUuY2hpbGRDb3VudCsrO1xuICAgICAgICB0cmVlVXBkYXRlUGFyZW50cyh0cmVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRydWUgZm9yIGludmFsaWQgRmlyZWJhc2Uga2V5c1xuICovXG5jb25zdCBJTlZBTElEX0tFWV9SRUdFWF8gPSAvW1xcW1xcXS4jJFxcL1xcdTAwMDAtXFx1MDAxRlxcdTAwN0ZdLztcbi8qKlxuICogVHJ1ZSBmb3IgaW52YWxpZCBGaXJlYmFzZSBwYXRocy5cbiAqIEFsbG93cyAnLycgaW4gcGF0aHMuXG4gKi9cbmNvbnN0IElOVkFMSURfUEFUSF9SRUdFWF8gPSAvW1xcW1xcXS4jJFxcdTAwMDAtXFx1MDAxRlxcdTAwN0ZdLztcbi8qKlxuICogTWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byBhbGxvdyBpbiBsZWFmIHZhbHVlXG4gKi9cbmNvbnN0IE1BWF9MRUFGX1NJWkVfID0gMTAgKiAxMDI0ICogMTAyNDtcbmNvbnN0IGlzVmFsaWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoICE9PSAwICYmICFJTlZBTElEX0tFWV9SRUdFWF8udGVzdChrZXkpKTtcbn07XG5jb25zdCBpc1ZhbGlkUGF0aFN0cmluZyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcGF0aFN0cmluZyA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgcGF0aFN0cmluZy5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgIUlOVkFMSURfUEFUSF9SRUdFWF8udGVzdChwYXRoU3RyaW5nKSk7XG59O1xuY29uc3QgaXNWYWxpZFJvb3RQYXRoU3RyaW5nID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcpIHtcbiAgICBpZiAocGF0aFN0cmluZykge1xuICAgICAgICAvLyBBbGxvdyAnLy5pbmZvLycgYXQgdGhlIGJlZ2lubmluZy5cbiAgICAgICAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZSgvXlxcLypcXC5pbmZvKFxcL3wkKS8sICcvJyk7XG4gICAgfVxuICAgIHJldHVybiBpc1ZhbGlkUGF0aFN0cmluZyhwYXRoU3RyaW5nKTtcbn07XG5jb25zdCBpc1ZhbGlkUHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gKHByaW9yaXR5ID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgKHR5cGVvZiBwcmlvcml0eSA9PT0gJ251bWJlcicgJiYgIWlzSW52YWxpZEpTT05OdW1iZXIocHJpb3JpdHkpKSB8fFxuICAgICAgICAocHJpb3JpdHkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBjb250YWlucyhwcmlvcml0eSwgJy5zdicpKSk7XG59O1xuLyoqXG4gKiBQcmUtdmFsaWRhdGUgYSBkYXR1bSBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gRmlyZWJhc2UgZnVuY3Rpb24uXG4gKi9cbmNvbnN0IHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnID0gZnVuY3Rpb24gKGZuTmFtZSwgdmFsdWUsIHBhdGgsIG9wdGlvbmFsKSB7XG4gICAgaWYgKG9wdGlvbmFsICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YShlcnJvclByZWZpeChmbk5hbWUsICd2YWx1ZScpLCB2YWx1ZSwgcGF0aCk7XG59O1xuLyoqXG4gKiBWYWxpZGF0ZSBhIGRhdGEgb2JqZWN0IGNsaWVudC1zaWRlIGJlZm9yZSBzZW5kaW5nIHRvIHNlcnZlci5cbiAqL1xuY29uc3QgdmFsaWRhdGVGaXJlYmFzZURhdGEgPSBmdW5jdGlvbiAoZXJyb3JQcmVmaXgsIGRhdGEsIHBhdGhfKSB7XG4gICAgY29uc3QgcGF0aCA9IHBhdGhfIGluc3RhbmNlb2YgUGF0aCA/IG5ldyBWYWxpZGF0aW9uUGF0aChwYXRoXywgZXJyb3JQcmVmaXgpIDogcGF0aF87XG4gICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXggKyAnY29udGFpbnMgdW5kZWZpbmVkICcgKyB2YWxpZGF0aW9uUGF0aFRvRXJyb3JTdHJpbmcocGF0aCkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcbiAgICAgICAgICAgICdjb250YWlucyBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhUb0Vycm9yU3RyaW5nKHBhdGgpICtcbiAgICAgICAgICAgICcgd2l0aCBjb250ZW50cyA9ICcgK1xuICAgICAgICAgICAgZGF0YS50b1N0cmluZygpKTtcbiAgICB9XG4gICAgaWYgKGlzSW52YWxpZEpTT05OdW1iZXIoZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcbiAgICAgICAgICAgICdjb250YWlucyAnICtcbiAgICAgICAgICAgIGRhdGEudG9TdHJpbmcoKSArXG4gICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhUb0Vycm9yU3RyaW5nKHBhdGgpKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgbWF4IGxlYWYgc2l6ZSwgYnV0IHRyeSB0byBhdm9pZCB0aGUgdXRmOCBjb252ZXJzaW9uIGlmIHdlIGNhbi5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGRhdGEubGVuZ3RoID4gTUFYX0xFQUZfU0laRV8gLyAzICYmXG4gICAgICAgIHN0cmluZ0xlbmd0aChkYXRhKSA+IE1BWF9MRUFGX1NJWkVfKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXG4gICAgICAgICAgICAnY29udGFpbnMgYSBzdHJpbmcgZ3JlYXRlciB0aGFuICcgK1xuICAgICAgICAgICAgTUFYX0xFQUZfU0laRV8gK1xuICAgICAgICAgICAgJyB1dGY4IGJ5dGVzICcgK1xuICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhUb0Vycm9yU3RyaW5nKHBhdGgpICtcbiAgICAgICAgICAgIFwiICgnXCIgK1xuICAgICAgICAgICAgZGF0YS5zdWJzdHJpbmcoMCwgNTApICtcbiAgICAgICAgICAgIFwiLi4uJylcIik7XG4gICAgfVxuICAgIC8vIFRPRE8gPSBQZXJmID0gQ29uc2lkZXIgY29tYmluaW5nIHRoZSByZWN1cnNpdmUgdmFsaWRhdGlvbiBvZiBrZXlzIGludG8gTm9kZUZyb21KU09OXG4gICAgLy8gdG8gc2F2ZSBleHRyYSB3YWxraW5nIG9mIGxhcmdlIG9iamVjdHMuXG4gICAgaWYgKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGxldCBoYXNEb3RWYWx1ZSA9IGZhbHNlO1xuICAgICAgICBsZXQgaGFzQWN0dWFsQ2hpbGQgPSBmYWxzZTtcbiAgICAgICAgZWFjaChkYXRhLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJy52YWx1ZScpIHtcbiAgICAgICAgICAgICAgICBoYXNEb3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICcucHJpb3JpdHknICYmIGtleSAhPT0gJy5zdicpIHtcbiAgICAgICAgICAgICAgICBoYXNBY3R1YWxDaGlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgY29udGFpbnMgYW4gaW52YWxpZCBrZXkgKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcpICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhUb0Vycm9yU3RyaW5nKHBhdGgpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcuICBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW5kIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIi9cIiwgXCJbXCIsIG9yIFwiXVwiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhQdXNoKHBhdGgsIGtleSk7XG4gICAgICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YShlcnJvclByZWZpeCwgdmFsdWUsIHBhdGgpO1xuICAgICAgICAgICAgdmFsaWRhdGlvblBhdGhQb3AocGF0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaGFzRG90VmFsdWUgJiYgaGFzQWN0dWFsQ2hpbGQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXG4gICAgICAgICAgICAgICAgJyBjb250YWlucyBcIi52YWx1ZVwiIGNoaWxkICcgK1xuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25QYXRoVG9FcnJvclN0cmluZyhwYXRoKSArXG4gICAgICAgICAgICAgICAgJyBpbiBhZGRpdGlvbiB0byBhY3R1YWwgY2hpbGRyZW4uJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLyoqXG4gKiBQcmUtdmFsaWRhdGUgcGF0aHMgcGFzc2VkIGluIHRoZSBmaXJlYmFzZSBmdW5jdGlvbi5cbiAqL1xuY29uc3QgdmFsaWRhdGVGaXJlYmFzZU1lcmdlUGF0aHMgPSBmdW5jdGlvbiAoZXJyb3JQcmVmaXgsIG1lcmdlUGF0aHMpIHtcbiAgICBsZXQgaSwgY3VyUGF0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWVyZ2VQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJQYXRoID0gbWVyZ2VQYXRoc1tpXTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHBhdGhTbGljZShjdXJQYXRoKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoa2V5c1tqXSA9PT0gJy5wcmlvcml0eScgJiYgaiA9PT0ga2V5cy5sZW5ndGggLSAxKSA7XG4gICAgICAgICAgICBlbHNlIGlmICghaXNWYWxpZEtleShrZXlzW2pdKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXG4gICAgICAgICAgICAgICAgICAgICdjb250YWlucyBhbiBpbnZhbGlkIGtleSAoJyArXG4gICAgICAgICAgICAgICAgICAgIGtleXNbal0gK1xuICAgICAgICAgICAgICAgICAgICAnKSBpbiBwYXRoICcgK1xuICAgICAgICAgICAgICAgICAgICBjdXJQYXRoLnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgICAgICAgICAnLiBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbmQgY2FuXFwndCBjb250YWluIFwiLlwiLCBcIiNcIiwgXCIkXCIsIFwiL1wiLCBcIltcIiwgb3IgXCJdXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDaGVjayB0aGF0IHVwZGF0ZSBrZXlzIGFyZSBub3QgZGVzY2VuZGFudHMgb2YgZWFjaCBvdGhlci5cbiAgICAvLyBXZSByZWx5IG9uIHRoZSBwcm9wZXJ0eSB0aGF0IHNvcnRpbmcgZ3VhcmFudGVlcyB0aGF0IGFuY2VzdG9ycyBjb21lXG4gICAgLy8gcmlnaHQgYmVmb3JlIGRlc2NlbmRhbnRzLlxuICAgIG1lcmdlUGF0aHMuc29ydChwYXRoQ29tcGFyZSk7XG4gICAgbGV0IHByZXZQYXRoID0gbnVsbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWVyZ2VQYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJQYXRoID0gbWVyZ2VQYXRoc1tpXTtcbiAgICAgICAgaWYgKHByZXZQYXRoICE9PSBudWxsICYmIHBhdGhDb250YWlucyhwcmV2UGF0aCwgY3VyUGF0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXG4gICAgICAgICAgICAgICAgJ2NvbnRhaW5zIGEgcGF0aCAnICtcbiAgICAgICAgICAgICAgICBwcmV2UGF0aC50b1N0cmluZygpICtcbiAgICAgICAgICAgICAgICAnIHRoYXQgaXMgYW5jZXN0b3Igb2YgYW5vdGhlciBwYXRoICcgK1xuICAgICAgICAgICAgICAgIGN1clBhdGgudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldlBhdGggPSBjdXJQYXRoO1xuICAgIH1cbn07XG4vKipcbiAqIHByZS12YWxpZGF0ZSBhbiBvYmplY3QgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIGZpcmViYXNlIGZ1bmN0aW9uIChcbiAqIG11c3QgYmUgYW4gb2JqZWN0IC0gZS5nLiBmb3IgZmlyZWJhc2UudXBkYXRlKCkpLlxuICovXG5jb25zdCB2YWxpZGF0ZUZpcmViYXNlTWVyZ2VEYXRhQXJnID0gZnVuY3Rpb24gKGZuTmFtZSwgZGF0YSwgcGF0aCwgb3B0aW9uYWwpIHtcbiAgICBpZiAob3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZXJyb3JQcmVmaXgkMSA9IGVycm9yUHJlZml4KGZuTmFtZSwgJ3ZhbHVlcycpO1xuICAgIGlmICghKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCQxICsgJyBtdXN0IGJlIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjaGlsZHJlbiB0byByZXBsYWNlLicpO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZVBhdGhzID0gW107XG4gICAgZWFjaChkYXRhLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjdXJQYXRoID0gbmV3IFBhdGgoa2V5KTtcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoZXJyb3JQcmVmaXgkMSwgdmFsdWUsIHBhdGhDaGlsZChwYXRoLCBjdXJQYXRoKSk7XG4gICAgICAgIGlmIChwYXRoR2V0QmFjayhjdXJQYXRoKSA9PT0gJy5wcmlvcml0eScpIHtcbiAgICAgICAgICAgIGlmICghaXNWYWxpZFByaW9yaXR5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCQxICtcbiAgICAgICAgICAgICAgICAgICAgXCJjb250YWlucyBhbiBpbnZhbGlkIHZhbHVlIGZvciAnXCIgK1xuICAgICAgICAgICAgICAgICAgICBjdXJQYXRoLnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgICAgICAgICBcIicsIHdoaWNoIG11c3QgYmUgYSB2YWxpZCBcIiArXG4gICAgICAgICAgICAgICAgICAgICdGaXJlYmFzZSBwcmlvcml0eSAoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbCkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWVyZ2VQYXRocy5wdXNoKGN1clBhdGgpO1xuICAgIH0pO1xuICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZVBhdGhzKGVycm9yUHJlZml4JDEsIG1lcmdlUGF0aHMpO1xufTtcbmNvbnN0IHZhbGlkYXRlUHJpb3JpdHkgPSBmdW5jdGlvbiAoZm5OYW1lLCBwcmlvcml0eSwgb3B0aW9uYWwpIHtcbiAgICBpZiAob3B0aW9uYWwgJiYgcHJpb3JpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0ludmFsaWRKU09OTnVtYmVyKHByaW9yaXR5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCAncHJpb3JpdHknKSArXG4gICAgICAgICAgICAnaXMgJyArXG4gICAgICAgICAgICBwcmlvcml0eS50b1N0cmluZygpICtcbiAgICAgICAgICAgICcsIGJ1dCBtdXN0IGJlIGEgdmFsaWQgRmlyZWJhc2UgcHJpb3JpdHkgKGEgc3RyaW5nLCBmaW5pdGUgbnVtYmVyLCAnICtcbiAgICAgICAgICAgICdzZXJ2ZXIgdmFsdWUsIG9yIG51bGwpLicpO1xuICAgIH1cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gYWxsb3cgaW1wb3J0aW5nIGRhdGEgd2l0aCBhIC5zdi5cbiAgICBpZiAoIWlzVmFsaWRQcmlvcml0eShwcmlvcml0eSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgJ3ByaW9yaXR5JykgK1xuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBGaXJlYmFzZSBwcmlvcml0eSAnICtcbiAgICAgICAgICAgICcoYSBzdHJpbmcsIGZpbml0ZSBudW1iZXIsIHNlcnZlciB2YWx1ZSwgb3IgbnVsbCkuJyk7XG4gICAgfVxufTtcbmNvbnN0IHZhbGlkYXRlS2V5ID0gZnVuY3Rpb24gKGZuTmFtZSwgYXJndW1lbnROYW1lLCBrZXksIG9wdGlvbmFsKSB7XG4gICAgaWYgKG9wdGlvbmFsICYmIGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArXG4gICAgICAgICAgICAnd2FzIGFuIGludmFsaWQga2V5ID0gXCInICtcbiAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAnXCIuICBGaXJlYmFzZSBrZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgYW5kICcgK1xuICAgICAgICAgICAgJ2NhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIi9cIiwgXCJbXCIsIG9yIFwiXVwiKS4nKTtcbiAgICB9XG59O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgdmFsaWRhdGVQYXRoU3RyaW5nID0gZnVuY3Rpb24gKGZuTmFtZSwgYXJndW1lbnROYW1lLCBwYXRoU3RyaW5nLCBvcHRpb25hbCkge1xuICAgIGlmIChvcHRpb25hbCAmJiBwYXRoU3RyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWRQYXRoU3RyaW5nKHBhdGhTdHJpbmcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TmFtZSkgK1xuICAgICAgICAgICAgJ3dhcyBhbiBpbnZhbGlkIHBhdGggPSBcIicgK1xuICAgICAgICAgICAgcGF0aFN0cmluZyArXG4gICAgICAgICAgICAnXCIuIFBhdGhzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgYW5kICcgK1xuICAgICAgICAgICAgJ2NhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCInKTtcbiAgICB9XG59O1xuY29uc3QgdmFsaWRhdGVSb290UGF0aFN0cmluZyA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TmFtZSwgcGF0aFN0cmluZywgb3B0aW9uYWwpIHtcbiAgICBpZiAocGF0aFN0cmluZykge1xuICAgICAgICAvLyBBbGxvdyAnLy5pbmZvLycgYXQgdGhlIGJlZ2lubmluZy5cbiAgICAgICAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZSgvXlxcLypcXC5pbmZvKFxcL3wkKS8sICcvJyk7XG4gICAgfVxuICAgIHZhbGlkYXRlUGF0aFN0cmluZyhmbk5hbWUsIGFyZ3VtZW50TmFtZSwgcGF0aFN0cmluZywgb3B0aW9uYWwpO1xufTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IHZhbGlkYXRlV3JpdGFibGVQYXRoID0gZnVuY3Rpb24gKGZuTmFtZSwgcGF0aCkge1xuICAgIGlmIChwYXRoR2V0RnJvbnQocGF0aCkgPT09ICcuaW5mbycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZuTmFtZSArIFwiIGZhaWxlZCA9IENhbid0IG1vZGlmeSBkYXRhIHVuZGVyIC8uaW5mby9cIik7XG4gICAgfVxufTtcbmNvbnN0IHZhbGlkYXRlVXJsID0gZnVuY3Rpb24gKGZuTmFtZSwgcGFyc2VkVXJsKSB7XG4gICAgLy8gVE9ETyA9IFZhbGlkYXRlIHNlcnZlciBiZXR0ZXIuXG4gICAgY29uc3QgcGF0aFN0cmluZyA9IHBhcnNlZFVybC5wYXRoLnRvU3RyaW5nKCk7XG4gICAgaWYgKCEodHlwZW9mIHBhcnNlZFVybC5yZXBvSW5mby5ob3N0ID09PSAnc3RyaW5nJykgfHxcbiAgICAgICAgcGFyc2VkVXJsLnJlcG9JbmZvLmhvc3QubGVuZ3RoID09PSAwIHx8XG4gICAgICAgICghaXNWYWxpZEtleShwYXJzZWRVcmwucmVwb0luZm8ubmFtZXNwYWNlKSAmJlxuICAgICAgICAgICAgcGFyc2VkVXJsLnJlcG9JbmZvLmhvc3Quc3BsaXQoJzonKVswXSAhPT0gJ2xvY2FsaG9zdCcpIHx8XG4gICAgICAgIChwYXRoU3RyaW5nLmxlbmd0aCAhPT0gMCAmJiAhaXNWYWxpZFJvb3RQYXRoU3RyaW5nKHBhdGhTdHJpbmcpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCAndXJsJykgK1xuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBVUkwgYW5kICcgK1xuICAgICAgICAgICAgJ3RoZSBwYXRoIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCIuJyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogVGhlIGV2ZW50IHF1ZXVlIHNlcnZlcyBhIGZldyBwdXJwb3NlczpcbiAqIDEuIEl0IGVuc3VyZXMgd2UgbWFpbnRhaW4gZXZlbnQgb3JkZXIgaW4gdGhlIGZhY2Ugb2YgZXZlbnQgY2FsbGJhY2tzIGRvaW5nIG9wZXJhdGlvbnMgdGhhdCByZXN1bHQgaW4gbW9yZVxuICogICAgZXZlbnRzIGJlaW5nIHF1ZXVlZC5cbiAqIDIuIHJhaXNlUXVldWVkRXZlbnRzKCkgaGFuZGxlcyBiZWluZyBjYWxsZWQgcmVlbnRyYW50bHkgbmljZWx5LiAgVGhhdCBpcywgaWYgaW4gdGhlIGNvdXJzZSBvZiByYWlzaW5nIGV2ZW50cyxcbiAqICAgIHJhaXNlUXVldWVkRXZlbnRzKCkgaXMgY2FsbGVkIGFnYWluLCB0aGUgXCJpbm5lclwiIGNhbGwgd2lsbCBwaWNrIHVwIHJhaXNpbmcgZXZlbnRzIHdoZXJlIHRoZSBcIm91dGVyXCIgY2FsbFxuICogICAgbGVmdCBvZmYsIGVuc3VyaW5nIHRoYXQgdGhlIGV2ZW50cyBhcmUgc3RpbGwgcmFpc2VkIHN5bmNocm9ub3VzbHkgYW5kIGluIG9yZGVyLlxuICogMy4gWW91IGNhbiB1c2UgcmFpc2VFdmVudHNBdFBhdGggYW5kIHJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGggdG8gZW5zdXJlIG9ubHkgcmVsZXZhbnQgcHJldmlvdXNseS1xdWV1ZWRcbiAqICAgIGV2ZW50cyBhcmUgcmFpc2VkIHN5bmNocm9ub3VzbHkuXG4gKlxuICogTk9URTogVGhpcyBjYW4gYWxsIGdvIGF3YXkgaWYvd2hlbiB3ZSBtb3ZlIHRvIGFzeW5jIGV2ZW50cy5cbiAqXG4gKi9cbmNsYXNzIEV2ZW50UXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdHNfID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmFja3MgcmVjdXJzaW9uIGRlcHRoIG9mIHJhaXNlUXVldWVkRXZlbnRzXywgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjdXJzaW9uRGVwdGhfID0gMDtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSBldmVudERhdGFMaXN0IC0gVGhlIG5ldyBldmVudHMgdG8gcXVldWUuXG4gKi9cbmZ1bmN0aW9uIGV2ZW50UXVldWVRdWV1ZUV2ZW50cyhldmVudFF1ZXVlLCBldmVudERhdGFMaXN0KSB7XG4gICAgLy8gV2UgZ3JvdXAgZXZlbnRzIGJ5IHBhdGgsIHN0b3JpbmcgdGhlbSBpbiBhIHNpbmdsZSBFdmVudExpc3QsIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHNraXAgb3ZlciB0aGVtIHF1aWNrbHkuXG4gICAgbGV0IGN1cnJMaXN0ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50RGF0YUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGV2ZW50RGF0YUxpc3RbaV07XG4gICAgICAgIGNvbnN0IHBhdGggPSBkYXRhLmdldFBhdGgoKTtcbiAgICAgICAgaWYgKGN1cnJMaXN0ICE9PSBudWxsICYmICFwYXRoRXF1YWxzKHBhdGgsIGN1cnJMaXN0LnBhdGgpKSB7XG4gICAgICAgICAgICBldmVudFF1ZXVlLmV2ZW50TGlzdHNfLnB1c2goY3Vyckxpc3QpO1xuICAgICAgICAgICAgY3Vyckxpc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyTGlzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY3Vyckxpc3QgPSB7IGV2ZW50czogW10sIHBhdGggfTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyTGlzdC5ldmVudHMucHVzaChkYXRhKTtcbiAgICB9XG4gICAgaWYgKGN1cnJMaXN0KSB7XG4gICAgICAgIGV2ZW50UXVldWUuZXZlbnRMaXN0c18ucHVzaChjdXJyTGlzdCk7XG4gICAgfVxufVxuLyoqXG4gKiBRdWV1ZXMgdGhlIHNwZWNpZmllZCBldmVudHMgYW5kIHN5bmNocm9ub3VzbHkgcmFpc2VzIGFsbCBldmVudHMgKGluY2x1ZGluZyBwcmV2aW91c2x5IHF1ZXVlZCBvbmVzKVxuICogZm9yIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAqXG4gKiBJdCBpcyBhc3N1bWVkIHRoYXQgdGhlIG5ldyBldmVudHMgYXJlIGFsbCBmb3IgdGhlIHNwZWNpZmllZCBwYXRoLlxuICpcbiAqIEBwYXJhbSBwYXRoIC0gVGhlIHBhdGggdG8gcmFpc2UgZXZlbnRzIGZvci5cbiAqIEBwYXJhbSBldmVudERhdGFMaXN0IC0gVGhlIG5ldyBldmVudHMgdG8gcmFpc2UuXG4gKi9cbmZ1bmN0aW9uIGV2ZW50UXVldWVSYWlzZUV2ZW50c0F0UGF0aChldmVudFF1ZXVlLCBwYXRoLCBldmVudERhdGFMaXN0KSB7XG4gICAgZXZlbnRRdWV1ZVF1ZXVlRXZlbnRzKGV2ZW50UXVldWUsIGV2ZW50RGF0YUxpc3QpO1xuICAgIGV2ZW50UXVldWVSYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlKGV2ZW50UXVldWUsIGV2ZW50UGF0aCA9PiBwYXRoRXF1YWxzKGV2ZW50UGF0aCwgcGF0aCkpO1xufVxuLyoqXG4gKiBRdWV1ZXMgdGhlIHNwZWNpZmllZCBldmVudHMgYW5kIHN5bmNocm9ub3VzbHkgcmFpc2VzIGFsbCBldmVudHMgKGluY2x1ZGluZyBwcmV2aW91c2x5IHF1ZXVlZCBvbmVzKSBmb3JcbiAqIGxvY2F0aW9ucyByZWxhdGVkIHRvIHRoZSBzcGVjaWZpZWQgY2hhbmdlIHBhdGggKGkuZS4gYWxsIGFuY2VzdG9ycyBhbmQgZGVzY2VuZGFudHMpLlxuICpcbiAqIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgbmV3IGV2ZW50cyBhcmUgYWxsIHJlbGF0ZWQgKGFuY2VzdG9yIG9yIGRlc2NlbmRhbnQpIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAqXG4gKiBAcGFyYW0gY2hhbmdlZFBhdGggLSBUaGUgcGF0aCB0byByYWlzZSBldmVudHMgZm9yLlxuICogQHBhcmFtIGV2ZW50RGF0YUxpc3QgLSBUaGUgZXZlbnRzIHRvIHJhaXNlXG4gKi9cbmZ1bmN0aW9uIGV2ZW50UXVldWVSYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKGV2ZW50UXVldWUsIGNoYW5nZWRQYXRoLCBldmVudERhdGFMaXN0KSB7XG4gICAgZXZlbnRRdWV1ZVF1ZXVlRXZlbnRzKGV2ZW50UXVldWUsIGV2ZW50RGF0YUxpc3QpO1xuICAgIGV2ZW50UXVldWVSYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlKGV2ZW50UXVldWUsIGV2ZW50UGF0aCA9PiBwYXRoQ29udGFpbnMoZXZlbnRQYXRoLCBjaGFuZ2VkUGF0aCkgfHxcbiAgICAgICAgcGF0aENvbnRhaW5zKGNoYW5nZWRQYXRoLCBldmVudFBhdGgpKTtcbn1cbmZ1bmN0aW9uIGV2ZW50UXVldWVSYWlzZVF1ZXVlZEV2ZW50c01hdGNoaW5nUHJlZGljYXRlKGV2ZW50UXVldWUsIHByZWRpY2F0ZSkge1xuICAgIGV2ZW50UXVldWUucmVjdXJzaW9uRGVwdGhfKys7XG4gICAgbGV0IHNlbnRBbGwgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRRdWV1ZS5ldmVudExpc3RzXy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBldmVudExpc3QgPSBldmVudFF1ZXVlLmV2ZW50TGlzdHNfW2ldO1xuICAgICAgICBpZiAoZXZlbnRMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCBldmVudFBhdGggPSBldmVudExpc3QucGF0aDtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoZXZlbnRQYXRoKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50TGlzdFJhaXNlKGV2ZW50UXVldWUuZXZlbnRMaXN0c19baV0pO1xuICAgICAgICAgICAgICAgIGV2ZW50UXVldWUuZXZlbnRMaXN0c19baV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VudEFsbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZW50QWxsKSB7XG4gICAgICAgIGV2ZW50UXVldWUuZXZlbnRMaXN0c18gPSBbXTtcbiAgICB9XG4gICAgZXZlbnRRdWV1ZS5yZWN1cnNpb25EZXB0aF8tLTtcbn1cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgbGlzdCBhbmQgcmFpc2VzIGVhY2ggZXZlbnRcbiAqL1xuZnVuY3Rpb24gZXZlbnRMaXN0UmFpc2UoZXZlbnRMaXN0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudExpc3QuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2ZW50TGlzdC5ldmVudHNbaV07XG4gICAgICAgIGlmIChldmVudERhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdC5ldmVudHNbaV0gPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgZXZlbnRGbiA9IGV2ZW50RGF0YS5nZXRFdmVudFJ1bm5lcigpO1xuICAgICAgICAgICAgaWYgKGxvZ2dlcikge1xuICAgICAgICAgICAgICAgIGxvZygnZXZlbnQ6ICcgKyBldmVudERhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGNlcHRpb25HdWFyZChldmVudEZuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IElOVEVSUlVQVF9SRUFTT04gPSAncmVwb19pbnRlcnJ1cHQnO1xuLyoqXG4gKiBJZiBhIHRyYW5zYWN0aW9uIGRvZXMgbm90IHN1Y2NlZWQgYWZ0ZXIgMjUgcmV0cmllcywgd2UgYWJvcnQgaXQuIEFtb25nIG90aGVyXG4gKiB0aGluZ3MgdGhpcyBlbnN1cmUgdGhhdCBpZiB0aGVyZSdzIGV2ZXIgYSBidWcgY2F1c2luZyBhIG1pc21hdGNoIGJldHdlZW5cbiAqIGNsaWVudCAvIHNlcnZlciBoYXNoZXMgZm9yIHNvbWUgZGF0YSwgd2Ugd29uJ3QgcmV0cnkgaW5kZWZpbml0ZWx5LlxuICovXG5jb25zdCBNQVhfVFJBTlNBQ1RJT05fUkVUUklFUyA9IDI1O1xuLyoqXG4gKiBBIGNvbm5lY3Rpb24gdG8gYSBzaW5nbGUgZGF0YSByZXBvc2l0b3J5LlxuICovXG5jbGFzcyBSZXBvIHtcbiAgICBjb25zdHJ1Y3RvcihyZXBvSW5mb18sIGZvcmNlUmVzdENsaWVudF8sIGF1dGhUb2tlblByb3ZpZGVyXywgYXBwQ2hlY2tQcm92aWRlcl8pIHtcbiAgICAgICAgdGhpcy5yZXBvSW5mb18gPSByZXBvSW5mb187XG4gICAgICAgIHRoaXMuZm9yY2VSZXN0Q2xpZW50XyA9IGZvcmNlUmVzdENsaWVudF87XG4gICAgICAgIHRoaXMuYXV0aFRva2VuUHJvdmlkZXJfID0gYXV0aFRva2VuUHJvdmlkZXJfO1xuICAgICAgICB0aGlzLmFwcENoZWNrUHJvdmlkZXJfID0gYXBwQ2hlY2tQcm92aWRlcl87XG4gICAgICAgIHRoaXMuZGF0YVVwZGF0ZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5zdGF0c0xpc3RlbmVyXyA9IG51bGw7XG4gICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8gPSBuZXcgRXZlbnRRdWV1ZSgpO1xuICAgICAgICB0aGlzLm5leHRXcml0ZUlkXyA9IDE7XG4gICAgICAgIHRoaXMuaW50ZXJjZXB0U2VydmVyRGF0YUNhbGxiYWNrXyA9IG51bGw7XG4gICAgICAgIC8qKiBBIGxpc3Qgb2YgZGF0YSBwaWVjZXMgYW5kIHBhdGhzIHRvIGJlIHNldCB3aGVuIHRoaXMgY2xpZW50IGRpc2Nvbm5lY3RzLiAqL1xuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBuZXdTcGFyc2VTbmFwc2hvdFRyZWUoKTtcbiAgICAgICAgLyoqIFN0b3JlcyBxdWV1ZXMgb2Ygb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb25zIGZvciBGaXJlYmFzZSBsb2NhdGlvbnMuICovXG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfID0gbmV3IFRyZWUoKTtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgQHByaXZhdGUgYnV0IGl0J3MgdXNlZCBieSB0ZXN0X2FjY2Vzcy5qcyBhbmQgaW50ZXJuYWwuanNcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8gPSBudWxsO1xuICAgICAgICAvLyBUaGlzIGtleSBpcyBpbnRlbnRpb25hbGx5IG5vdCB1cGRhdGVkIGlmIFJlcG9JbmZvIGlzIGxhdGVyIGNoYW5nZWQgb3IgcmVwbGFjZWRcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLnJlcG9JbmZvXy50b1VSTFN0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgVVJMIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJvb3Qgb2YgdGhpcyBGaXJlYmFzZS5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICgodGhpcy5yZXBvSW5mb18uc2VjdXJlID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJykgKyB0aGlzLnJlcG9JbmZvXy5ob3N0KTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXBvU3RhcnQocmVwbywgYXBwSWQsIGF1dGhPdmVycmlkZSkge1xuICAgIHJlcG8uc3RhdHNfID0gc3RhdHNNYW5hZ2VyR2V0Q29sbGVjdGlvbihyZXBvLnJlcG9JbmZvXyk7XG4gICAgaWYgKHJlcG8uZm9yY2VSZXN0Q2xpZW50XyB8fCBiZWluZ0NyYXdsZWQoKSkge1xuICAgICAgICByZXBvLnNlcnZlcl8gPSBuZXcgUmVhZG9ubHlSZXN0Q2xpZW50KHJlcG8ucmVwb0luZm9fLCAocGF0aFN0cmluZywgZGF0YSwgaXNNZXJnZSwgdGFnKSA9PiB7XG4gICAgICAgICAgICByZXBvT25EYXRhVXBkYXRlKHJlcG8sIHBhdGhTdHJpbmcsIGRhdGEsIGlzTWVyZ2UsIHRhZyk7XG4gICAgICAgIH0sIHJlcG8uYXV0aFRva2VuUHJvdmlkZXJfLCByZXBvLmFwcENoZWNrUHJvdmlkZXJfKTtcbiAgICAgICAgLy8gTWlub3IgaGFjazogRmlyZSBvbkNvbm5lY3QgaW1tZWRpYXRlbHksIHNpbmNlIHRoZXJlJ3Mgbm8gYWN0dWFsIGNvbm5lY3Rpb24uXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVwb09uQ29ubmVjdFN0YXR1cyhyZXBvLCAvKiBjb25uZWN0U3RhdHVzPSAqLyB0cnVlKSwgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBWYWxpZGF0ZSBhdXRoT3ZlcnJpZGVcbiAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICd1bmRlZmluZWQnICYmIGF1dGhPdmVycmlkZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG9iamVjdHMgYXJlIHN1cHBvcnRlZCBmb3Igb3B0aW9uIGRhdGFiYXNlQXV0aFZhcmlhYmxlT3ZlcnJpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KGF1dGhPdmVycmlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhdXRoT3ZlcnJpZGUgcHJvdmlkZWQ6ICcgKyBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXBvLnBlcnNpc3RlbnRDb25uZWN0aW9uXyA9IG5ldyBQZXJzaXN0ZW50Q29ubmVjdGlvbihyZXBvLnJlcG9JbmZvXywgYXBwSWQsIChwYXRoU3RyaW5nLCBkYXRhLCBpc01lcmdlLCB0YWcpID0+IHtcbiAgICAgICAgICAgIHJlcG9PbkRhdGFVcGRhdGUocmVwbywgcGF0aFN0cmluZywgZGF0YSwgaXNNZXJnZSwgdGFnKTtcbiAgICAgICAgfSwgKGNvbm5lY3RTdGF0dXMpID0+IHtcbiAgICAgICAgICAgIHJlcG9PbkNvbm5lY3RTdGF0dXMocmVwbywgY29ubmVjdFN0YXR1cyk7XG4gICAgICAgIH0sICh1cGRhdGVzKSA9PiB7XG4gICAgICAgICAgICByZXBvT25TZXJ2ZXJJbmZvVXBkYXRlKHJlcG8sIHVwZGF0ZXMpO1xuICAgICAgICB9LCByZXBvLmF1dGhUb2tlblByb3ZpZGVyXywgcmVwby5hcHBDaGVja1Byb3ZpZGVyXywgYXV0aE92ZXJyaWRlKTtcbiAgICAgICAgcmVwby5zZXJ2ZXJfID0gcmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl87XG4gICAgfVxuICAgIHJlcG8uYXV0aFRva2VuUHJvdmlkZXJfLmFkZFRva2VuQ2hhbmdlTGlzdGVuZXIodG9rZW4gPT4ge1xuICAgICAgICByZXBvLnNlcnZlcl8ucmVmcmVzaEF1dGhUb2tlbih0b2tlbik7XG4gICAgfSk7XG4gICAgcmVwby5hcHBDaGVja1Byb3ZpZGVyXy5hZGRUb2tlbkNoYW5nZUxpc3RlbmVyKHJlc3VsdCA9PiB7XG4gICAgICAgIHJlcG8uc2VydmVyXy5yZWZyZXNoQXBwQ2hlY2tUb2tlbihyZXN1bHQudG9rZW4pO1xuICAgIH0pO1xuICAgIC8vIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIFJlcG9zIGZvciB0aGUgc2FtZSByZXBvSW5mbyAoaS5lLiB0aGVyZSBhcmUgbXVsdGlwbGUgRmlyZWJhc2UuQ29udGV4dHMgYmVpbmcgdXNlZCksXG4gICAgLy8gd2Ugb25seSB3YW50IHRvIGNyZWF0ZSBvbmUgU3RhdHNSZXBvcnRlci4gIEFzIHN1Y2gsIHdlJ2xsIHJlcG9ydCBzdGF0cyBvdmVyIHRoZSBmaXJzdCBSZXBvIGNyZWF0ZWQuXG4gICAgcmVwby5zdGF0c1JlcG9ydGVyXyA9IHN0YXRzTWFuYWdlckdldE9yQ3JlYXRlUmVwb3J0ZXIocmVwby5yZXBvSW5mb18sICgpID0+IG5ldyBTdGF0c1JlcG9ydGVyKHJlcG8uc3RhdHNfLCByZXBvLnNlcnZlcl8pKTtcbiAgICAvLyBVc2VkIGZvciAuaW5mby5cbiAgICByZXBvLmluZm9EYXRhXyA9IG5ldyBTbmFwc2hvdEhvbGRlcigpO1xuICAgIHJlcG8uaW5mb1N5bmNUcmVlXyA9IG5ldyBTeW5jVHJlZSh7XG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiAocXVlcnksIHRhZywgY3VycmVudEhhc2hGbiwgb25Db21wbGV0ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGluZm9FdmVudHMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSByZXBvLmluZm9EYXRhXy5nZXROb2RlKHF1ZXJ5Ll9wYXRoKTtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgcG9zc2libHkgYSBoYWNrLCBidXQgd2UgaGF2ZSBkaWZmZXJlbnQgc2VtYW50aWNzIGZvciAuaW5mbyBlbmRwb2ludHMuIFdlIGRvbid0IHJhaXNlIG51bGwgZXZlbnRzXG4gICAgICAgICAgICAvLyBvbiBpbml0aWFsIGRhdGEuLi5cbiAgICAgICAgICAgIGlmICghbm9kZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBpbmZvRXZlbnRzID0gc3luY1RyZWVBcHBseVNlcnZlck92ZXJ3cml0ZShyZXBvLmluZm9TeW5jVHJlZV8sIHF1ZXJ5Ll9wYXRoLCBub2RlKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgnb2snKTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbmZvRXZlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wTGlzdGVuaW5nOiAoKSA9PiB7IH1cbiAgICB9KTtcbiAgICByZXBvVXBkYXRlSW5mbyhyZXBvLCAnY29ubmVjdGVkJywgZmFsc2UpO1xuICAgIHJlcG8uc2VydmVyU3luY1RyZWVfID0gbmV3IFN5bmNUcmVlKHtcbiAgICAgICAgc3RhcnRMaXN0ZW5pbmc6IChxdWVyeSwgdGFnLCBjdXJyZW50SGFzaEZuLCBvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgICAgICByZXBvLnNlcnZlcl8ubGlzdGVuKHF1ZXJ5LCBjdXJyZW50SGFzaEZuLCB0YWcsIChzdGF0dXMsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudHMgPSBvbkNvbXBsZXRlKHN0YXR1cywgZGF0YSk7XG4gICAgICAgICAgICAgICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgcXVlcnkuX3BhdGgsIGV2ZW50cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE5vIHN5bmNocm9ub3VzIGV2ZW50cyBmb3IgbmV0d29yay1iYWNrZWQgc3luYyB0cmVlc1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wTGlzdGVuaW5nOiAocXVlcnksIHRhZykgPT4ge1xuICAgICAgICAgICAgcmVwby5zZXJ2ZXJfLnVubGlzdGVuKHF1ZXJ5LCB0YWcpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEByZXR1cm5zIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcywgdGFraW5nIHRoZSBzZXJ2ZXIgb2Zmc2V0IGludG8gYWNjb3VudCBpZiB3ZSBoYXZlIG9uZS5cbiAqL1xuZnVuY3Rpb24gcmVwb1NlcnZlclRpbWUocmVwbykge1xuICAgIGNvbnN0IG9mZnNldE5vZGUgPSByZXBvLmluZm9EYXRhXy5nZXROb2RlKG5ldyBQYXRoKCcuaW5mby9zZXJ2ZXJUaW1lT2Zmc2V0JykpO1xuICAgIGNvbnN0IG9mZnNldCA9IG9mZnNldE5vZGUudmFsKCkgfHwgMDtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBvZmZzZXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlIFNlcnZlclZhbHVlcyB1c2luZyBzb21lIHZhcmlhYmxlcyBmcm9tIHRoZSByZXBvIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVwb0dlbmVyYXRlU2VydmVyVmFsdWVzKHJlcG8pIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVXaXRoVmFsdWVzKHtcbiAgICAgICAgdGltZXN0YW1wOiByZXBvU2VydmVyVGltZShyZXBvKVxuICAgIH0pO1xufVxuLyoqXG4gKiBDYWxsZWQgYnkgcmVhbHRpbWUgd2hlbiB3ZSBnZXQgbmV3IG1lc3NhZ2VzIGZyb20gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gcmVwb09uRGF0YVVwZGF0ZShyZXBvLCBwYXRoU3RyaW5nLCBkYXRhLCBpc01lcmdlLCB0YWcpIHtcbiAgICAvLyBGb3IgdGVzdGluZy5cbiAgICByZXBvLmRhdGFVcGRhdGVDb3VudCsrO1xuICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aChwYXRoU3RyaW5nKTtcbiAgICBkYXRhID0gcmVwby5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfXG4gICAgICAgID8gcmVwby5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfKHBhdGhTdHJpbmcsIGRhdGEpXG4gICAgICAgIDogZGF0YTtcbiAgICBsZXQgZXZlbnRzID0gW107XG4gICAgaWYgKHRhZykge1xuICAgICAgICBpZiAoaXNNZXJnZSkge1xuICAgICAgICAgICAgY29uc3QgdGFnZ2VkQ2hpbGRyZW4gPSBtYXAoZGF0YSwgKHJhdykgPT4gbm9kZUZyb21KU09OKHJhdykpO1xuICAgICAgICAgICAgZXZlbnRzID0gc3luY1RyZWVBcHBseVRhZ2dlZFF1ZXJ5TWVyZ2UocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgsIHRhZ2dlZENoaWxkcmVuLCB0YWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFnZ2VkU25hcCA9IG5vZGVGcm9tSlNPTihkYXRhKTtcbiAgICAgICAgICAgIGV2ZW50cyA9IHN5bmNUcmVlQXBwbHlUYWdnZWRRdWVyeU92ZXJ3cml0ZShyZXBvLnNlcnZlclN5bmNUcmVlXywgcGF0aCwgdGFnZ2VkU25hcCwgdGFnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc01lcmdlKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZWRDaGlsZHJlbiA9IG1hcChkYXRhLCAocmF3KSA9PiBub2RlRnJvbUpTT04ocmF3KSk7XG4gICAgICAgIGV2ZW50cyA9IHN5bmNUcmVlQXBwbHlTZXJ2ZXJNZXJnZShyZXBvLnNlcnZlclN5bmNUcmVlXywgcGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHNuYXAgPSBub2RlRnJvbUpTT04oZGF0YSk7XG4gICAgICAgIGV2ZW50cyA9IHN5bmNUcmVlQXBwbHlTZXJ2ZXJPdmVyd3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgsIHNuYXApO1xuICAgIH1cbiAgICBsZXQgYWZmZWN0ZWRQYXRoID0gcGF0aDtcbiAgICBpZiAoZXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gU2luY2Ugd2UgaGF2ZSBhIGxpc3RlbmVyIG91dHN0YW5kaW5nIGZvciBlYWNoIHRyYW5zYWN0aW9uLCByZWNlaXZpbmcgYW55IGV2ZW50c1xuICAgICAgICAvLyBpcyBhIHByb3h5IGZvciBzb21lIGNoYW5nZSBoYXZpbmcgb2NjdXJyZWQuXG4gICAgICAgIGFmZmVjdGVkUGF0aCA9IHJlcG9SZXJ1blRyYW5zYWN0aW9ucyhyZXBvLCBwYXRoKTtcbiAgICB9XG4gICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgYWZmZWN0ZWRQYXRoLCBldmVudHMpO1xufVxuZnVuY3Rpb24gcmVwb09uQ29ubmVjdFN0YXR1cyhyZXBvLCBjb25uZWN0U3RhdHVzKSB7XG4gICAgcmVwb1VwZGF0ZUluZm8ocmVwbywgJ2Nvbm5lY3RlZCcsIGNvbm5lY3RTdGF0dXMpO1xuICAgIGlmIChjb25uZWN0U3RhdHVzID09PSBmYWxzZSkge1xuICAgICAgICByZXBvUnVuT25EaXNjb25uZWN0RXZlbnRzKHJlcG8pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlcG9PblNlcnZlckluZm9VcGRhdGUocmVwbywgdXBkYXRlcykge1xuICAgIGVhY2godXBkYXRlcywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgcmVwb1VwZGF0ZUluZm8ocmVwbywga2V5LCB2YWx1ZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXBvVXBkYXRlSW5mbyhyZXBvLCBwYXRoU3RyaW5nLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aCgnLy5pbmZvLycgKyBwYXRoU3RyaW5nKTtcbiAgICBjb25zdCBuZXdOb2RlID0gbm9kZUZyb21KU09OKHZhbHVlKTtcbiAgICByZXBvLmluZm9EYXRhXy51cGRhdGVTbmFwc2hvdChwYXRoLCBuZXdOb2RlKTtcbiAgICBjb25zdCBldmVudHMgPSBzeW5jVHJlZUFwcGx5U2VydmVyT3ZlcndyaXRlKHJlcG8uaW5mb1N5bmNUcmVlXywgcGF0aCwgbmV3Tm9kZSk7XG4gICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgcGF0aCwgZXZlbnRzKTtcbn1cbmZ1bmN0aW9uIHJlcG9HZXROZXh0V3JpdGVJZChyZXBvKSB7XG4gICAgcmV0dXJuIHJlcG8ubmV4dFdyaXRlSWRfKys7XG59XG4vKipcbiAqIFRoZSBwdXJwb3NlIG9mIGBnZXRWYWx1ZWAgaXMgdG8gcmV0dXJuIHRoZSBsYXRlc3Qga25vd24gdmFsdWVcbiAqIHNhdGlzZnlpbmcgYHF1ZXJ5YC5cbiAqXG4gKiBUaGlzIG1ldGhvZCB3aWxsIGZpcnN0IGNoZWNrIGZvciBpbi1tZW1vcnkgY2FjaGVkIHZhbHVlc1xuICogYmVsb25naW5nIHRvIGFjdGl2ZSBsaXN0ZW5lcnMuIElmIHRoZXkgYXJlIGZvdW5kLCBzdWNoIHZhbHVlc1xuICogYXJlIGNvbnNpZGVyZWQgdG8gYmUgdGhlIG1vc3QgdXAtdG8tZGF0ZS5cbiAqXG4gKiBJZiB0aGUgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQsIHRoaXMgbWV0aG9kIHdpbGwgd2FpdCB1bnRpbCB0aGVcbiAqICByZXBvIGhhcyBlc3RhYmxpc2hlZCBhIGNvbm5lY3Rpb24gYW5kIHRoZW4gcmVxdWVzdCB0aGUgdmFsdWUgZm9yIGBxdWVyeWAuXG4gKiBJZiB0aGUgY2xpZW50IGlzIG5vdCBhYmxlIHRvIHJldHJpZXZlIHRoZSBxdWVyeSByZXN1bHQgZm9yIGFub3RoZXIgcmVhc29uLFxuICogaXQgcmVwb3J0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgdG8gc3VyZmFjZSBhIHZhbHVlIGZvci5cbiAqL1xuZnVuY3Rpb24gcmVwb0dldFZhbHVlKHJlcG8sIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbikge1xuICAgIC8vIE9ubHkgYWN0aXZlIHF1ZXJpZXMgYXJlIGNhY2hlZC4gVGhlcmUgaXMgbm8gcGVyc2lzdGVkIGNhY2hlLlxuICAgIGNvbnN0IGNhY2hlZCA9IHN5bmNUcmVlR2V0U2VydmVyVmFsdWUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHF1ZXJ5KTtcbiAgICBpZiAoY2FjaGVkICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVwby5zZXJ2ZXJfLmdldChxdWVyeSkudGhlbihwYXlsb2FkID0+IHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVGcm9tSlNPTihwYXlsb2FkKS53aXRoSW5kZXgocXVlcnkuX3F1ZXJ5UGFyYW1zLmdldEluZGV4KCkpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQmVsb3cgd2Ugc2ltdWxhdGUgdGhlIGFjdGlvbnMgb2YgYW4gYG9ubHlPbmNlYCBgb25WYWx1ZSgpYCBldmVudCB3aGVyZTpcbiAgICAgICAgICogQWRkIGFuIGV2ZW50IHJlZ2lzdHJhdGlvbixcbiAgICAgICAgICogVXBkYXRlIGRhdGEgYXQgdGhlIHBhdGgsXG4gICAgICAgICAqIFJhaXNlIGFueSBldmVudHMsXG4gICAgICAgICAqIENsZWFudXAgdGhlIFN5bmNUcmVlXG4gICAgICAgICAqL1xuICAgICAgICBzeW5jVHJlZUFkZEV2ZW50UmVnaXN0cmF0aW9uKHJlcG8uc2VydmVyU3luY1RyZWVfLCBxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIHRydWUpO1xuICAgICAgICBsZXQgZXZlbnRzO1xuICAgICAgICBpZiAocXVlcnkuX3F1ZXJ5UGFyYW1zLmxvYWRzQWxsRGF0YSgpKSB7XG4gICAgICAgICAgICBldmVudHMgPSBzeW5jVHJlZUFwcGx5U2VydmVyT3ZlcndyaXRlKHJlcG8uc2VydmVyU3luY1RyZWVfLCBxdWVyeS5fcGF0aCwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YWcgPSBzeW5jVHJlZVRhZ0ZvclF1ZXJ5KHJlcG8uc2VydmVyU3luY1RyZWVfLCBxdWVyeSk7XG4gICAgICAgICAgICBldmVudHMgPSBzeW5jVHJlZUFwcGx5VGFnZ2VkUXVlcnlPdmVyd3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHF1ZXJ5Ll9wYXRoLCBub2RlLCB0YWcpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgICAqIFdlIG5lZWQgdG8gcmFpc2UgZXZlbnRzIGluIHRoZSBzY2VuYXJpbyB3aGVyZSBgZ2V0KClgIGlzIGNhbGxlZCBhdCBhIHBhcmVudCBwYXRoLCBhbmRcbiAgICAgICAgICogd2hpbGUgdGhlIGBnZXQoKWAgaXMgcGVuZGluZywgYG9uVmFsdWVgIGlzIGNhbGxlZCBhdCBhIGNoaWxkIGxvY2F0aW9uLiBXaGlsZSBnZXQoKSBpcyB3YWl0aW5nXG4gICAgICAgICAqIGZvciB0aGUgZGF0YSwgYG9uVmFsdWVgIHdpbGwgcmVnaXN0ZXIgYSBuZXcgZXZlbnQuIFRoZW4sIGdldCgpIHdpbGwgY29tZSBiYWNrLCBhbmQgdXBkYXRlIHRoZSBzeW5jVHJlZVxuICAgICAgICAgKiBhbmQgaXRzIGNvcnJlc3BvbmRpbmcgc2VydmVyQ2FjaGUsIGluY2x1ZGluZyB0aGUgY2hpbGQgbG9jYXRpb24gd2hlcmUgYG9uVmFsdWVgIGlzIGNhbGxlZC4gVGhlbixcbiAgICAgICAgICogYG9uVmFsdWVgIHdpbGwgcmVjZWl2ZSB0aGUgZXZlbnQgZnJvbSB0aGUgc2VydmVyLCBidXQgbG9vayBhdCB0aGUgc3luY1RyZWUgYW5kIHNlZSB0aGF0IHRoZSBkYXRhIHJlY2VpdmVkXG4gICAgICAgICAqIGZyb20gdGhlIHNlcnZlciBpcyBhbHJlYWR5IGF0IHRoZSBTeW5jUG9pbnQsIGFuZCBzbyB0aGUgYG9uVmFsdWVgIGNhbGxiYWNrIHdpbGwgbmV2ZXIgZ2V0IGZpcmVkLlxuICAgICAgICAgKiBDYWxsaW5nIGBldmVudFF1ZXVlUmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aCgpYCBpcyB0aGUgY29ycmVjdCB3YXkgdG8gcHJvcGFnYXRlIHRoZSBldmVudHMgYW5kXG4gICAgICAgICAqIGVuc3VyZSB0aGUgY29ycmVzcG9uZGluZyBjaGlsZCBldmVudHMgd2lsbCBnZXQgZmlyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBldmVudFF1ZXVlUmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChyZXBvLmV2ZW50UXVldWVfLCBxdWVyeS5fcGF0aCwgZXZlbnRzKTtcbiAgICAgICAgc3luY1RyZWVSZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihyZXBvLnNlcnZlclN5bmNUcmVlXywgcXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCBudWxsLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSwgZXJyID0+IHtcbiAgICAgICAgcmVwb0xvZyhyZXBvLCAnZ2V0IGZvciBxdWVyeSAnICsgc3RyaW5naWZ5KHF1ZXJ5KSArICcgZmFpbGVkOiAnICsgZXJyKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihlcnIpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlcG9TZXRXaXRoUHJpb3JpdHkocmVwbywgcGF0aCwgbmV3VmFsLCBuZXdQcmlvcml0eSwgb25Db21wbGV0ZSkge1xuICAgIHJlcG9Mb2cocmVwbywgJ3NldCcsIHtcbiAgICAgICAgcGF0aDogcGF0aC50b1N0cmluZygpLFxuICAgICAgICB2YWx1ZTogbmV3VmFsLFxuICAgICAgICBwcmlvcml0eTogbmV3UHJpb3JpdHlcbiAgICB9KTtcbiAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzIGJlaGF2aW9yIHRvIGVpdGhlciAoYSkgc3RvcmUgZmxhZyB0byBza2lwIHJlc29sdmluZyB3aGVyZSBwb3NzaWJsZSBhbmQgLyBvclxuICAgIC8vIChiKSBzdG9yZSB1bnJlc29sdmVkIHBhdGhzIG9uIEpTT04gcGFyc2VcbiAgICBjb25zdCBzZXJ2ZXJWYWx1ZXMgPSByZXBvR2VuZXJhdGVTZXJ2ZXJWYWx1ZXMocmVwbyk7XG4gICAgY29uc3QgbmV3Tm9kZVVucmVzb2x2ZWQgPSBub2RlRnJvbUpTT04obmV3VmFsLCBuZXdQcmlvcml0eSk7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBzeW5jVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgpO1xuICAgIGNvbnN0IG5ld05vZGUgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVNuYXBzaG90KG5ld05vZGVVbnJlc29sdmVkLCBleGlzdGluZywgc2VydmVyVmFsdWVzKTtcbiAgICBjb25zdCB3cml0ZUlkID0gcmVwb0dldE5leHRXcml0ZUlkKHJlcG8pO1xuICAgIGNvbnN0IGV2ZW50cyA9IHN5bmNUcmVlQXBwbHlVc2VyT3ZlcndyaXRlKHJlcG8uc2VydmVyU3luY1RyZWVfLCBwYXRoLCBuZXdOb2RlLCB3cml0ZUlkLCB0cnVlKTtcbiAgICBldmVudFF1ZXVlUXVldWVFdmVudHMocmVwby5ldmVudFF1ZXVlXywgZXZlbnRzKTtcbiAgICByZXBvLnNlcnZlcl8ucHV0KHBhdGgudG9TdHJpbmcoKSwgbmV3Tm9kZVVucmVzb2x2ZWQudmFsKC8qZXhwb3J0PSovIHRydWUpLCAoc3RhdHVzLCBlcnJvclJlYXNvbikgPT4ge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gc3RhdHVzID09PSAnb2snO1xuICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHdhcm4oJ3NldCBhdCAnICsgcGF0aCArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGVhckV2ZW50cyA9IHN5bmNUcmVlQWNrVXNlcldyaXRlKHJlcG8uc2VydmVyU3luY1RyZWVfLCB3cml0ZUlkLCAhc3VjY2Vzcyk7XG4gICAgICAgIGV2ZW50UXVldWVSYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKHJlcG8uZXZlbnRRdWV1ZV8sIHBhdGgsIGNsZWFyRXZlbnRzKTtcbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XG4gICAgfSk7XG4gICAgY29uc3QgYWZmZWN0ZWRQYXRoID0gcmVwb0Fib3J0VHJhbnNhY3Rpb25zKHJlcG8sIHBhdGgpO1xuICAgIHJlcG9SZXJ1blRyYW5zYWN0aW9ucyhyZXBvLCBhZmZlY3RlZFBhdGgpO1xuICAgIC8vIFdlIHF1ZXVlZCB0aGUgZXZlbnRzIGFib3ZlLCBzbyBqdXN0IGZsdXNoIHRoZSBxdWV1ZSBoZXJlXG4gICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgYWZmZWN0ZWRQYXRoLCBbXSk7XG59XG5mdW5jdGlvbiByZXBvVXBkYXRlKHJlcG8sIHBhdGgsIGNoaWxkcmVuVG9NZXJnZSwgb25Db21wbGV0ZSkge1xuICAgIHJlcG9Mb2cocmVwbywgJ3VwZGF0ZScsIHsgcGF0aDogcGF0aC50b1N0cmluZygpLCB2YWx1ZTogY2hpbGRyZW5Ub01lcmdlIH0pO1xuICAgIC8vIFN0YXJ0IHdpdGggb3VyIGV4aXN0aW5nIGRhdGEgYW5kIG1lcmdlIGVhY2ggY2hpbGQgaW50byBpdC5cbiAgICBsZXQgZW1wdHkgPSB0cnVlO1xuICAgIGNvbnN0IHNlcnZlclZhbHVlcyA9IHJlcG9HZW5lcmF0ZVNlcnZlclZhbHVlcyhyZXBvKTtcbiAgICBjb25zdCBjaGFuZ2VkQ2hpbGRyZW4gPSB7fTtcbiAgICBlYWNoKGNoaWxkcmVuVG9NZXJnZSwgKGNoYW5nZWRLZXksIGNoYW5nZWRWYWx1ZSkgPT4ge1xuICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICBjaGFuZ2VkQ2hpbGRyZW5bY2hhbmdlZEtleV0gPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUocGF0aENoaWxkKHBhdGgsIGNoYW5nZWRLZXkpLCBub2RlRnJvbUpTT04oY2hhbmdlZFZhbHVlKSwgcmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHNlcnZlclZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKCFlbXB0eSkge1xuICAgICAgICBjb25zdCB3cml0ZUlkID0gcmVwb0dldE5leHRXcml0ZUlkKHJlcG8pO1xuICAgICAgICBjb25zdCBldmVudHMgPSBzeW5jVHJlZUFwcGx5VXNlck1lcmdlKHJlcG8uc2VydmVyU3luY1RyZWVfLCBwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlSWQpO1xuICAgICAgICBldmVudFF1ZXVlUXVldWVFdmVudHMocmVwby5ldmVudFF1ZXVlXywgZXZlbnRzKTtcbiAgICAgICAgcmVwby5zZXJ2ZXJfLm1lcmdlKHBhdGgudG9TdHJpbmcoKSwgY2hpbGRyZW5Ub01lcmdlLCAoc3RhdHVzLCBlcnJvclJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHN0YXR1cyA9PT0gJ29rJztcbiAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHdhcm4oJ3VwZGF0ZSBhdCAnICsgcGF0aCArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNsZWFyRXZlbnRzID0gc3luY1RyZWVBY2tVc2VyV3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHdyaXRlSWQsICFzdWNjZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGFmZmVjdGVkUGF0aCA9IGNsZWFyRXZlbnRzLmxlbmd0aCA+IDAgPyByZXBvUmVydW5UcmFuc2FjdGlvbnMocmVwbywgcGF0aCkgOiBwYXRoO1xuICAgICAgICAgICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgYWZmZWN0ZWRQYXRoLCBjbGVhckV2ZW50cyk7XG4gICAgICAgICAgICByZXBvQ2FsbE9uQ29tcGxldGVDYWxsYmFjayhyZXBvLCBvbkNvbXBsZXRlLCBzdGF0dXMsIGVycm9yUmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2goY2hpbGRyZW5Ub01lcmdlLCAoY2hhbmdlZFBhdGgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFmZmVjdGVkUGF0aCA9IHJlcG9BYm9ydFRyYW5zYWN0aW9ucyhyZXBvLCBwYXRoQ2hpbGQocGF0aCwgY2hhbmdlZFBhdGgpKTtcbiAgICAgICAgICAgIHJlcG9SZXJ1blRyYW5zYWN0aW9ucyhyZXBvLCBhZmZlY3RlZFBhdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gV2UgcXVldWVkIHRoZSBldmVudHMgYWJvdmUsIHNvIGp1c3QgZmx1c2ggdGhlIHF1ZXVlIGhlcmVcbiAgICAgICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgcGF0aCwgW10pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9nKFwidXBkYXRlKCkgY2FsbGVkIHdpdGggZW1wdHkgZGF0YS4gIERvbid0IGRvIGFueXRoaW5nLlwiKTtcbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgJ29rJywgdW5kZWZpbmVkKTtcbiAgICB9XG59XG4vKipcbiAqIEFwcGxpZXMgYWxsIG9mIHRoZSBjaGFuZ2VzIHN0b3JlZCB1cCBpbiB0aGUgb25EaXNjb25uZWN0XyB0cmVlLlxuICovXG5mdW5jdGlvbiByZXBvUnVuT25EaXNjb25uZWN0RXZlbnRzKHJlcG8pIHtcbiAgICByZXBvTG9nKHJlcG8sICdvbkRpc2Nvbm5lY3RFdmVudHMnKTtcbiAgICBjb25zdCBzZXJ2ZXJWYWx1ZXMgPSByZXBvR2VuZXJhdGVTZXJ2ZXJWYWx1ZXMocmVwbyk7XG4gICAgY29uc3QgcmVzb2x2ZWRPbkRpc2Nvbm5lY3RUcmVlID0gbmV3U3BhcnNlU25hcHNob3RUcmVlKCk7XG4gICAgc3BhcnNlU25hcHNob3RUcmVlRm9yRWFjaFRyZWUocmVwby5vbkRpc2Nvbm5lY3RfLCBuZXdFbXB0eVBhdGgoKSwgKHBhdGgsIG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUocGF0aCwgbm9kZSwgcmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHNlcnZlclZhbHVlcyk7XG4gICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZVJlbWVtYmVyKHJlc29sdmVkT25EaXNjb25uZWN0VHJlZSwgcGF0aCwgcmVzb2x2ZWQpO1xuICAgIH0pO1xuICAgIGxldCBldmVudHMgPSBbXTtcbiAgICBzcGFyc2VTbmFwc2hvdFRyZWVGb3JFYWNoVHJlZShyZXNvbHZlZE9uRGlzY29ubmVjdFRyZWUsIG5ld0VtcHR5UGF0aCgpLCAocGF0aCwgc25hcCkgPT4ge1xuICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNUcmVlQXBwbHlTZXJ2ZXJPdmVyd3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgsIHNuYXApKTtcbiAgICAgICAgY29uc3QgYWZmZWN0ZWRQYXRoID0gcmVwb0Fib3J0VHJhbnNhY3Rpb25zKHJlcG8sIHBhdGgpO1xuICAgICAgICByZXBvUmVydW5UcmFuc2FjdGlvbnMocmVwbywgYWZmZWN0ZWRQYXRoKTtcbiAgICB9KTtcbiAgICByZXBvLm9uRGlzY29ubmVjdF8gPSBuZXdTcGFyc2VTbmFwc2hvdFRyZWUoKTtcbiAgICBldmVudFF1ZXVlUmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChyZXBvLmV2ZW50UXVldWVfLCBuZXdFbXB0eVBhdGgoKSwgZXZlbnRzKTtcbn1cbmZ1bmN0aW9uIHJlcG9PbkRpc2Nvbm5lY3RDYW5jZWwocmVwbywgcGF0aCwgb25Db21wbGV0ZSkge1xuICAgIHJlcG8uc2VydmVyXy5vbkRpc2Nvbm5lY3RDYW5jZWwocGF0aC50b1N0cmluZygpLCAoc3RhdHVzLCBlcnJvclJlYXNvbikgPT4ge1xuICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XG4gICAgICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWVGb3JnZXQocmVwby5vbkRpc2Nvbm5lY3RfLCBwYXRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXBvQ2FsbE9uQ29tcGxldGVDYWxsYmFjayhyZXBvLCBvbkNvbXBsZXRlLCBzdGF0dXMsIGVycm9yUmVhc29uKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlcG9PbkRpc2Nvbm5lY3RTZXQocmVwbywgcGF0aCwgdmFsdWUsIG9uQ29tcGxldGUpIHtcbiAgICBjb25zdCBuZXdOb2RlID0gbm9kZUZyb21KU09OKHZhbHVlKTtcbiAgICByZXBvLnNlcnZlcl8ub25EaXNjb25uZWN0UHV0KHBhdGgudG9TdHJpbmcoKSwgbmV3Tm9kZS52YWwoLypleHBvcnQ9Ki8gdHJ1ZSksIChzdGF0dXMsIGVycm9yUmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZVJlbWVtYmVyKHJlcG8ub25EaXNjb25uZWN0XywgcGF0aCwgbmV3Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXBvT25EaXNjb25uZWN0U2V0V2l0aFByaW9yaXR5KHJlcG8sIHBhdGgsIHZhbHVlLCBwcmlvcml0eSwgb25Db21wbGV0ZSkge1xuICAgIGNvbnN0IG5ld05vZGUgPSBub2RlRnJvbUpTT04odmFsdWUsIHByaW9yaXR5KTtcbiAgICByZXBvLnNlcnZlcl8ub25EaXNjb25uZWN0UHV0KHBhdGgudG9TdHJpbmcoKSwgbmV3Tm9kZS52YWwoLypleHBvcnQ9Ki8gdHJ1ZSksIChzdGF0dXMsIGVycm9yUmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgICAgICAgIHNwYXJzZVNuYXBzaG90VHJlZVJlbWVtYmVyKHJlcG8ub25EaXNjb25uZWN0XywgcGF0aCwgbmV3Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXBvT25EaXNjb25uZWN0VXBkYXRlKHJlcG8sIHBhdGgsIGNoaWxkcmVuVG9NZXJnZSwgb25Db21wbGV0ZSkge1xuICAgIGlmIChpc0VtcHR5KGNoaWxkcmVuVG9NZXJnZSkpIHtcbiAgICAgICAgbG9nKFwib25EaXNjb25uZWN0KCkudXBkYXRlKCkgY2FsbGVkIHdpdGggZW1wdHkgZGF0YS4gIERvbid0IGRvIGFueXRoaW5nLlwiKTtcbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgJ29rJywgdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXBvLnNlcnZlcl8ub25EaXNjb25uZWN0TWVyZ2UocGF0aC50b1N0cmluZygpLCBjaGlsZHJlblRvTWVyZ2UsIChzdGF0dXMsIGVycm9yUmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09ICdvaycpIHtcbiAgICAgICAgICAgIGVhY2goY2hpbGRyZW5Ub01lcmdlLCAoY2hpbGROYW1lLCBjaGlsZE5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDaGlsZE5vZGUgPSBub2RlRnJvbUpTT04oY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICBzcGFyc2VTbmFwc2hvdFRyZWVSZW1lbWJlcihyZXBvLm9uRGlzY29ubmVjdF8sIHBhdGhDaGlsZChwYXRoLCBjaGlsZE5hbWUpLCBuZXdDaGlsZE5vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgb25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXBvQWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5KHJlcG8sIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbikge1xuICAgIGxldCBldmVudHM7XG4gICAgaWYgKHBhdGhHZXRGcm9udChxdWVyeS5fcGF0aCkgPT09ICcuaW5mbycpIHtcbiAgICAgICAgZXZlbnRzID0gc3luY1RyZWVBZGRFdmVudFJlZ2lzdHJhdGlvbihyZXBvLmluZm9TeW5jVHJlZV8sIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBldmVudHMgPSBzeW5jVHJlZUFkZEV2ZW50UmVnaXN0cmF0aW9uKHJlcG8uc2VydmVyU3luY1RyZWVfLCBxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xuICAgIH1cbiAgICBldmVudFF1ZXVlUmFpc2VFdmVudHNBdFBhdGgocmVwby5ldmVudFF1ZXVlXywgcXVlcnkuX3BhdGgsIGV2ZW50cyk7XG59XG5mdW5jdGlvbiByZXBvUmVtb3ZlRXZlbnRDYWxsYmFja0ZvclF1ZXJ5KHJlcG8sIHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbikge1xuICAgIC8vIFRoZXNlIGFyZSBndWFyYW50ZWVkIG5vdCB0byByYWlzZSBldmVudHMsIHNpbmNlIHdlJ3JlIG5vdCBwYXNzaW5nIGluIGEgY2FuY2VsRXJyb3IuIEhvd2V2ZXIsIHdlIGNhbiBmdXR1cmUtcHJvb2ZcbiAgICAvLyBhIGxpdHRsZSBiaXQgYnkgaGFuZGxpbmcgdGhlIHJldHVybiB2YWx1ZXMgYW55d2F5cy5cbiAgICBsZXQgZXZlbnRzO1xuICAgIGlmIChwYXRoR2V0RnJvbnQocXVlcnkuX3BhdGgpID09PSAnLmluZm8nKSB7XG4gICAgICAgIGV2ZW50cyA9IHN5bmNUcmVlUmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24ocmVwby5pbmZvU3luY1RyZWVfLCBxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXZlbnRzID0gc3luY1RyZWVSZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihyZXBvLnNlcnZlclN5bmNUcmVlXywgcXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKTtcbiAgICB9XG4gICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzQXRQYXRoKHJlcG8uZXZlbnRRdWV1ZV8sIHF1ZXJ5Ll9wYXRoLCBldmVudHMpO1xufVxuZnVuY3Rpb24gcmVwb0ludGVycnVwdChyZXBvKSB7XG4gICAgaWYgKHJlcG8ucGVyc2lzdGVudENvbm5lY3Rpb25fKSB7XG4gICAgICAgIHJlcG8ucGVyc2lzdGVudENvbm5lY3Rpb25fLmludGVycnVwdChJTlRFUlJVUFRfUkVBU09OKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXBvUmVzdW1lKHJlcG8pIHtcbiAgICBpZiAocmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl8pIHtcbiAgICAgICAgcmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl8ucmVzdW1lKElOVEVSUlVQVF9SRUFTT04pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlcG9Mb2cocmVwbywgLi4udmFyQXJncykge1xuICAgIGxldCBwcmVmaXggPSAnJztcbiAgICBpZiAocmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl8pIHtcbiAgICAgICAgcHJlZml4ID0gcmVwby5wZXJzaXN0ZW50Q29ubmVjdGlvbl8uaWQgKyAnOic7XG4gICAgfVxuICAgIGxvZyhwcmVmaXgsIC4uLnZhckFyZ3MpO1xufVxuZnVuY3Rpb24gcmVwb0NhbGxPbkNvbXBsZXRlQ2FsbGJhY2socmVwbywgY2FsbGJhY2ssIHN0YXR1cywgZXJyb3JSZWFzb24pIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgZXhjZXB0aW9uR3VhcmQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IChzdGF0dXMgfHwgJ2Vycm9yJykudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yUmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gJzogJyArIGVycm9yUmVhc29uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRyYW5zYWN0aW9uLCBhZGRzIGl0IHRvIHRoZSB0cmFuc2FjdGlvbnMgd2UncmUgdHJhY2tpbmcsIGFuZFxuICogc2VuZHMgaXQgdG8gdGhlIHNlcnZlciBpZiBwb3NzaWJsZS5cbiAqXG4gKiBAcGFyYW0gcGF0aCAtIFBhdGggYXQgd2hpY2ggdG8gZG8gdHJhbnNhY3Rpb24uXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb25VcGRhdGUgLSBVcGRhdGUgY2FsbGJhY2suXG4gKiBAcGFyYW0gb25Db21wbGV0ZSAtIENvbXBsZXRpb24gY2FsbGJhY2suXG4gKiBAcGFyYW0gdW53YXRjaGVyIC0gRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSB0cmFuc2FjdGlvbiBubyBsb25nZXJcbiAqIG5lZWQgZGF0YSB1cGRhdGVzIGZvciBgcGF0aGAuXG4gKiBAcGFyYW0gYXBwbHlMb2NhbGx5IC0gV2hldGhlciBvciBub3QgdG8gbWFrZSBpbnRlcm1lZGlhdGUgcmVzdWx0cyB2aXNpYmxlXG4gKi9cbmZ1bmN0aW9uIHJlcG9TdGFydFRyYW5zYWN0aW9uKHJlcG8sIHBhdGgsIHRyYW5zYWN0aW9uVXBkYXRlLCBvbkNvbXBsZXRlLCB1bndhdGNoZXIsIGFwcGx5TG9jYWxseSkge1xuICAgIHJlcG9Mb2cocmVwbywgJ3RyYW5zYWN0aW9uIG9uICcgKyBwYXRoKTtcbiAgICAvLyBJbml0aWFsaXplIHRyYW5zYWN0aW9uLlxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICAgICAgICBwYXRoLFxuICAgICAgICB1cGRhdGU6IHRyYW5zYWN0aW9uVXBkYXRlLFxuICAgICAgICBvbkNvbXBsZXRlLFxuICAgICAgICAvLyBPbmUgb2YgVHJhbnNhY3Rpb25TdGF0dXMgZW51bXMuXG4gICAgICAgIHN0YXR1czogbnVsbCxcbiAgICAgICAgLy8gVXNlZCB3aGVuIGNvbWJpbmluZyB0cmFuc2FjdGlvbnMgYXQgZGlmZmVyZW50IGxvY2F0aW9ucyB0byBmaWd1cmUgb3V0XG4gICAgICAgIC8vIHdoaWNoIG9uZSBnb2VzIGZpcnN0LlxuICAgICAgICBvcmRlcjogTFVJREdlbmVyYXRvcigpLFxuICAgICAgICAvLyBXaGV0aGVyIHRvIHJhaXNlIGxvY2FsIGV2ZW50cyBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAgICAgYXBwbHlMb2NhbGx5LFxuICAgICAgICAvLyBDb3VudCBvZiBob3cgbWFueSB0aW1lcyB3ZSd2ZSByZXRyaWVkIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAgICAgcmV0cnlDb3VudDogMCxcbiAgICAgICAgLy8gRnVuY3Rpb24gdG8gY2FsbCB0byBjbGVhbiB1cCBvdXIgLm9uKCkgbGlzdGVuZXIuXG4gICAgICAgIHVud2F0Y2hlcixcbiAgICAgICAgLy8gU3RvcmVzIHdoeSBhIHRyYW5zYWN0aW9uIHdhcyBhYm9ydGVkLlxuICAgICAgICBhYm9ydFJlYXNvbjogbnVsbCxcbiAgICAgICAgY3VycmVudFdyaXRlSWQ6IG51bGwsXG4gICAgICAgIGN1cnJlbnRJbnB1dFNuYXBzaG90OiBudWxsLFxuICAgICAgICBjdXJyZW50T3V0cHV0U25hcHNob3RSYXc6IG51bGwsXG4gICAgICAgIGN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkOiBudWxsXG4gICAgfTtcbiAgICAvLyBSdW4gdHJhbnNhY3Rpb24gaW5pdGlhbGx5LlxuICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHJlcG9HZXRMYXRlc3RTdGF0ZShyZXBvLCBwYXRoLCB1bmRlZmluZWQpO1xuICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRJbnB1dFNuYXBzaG90ID0gY3VycmVudFN0YXRlO1xuICAgIGNvbnN0IG5ld1ZhbCA9IHRyYW5zYWN0aW9uLnVwZGF0ZShjdXJyZW50U3RhdGUudmFsKCkpO1xuICAgIGlmIChuZXdWYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBBYm9ydCB0cmFuc2FjdGlvbi5cbiAgICAgICAgdHJhbnNhY3Rpb24udW53YXRjaGVyKCk7XG4gICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJhdyA9IG51bGw7XG4gICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkID0gbnVsbDtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uQ29tcGxldGUobnVsbCwgZmFsc2UsIHRyYW5zYWN0aW9uLmN1cnJlbnRJbnB1dFNuYXBzaG90KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoJ3RyYW5zYWN0aW9uIGZhaWxlZDogRGF0YSByZXR1cm5lZCAnLCBuZXdWYWwsIHRyYW5zYWN0aW9uLnBhdGgpO1xuICAgICAgICAvLyBNYXJrIGFzIHJ1biBhbmQgYWRkIHRvIG91ciBxdWV1ZS5cbiAgICAgICAgdHJhbnNhY3Rpb24uc3RhdHVzID0gMCAvKiBUcmFuc2FjdGlvblN0YXR1cy5SVU4gKi87XG4gICAgICAgIGNvbnN0IHF1ZXVlTm9kZSA9IHRyZWVTdWJUcmVlKHJlcG8udHJhbnNhY3Rpb25RdWV1ZVRyZWVfLCBwYXRoKTtcbiAgICAgICAgY29uc3Qgbm9kZVF1ZXVlID0gdHJlZUdldFZhbHVlKHF1ZXVlTm9kZSkgfHwgW107XG4gICAgICAgIG5vZGVRdWV1ZS5wdXNoKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgdHJlZVNldFZhbHVlKHF1ZXVlTm9kZSwgbm9kZVF1ZXVlKTtcbiAgICAgICAgLy8gVXBkYXRlIHZpc2libGVEYXRhIGFuZCByYWlzZSBldmVudHNcbiAgICAgICAgLy8gTm90ZTogV2UgaW50ZW50aW9uYWxseSByYWlzZSBldmVudHMgYWZ0ZXIgdXBkYXRpbmcgYWxsIG9mIG91clxuICAgICAgICAvLyB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2UgdGhlIHVzZXIgY291bGQgc3RhcnQgbmV3IHRyYW5zYWN0aW9ucyBmcm9tIHRoZVxuICAgICAgICAvLyBldmVudCBjYWxsYmFja3MuXG4gICAgICAgIGxldCBwcmlvcml0eUZvck5vZGU7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3VmFsID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgbmV3VmFsICE9PSBudWxsICYmXG4gICAgICAgICAgICBjb250YWlucyhuZXdWYWwsICcucHJpb3JpdHknKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIHByaW9yaXR5Rm9yTm9kZSA9IHNhZmVHZXQobmV3VmFsLCAnLnByaW9yaXR5Jyk7XG4gICAgICAgICAgICBhc3NlcnQoaXNWYWxpZFByaW9yaXR5KHByaW9yaXR5Rm9yTm9kZSksICdJbnZhbGlkIHByaW9yaXR5IHJldHVybmVkIGJ5IHRyYW5zYWN0aW9uLiAnICtcbiAgICAgICAgICAgICAgICAnUHJpb3JpdHkgbXVzdCBiZSBhIHZhbGlkIHN0cmluZywgZmluaXRlIG51bWJlciwgc2VydmVyIHZhbHVlLCBvciBudWxsLicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBzeW5jVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgpIHx8XG4gICAgICAgICAgICAgICAgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XG4gICAgICAgICAgICBwcmlvcml0eUZvck5vZGUgPSBjdXJyZW50Tm9kZS5nZXRQcmlvcml0eSgpLnZhbCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlcnZlclZhbHVlcyA9IHJlcG9HZW5lcmF0ZVNlcnZlclZhbHVlcyhyZXBvKTtcbiAgICAgICAgY29uc3QgbmV3Tm9kZVVucmVzb2x2ZWQgPSBub2RlRnJvbUpTT04obmV3VmFsLCBwcmlvcml0eUZvck5vZGUpO1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gcmVzb2x2ZURlZmVycmVkVmFsdWVTbmFwc2hvdChuZXdOb2RlVW5yZXNvbHZlZCwgY3VycmVudFN0YXRlLCBzZXJ2ZXJWYWx1ZXMpO1xuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50T3V0cHV0U25hcHNob3RSYXcgPSBuZXdOb2RlVW5yZXNvbHZlZDtcbiAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudE91dHB1dFNuYXBzaG90UmVzb2x2ZWQgPSBuZXdOb2RlO1xuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCA9IHJlcG9HZXROZXh0V3JpdGVJZChyZXBvKTtcbiAgICAgICAgY29uc3QgZXZlbnRzID0gc3luY1RyZWVBcHBseVVzZXJPdmVyd3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgsIG5ld05vZGUsIHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkLCB0cmFuc2FjdGlvbi5hcHBseUxvY2FsbHkpO1xuICAgICAgICBldmVudFF1ZXVlUmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChyZXBvLmV2ZW50UXVldWVfLCBwYXRoLCBldmVudHMpO1xuICAgICAgICByZXBvU2VuZFJlYWR5VHJhbnNhY3Rpb25zKHJlcG8sIHJlcG8udHJhbnNhY3Rpb25RdWV1ZVRyZWVfKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSBleGNsdWRlU2V0cyAtIEEgc3BlY2lmaWMgc2V0IHRvIGV4Y2x1ZGVcbiAqL1xuZnVuY3Rpb24gcmVwb0dldExhdGVzdFN0YXRlKHJlcG8sIHBhdGgsIGV4Y2x1ZGVTZXRzKSB7XG4gICAgcmV0dXJuIChzeW5jVHJlZUNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHBhdGgsIGV4Y2x1ZGVTZXRzKSB8fFxuICAgICAgICBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XG59XG4vKipcbiAqIFNlbmRzIGFueSBhbHJlYWR5LXJ1biB0cmFuc2FjdGlvbnMgdGhhdCBhcmVuJ3Qgd2FpdGluZyBmb3Igb3V0c3RhbmRpbmdcbiAqIHRyYW5zYWN0aW9ucyB0byBjb21wbGV0ZS5cbiAqXG4gKiBFeHRlcm5hbGx5IGl0J3MgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCBidXQgaXQgY2FsbHMgaXRzZWxmIHJlY3Vyc2l2ZWx5XG4gKiB3aXRoIGEgcGFydGljdWxhciB0cmFuc2FjdGlvblF1ZXVlVHJlZSBub2RlIHRvIHJlY3Vyc2UgdGhyb3VnaCB0aGUgdHJlZS5cbiAqXG4gKiBAcGFyYW0gbm9kZSAtIHRyYW5zYWN0aW9uUXVldWVUcmVlIG5vZGUgdG8gc3RhcnQgYXQuXG4gKi9cbmZ1bmN0aW9uIHJlcG9TZW5kUmVhZHlUcmFuc2FjdGlvbnMocmVwbywgbm9kZSA9IHJlcG8udHJhbnNhY3Rpb25RdWV1ZVRyZWVfKSB7XG4gICAgLy8gQmVmb3JlIHJlY3Vyc2luZywgbWFrZSBzdXJlIGFueSBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zIGFyZSByZW1vdmVkLlxuICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXBvUHJ1bmVDb21wbGV0ZWRUcmFuc2FjdGlvbnNCZWxvd05vZGUocmVwbywgbm9kZSk7XG4gICAgfVxuICAgIGlmICh0cmVlR2V0VmFsdWUobm9kZSkpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSByZXBvQnVpbGRUcmFuc2FjdGlvblF1ZXVlKHJlcG8sIG5vZGUpO1xuICAgICAgICBhc3NlcnQocXVldWUubGVuZ3RoID4gMCwgJ1NlbmRpbmcgemVybyBsZW5ndGggdHJhbnNhY3Rpb24gcXVldWUnKTtcbiAgICAgICAgY29uc3QgYWxsUnVuID0gcXVldWUuZXZlcnkoKHRyYW5zYWN0aW9uKSA9PiB0cmFuc2FjdGlvbi5zdGF0dXMgPT09IDAgLyogVHJhbnNhY3Rpb25TdGF0dXMuUlVOICovKTtcbiAgICAgICAgLy8gSWYgdGhleSdyZSBhbGwgcnVuIChhbmQgbm90IHNlbnQpLCB3ZSBjYW4gc2VuZCB0aGVtLiAgRWxzZSwgd2UgbXVzdCB3YWl0LlxuICAgICAgICBpZiAoYWxsUnVuKSB7XG4gICAgICAgICAgICByZXBvU2VuZFRyYW5zYWN0aW9uUXVldWUocmVwbywgdHJlZUdldFBhdGgobm9kZSksIHF1ZXVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0cmVlSGFzQ2hpbGRyZW4obm9kZSkpIHtcbiAgICAgICAgdHJlZUZvckVhY2hDaGlsZChub2RlLCBjaGlsZE5vZGUgPT4ge1xuICAgICAgICAgICAgcmVwb1NlbmRSZWFkeVRyYW5zYWN0aW9ucyhyZXBvLCBjaGlsZE5vZGUpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIEdpdmVuIGEgbGlzdCBvZiBydW4gdHJhbnNhY3Rpb25zLCBzZW5kIHRoZW0gdG8gdGhlIHNlcnZlciBhbmQgdGhlbiBoYW5kbGVcbiAqIHRoZSByZXN1bHQgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSkuXG4gKlxuICogQHBhcmFtIHBhdGggLSBUaGUgbG9jYXRpb24gb2YgdGhlIHF1ZXVlLlxuICogQHBhcmFtIHF1ZXVlIC0gUXVldWUgb2YgdHJhbnNhY3Rpb25zIHVuZGVyIHRoZSBzcGVjaWZpZWQgbG9jYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHJlcG9TZW5kVHJhbnNhY3Rpb25RdWV1ZShyZXBvLCBwYXRoLCBxdWV1ZSkge1xuICAgIC8vIE1hcmsgdHJhbnNhY3Rpb25zIGFzIHNlbnQgYW5kIGluY3JlbWVudCByZXRyeSBjb3VudCFcbiAgICBjb25zdCBzZXRzVG9JZ25vcmUgPSBxdWV1ZS5tYXAodHhuID0+IHtcbiAgICAgICAgcmV0dXJuIHR4bi5jdXJyZW50V3JpdGVJZDtcbiAgICB9KTtcbiAgICBjb25zdCBsYXRlc3RTdGF0ZSA9IHJlcG9HZXRMYXRlc3RTdGF0ZShyZXBvLCBwYXRoLCBzZXRzVG9JZ25vcmUpO1xuICAgIGxldCBzbmFwVG9TZW5kID0gbGF0ZXN0U3RhdGU7XG4gICAgY29uc3QgbGF0ZXN0SGFzaCA9IGxhdGVzdFN0YXRlLmhhc2goKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHR4biA9IHF1ZXVlW2ldO1xuICAgICAgICBhc3NlcnQodHhuLnN0YXR1cyA9PT0gMCAvKiBUcmFuc2FjdGlvblN0YXR1cy5SVU4gKi8sICd0cnlUb1NlbmRUcmFuc2FjdGlvblF1ZXVlXzogaXRlbXMgaW4gcXVldWUgc2hvdWxkIGFsbCBiZSBydW4uJyk7XG4gICAgICAgIHR4bi5zdGF0dXMgPSAxIC8qIFRyYW5zYWN0aW9uU3RhdHVzLlNFTlQgKi87XG4gICAgICAgIHR4bi5yZXRyeUNvdW50Kys7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IG5ld1JlbGF0aXZlUGF0aChwYXRoLCB0eG4ucGF0aCk7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGdvdHRlbiB0byB0aGlzIHBvaW50LCB0aGUgb3V0cHV0IHNuYXBzaG90IG11c3QgYmUgZGVmaW5lZC5cbiAgICAgICAgc25hcFRvU2VuZCA9IHNuYXBUb1NlbmQudXBkYXRlQ2hpbGQocmVsYXRpdmVQYXRoIC8qKiBAdHlwZSB7IU5vZGV9ICovLCB0eG4uY3VycmVudE91dHB1dFNuYXBzaG90UmF3KTtcbiAgICB9XG4gICAgY29uc3QgZGF0YVRvU2VuZCA9IHNuYXBUb1NlbmQudmFsKHRydWUpO1xuICAgIGNvbnN0IHBhdGhUb1NlbmQgPSBwYXRoO1xuICAgIC8vIFNlbmQgdGhlIHB1dC5cbiAgICByZXBvLnNlcnZlcl8ucHV0KHBhdGhUb1NlbmQudG9TdHJpbmcoKSwgZGF0YVRvU2VuZCwgKHN0YXR1cykgPT4ge1xuICAgICAgICByZXBvTG9nKHJlcG8sICd0cmFuc2FjdGlvbiBwdXQgcmVzcG9uc2UnLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoVG9TZW5kLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBzdGF0dXNcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBldmVudHMgPSBbXTtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xuICAgICAgICAgICAgLy8gUXVldWUgdXAgdGhlIGNhbGxiYWNrcyBhbmQgZmlyZSB0aGVtIGFmdGVyIGNsZWFuaW5nIHVwIGFsbCBvZiBvdXJcbiAgICAgICAgICAgIC8vIHRyYW5zYWN0aW9uIHN0YXRlLCBzaW5jZSB0aGUgY2FsbGJhY2sgY291bGQgdHJpZ2dlciBtb3JlXG4gICAgICAgICAgICAvLyB0cmFuc2FjdGlvbnMgb3Igc2V0cy5cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnN0YXR1cyA9IDIgLyogVHJhbnNhY3Rpb25TdGF0dXMuQ09NUExFVEVEICovO1xuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1RyZWVBY2tVc2VyV3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHF1ZXVlW2ldLmN1cnJlbnRXcml0ZUlkKSk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmV2ZXIgdW5zZXQgdGhlIG91dHB1dCBzbmFwc2hvdCwgYW5kIGdpdmVuIHRoYXQgdGhpc1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmFuc2FjdGlvbiBpcyBjb21wbGV0ZSwgaXQgc2hvdWxkIGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaCgoKSA9PiBxdWV1ZVtpXS5vbkNvbXBsZXRlKG51bGwsIHRydWUsIHF1ZXVlW2ldLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnVud2F0Y2hlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm93IHJlbW92ZSB0aGUgY29tcGxldGVkIHRyYW5zYWN0aW9ucy5cbiAgICAgICAgICAgIHJlcG9QcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZShyZXBvLCB0cmVlU3ViVHJlZShyZXBvLnRyYW5zYWN0aW9uUXVldWVUcmVlXywgcGF0aCkpO1xuICAgICAgICAgICAgLy8gVGhlcmUgbWF5IGJlIHBlbmRpbmcgdHJhbnNhY3Rpb25zIHRoYXQgd2UgY2FuIG5vdyBzZW5kLlxuICAgICAgICAgICAgcmVwb1NlbmRSZWFkeVRyYW5zYWN0aW9ucyhyZXBvLCByZXBvLnRyYW5zYWN0aW9uUXVldWVUcmVlXyk7XG4gICAgICAgICAgICBldmVudFF1ZXVlUmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChyZXBvLmV2ZW50UXVldWVfLCBwYXRoLCBldmVudHMpO1xuICAgICAgICAgICAgLy8gRmluYWxseSwgdHJpZ2dlciBvbkNvbXBsZXRlIGNhbGxiYWNrcy5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoY2FsbGJhY2tzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRyYW5zYWN0aW9ucyBhcmUgbm8gbG9uZ2VyIHNlbnQuICBVcGRhdGUgdGhlaXIgc3RhdHVzIGFwcHJvcHJpYXRlbHkuXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnZGF0YXN0YWxlJykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLnN0YXR1cyA9PT0gMyAvKiBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUICovKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSA0IC8qIFRyYW5zYWN0aW9uU3RhdHVzLk5FRURTX0FCT1JUICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gMCAvKiBUcmFuc2FjdGlvblN0YXR1cy5SVU4gKi87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXJuKCd0cmFuc2FjdGlvbiBhdCAnICsgcGF0aFRvU2VuZC50b1N0cmluZygpICsgJyBmYWlsZWQ6ICcgKyBzdGF0dXMpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gNCAvKiBUcmFuc2FjdGlvblN0YXR1cy5ORUVEU19BQk9SVCAqLztcbiAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uYWJvcnRSZWFzb24gPSBzdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVwb1JlcnVuVHJhbnNhY3Rpb25zKHJlcG8sIHBhdGgpO1xuICAgICAgICB9XG4gICAgfSwgbGF0ZXN0SGFzaCk7XG59XG4vKipcbiAqIEZpbmRzIGFsbCB0cmFuc2FjdGlvbnMgZGVwZW5kZW50IG9uIHRoZSBkYXRhIGF0IGNoYW5nZWRQYXRoIGFuZCByZXJ1bnMgdGhlbS5cbiAqXG4gKiBTaG91bGQgYmUgY2FsbGVkIGFueSB0aW1lIGNhY2hlZCBkYXRhIGNoYW5nZXMuXG4gKlxuICogUmV0dXJuIHRoZSBoaWdoZXN0IHBhdGggdGhhdCB3YXMgYWZmZWN0ZWQgYnkgcmVydW5uaW5nIHRyYW5zYWN0aW9ucy4gVGhpc1xuICogaXMgdGhlIHBhdGggYXQgd2hpY2ggZXZlbnRzIG5lZWQgdG8gYmUgcmFpc2VkIGZvci5cbiAqXG4gKiBAcGFyYW0gY2hhbmdlZFBhdGggLSBUaGUgcGF0aCBpbiBtZXJnZWREYXRhIHRoYXQgY2hhbmdlZC5cbiAqIEByZXR1cm5zIFRoZSByb290bW9zdCBwYXRoIHRoYXQgd2FzIGFmZmVjdGVkIGJ5IHJlcnVubmluZyB0cmFuc2FjdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHJlcG9SZXJ1blRyYW5zYWN0aW9ucyhyZXBvLCBjaGFuZ2VkUGF0aCkge1xuICAgIGNvbnN0IHJvb3RNb3N0VHJhbnNhY3Rpb25Ob2RlID0gcmVwb0dldEFuY2VzdG9yVHJhbnNhY3Rpb25Ob2RlKHJlcG8sIGNoYW5nZWRQYXRoKTtcbiAgICBjb25zdCBwYXRoID0gdHJlZUdldFBhdGgocm9vdE1vc3RUcmFuc2FjdGlvbk5vZGUpO1xuICAgIGNvbnN0IHF1ZXVlID0gcmVwb0J1aWxkVHJhbnNhY3Rpb25RdWV1ZShyZXBvLCByb290TW9zdFRyYW5zYWN0aW9uTm9kZSk7XG4gICAgcmVwb1JlcnVuVHJhbnNhY3Rpb25RdWV1ZShyZXBvLCBxdWV1ZSwgcGF0aCk7XG4gICAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIERvZXMgYWxsIHRoZSB3b3JrIG9mIHJlcnVubmluZyB0cmFuc2FjdGlvbnMgKGFzIHdlbGwgYXMgY2xlYW5zIHVwIGFib3J0ZWRcbiAqIHRyYW5zYWN0aW9ucyBhbmQgd2hhdG5vdCkuXG4gKlxuICogQHBhcmFtIHF1ZXVlIC0gVGhlIHF1ZXVlIG9mIHRyYW5zYWN0aW9ucyB0byBydW4uXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBwYXRoIHRoZSBxdWV1ZSBpcyBmb3IuXG4gKi9cbmZ1bmN0aW9uIHJlcG9SZXJ1blRyYW5zYWN0aW9uUXVldWUocmVwbywgcXVldWUsIHBhdGgpIHtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjsgLy8gTm90aGluZyB0byBkbyFcbiAgICB9XG4gICAgLy8gUXVldWUgdXAgdGhlIGNhbGxiYWNrcyBhbmQgZmlyZSB0aGVtIGFmdGVyIGNsZWFuaW5nIHVwIGFsbCBvZiBvdXJcbiAgICAvLyB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2UgdGhlIGNhbGxiYWNrIGNvdWxkIHRyaWdnZXIgbW9yZSB0cmFuc2FjdGlvbnMgb3JcbiAgICAvLyBzZXRzLlxuICAgIGNvbnN0IGNhbGxiYWNrcyA9IFtdO1xuICAgIGxldCBldmVudHMgPSBbXTtcbiAgICAvLyBJZ25vcmUgYWxsIG9mIHRoZSBzZXRzIHdlJ3JlIGdvaW5nIHRvIHJlLXJ1bi5cbiAgICBjb25zdCB0eG5zVG9SZXJ1biA9IHF1ZXVlLmZpbHRlcihxID0+IHtcbiAgICAgICAgcmV0dXJuIHEuc3RhdHVzID09PSAwIC8qIFRyYW5zYWN0aW9uU3RhdHVzLlJVTiAqLztcbiAgICB9KTtcbiAgICBjb25zdCBzZXRzVG9JZ25vcmUgPSB0eG5zVG9SZXJ1bi5tYXAocSA9PiB7XG4gICAgICAgIHJldHVybiBxLmN1cnJlbnRXcml0ZUlkO1xuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBxdWV1ZVtpXTtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gbmV3UmVsYXRpdmVQYXRoKHBhdGgsIHRyYW5zYWN0aW9uLnBhdGgpO1xuICAgICAgICBsZXQgYWJvcnRUcmFuc2FjdGlvbiA9IGZhbHNlLCBhYm9ydFJlYXNvbjtcbiAgICAgICAgYXNzZXJ0KHJlbGF0aXZlUGF0aCAhPT0gbnVsbCwgJ3JlcnVuVHJhbnNhY3Rpb25zVW5kZXJOb2RlXzogcmVsYXRpdmVQYXRoIHNob3VsZCBub3QgYmUgbnVsbC4nKTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnN0YXR1cyA9PT0gNCAvKiBUcmFuc2FjdGlvblN0YXR1cy5ORUVEU19BQk9SVCAqLykge1xuICAgICAgICAgICAgYWJvcnRUcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBhYm9ydFJlYXNvbiA9IHRyYW5zYWN0aW9uLmFib3J0UmVhc29uO1xuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChzeW5jVHJlZUFja1VzZXJXcml0ZShyZXBvLnNlcnZlclN5bmNUcmVlXywgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0cmFuc2FjdGlvbi5zdGF0dXMgPT09IDAgLyogVHJhbnNhY3Rpb25TdGF0dXMuUlVOICovKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb24ucmV0cnlDb3VudCA+PSBNQVhfVFJBTlNBQ1RJT05fUkVUUklFUykge1xuICAgICAgICAgICAgICAgIGFib3J0VHJhbnNhY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gJ21heHJldHJ5JztcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNUcmVlQWNrVXNlcldyaXRlKHJlcG8uc2VydmVyU3luY1RyZWVfLCB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIHJlcnVucyBhIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSByZXBvR2V0TGF0ZXN0U3RhdGUocmVwbywgdHJhbnNhY3Rpb24ucGF0aCwgc2V0c1RvSWdub3JlKTtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50SW5wdXRTbmFwc2hvdCA9IGN1cnJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RhdGEgPSBxdWV1ZVtpXS51cGRhdGUoY3VycmVudE5vZGUudmFsKCkpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdEYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoJ3RyYW5zYWN0aW9uIGZhaWxlZDogRGF0YSByZXR1cm5lZCAnLCBuZXdEYXRhLCB0cmFuc2FjdGlvbi5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0RhdGFOb2RlID0gbm9kZUZyb21KU09OKG5ld0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNFeHBsaWNpdFByaW9yaXR5ID0gdHlwZW9mIG5ld0RhdGEgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRhICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zKG5ld0RhdGEsICcucHJpb3JpdHknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNFeHBsaWNpdFByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIHRoZSBvbGQgcHJpb3JpdHkgaWYgdGhlcmUgd2Fzbid0IGEgcHJpb3JpdHkgZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRhTm9kZSA9IG5ld0RhdGFOb2RlLnVwZGF0ZVByaW9yaXR5KGN1cnJlbnROb2RlLmdldFByaW9yaXR5KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9sZFdyaXRlSWQgPSB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyVmFsdWVzID0gcmVwb0dlbmVyYXRlU2VydmVyVmFsdWVzKHJlcG8pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdOb2RlUmVzb2x2ZWQgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVNuYXBzaG90KG5ld0RhdGFOb2RlLCBjdXJyZW50Tm9kZSwgc2VydmVyVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudE91dHB1dFNuYXBzaG90UmF3ID0gbmV3RGF0YU5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkID0gbmV3Tm9kZVJlc29sdmVkO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50V3JpdGVJZCA9IHJlcG9HZXROZXh0V3JpdGVJZChyZXBvKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gTXV0YXRlcyBzZXRzVG9JZ25vcmUgaW4gcGxhY2VcbiAgICAgICAgICAgICAgICAgICAgc2V0c1RvSWdub3JlLnNwbGljZShzZXRzVG9JZ25vcmUuaW5kZXhPZihvbGRXcml0ZUlkKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1RyZWVBcHBseVVzZXJPdmVyd3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHRyYW5zYWN0aW9uLnBhdGgsIG5ld05vZGVSZXNvbHZlZCwgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRyYW5zYWN0aW9uLmFwcGx5TG9jYWxseSkpO1xuICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNUcmVlQWNrVXNlcldyaXRlKHJlcG8uc2VydmVyU3luY1RyZWVfLCBvbGRXcml0ZUlkLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhYm9ydFRyYW5zYWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSAnbm9kYXRhJztcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChzeW5jVHJlZUFja1VzZXJXcml0ZShyZXBvLnNlcnZlclN5bmNUcmVlXywgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRydWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRRdWV1ZVJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocmVwby5ldmVudFF1ZXVlXywgcGF0aCwgZXZlbnRzKTtcbiAgICAgICAgZXZlbnRzID0gW107XG4gICAgICAgIGlmIChhYm9ydFRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBBYm9ydC5cbiAgICAgICAgICAgIHF1ZXVlW2ldLnN0YXR1cyA9IDIgLyogVHJhbnNhY3Rpb25TdGF0dXMuQ09NUExFVEVEICovO1xuICAgICAgICAgICAgLy8gUmVtb3ZpbmcgYSBsaXN0ZW5lciBjYW4gdHJpZ2dlciBwcnVuaW5nIHdoaWNoIGNhbiBtdWNrIHdpdGhcbiAgICAgICAgICAgIC8vIG1lcmdlZERhdGEvdmlzaWJsZURhdGEgKGFzIGl0IHBydW5lcyBkYXRhKS4gU28gZGVmZXIgdGhlIHVud2F0Y2hlclxuICAgICAgICAgICAgLy8gdW50aWwgd2UncmUgZG9uZS5cbiAgICAgICAgICAgIChmdW5jdGlvbiAodW53YXRjaGVyKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh1bndhdGNoZXIsIE1hdGguZmxvb3IoMCkpO1xuICAgICAgICAgICAgfSkocXVldWVbaV0udW53YXRjaGVyKTtcbiAgICAgICAgICAgIGlmIChxdWV1ZVtpXS5vbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFib3J0UmVhc29uID09PSAnbm9kYXRhJykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaCgoKSA9PiBxdWV1ZVtpXS5vbkNvbXBsZXRlKG51bGwsIGZhbHNlLCBxdWV1ZVtpXS5jdXJyZW50SW5wdXRTbmFwc2hvdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goKCkgPT4gcXVldWVbaV0ub25Db21wbGV0ZShuZXcgRXJyb3IoYWJvcnRSZWFzb24pLCBmYWxzZSwgbnVsbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zLlxuICAgIHJlcG9QcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZShyZXBvLCByZXBvLnRyYW5zYWN0aW9uUXVldWVUcmVlXyk7XG4gICAgLy8gTm93IGZpcmUgY2FsbGJhY2tzLCBub3cgdGhhdCB3ZSdyZSBpbiBhIGdvb2QsIGtub3duIHN0YXRlLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4Y2VwdGlvbkd1YXJkKGNhbGxiYWNrc1tpXSk7XG4gICAgfVxuICAgIC8vIFRyeSB0byBzZW5kIHRoZSB0cmFuc2FjdGlvbiByZXN1bHQgdG8gdGhlIHNlcnZlci5cbiAgICByZXBvU2VuZFJlYWR5VHJhbnNhY3Rpb25zKHJlcG8sIHJlcG8udHJhbnNhY3Rpb25RdWV1ZVRyZWVfKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcm9vdG1vc3QgYW5jZXN0b3Igbm9kZSBvZiB0aGUgc3BlY2lmaWVkIHBhdGggdGhhdCBoYXMgYSBwZW5kaW5nXG4gKiB0cmFuc2FjdGlvbiBvbiBpdCwgb3IganVzdCByZXR1cm5zIHRoZSBub2RlIGZvciB0aGUgZ2l2ZW4gcGF0aCBpZiB0aGVyZSBhcmVcbiAqIG5vIHBlbmRpbmcgdHJhbnNhY3Rpb25zIG9uIGFueSBhbmNlc3Rvci5cbiAqXG4gKiBAcGFyYW0gcGF0aCAtIFRoZSBsb2NhdGlvbiB0byBzdGFydCBhdC5cbiAqIEByZXR1cm5zIFRoZSByb290bW9zdCBub2RlIHdpdGggYSB0cmFuc2FjdGlvbi5cbiAqL1xuZnVuY3Rpb24gcmVwb0dldEFuY2VzdG9yVHJhbnNhY3Rpb25Ob2RlKHJlcG8sIHBhdGgpIHtcbiAgICBsZXQgZnJvbnQ7XG4gICAgLy8gU3RhcnQgYXQgdGhlIHJvb3QgYW5kIHdhbGsgZGVlcGVyIGludG8gdGhlIHRyZWUgdG93YXJkcyBwYXRoIHVudGlsIHdlXG4gICAgLy8gZmluZCBhIG5vZGUgd2l0aCBwZW5kaW5nIHRyYW5zYWN0aW9ucy5cbiAgICBsZXQgdHJhbnNhY3Rpb25Ob2RlID0gcmVwby50cmFuc2FjdGlvblF1ZXVlVHJlZV87XG4gICAgZnJvbnQgPSBwYXRoR2V0RnJvbnQocGF0aCk7XG4gICAgd2hpbGUgKGZyb250ICE9PSBudWxsICYmIHRyZWVHZXRWYWx1ZSh0cmFuc2FjdGlvbk5vZGUpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJhbnNhY3Rpb25Ob2RlID0gdHJlZVN1YlRyZWUodHJhbnNhY3Rpb25Ob2RlLCBmcm9udCk7XG4gICAgICAgIHBhdGggPSBwYXRoUG9wRnJvbnQocGF0aCk7XG4gICAgICAgIGZyb250ID0gcGF0aEdldEZyb250KHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhbnNhY3Rpb25Ob2RlO1xufVxuLyoqXG4gKiBCdWlsZHMgdGhlIHF1ZXVlIG9mIGFsbCB0cmFuc2FjdGlvbnMgYXQgb3IgYmVsb3cgdGhlIHNwZWNpZmllZFxuICogdHJhbnNhY3Rpb25Ob2RlLlxuICpcbiAqIEBwYXJhbSB0cmFuc2FjdGlvbk5vZGVcbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgcXVldWUuXG4gKi9cbmZ1bmN0aW9uIHJlcG9CdWlsZFRyYW5zYWN0aW9uUXVldWUocmVwbywgdHJhbnNhY3Rpb25Ob2RlKSB7XG4gICAgLy8gV2FsayBhbnkgY2hpbGQgdHJhbnNhY3Rpb24gcXVldWVzIGFuZCBhZ2dyZWdhdGUgdGhlbSBpbnRvIGEgc2luZ2xlIHF1ZXVlLlxuICAgIGNvbnN0IHRyYW5zYWN0aW9uUXVldWUgPSBbXTtcbiAgICByZXBvQWdncmVnYXRlVHJhbnNhY3Rpb25RdWV1ZXNGb3JOb2RlKHJlcG8sIHRyYW5zYWN0aW9uTm9kZSwgdHJhbnNhY3Rpb25RdWV1ZSk7XG4gICAgLy8gU29ydCB0aGVtIGJ5IHRoZSBvcmRlciB0aGUgdHJhbnNhY3Rpb25zIHdlcmUgY3JlYXRlZC5cbiAgICB0cmFuc2FjdGlvblF1ZXVlLnNvcnQoKGEsIGIpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25RdWV1ZTtcbn1cbmZ1bmN0aW9uIHJlcG9BZ2dyZWdhdGVUcmFuc2FjdGlvblF1ZXVlc0Zvck5vZGUocmVwbywgbm9kZSwgcXVldWUpIHtcbiAgICBjb25zdCBub2RlUXVldWUgPSB0cmVlR2V0VmFsdWUobm9kZSk7XG4gICAgaWYgKG5vZGVRdWV1ZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcXVldWUucHVzaChub2RlUXVldWVbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyZWVGb3JFYWNoQ2hpbGQobm9kZSwgY2hpbGQgPT4ge1xuICAgICAgICByZXBvQWdncmVnYXRlVHJhbnNhY3Rpb25RdWV1ZXNGb3JOb2RlKHJlcG8sIGNoaWxkLCBxdWV1ZSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFJlbW92ZSBDT01QTEVURUQgdHJhbnNhY3Rpb25zIGF0IG9yIGJlbG93IHRoaXMgbm9kZSBpbiB0aGUgdHJhbnNhY3Rpb25RdWV1ZVRyZWVfLlxuICovXG5mdW5jdGlvbiByZXBvUHJ1bmVDb21wbGV0ZWRUcmFuc2FjdGlvbnNCZWxvd05vZGUocmVwbywgbm9kZSkge1xuICAgIGNvbnN0IHF1ZXVlID0gdHJlZUdldFZhbHVlKG5vZGUpO1xuICAgIGlmIChxdWV1ZSkge1xuICAgICAgICBsZXQgdG8gPSAwO1xuICAgICAgICBmb3IgKGxldCBmcm9tID0gMDsgZnJvbSA8IHF1ZXVlLmxlbmd0aDsgZnJvbSsrKSB7XG4gICAgICAgICAgICBpZiAocXVldWVbZnJvbV0uc3RhdHVzICE9PSAyIC8qIFRyYW5zYWN0aW9uU3RhdHVzLkNPTVBMRVRFRCAqLykge1xuICAgICAgICAgICAgICAgIHF1ZXVlW3RvXSA9IHF1ZXVlW2Zyb21dO1xuICAgICAgICAgICAgICAgIHRvKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWUubGVuZ3RoID0gdG87XG4gICAgICAgIHRyZWVTZXRWYWx1ZShub2RlLCBxdWV1ZS5sZW5ndGggPiAwID8gcXVldWUgOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICB0cmVlRm9yRWFjaENoaWxkKG5vZGUsIGNoaWxkTm9kZSA9PiB7XG4gICAgICAgIHJlcG9QcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZShyZXBvLCBjaGlsZE5vZGUpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBBYm9ydHMgYWxsIHRyYW5zYWN0aW9ucyBvbiBhbmNlc3RvcnMgb3IgZGVzY2VuZGFudHMgb2YgdGhlIHNwZWNpZmllZCBwYXRoLlxuICogQ2FsbGVkIHdoZW4gZG9pbmcgYSBzZXQoKSBvciB1cGRhdGUoKSBzaW5jZSB3ZSBjb25zaWRlciB0aGVtIGluY29tcGF0aWJsZVxuICogd2l0aCB0cmFuc2FjdGlvbnMuXG4gKlxuICogQHBhcmFtIHBhdGggLSBQYXRoIGZvciB3aGljaCB3ZSB3YW50IHRvIGFib3J0IHJlbGF0ZWQgdHJhbnNhY3Rpb25zLlxuICovXG5mdW5jdGlvbiByZXBvQWJvcnRUcmFuc2FjdGlvbnMocmVwbywgcGF0aCkge1xuICAgIGNvbnN0IGFmZmVjdGVkUGF0aCA9IHRyZWVHZXRQYXRoKHJlcG9HZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZShyZXBvLCBwYXRoKSk7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25Ob2RlID0gdHJlZVN1YlRyZWUocmVwby50cmFuc2FjdGlvblF1ZXVlVHJlZV8sIHBhdGgpO1xuICAgIHRyZWVGb3JFYWNoQW5jZXN0b3IodHJhbnNhY3Rpb25Ob2RlLCAobm9kZSkgPT4ge1xuICAgICAgICByZXBvQWJvcnRUcmFuc2FjdGlvbnNPbk5vZGUocmVwbywgbm9kZSk7XG4gICAgfSk7XG4gICAgcmVwb0Fib3J0VHJhbnNhY3Rpb25zT25Ob2RlKHJlcG8sIHRyYW5zYWN0aW9uTm9kZSk7XG4gICAgdHJlZUZvckVhY2hEZXNjZW5kYW50KHRyYW5zYWN0aW9uTm9kZSwgKG5vZGUpID0+IHtcbiAgICAgICAgcmVwb0Fib3J0VHJhbnNhY3Rpb25zT25Ob2RlKHJlcG8sIG5vZGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhZmZlY3RlZFBhdGg7XG59XG4vKipcbiAqIEFib3J0IHRyYW5zYWN0aW9ucyBzdG9yZWQgaW4gdGhpcyB0cmFuc2FjdGlvbiBxdWV1ZSBub2RlLlxuICpcbiAqIEBwYXJhbSBub2RlIC0gTm9kZSB0byBhYm9ydCB0cmFuc2FjdGlvbnMgZm9yLlxuICovXG5mdW5jdGlvbiByZXBvQWJvcnRUcmFuc2FjdGlvbnNPbk5vZGUocmVwbywgbm9kZSkge1xuICAgIGNvbnN0IHF1ZXVlID0gdHJlZUdldFZhbHVlKG5vZGUpO1xuICAgIGlmIChxdWV1ZSkge1xuICAgICAgICAvLyBRdWV1ZSB1cCB0aGUgY2FsbGJhY2tzIGFuZCBmaXJlIHRoZW0gYWZ0ZXIgY2xlYW5pbmcgdXAgYWxsIG9mIG91clxuICAgICAgICAvLyB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2UgdGhlIGNhbGxiYWNrIGNvdWxkIHRyaWdnZXIgbW9yZSB0cmFuc2FjdGlvbnNcbiAgICAgICAgLy8gb3Igc2V0cy5cbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gW107XG4gICAgICAgIC8vIEdvIHRocm91Z2ggcXVldWUuICBBbnkgYWxyZWFkeS1zZW50IHRyYW5zYWN0aW9ucyBtdXN0IGJlIG1hcmtlZCBmb3JcbiAgICAgICAgLy8gYWJvcnQsIHdoaWxlIHRoZSB1bnNlbnQgb25lcyBjYW4gYmUgaW1tZWRpYXRlbHkgYWJvcnRlZCBhbmQgcmVtb3ZlZC5cbiAgICAgICAgbGV0IGV2ZW50cyA9IFtdO1xuICAgICAgICBsZXQgbGFzdFNlbnQgPSAtMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLnN0YXR1cyA9PT0gMyAvKiBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUICovKSA7XG4gICAgICAgICAgICBlbHNlIGlmIChxdWV1ZVtpXS5zdGF0dXMgPT09IDEgLyogVHJhbnNhY3Rpb25TdGF0dXMuU0VOVCAqLykge1xuICAgICAgICAgICAgICAgIGFzc2VydChsYXN0U2VudCA9PT0gaSAtIDEsICdBbGwgU0VOVCBpdGVtcyBzaG91bGQgYmUgYXQgYmVnaW5uaW5nIG9mIHF1ZXVlLicpO1xuICAgICAgICAgICAgICAgIGxhc3RTZW50ID0gaTtcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRyYW5zYWN0aW9uIGZvciBhYm9ydCB3aGVuIGl0IGNvbWVzIGJhY2suXG4gICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gMyAvKiBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUICovO1xuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLmFib3J0UmVhc29uID0gJ3NldCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQocXVldWVbaV0uc3RhdHVzID09PSAwIC8qIFRyYW5zYWN0aW9uU3RhdHVzLlJVTiAqLywgJ1VuZXhwZWN0ZWQgdHJhbnNhY3Rpb24gc3RhdHVzIGluIGFib3J0Jyk7XG4gICAgICAgICAgICAgICAgLy8gV2UgY2FuIGFib3J0IGl0IGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnVud2F0Y2hlcigpO1xuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoc3luY1RyZWVBY2tVc2VyV3JpdGUocmVwby5zZXJ2ZXJTeW5jVHJlZV8sIHF1ZXVlW2ldLmN1cnJlbnRXcml0ZUlkLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2gocXVldWVbaV0ub25Db21wbGV0ZS5iaW5kKG51bGwsIG5ldyBFcnJvcignc2V0JyksIGZhbHNlLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0U2VudCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIG5vdCB3YWl0aW5nIGZvciBhbnkgc2VudCB0cmFuc2FjdGlvbnMuICBXZSBjYW4gY2xlYXIgdGhlIHF1ZXVlLlxuICAgICAgICAgICAgdHJlZVNldFZhbHVlKG5vZGUsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zYWN0aW9ucyB3ZSBhYm9ydGVkLlxuICAgICAgICAgICAgcXVldWUubGVuZ3RoID0gbGFzdFNlbnQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdyBmaXJlIHRoZSBjYWxsYmFja3MuXG4gICAgICAgIGV2ZW50UXVldWVSYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKHJlcG8uZXZlbnRRdWV1ZV8sIHRyZWVHZXRQYXRoKG5vZGUpLCBldmVudHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoY2FsbGJhY2tzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aFN0cmluZykge1xuICAgIGxldCBwYXRoU3RyaW5nRGVjb2RlZCA9ICcnO1xuICAgIGNvbnN0IHBpZWNlcyA9IHBhdGhTdHJpbmcuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpZWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGllY2VzW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBwaWVjZSA9IHBpZWNlc1tpXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGllY2UgPSBkZWNvZGVVUklDb21wb25lbnQocGllY2UucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgcGF0aFN0cmluZ0RlY29kZWQgKz0gJy8nICsgcGllY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhdGhTdHJpbmdEZWNvZGVkO1xufVxuLyoqXG4gKiBAcmV0dXJucyBrZXkgdmFsdWUgaGFzaFxuICovXG5mdW5jdGlvbiBkZWNvZGVRdWVyeShxdWVyeVN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB7fTtcbiAgICBpZiAocXVlcnlTdHJpbmcuY2hhckF0KDApID09PSAnPycpIHtcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZy5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBxdWVyeVN0cmluZy5zcGxpdCgnJicpKSB7XG4gICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga3YgPSBzZWdtZW50LnNwbGl0KCc9Jyk7XG4gICAgICAgIGlmIChrdi5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdHNbZGVjb2RlVVJJQ29tcG9uZW50KGt2WzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQoa3ZbMV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2FybihgSW52YWxpZCBxdWVyeSBzZWdtZW50ICcke3NlZ21lbnR9JyBpbiBxdWVyeSAnJHtxdWVyeVN0cmluZ30nYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5jb25zdCBwYXJzZVJlcG9JbmZvID0gZnVuY3Rpb24gKGRhdGFVUkwsIG5vZGVBZG1pbikge1xuICAgIGNvbnN0IHBhcnNlZFVybCA9IHBhcnNlRGF0YWJhc2VVUkwoZGF0YVVSTCksIG5hbWVzcGFjZSA9IHBhcnNlZFVybC5uYW1lc3BhY2U7XG4gICAgaWYgKHBhcnNlZFVybC5kb21haW4gPT09ICdmaXJlYmFzZS5jb20nKSB7XG4gICAgICAgIGZhdGFsKHBhcnNlZFVybC5ob3N0ICtcbiAgICAgICAgICAgICcgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIHVzZSA8WU9VUiBGSVJFQkFTRT4uZmlyZWJhc2Vpby5jb20gaW5zdGVhZCcpO1xuICAgIH1cbiAgICAvLyBDYXRjaCBjb21tb24gZXJyb3Igb2YgdW5pbml0aWFsaXplZCBuYW1lc3BhY2UgdmFsdWUuXG4gICAgaWYgKCghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgIHBhcnNlZFVybC5kb21haW4gIT09ICdsb2NhbGhvc3QnKSB7XG4gICAgICAgIGZhdGFsKCdDYW5ub3QgcGFyc2UgRmlyZWJhc2UgdXJsLiBQbGVhc2UgdXNlIGh0dHBzOi8vPFlPVVIgRklSRUJBU0U+LmZpcmViYXNlaW8uY29tJyk7XG4gICAgfVxuICAgIGlmICghcGFyc2VkVXJsLnNlY3VyZSkge1xuICAgICAgICB3YXJuSWZQYWdlSXNTZWN1cmUoKTtcbiAgICB9XG4gICAgY29uc3Qgd2ViU29ja2V0T25seSA9IHBhcnNlZFVybC5zY2hlbWUgPT09ICd3cycgfHwgcGFyc2VkVXJsLnNjaGVtZSA9PT0gJ3dzcyc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVwb0luZm86IG5ldyBSZXBvSW5mbyhwYXJzZWRVcmwuaG9zdCwgcGFyc2VkVXJsLnNlY3VyZSwgbmFtZXNwYWNlLCB3ZWJTb2NrZXRPbmx5LCBub2RlQWRtaW4sIFxuICAgICAgICAvKnBlcnNpc3RlbmNlS2V5PSovICcnLCBcbiAgICAgICAgLyppbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcz0qLyBuYW1lc3BhY2UgIT09IHBhcnNlZFVybC5zdWJkb21haW4pLFxuICAgICAgICBwYXRoOiBuZXcgUGF0aChwYXJzZWRVcmwucGF0aFN0cmluZylcbiAgICB9O1xufTtcbmNvbnN0IHBhcnNlRGF0YWJhc2VVUkwgPSBmdW5jdGlvbiAoZGF0YVVSTCkge1xuICAgIC8vIERlZmF1bHQgdG8gZW1wdHkgc3RyaW5ncyBpbiB0aGUgZXZlbnQgb2YgYSBtYWxmb3JtZWQgc3RyaW5nLlxuICAgIGxldCBob3N0ID0gJycsIGRvbWFpbiA9ICcnLCBzdWJkb21haW4gPSAnJywgcGF0aFN0cmluZyA9ICcnLCBuYW1lc3BhY2UgPSAnJztcbiAgICAvLyBBbHdheXMgZGVmYXVsdCB0byBTU0wsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICAgIGxldCBzZWN1cmUgPSB0cnVlLCBzY2hlbWUgPSAnaHR0cHMnLCBwb3J0ID0gNDQzO1xuICAgIC8vIERvbid0IGRvIGFueSB2YWxpZGF0aW9uIGhlcmUuIFRoZSBjYWxsZXIgaXMgcmVzcG9uc2libGUgZm9yIHZhbGlkYXRpbmcgdGhlIHJlc3VsdCBvZiBwYXJzaW5nLlxuICAgIGlmICh0eXBlb2YgZGF0YVVSTCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gUGFyc2Ugc2NoZW1lLlxuICAgICAgICBsZXQgY29sb25JbmQgPSBkYXRhVVJMLmluZGV4T2YoJy8vJyk7XG4gICAgICAgIGlmIChjb2xvbkluZCA+PSAwKSB7XG4gICAgICAgICAgICBzY2hlbWUgPSBkYXRhVVJMLnN1YnN0cmluZygwLCBjb2xvbkluZCAtIDEpO1xuICAgICAgICAgICAgZGF0YVVSTCA9IGRhdGFVUkwuc3Vic3RyaW5nKGNvbG9uSW5kICsgMik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFyc2UgaG9zdCwgcGF0aCwgYW5kIHF1ZXJ5IHN0cmluZy5cbiAgICAgICAgbGV0IHNsYXNoSW5kID0gZGF0YVVSTC5pbmRleE9mKCcvJyk7XG4gICAgICAgIGlmIChzbGFzaEluZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHNsYXNoSW5kID0gZGF0YVVSTC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHF1ZXN0aW9uTWFya0luZCA9IGRhdGFVUkwuaW5kZXhPZignPycpO1xuICAgICAgICBpZiAocXVlc3Rpb25NYXJrSW5kID09PSAtMSkge1xuICAgICAgICAgICAgcXVlc3Rpb25NYXJrSW5kID0gZGF0YVVSTC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaG9zdCA9IGRhdGFVUkwuc3Vic3RyaW5nKDAsIE1hdGgubWluKHNsYXNoSW5kLCBxdWVzdGlvbk1hcmtJbmQpKTtcbiAgICAgICAgaWYgKHNsYXNoSW5kIDwgcXVlc3Rpb25NYXJrSW5kKSB7XG4gICAgICAgICAgICAvLyBGb3IgcGF0aFN0cmluZywgcXVlc3Rpb25NYXJrSW5kIHdpbGwgYWx3YXlzIGNvbWUgYWZ0ZXIgc2xhc2hJbmRcbiAgICAgICAgICAgIHBhdGhTdHJpbmcgPSBkZWNvZGVQYXRoKGRhdGFVUkwuc3Vic3RyaW5nKHNsYXNoSW5kLCBxdWVzdGlvbk1hcmtJbmQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IGRlY29kZVF1ZXJ5KGRhdGFVUkwuc3Vic3RyaW5nKE1hdGgubWluKGRhdGFVUkwubGVuZ3RoLCBxdWVzdGlvbk1hcmtJbmQpKSk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3J0LCB1c2Ugc2NoZW1lIGZvciBkZXRlcm1pbmluZyBpZiBpdCdzIHNlY3VyZS5cbiAgICAgICAgY29sb25JbmQgPSBob3N0LmluZGV4T2YoJzonKTtcbiAgICAgICAgaWYgKGNvbG9uSW5kID49IDApIHtcbiAgICAgICAgICAgIHNlY3VyZSA9IHNjaGVtZSA9PT0gJ2h0dHBzJyB8fCBzY2hlbWUgPT09ICd3c3MnO1xuICAgICAgICAgICAgcG9ydCA9IHBhcnNlSW50KGhvc3Quc3Vic3RyaW5nKGNvbG9uSW5kICsgMSksIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9uSW5kID0gaG9zdC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9zdFdpdGhvdXRQb3J0ID0gaG9zdC5zbGljZSgwLCBjb2xvbkluZCk7XG4gICAgICAgIGlmIChob3N0V2l0aG91dFBvcnQudG9Mb3dlckNhc2UoKSA9PT0gJ2xvY2FsaG9zdCcpIHtcbiAgICAgICAgICAgIGRvbWFpbiA9ICdsb2NhbGhvc3QnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvc3RXaXRob3V0UG9ydC5zcGxpdCgnLicpLmxlbmd0aCA8PSAyKSB7XG4gICAgICAgICAgICBkb21haW4gPSBob3N0V2l0aG91dFBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJbnRlcnByZXQgdGhlIHN1YmRvbWFpbiBvZiBhIDMgb3IgbW9yZSBjb21wb25lbnQgVVJMIGFzIHRoZSBuYW1lc3BhY2UgbmFtZS5cbiAgICAgICAgICAgIGNvbnN0IGRvdEluZCA9IGhvc3QuaW5kZXhPZignLicpO1xuICAgICAgICAgICAgc3ViZG9tYWluID0gaG9zdC5zdWJzdHJpbmcoMCwgZG90SW5kKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZG9tYWluID0gaG9zdC5zdWJzdHJpbmcoZG90SW5kICsgMSk7XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgbmFtZXNwYWNlcyB0byBsb3dlcmNhc2UgdG8gc2hhcmUgc3RvcmFnZSAvIGNvbm5lY3Rpb24uXG4gICAgICAgICAgICBuYW1lc3BhY2UgPSBzdWJkb21haW47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWx3YXlzIHRyZWF0IHRoZSB2YWx1ZSBvZiB0aGUgYG5zYCBhcyB0aGUgbmFtZXNwYWNlIG5hbWUgaWYgaXQgaXMgcHJlc2VudC5cbiAgICAgICAgaWYgKCducycgaW4gcXVlcnlQYXJhbXMpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IHF1ZXJ5UGFyYW1zWyducyddO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGhvc3QsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIGRvbWFpbixcbiAgICAgICAgc3ViZG9tYWluLFxuICAgICAgICBzZWN1cmUsXG4gICAgICAgIHNjaGVtZSxcbiAgICAgICAgcGF0aFN0cmluZyxcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgfTtcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBNb2RlbGVkIGFmdGVyIGJhc2U2NCB3ZWItc2FmZSBjaGFycywgYnV0IG9yZGVyZWQgYnkgQVNDSUkuXG5jb25zdCBQVVNIX0NIQVJTID0gJy0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuLyoqXG4gKiBGYW5jeSBJRCBnZW5lcmF0b3IgdGhhdCBjcmVhdGVzIDIwLWNoYXJhY3RlciBzdHJpbmcgaWRlbnRpZmllcnMgd2l0aCB0aGVcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIDEuIFRoZXkncmUgYmFzZWQgb24gdGltZXN0YW1wIHNvIHRoYXQgdGhleSBzb3J0ICphZnRlciogYW55IGV4aXN0aW5nIGlkcy5cbiAqIDIuIFRoZXkgY29udGFpbiA3Mi1iaXRzIG9mIHJhbmRvbSBkYXRhIGFmdGVyIHRoZSB0aW1lc3RhbXAgc28gdGhhdCBJRHMgd29uJ3RcbiAqICAgIGNvbGxpZGUgd2l0aCBvdGhlciBjbGllbnRzJyBJRHMuXG4gKiAzLiBUaGV5IHNvcnQgKmxleGljb2dyYXBoaWNhbGx5KiAoc28gdGhlIHRpbWVzdGFtcCBpcyBjb252ZXJ0ZWQgdG8gY2hhcmFjdGVyc1xuICogICAgdGhhdCB3aWxsIHNvcnQgcHJvcGVybHkpLlxuICogNC4gVGhleSdyZSBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcuIEV2ZW4gaWYgeW91IGdlbmVyYXRlIG1vcmUgdGhhbiBvbmUgaW5cbiAqICAgIHRoZSBzYW1lIHRpbWVzdGFtcCwgdGhlIGxhdHRlciBvbmVzIHdpbGwgc29ydCBhZnRlciB0aGUgZm9ybWVyIG9uZXMuIFdlIGRvXG4gKiAgICB0aGlzIGJ5IHVzaW5nIHRoZSBwcmV2aW91cyByYW5kb20gYml0cyBidXQgXCJpbmNyZW1lbnRpbmdcIiB0aGVtIGJ5IDEgKG9ubHlcbiAqICAgIGluIHRoZSBjYXNlIG9mIGEgdGltZXN0YW1wIGNvbGxpc2lvbikuXG4gKi9cbmNvbnN0IG5leHRQdXNoSWQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFRpbWVzdGFtcCBvZiBsYXN0IHB1c2gsIHVzZWQgdG8gcHJldmVudCBsb2NhbCBjb2xsaXNpb25zIGlmIHlvdSBwdXNoIHR3aWNlXG4gICAgLy8gaW4gb25lIG1zLlxuICAgIGxldCBsYXN0UHVzaFRpbWUgPSAwO1xuICAgIC8vIFdlIGdlbmVyYXRlIDcyLWJpdHMgb2YgcmFuZG9tbmVzcyB3aGljaCBnZXQgdHVybmVkIGludG8gMTIgY2hhcmFjdGVycyBhbmRcbiAgICAvLyBhcHBlbmRlZCB0byB0aGUgdGltZXN0YW1wIHRvIHByZXZlbnQgY29sbGlzaW9ucyB3aXRoIG90aGVyIGNsaWVudHMuIFdlXG4gICAgLy8gc3RvcmUgdGhlIGxhc3QgY2hhcmFjdGVycyB3ZSBnZW5lcmF0ZWQgYmVjYXVzZSBpbiB0aGUgZXZlbnQgb2YgYSBjb2xsaXNpb24sXG4gICAgLy8gd2UnbGwgdXNlIHRob3NlIHNhbWUgY2hhcmFjdGVycyBleGNlcHQgXCJpbmNyZW1lbnRlZFwiIGJ5IG9uZS5cbiAgICBjb25zdCBsYXN0UmFuZENoYXJzID0gW107XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgY29uc3QgZHVwbGljYXRlVGltZSA9IG5vdyA9PT0gbGFzdFB1c2hUaW1lO1xuICAgICAgICBsYXN0UHVzaFRpbWUgPSBub3c7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCB0aW1lU3RhbXBDaGFycyA9IG5ldyBBcnJheSg4KTtcbiAgICAgICAgZm9yIChpID0gNzsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHRpbWVTdGFtcENoYXJzW2ldID0gUFVTSF9DSEFSUy5jaGFyQXQobm93ICUgNjQpO1xuICAgICAgICAgICAgLy8gTk9URTogQ2FuJ3QgdXNlIDw8IGhlcmUgYmVjYXVzZSBqYXZhc2NyaXB0IHdpbGwgY29udmVydCB0byBpbnQgYW5kIGxvc2VcbiAgICAgICAgICAgIC8vIHRoZSB1cHBlciBiaXRzLlxuICAgICAgICAgICAgbm93ID0gTWF0aC5mbG9vcihub3cgLyA2NCk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0KG5vdyA9PT0gMCwgJ0Nhbm5vdCBwdXNoIGF0IHRpbWUgPT0gMCcpO1xuICAgICAgICBsZXQgaWQgPSB0aW1lU3RhbXBDaGFycy5qb2luKCcnKTtcbiAgICAgICAgaWYgKCFkdXBsaWNhdGVUaW1lKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgICAgIGxhc3RSYW5kQ2hhcnNbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2NCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgdGltZXN0YW1wIGhhc24ndCBjaGFuZ2VkIHNpbmNlIGxhc3QgcHVzaCwgdXNlIHRoZSBzYW1lIHJhbmRvbVxuICAgICAgICAgICAgLy8gbnVtYmVyLCBleGNlcHQgaW5jcmVtZW50ZWQgYnkgMS5cbiAgICAgICAgICAgIGZvciAoaSA9IDExOyBpID49IDAgJiYgbGFzdFJhbmRDaGFyc1tpXSA9PT0gNjM7IGktLSkge1xuICAgICAgICAgICAgICAgIGxhc3RSYW5kQ2hhcnNbaV0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFJhbmRDaGFyc1tpXSsrO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBpZCArPSBQVVNIX0NIQVJTLmNoYXJBdChsYXN0UmFuZENoYXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnQoaWQubGVuZ3RoID09PSAyMCwgJ25leHRQdXNoSWQ6IExlbmd0aCBzaG91bGQgYmUgMjAuJyk7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRW5jYXBzdWxhdGVzIHRoZSBkYXRhIG5lZWRlZCB0byByYWlzZSBhbiBldmVudFxuICovXG5jbGFzcyBEYXRhRXZlbnQge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgLSBPbmUgb2Y6IHZhbHVlLCBjaGlsZF9hZGRlZCwgY2hpbGRfY2hhbmdlZCwgY2hpbGRfbW92ZWQsIGNoaWxkX3JlbW92ZWRcbiAgICAgKiBAcGFyYW0gZXZlbnRSZWdpc3RyYXRpb24gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCB0byB3aXRoIHRoZSBldmVudCBkYXRhLiBVc2VyIHByb3ZpZGVkXG4gICAgICogQHBhcmFtIHNuYXBzaG90IC0gVGhlIGRhdGEgYmFja2luZyB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gcHJldk5hbWUgLSBPcHRpb25hbCwgdGhlIG5hbWUgb2YgdGhlIHByZXZpb3VzIGNoaWxkIGZvciBjaGlsZF8qIGV2ZW50cy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihldmVudFR5cGUsIGV2ZW50UmVnaXN0cmF0aW9uLCBzbmFwc2hvdCwgcHJldk5hbWUpIHtcbiAgICAgICAgdGhpcy5ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb24gPSBldmVudFJlZ2lzdHJhdGlvbjtcbiAgICAgICAgdGhpcy5zbmFwc2hvdCA9IHNuYXBzaG90O1xuICAgICAgICB0aGlzLnByZXZOYW1lID0gcHJldk5hbWU7XG4gICAgfVxuICAgIGdldFBhdGgoKSB7XG4gICAgICAgIGNvbnN0IHJlZiA9IHRoaXMuc25hcHNob3QucmVmO1xuICAgICAgICBpZiAodGhpcy5ldmVudFR5cGUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIHJldHVybiByZWYuX3BhdGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmLnBhcmVudC5fcGF0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRFdmVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50VHlwZTtcbiAgICB9XG4gICAgZ2V0RXZlbnRSdW5uZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uLmdldEV2ZW50UnVubmVyKHRoaXMpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmdldFBhdGgoKS50b1N0cmluZygpICtcbiAgICAgICAgICAgICc6JyArXG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZSArXG4gICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgc3RyaW5naWZ5KHRoaXMuc25hcHNob3QuZXhwb3J0VmFsKCkpKTtcbiAgICB9XG59XG5jbGFzcyBDYW5jZWxFdmVudCB7XG4gICAgY29uc3RydWN0b3IoZXZlbnRSZWdpc3RyYXRpb24sIGVycm9yLCBwYXRoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb24gPSBldmVudFJlZ2lzdHJhdGlvbjtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICBnZXRQYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoO1xuICAgIH1cbiAgICBnZXRFdmVudFR5cGUoKSB7XG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcbiAgICB9XG4gICAgZ2V0RXZlbnRSdW5uZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uLmdldEV2ZW50UnVubmVyKHRoaXMpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC50b1N0cmluZygpICsgJzpjYW5jZWwnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSB3cmFwcGVyIGNsYXNzIHRoYXQgY29udmVydHMgZXZlbnRzIGZyb20gdGhlIGRhdGFiYXNlQGV4cCBTREsgdG8gdGhlIGxlZ2FjeVxuICogRGF0YWJhc2UgU0RLLiBFdmVudHMgYXJlIG5vdCBjb252ZXJ0ZWQgZGlyZWN0bHkgYXMgZXZlbnQgcmVnaXN0cmF0aW9uIHJlbGllc1xuICogb24gcmVmZXJlbmNlIGNvbXBhcmlzb24gb2YgdGhlIG9yaWdpbmFsIHVzZXIgY2FsbGJhY2sgKHNlZSBgbWF0Y2hlcygpYCkgYW5kXG4gKiByZWxpZXMgb24gZXF1YWxpdHkgb2YgdGhlIGxlZ2FjeSBTREsncyBgY29udGV4dGAgb2JqZWN0LlxuICovXG5jbGFzcyBDYWxsYmFja0NvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHNuYXBzaG90Q2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc25hcHNob3RDYWxsYmFjayA9IHNuYXBzaG90Q2FsbGJhY2s7XG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2sgPSBjYW5jZWxDYWxsYmFjaztcbiAgICB9XG4gICAgb25WYWx1ZShleHBEYXRhU25hcHNob3QsIHByZXZpb3VzQ2hpbGROYW1lKSB7XG4gICAgICAgIHRoaXMuc25hcHNob3RDYWxsYmFjay5jYWxsKG51bGwsIGV4cERhdGFTbmFwc2hvdCwgcHJldmlvdXNDaGlsZE5hbWUpO1xuICAgIH1cbiAgICBvbkNhbmNlbChlcnJvcikge1xuICAgICAgICBhc3NlcnQodGhpcy5oYXNDYW5jZWxDYWxsYmFjaywgJ1JhaXNpbmcgYSBjYW5jZWwgZXZlbnQgb24gYSBsaXN0ZW5lciB3aXRoIG5vIGNhbmNlbCBjYWxsYmFjaycpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxDYWxsYmFjay5jYWxsKG51bGwsIGVycm9yKTtcbiAgICB9XG4gICAgZ2V0IGhhc0NhbmNlbENhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmNhbmNlbENhbGxiYWNrO1xuICAgIH1cbiAgICBtYXRjaGVzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zbmFwc2hvdENhbGxiYWNrID09PSBvdGhlci5zbmFwc2hvdENhbGxiYWNrIHx8XG4gICAgICAgICAgICAodGhpcy5zbmFwc2hvdENhbGxiYWNrLnVzZXJDYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zbmFwc2hvdENhbGxiYWNrLnVzZXJDYWxsYmFjayA9PT1cbiAgICAgICAgICAgICAgICAgICAgb3RoZXIuc25hcHNob3RDYWxsYmFjay51c2VyQ2FsbGJhY2sgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNuYXBzaG90Q2FsbGJhY2suY29udGV4dCA9PT0gb3RoZXIuc25hcHNob3RDYWxsYmFjay5jb250ZXh0KSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBUaGUgYG9uRGlzY29ubmVjdGAgY2xhc3MgYWxsb3dzIHlvdSB0byB3cml0ZSBvciBjbGVhciBkYXRhIHdoZW4geW91ciBjbGllbnRcbiAqIGRpc2Nvbm5lY3RzIGZyb20gdGhlIERhdGFiYXNlIHNlcnZlci4gVGhlc2UgdXBkYXRlcyBvY2N1ciB3aGV0aGVyIHlvdXJcbiAqIGNsaWVudCBkaXNjb25uZWN0cyBjbGVhbmx5IG9yIG5vdCwgc28geW91IGNhbiByZWx5IG9uIHRoZW0gdG8gY2xlYW4gdXAgZGF0YVxuICogZXZlbiBpZiBhIGNvbm5lY3Rpb24gaXMgZHJvcHBlZCBvciBhIGNsaWVudCBjcmFzaGVzLlxuICpcbiAqIFRoZSBgb25EaXNjb25uZWN0YCBjbGFzcyBpcyBtb3N0IGNvbW1vbmx5IHVzZWQgdG8gbWFuYWdlIHByZXNlbmNlIGluXG4gKiBhcHBsaWNhdGlvbnMgd2hlcmUgaXQgaXMgdXNlZnVsIHRvIGRldGVjdCBob3cgbWFueSBjbGllbnRzIGFyZSBjb25uZWN0ZWQgYW5kXG4gKiB3aGVuIG90aGVyIGNsaWVudHMgZGlzY29ubmVjdC4gU2VlXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL29mZmxpbmUtY2FwYWJpbGl0aWVzIHwgRW5hYmxpbmcgT2ZmbGluZSBDYXBhYmlsaXRpZXMgaW4gSmF2YVNjcmlwdH1cbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFRvIGF2b2lkIHByb2JsZW1zIHdoZW4gYSBjb25uZWN0aW9uIGlzIGRyb3BwZWQgYmVmb3JlIHRoZSByZXF1ZXN0cyBjYW4gYmVcbiAqIHRyYW5zZmVycmVkIHRvIHRoZSBEYXRhYmFzZSBzZXJ2ZXIsIHRoZXNlIGZ1bmN0aW9ucyBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZVxuICogd3JpdGluZyBhbnkgZGF0YS5cbiAqXG4gKiBOb3RlIHRoYXQgYG9uRGlzY29ubmVjdGAgb3BlcmF0aW9ucyBhcmUgb25seSB0cmlnZ2VyZWQgb25jZS4gSWYgeW91IHdhbnQgYW5cbiAqIG9wZXJhdGlvbiB0byBvY2N1ciBlYWNoIHRpbWUgYSBkaXNjb25uZWN0IG9jY3VycywgeW91J2xsIG5lZWQgdG8gcmUtZXN0YWJsaXNoXG4gKiB0aGUgYG9uRGlzY29ubmVjdGAgb3BlcmF0aW9ucyBlYWNoIHRpbWUgeW91IHJlY29ubmVjdC5cbiAqL1xuY2xhc3MgT25EaXNjb25uZWN0IHtcbiAgICAvKiogQGhpZGVjb25zdHJ1Y3RvciAqL1xuICAgIGNvbnN0cnVjdG9yKF9yZXBvLCBfcGF0aCkge1xuICAgICAgICB0aGlzLl9yZXBvID0gX3JlcG87XG4gICAgICAgIHRoaXMuX3BhdGggPSBfcGF0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhbGwgcHJldmlvdXNseSBxdWV1ZWQgYG9uRGlzY29ubmVjdCgpYCBzZXQgb3IgdXBkYXRlIGV2ZW50cyBmb3IgdGhpc1xuICAgICAqIGxvY2F0aW9uIGFuZCBhbGwgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBJZiBhIHdyaXRlIGhhcyBiZWVuIHF1ZXVlZCBmb3IgdGhpcyBsb2NhdGlvbiB2aWEgYSBgc2V0KClgIG9yIGB1cGRhdGUoKWAgYXQgYVxuICAgICAqIHBhcmVudCBsb2NhdGlvbiwgdGhlIHdyaXRlIGF0IHRoaXMgbG9jYXRpb24gd2lsbCBiZSBjYW5jZWxlZCwgdGhvdWdoIHdyaXRlc1xuICAgICAqIHRvIHNpYmxpbmcgbG9jYXRpb25zIHdpbGwgc3RpbGwgb2NjdXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiB0byB0aGUgc2VydmVyIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgcmVwb09uRGlzY29ubmVjdENhbmNlbCh0aGlzLl9yZXBvLCB0aGlzLl9wYXRoLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2soKCkgPT4geyB9KSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoZSBkYXRhIGF0IHRoaXMgbG9jYXRpb24gaXMgZGVsZXRlZCB3aGVuIHRoZSBjbGllbnQgaXMgZGlzY29ubmVjdGVkXG4gICAgICogKGR1ZSB0byBjbG9zaW5nIHRoZSBicm93c2VyLCBuYXZpZ2F0aW5nIHRvIGEgbmV3IHBhZ2UsIG9yIG5ldHdvcmsgaXNzdWVzKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdoZW4gc3luY2hyb25pemF0aW9uIHRvIHRoZSBzZXJ2ZXIgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnJlbW92ZScsIHRoaXMuX3BhdGgpO1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICByZXBvT25EaXNjb25uZWN0U2V0KHRoaXMuX3JlcG8sIHRoaXMuX3BhdGgsIG51bGwsIGRlZmVycmVkLndyYXBDYWxsYmFjaygoKSA9PiB7IH0pKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuc3VyZXMgdGhlIGRhdGEgYXQgdGhpcyBsb2NhdGlvbiBpcyBzZXQgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZSB3aGVuIHRoZVxuICAgICAqIGNsaWVudCBpcyBkaXNjb25uZWN0ZWQgKGR1ZSB0byBjbG9zaW5nIHRoZSBicm93c2VyLCBuYXZpZ2F0aW5nIHRvIGEgbmV3IHBhZ2UsXG4gICAgICogb3IgbmV0d29yayBpc3N1ZXMpLlxuICAgICAqXG4gICAgICogYHNldCgpYCBpcyBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgaW1wbGVtZW50aW5nIFwicHJlc2VuY2VcIiBzeXN0ZW1zLCB3aGVyZSBhXG4gICAgICogdmFsdWUgc2hvdWxkIGJlIGNoYW5nZWQgb3IgY2xlYXJlZCB3aGVuIGEgdXNlciBkaXNjb25uZWN0cyBzbyB0aGF0IHRoZXlcbiAgICAgKiBhcHBlYXIgXCJvZmZsaW5lXCIgdG8gb3RoZXIgdXNlcnMuIFNlZVxuICAgICAqIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9kYXRhYmFzZS93ZWIvb2ZmbGluZS1jYXBhYmlsaXRpZXMgfCBFbmFibGluZyBPZmZsaW5lIENhcGFiaWxpdGllcyBpbiBKYXZhU2NyaXB0fVxuICAgICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGBvbkRpc2Nvbm5lY3RgIG9wZXJhdGlvbnMgYXJlIG9ubHkgdHJpZ2dlcmVkIG9uY2UuIElmIHlvdSB3YW50IGFuXG4gICAgICogb3BlcmF0aW9uIHRvIG9jY3VyIGVhY2ggdGltZSBhIGRpc2Nvbm5lY3Qgb2NjdXJzLCB5b3UnbGwgbmVlZCB0byByZS1lc3RhYmxpc2hcbiAgICAgKiB0aGUgYG9uRGlzY29ubmVjdGAgb3BlcmF0aW9ucyBlYWNoIHRpbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgd3JpdHRlbiB0byB0aGlzIGxvY2F0aW9uIG9uIGRpc2Nvbm5lY3QgKGNhblxuICAgICAqIGJlIGFuIG9iamVjdCwgYXJyYXksIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvciBudWxsKS5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiB0byB0aGUgRGF0YWJhc2UgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdPbkRpc2Nvbm5lY3Quc2V0JywgdGhpcy5fcGF0aCk7XG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdPbkRpc2Nvbm5lY3Quc2V0JywgdmFsdWUsIHRoaXMuX3BhdGgsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgcmVwb09uRGlzY29ubmVjdFNldCh0aGlzLl9yZXBvLCB0aGlzLl9wYXRoLCB2YWx1ZSwgZGVmZXJyZWQud3JhcENhbGxiYWNrKCgpID0+IHsgfSkpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlcyB0aGUgZGF0YSBhdCB0aGlzIGxvY2F0aW9uIGlzIHNldCB0byB0aGUgc3BlY2lmaWVkIHZhbHVlIGFuZCBwcmlvcml0eVxuICAgICAqIHdoZW4gdGhlIGNsaWVudCBpcyBkaXNjb25uZWN0ZWQgKGR1ZSB0byBjbG9zaW5nIHRoZSBicm93c2VyLCBuYXZpZ2F0aW5nIHRvIGFcbiAgICAgKiBuZXcgcGFnZSwgb3IgbmV0d29yayBpc3N1ZXMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHdyaXR0ZW4gdG8gdGhpcyBsb2NhdGlvbiBvbiBkaXNjb25uZWN0IChjYW5cbiAgICAgKiBiZSBhbiBvYmplY3QsIGFycmF5LCBzdHJpbmcsIG51bWJlciwgYm9vbGVhbiwgb3IgbnVsbCkuXG4gICAgICogQHBhcmFtIHByaW9yaXR5IC0gVGhlIHByaW9yaXR5IHRvIGJlIHdyaXR0ZW4gKHN0cmluZywgbnVtYmVyLCBvciBudWxsKS5cbiAgICAgKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHN5bmNocm9uaXphdGlvbiB0byB0aGUgRGF0YWJhc2UgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgc2V0V2l0aFByaW9yaXR5KHZhbHVlLCBwcmlvcml0eSkge1xuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnNldFdpdGhQcmlvcml0eScsIHRoaXMuX3BhdGgpO1xuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnT25EaXNjb25uZWN0LnNldFdpdGhQcmlvcml0eScsIHZhbHVlLCB0aGlzLl9wYXRoLCBmYWxzZSk7XG4gICAgICAgIHZhbGlkYXRlUHJpb3JpdHkoJ09uRGlzY29ubmVjdC5zZXRXaXRoUHJpb3JpdHknLCBwcmlvcml0eSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICByZXBvT25EaXNjb25uZWN0U2V0V2l0aFByaW9yaXR5KHRoaXMuX3JlcG8sIHRoaXMuX3BhdGgsIHZhbHVlLCBwcmlvcml0eSwgZGVmZXJyZWQud3JhcENhbGxiYWNrKCgpID0+IHsgfSkpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIG11bHRpcGxlIHZhbHVlcyBhdCB0aGlzIGxvY2F0aW9uIHdoZW4gdGhlIGNsaWVudCBpcyBkaXNjb25uZWN0ZWQgKGR1ZVxuICAgICAqIHRvIGNsb3NpbmcgdGhlIGJyb3dzZXIsIG5hdmlnYXRpbmcgdG8gYSBuZXcgcGFnZSwgb3IgbmV0d29yayBpc3N1ZXMpLlxuICAgICAqXG4gICAgICogVGhlIGB2YWx1ZXNgIGFyZ3VtZW50IGNvbnRhaW5zIG11bHRpcGxlIHByb3BlcnR5LXZhbHVlIHBhaXJzIHRoYXQgd2lsbCBiZVxuICAgICAqIHdyaXR0ZW4gdG8gdGhlIERhdGFiYXNlIHRvZ2V0aGVyLiBFYWNoIGNoaWxkIHByb3BlcnR5IGNhbiBlaXRoZXIgYmUgYSBzaW1wbGVcbiAgICAgKiBwcm9wZXJ0eSAoZm9yIGV4YW1wbGUsIFwibmFtZVwiKSBvciBhIHJlbGF0aXZlIHBhdGggKGZvciBleGFtcGxlLCBcIm5hbWUvZmlyc3RcIilcbiAgICAgKiBmcm9tIHRoZSBjdXJyZW50IGxvY2F0aW9uIHRvIHRoZSBkYXRhIHRvIHVwZGF0ZS5cbiAgICAgKlxuICAgICAqIEFzIG9wcG9zZWQgdG8gdGhlIGBzZXQoKWAgbWV0aG9kLCBgdXBkYXRlKClgIGNhbiBiZSB1c2UgdG8gc2VsZWN0aXZlbHkgdXBkYXRlXG4gICAgICogb25seSB0aGUgcmVmZXJlbmNlZCBwcm9wZXJ0aWVzIGF0IHRoZSBjdXJyZW50IGxvY2F0aW9uIChpbnN0ZWFkIG9mIHJlcGxhY2luZ1xuICAgICAqIGFsbCB0aGUgY2hpbGQgcHJvcGVydGllcyBhdCB0aGUgY3VycmVudCBsb2NhdGlvbikuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVzIC0gT2JqZWN0IGNvbnRhaW5pbmcgbXVsdGlwbGUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVzIHdoZW4gc3luY2hyb25pemF0aW9uIHRvIHRoZSBEYXRhYmFzZSBpcyBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICB1cGRhdGUodmFsdWVzKSB7XG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdPbkRpc2Nvbm5lY3QudXBkYXRlJywgdGhpcy5fcGF0aCk7XG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmcoJ09uRGlzY29ubmVjdC51cGRhdGUnLCB2YWx1ZXMsIHRoaXMuX3BhdGgsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgcmVwb09uRGlzY29ubmVjdFVwZGF0ZSh0aGlzLl9yZXBvLCB0aGlzLl9wYXRoLCB2YWx1ZXMsIGRlZmVycmVkLndyYXBDYWxsYmFjaygoKSA9PiB7IH0pKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgUXVlcnlJbXBsIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX3JlcG8sIF9wYXRoLCBfcXVlcnlQYXJhbXMsIF9vcmRlckJ5Q2FsbGVkKSB7XG4gICAgICAgIHRoaXMuX3JlcG8gPSBfcmVwbztcbiAgICAgICAgdGhpcy5fcGF0aCA9IF9wYXRoO1xuICAgICAgICB0aGlzLl9xdWVyeVBhcmFtcyA9IF9xdWVyeVBhcmFtcztcbiAgICAgICAgdGhpcy5fb3JkZXJCeUNhbGxlZCA9IF9vcmRlckJ5Q2FsbGVkO1xuICAgIH1cbiAgICBnZXQga2V5KCkge1xuICAgICAgICBpZiAocGF0aElzRW1wdHkodGhpcy5fcGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhHZXRCYWNrKHRoaXMuX3BhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCByZWYoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlSW1wbCh0aGlzLl9yZXBvLCB0aGlzLl9wYXRoKTtcbiAgICB9XG4gICAgZ2V0IF9xdWVyeUlkZW50aWZpZXIoKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHF1ZXJ5UGFyYW1zR2V0UXVlcnlPYmplY3QodGhpcy5fcXVlcnlQYXJhbXMpO1xuICAgICAgICBjb25zdCBpZCA9IE9iamVjdFRvVW5pcXVlS2V5KG9iaik7XG4gICAgICAgIHJldHVybiBpZCA9PT0gJ3t9JyA/ICdkZWZhdWx0JyA6IGlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMgdXNlZCBieSB0aGlzIFF1ZXJ5LlxuICAgICAqL1xuICAgIGdldCBfcXVlcnlPYmplY3QoKSB7XG4gICAgICAgIHJldHVybiBxdWVyeVBhcmFtc0dldFF1ZXJ5T2JqZWN0KHRoaXMuX3F1ZXJ5UGFyYW1zKTtcbiAgICB9XG4gICAgaXNFcXVhbChvdGhlcikge1xuICAgICAgICBvdGhlciA9IGdldE1vZHVsYXJJbnN0YW5jZShvdGhlcik7XG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUXVlcnlJbXBsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhbWVSZXBvID0gdGhpcy5fcmVwbyA9PT0gb3RoZXIuX3JlcG87XG4gICAgICAgIGNvbnN0IHNhbWVQYXRoID0gcGF0aEVxdWFscyh0aGlzLl9wYXRoLCBvdGhlci5fcGF0aCk7XG4gICAgICAgIGNvbnN0IHNhbWVRdWVyeUlkZW50aWZpZXIgPSB0aGlzLl9xdWVyeUlkZW50aWZpZXIgPT09IG90aGVyLl9xdWVyeUlkZW50aWZpZXI7XG4gICAgICAgIHJldHVybiBzYW1lUmVwbyAmJiBzYW1lUGF0aCAmJiBzYW1lUXVlcnlJZGVudGlmaWVyO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVwby50b1N0cmluZygpICsgcGF0aFRvVXJsRW5jb2RlZFN0cmluZyh0aGlzLl9wYXRoKTtcbiAgICB9XG59XG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IG5vIG90aGVyIG9yZGVyIGJ5IGNhbGwgaGFzIGJlZW4gbWFkZVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbChxdWVyeSwgZm5OYW1lKSB7XG4gICAgaWYgKHF1ZXJ5Ll9vcmRlckJ5Q2FsbGVkID09PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihmbk5hbWUgKyBcIjogWW91IGNhbid0IGNvbWJpbmUgbXVsdGlwbGUgb3JkZXJCeSBjYWxscy5cIik7XG4gICAgfVxufVxuLyoqXG4gKiBWYWxpZGF0ZXMgc3RhcnQvZW5kIHZhbHVlcyBmb3IgcXVlcmllcy5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVRdWVyeUVuZHBvaW50cyhwYXJhbXMpIHtcbiAgICBsZXQgc3RhcnROb2RlID0gbnVsbDtcbiAgICBsZXQgZW5kTm9kZSA9IG51bGw7XG4gICAgaWYgKHBhcmFtcy5oYXNTdGFydCgpKSB7XG4gICAgICAgIHN0YXJ0Tm9kZSA9IHBhcmFtcy5nZXRJbmRleFN0YXJ0VmFsdWUoKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5oYXNFbmQoKSkge1xuICAgICAgICBlbmROb2RlID0gcGFyYW1zLmdldEluZGV4RW5kVmFsdWUoKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5nZXRJbmRleCgpID09PSBLRVlfSU5ERVgpIHtcbiAgICAgICAgY29uc3QgdG9vTWFueUFyZ3NFcnJvciA9ICdRdWVyeTogV2hlbiBvcmRlcmluZyBieSBrZXksIHlvdSBtYXkgb25seSBwYXNzIG9uZSBhcmd1bWVudCB0byAnICtcbiAgICAgICAgICAgICdzdGFydEF0KCksIGVuZEF0KCksIG9yIGVxdWFsVG8oKS4nO1xuICAgICAgICBjb25zdCB3cm9uZ0FyZ1R5cGVFcnJvciA9ICdRdWVyeTogV2hlbiBvcmRlcmluZyBieSBrZXksIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gc3RhcnRBdCgpLCBzdGFydEFmdGVyKCksICcgK1xuICAgICAgICAgICAgJ2VuZEF0KCksIGVuZEJlZm9yZSgpLCBvciBlcXVhbFRvKCkgbXVzdCBiZSBhIHN0cmluZy4nO1xuICAgICAgICBpZiAocGFyYW1zLmhhc1N0YXJ0KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0TmFtZSA9IHBhcmFtcy5nZXRJbmRleFN0YXJ0TmFtZSgpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0TmFtZSAhPT0gTUlOX05BTUUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodG9vTWFueUFyZ3NFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3RhcnROb2RlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih3cm9uZ0FyZ1R5cGVFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5oYXNFbmQoKSkge1xuICAgICAgICAgICAgY29uc3QgZW5kTmFtZSA9IHBhcmFtcy5nZXRJbmRleEVuZE5hbWUoKTtcbiAgICAgICAgICAgIGlmIChlbmROYW1lICE9PSBNQVhfTkFNRSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0b29NYW55QXJnc0Vycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbmROb2RlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih3cm9uZ0FyZ1R5cGVFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocGFyYW1zLmdldEluZGV4KCkgPT09IFBSSU9SSVRZX0lOREVYKSB7XG4gICAgICAgIGlmICgoc3RhcnROb2RlICE9IG51bGwgJiYgIWlzVmFsaWRQcmlvcml0eShzdGFydE5vZGUpKSB8fFxuICAgICAgICAgICAgKGVuZE5vZGUgIT0gbnVsbCAmJiAhaXNWYWxpZFByaW9yaXR5KGVuZE5vZGUpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeTogV2hlbiBvcmRlcmluZyBieSBwcmlvcml0eSwgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksICcgK1xuICAgICAgICAgICAgICAgICdzdGFydEFmdGVyKCkgZW5kQXQoKSwgZW5kQmVmb3JlKCksIG9yIGVxdWFsVG8oKSBtdXN0IGJlIGEgdmFsaWQgcHJpb3JpdHkgdmFsdWUgJyArXG4gICAgICAgICAgICAgICAgJyhudWxsLCBhIG51bWJlciwgb3IgYSBzdHJpbmcpLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3NlcnQocGFyYW1zLmdldEluZGV4KCkgaW5zdGFuY2VvZiBQYXRoSW5kZXggfHxcbiAgICAgICAgICAgIHBhcmFtcy5nZXRJbmRleCgpID09PSBWQUxVRV9JTkRFWCwgJ3Vua25vd24gaW5kZXggdHlwZS4nKTtcbiAgICAgICAgaWYgKChzdGFydE5vZGUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RhcnROb2RlID09PSAnb2JqZWN0JykgfHxcbiAgICAgICAgICAgIChlbmROb2RlICE9IG51bGwgJiYgdHlwZW9mIGVuZE5vZGUgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeTogRmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIHN0YXJ0QXQoKSwgc3RhcnRBZnRlcigpLCBlbmRBdCgpLCBlbmRCZWZvcmUoKSwgb3IgJyArXG4gICAgICAgICAgICAgICAgJ2VxdWFsVG8oKSBjYW5ub3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBsaW1pdCogaGFzIGJlZW4gY2FsbGVkIHdpdGggdGhlIGNvcnJlY3QgY29tYmluYXRpb24gb2YgcGFyYW1ldGVyc1xuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUxpbWl0KHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSAmJlxuICAgICAgICBwYXJhbXMuaGFzRW5kKCkgJiZcbiAgICAgICAgcGFyYW1zLmhhc0xpbWl0KCkgJiZcbiAgICAgICAgIXBhcmFtcy5oYXNBbmNob3JlZExpbWl0KCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVlcnk6IENhbid0IGNvbWJpbmUgc3RhcnRBdCgpLCBzdGFydEFmdGVyKCksIGVuZEF0KCksIGVuZEJlZm9yZSgpLCBhbmQgbGltaXQoKS4gVXNlIFwiICtcbiAgICAgICAgICAgICdsaW1pdFRvRmlyc3QoKSBvciBsaW1pdFRvTGFzdCgpIGluc3RlYWQuJyk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgUmVmZXJlbmNlSW1wbCBleHRlbmRzIFF1ZXJ5SW1wbCB7XG4gICAgLyoqIEBoaWRlY29uc3RydWN0b3IgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXBvLCBwYXRoKSB7XG4gICAgICAgIHN1cGVyKHJlcG8sIHBhdGgsIG5ldyBRdWVyeVBhcmFtcygpLCBmYWxzZSk7XG4gICAgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBwYXRoUGFyZW50KHRoaXMuX3BhdGgpO1xuICAgICAgICByZXR1cm4gcGFyZW50UGF0aCA9PT0gbnVsbFxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IG5ldyBSZWZlcmVuY2VJbXBsKHRoaXMuX3JlcG8sIHBhcmVudFBhdGgpO1xuICAgIH1cbiAgICBnZXQgcm9vdCgpIHtcbiAgICAgICAgbGV0IHJlZiA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChyZWYucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZWYgPSByZWYucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWY7XG4gICAgfVxufVxuLyoqXG4gKiBBIGBEYXRhU25hcHNob3RgIGNvbnRhaW5zIGRhdGEgZnJvbSBhIERhdGFiYXNlIGxvY2F0aW9uLlxuICpcbiAqIEFueSB0aW1lIHlvdSByZWFkIGRhdGEgZnJvbSB0aGUgRGF0YWJhc2UsIHlvdSByZWNlaXZlIHRoZSBkYXRhIGFzIGFcbiAqIGBEYXRhU25hcHNob3RgLiBBIGBEYXRhU25hcHNob3RgIGlzIHBhc3NlZCB0byB0aGUgZXZlbnQgY2FsbGJhY2tzIHlvdSBhdHRhY2hcbiAqIHdpdGggYG9uKClgIG9yIGBvbmNlKClgLiBZb3UgY2FuIGV4dHJhY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBzbmFwc2hvdCBhcyBhXG4gKiBKYXZhU2NyaXB0IG9iamVjdCBieSBjYWxsaW5nIHRoZSBgdmFsKClgIG1ldGhvZC4gQWx0ZXJuYXRpdmVseSwgeW91IGNhblxuICogdHJhdmVyc2UgaW50byB0aGUgc25hcHNob3QgYnkgY2FsbGluZyBgY2hpbGQoKWAgdG8gcmV0dXJuIGNoaWxkIHNuYXBzaG90c1xuICogKHdoaWNoIHlvdSBjb3VsZCB0aGVuIGNhbGwgYHZhbCgpYCBvbikuXG4gKlxuICogQSBgRGF0YVNuYXBzaG90YCBpcyBhbiBlZmZpY2llbnRseSBnZW5lcmF0ZWQsIGltbXV0YWJsZSBjb3B5IG9mIHRoZSBkYXRhIGF0XG4gKiBhIERhdGFiYXNlIGxvY2F0aW9uLiBJdCBjYW5ub3QgYmUgbW9kaWZpZWQgYW5kIHdpbGwgbmV2ZXIgY2hhbmdlICh0byBtb2RpZnlcbiAqIGRhdGEsIHlvdSBhbHdheXMgY2FsbCB0aGUgYHNldCgpYCBtZXRob2Qgb24gYSBgUmVmZXJlbmNlYCBkaXJlY3RseSkuXG4gKi9cbmNsYXNzIERhdGFTbmFwc2hvdCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIF9ub2RlIC0gQSBTbmFwc2hvdE5vZGUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gcmVmIC0gVGhlIGxvY2F0aW9uIHRoaXMgc25hcHNob3QgY2FtZSBmcm9tLlxuICAgICAqIEBwYXJhbSBfaW5kZXggLSBUaGUgaXRlcmF0aW9uIG9yZGVyIGZvciB0aGlzIHNuYXBzaG90XG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9ub2RlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYXRpb24gb2YgdGhpcyBEYXRhU25hcHNob3QuXG4gICAgICovXG4gICAgcmVmLCBfaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fbm9kZSA9IF9ub2RlO1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5faW5kZXggPSBfaW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByaW9yaXR5IHZhbHVlIG9mIHRoZSBkYXRhIGluIHRoaXMgYERhdGFTbmFwc2hvdGAuXG4gICAgICpcbiAgICAgKiBBcHBsaWNhdGlvbnMgbmVlZCBub3QgdXNlIHByaW9yaXR5IGJ1dCBjYW4gb3JkZXIgY29sbGVjdGlvbnMgYnlcbiAgICAgKiBvcmRpbmFyeSBwcm9wZXJ0aWVzIChzZWVcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjc29ydGluZ19hbmRfZmlsdGVyaW5nX2RhdGEgfFNvcnRpbmcgYW5kIGZpbHRlcmluZyBkYXRhfVxuICAgICAqICkuXG4gICAgICovXG4gICAgZ2V0IHByaW9yaXR5KCkge1xuICAgICAgICAvLyB0eXBlY2FzdCBoZXJlIGJlY2F1c2Ugd2UgbmV2ZXIgcmV0dXJuIGRlZmVycmVkIHZhbHVlcyBvciBpbnRlcm5hbCBwcmlvcml0aWVzIChNQVhfUFJJT1JJVFkpXG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlLmdldFByaW9yaXR5KCkudmFsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBrZXkgKGxhc3QgcGFydCBvZiB0aGUgcGF0aCkgb2YgdGhlIGxvY2F0aW9uIG9mIHRoaXMgYERhdGFTbmFwc2hvdGAuXG4gICAgICpcbiAgICAgKiBUaGUgbGFzdCB0b2tlbiBpbiBhIERhdGFiYXNlIGxvY2F0aW9uIGlzIGNvbnNpZGVyZWQgaXRzIGtleS4gRm9yIGV4YW1wbGUsXG4gICAgICogXCJhZGFcIiBpcyB0aGUga2V5IGZvciB0aGUgL3VzZXJzL2FkYS8gbm9kZS4gQWNjZXNzaW5nIHRoZSBrZXkgb24gYW55XG4gICAgICogYERhdGFTbmFwc2hvdGAgd2lsbCByZXR1cm4gdGhlIGtleSBmb3IgdGhlIGxvY2F0aW9uIHRoYXQgZ2VuZXJhdGVkIGl0LlxuICAgICAqIEhvd2V2ZXIsIGFjY2Vzc2luZyB0aGUga2V5IG9uIHRoZSByb290IFVSTCBvZiBhIERhdGFiYXNlIHdpbGwgcmV0dXJuXG4gICAgICogYG51bGxgLlxuICAgICAqL1xuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZi5rZXk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgY2hpbGQgcHJvcGVydGllcyBvZiB0aGlzIGBEYXRhU25hcHNob3RgLiAqL1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZS5udW1DaGlsZHJlbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFub3RoZXIgYERhdGFTbmFwc2hvdGAgZm9yIHRoZSBsb2NhdGlvbiBhdCB0aGUgc3BlY2lmaWVkIHJlbGF0aXZlIHBhdGguXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIGEgcmVsYXRpdmUgcGF0aCB0byB0aGUgYGNoaWxkKClgIG1ldGhvZCBvZiBhIERhdGFTbmFwc2hvdCByZXR1cm5zXG4gICAgICogYW5vdGhlciBgRGF0YVNuYXBzaG90YCBmb3IgdGhlIGxvY2F0aW9uIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcGF0aC4gVGhlXG4gICAgICogcmVsYXRpdmUgcGF0aCBjYW4gZWl0aGVyIGJlIGEgc2ltcGxlIGNoaWxkIG5hbWUgKGZvciBleGFtcGxlLCBcImFkYVwiKSBvciBhXG4gICAgICogZGVlcGVyLCBzbGFzaC1zZXBhcmF0ZWQgcGF0aCAoZm9yIGV4YW1wbGUsIFwiYWRhL25hbWUvZmlyc3RcIikuIElmIHRoZSBjaGlsZFxuICAgICAqIGxvY2F0aW9uIGhhcyBubyBkYXRhLCBhbiBlbXB0eSBgRGF0YVNuYXBzaG90YCAodGhhdCBpcywgYSBgRGF0YVNuYXBzaG90YFxuICAgICAqIHdob3NlIHZhbHVlIGlzIGBudWxsYCkgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCAtIEEgcmVsYXRpdmUgcGF0aCB0byB0aGUgbG9jYXRpb24gb2YgY2hpbGQgZGF0YS5cbiAgICAgKi9cbiAgICBjaGlsZChwYXRoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkUGF0aCA9IG5ldyBQYXRoKHBhdGgpO1xuICAgICAgICBjb25zdCBjaGlsZFJlZiA9IGNoaWxkKHRoaXMucmVmLCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU25hcHNob3QodGhpcy5fbm9kZS5nZXRDaGlsZChjaGlsZFBhdGgpLCBjaGlsZFJlZiwgUFJJT1JJVFlfSU5ERVgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBgRGF0YVNuYXBzaG90YCBjb250YWlucyBhbnkgZGF0YS4gSXQgaXMgc2xpZ2h0bHkgbW9yZVxuICAgICAqIGVmZmljaWVudCB0aGFuIHVzaW5nIGBzbmFwc2hvdC52YWwoKSAhPT0gbnVsbGAuXG4gICAgICovXG4gICAgZXhpc3RzKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX25vZGUuaXNFbXB0eSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBvcnRzIHRoZSBlbnRpcmUgY29udGVudHMgb2YgdGhlIERhdGFTbmFwc2hvdCBhcyBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICAgICAqXG4gICAgICogVGhlIGBleHBvcnRWYWwoKWAgbWV0aG9kIGlzIHNpbWlsYXIgdG8gYHZhbCgpYCwgZXhjZXB0IHByaW9yaXR5IGluZm9ybWF0aW9uXG4gICAgICogaXMgaW5jbHVkZWQgKGlmIGF2YWlsYWJsZSksIG1ha2luZyBpdCBzdWl0YWJsZSBmb3IgYmFja2luZyB1cCB5b3VyIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgRGF0YVNuYXBzaG90J3MgY29udGVudHMgYXMgYSBKYXZhU2NyaXB0IHZhbHVlIChPYmplY3QsXG4gICAgICogICBBcnJheSwgc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9yIGBudWxsYCkuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBleHBvcnRWYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlLnZhbCh0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW51bWVyYXRlcyB0aGUgdG9wLWxldmVsIGNoaWxkcmVuIGluIHRoZSBgSXRlcmF0ZWREYXRhU25hcHNob3RgLlxuICAgICAqXG4gICAgICogQmVjYXVzZSBvZiB0aGUgd2F5IEphdmFTY3JpcHQgb2JqZWN0cyB3b3JrLCB0aGUgb3JkZXJpbmcgb2YgZGF0YSBpbiB0aGVcbiAgICAgKiBKYXZhU2NyaXB0IG9iamVjdCByZXR1cm5lZCBieSBgdmFsKClgIGlzIG5vdCBndWFyYW50ZWVkIHRvIG1hdGNoIHRoZVxuICAgICAqIG9yZGVyaW5nIG9uIHRoZSBzZXJ2ZXIgbm9yIHRoZSBvcmRlcmluZyBvZiBgb25DaGlsZEFkZGVkKClgIGV2ZW50cy4gVGhhdCBpc1xuICAgICAqIHdoZXJlIGBmb3JFYWNoKClgIGNvbWVzIGluIGhhbmR5LiBJdCBndWFyYW50ZWVzIHRoZSBjaGlsZHJlbiBvZiBhXG4gICAgICogYERhdGFTbmFwc2hvdGAgd2lsbCBiZSBpdGVyYXRlZCBpbiB0aGVpciBxdWVyeSBvcmRlci5cbiAgICAgKlxuICAgICAqIElmIG5vIGV4cGxpY2l0IGBvcmRlckJ5KigpYCBtZXRob2QgaXMgdXNlZCwgcmVzdWx0cyBhcmUgcmV0dXJuZWRcbiAgICAgKiBvcmRlcmVkIGJ5IGtleSAodW5sZXNzIHByaW9yaXRpZXMgYXJlIHVzZWQsIGluIHdoaWNoIGNhc2UsIHJlc3VsdHMgYXJlXG4gICAgICogcmV0dXJuZWQgYnkgcHJpb3JpdHkpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFjdGlvbiAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBjaGlsZCBEYXRhU25hcHNob3QuXG4gICAgICogVGhlIGNhbGxiYWNrIGNhbiByZXR1cm4gdHJ1ZSB0byBjYW5jZWwgZnVydGhlciBlbnVtZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGVudW1lcmF0aW9uIHdhcyBjYW5jZWxlZCBkdWUgdG8geW91ciBjYWxsYmFjayByZXR1cm5pbmdcbiAgICAgKiB0cnVlLlxuICAgICAqL1xuICAgIGZvckVhY2goYWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9ub2RlLmlzTGVhZk5vZGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuTm9kZSA9IHRoaXMuX25vZGU7XG4gICAgICAgIC8vIFNhbml0aXplIHRoZSByZXR1cm4gdmFsdWUgdG8gYSBib29sZWFuLiBDaGlsZHJlbk5vZGUuZm9yRWFjaENoaWxkIGhhcyBhIHdlaXJkIHJldHVybiB0eXBlLi4uXG4gICAgICAgIHJldHVybiAhIWNoaWxkcmVuTm9kZS5mb3JFYWNoQ2hpbGQodGhpcy5faW5kZXgsIChrZXksIG5vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24obmV3IERhdGFTbmFwc2hvdChub2RlLCBjaGlsZCh0aGlzLnJlZiwga2V5KSwgUFJJT1JJVFlfSU5ERVgpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIGNoaWxkIHBhdGggaGFzIChub24tbnVsbCkgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIC0gQSByZWxhdGl2ZSBwYXRoIHRvIHRoZSBsb2NhdGlvbiBvZiBhIHBvdGVudGlhbCBjaGlsZC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgZGF0YSBleGlzdHMgYXQgdGhlIHNwZWNpZmllZCBjaGlsZCBwYXRoOyBlbHNlXG4gICAgICogIGBmYWxzZWAuXG4gICAgICovXG4gICAgaGFzQ2hpbGQocGF0aCkge1xuICAgICAgICBjb25zdCBjaGlsZFBhdGggPSBuZXcgUGF0aChwYXRoKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9ub2RlLmdldENoaWxkKGNoaWxkUGF0aCkuaXNFbXB0eSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBgRGF0YVNuYXBzaG90YCBoYXMgYW55IG5vbi1gbnVsbGAgY2hpbGRcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogWW91IGNhbiB1c2UgYGhhc0NoaWxkcmVuKClgIHRvIGRldGVybWluZSBpZiBhIGBEYXRhU25hcHNob3RgIGhhcyBhbnlcbiAgICAgKiBjaGlsZHJlbi4gSWYgaXQgZG9lcywgeW91IGNhbiBlbnVtZXJhdGUgdGhlbSB1c2luZyBgZm9yRWFjaCgpYC4gSWYgaXRcbiAgICAgKiBkb2Vzbid0LCB0aGVuIGVpdGhlciB0aGlzIHNuYXBzaG90IGNvbnRhaW5zIGEgcHJpbWl0aXZlIHZhbHVlICh3aGljaCBjYW4gYmVcbiAgICAgKiByZXRyaWV2ZWQgd2l0aCBgdmFsKClgKSBvciBpdCBpcyBlbXB0eSAoaW4gd2hpY2ggY2FzZSwgYHZhbCgpYCB3aWxsIHJldHVyblxuICAgICAqIGBudWxsYCkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoaXMgc25hcHNob3QgaGFzIGFueSBjaGlsZHJlbjsgZWxzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBoYXNDaGlsZHJlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX25vZGUuaXNMZWFmTm9kZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuX25vZGUuaXNFbXB0eSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydFZhbCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIEphdmFTY3JpcHQgdmFsdWUgZnJvbSBhIGBEYXRhU25hcHNob3RgLlxuICAgICAqXG4gICAgICogRGVwZW5kaW5nIG9uIHRoZSBkYXRhIGluIGEgYERhdGFTbmFwc2hvdGAsIHRoZSBgdmFsKClgIG1ldGhvZCBtYXkgcmV0dXJuIGFcbiAgICAgKiBzY2FsYXIgdHlwZSAoc3RyaW5nLCBudW1iZXIsIG9yIGJvb2xlYW4pLCBhbiBhcnJheSwgb3IgYW4gb2JqZWN0LiBJdCBtYXlcbiAgICAgKiBhbHNvIHJldHVybiBudWxsLCBpbmRpY2F0aW5nIHRoYXQgdGhlIGBEYXRhU25hcHNob3RgIGlzIGVtcHR5IChjb250YWlucyBub1xuICAgICAqIGRhdGEpLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIERhdGFTbmFwc2hvdCdzIGNvbnRlbnRzIGFzIGEgSmF2YVNjcmlwdCB2YWx1ZSAoT2JqZWN0LFxuICAgICAqICAgQXJyYXksIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvciBgbnVsbGApLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZS52YWwoKTtcbiAgICB9XG59XG4vKipcbiAqXG4gKiBSZXR1cm5zIGEgYFJlZmVyZW5jZWAgcmVwcmVzZW50aW5nIHRoZSBsb2NhdGlvbiBpbiB0aGUgRGF0YWJhc2VcbiAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3ZpZGVkIHBhdGguIElmIG5vIHBhdGggaXMgcHJvdmlkZWQsIHRoZSBgUmVmZXJlbmNlYFxuICogd2lsbCBwb2ludCB0byB0aGUgcm9vdCBvZiB0aGUgRGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIGRiIC0gVGhlIGRhdGFiYXNlIGluc3RhbmNlIHRvIG9idGFpbiBhIHJlZmVyZW5jZSBmb3IuXG4gKiBAcGFyYW0gcGF0aCAtIE9wdGlvbmFsIHBhdGggcmVwcmVzZW50aW5nIHRoZSBsb2NhdGlvbiB0aGUgcmV0dXJuZWRcbiAqICAgYFJlZmVyZW5jZWAgd2lsbCBwb2ludC4gSWYgbm90IHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgYFJlZmVyZW5jZWAgd2lsbFxuICogICBwb2ludCB0byB0aGUgcm9vdCBvZiB0aGUgRGF0YWJhc2UuXG4gKiBAcmV0dXJucyBJZiBhIHBhdGggaXMgcHJvdmlkZWQsIGEgYFJlZmVyZW5jZWBcbiAqICAgcG9pbnRpbmcgdG8gdGhlIHByb3ZpZGVkIHBhdGguIE90aGVyd2lzZSwgYSBgUmVmZXJlbmNlYCBwb2ludGluZyB0byB0aGVcbiAqICAgcm9vdCBvZiB0aGUgRGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIHJlZihkYiwgcGF0aCkge1xuICAgIGRiID0gZ2V0TW9kdWxhckluc3RhbmNlKGRiKTtcbiAgICBkYi5fY2hlY2tOb3REZWxldGVkKCdyZWYnKTtcbiAgICByZXR1cm4gcGF0aCAhPT0gdW5kZWZpbmVkID8gY2hpbGQoZGIuX3Jvb3QsIHBhdGgpIDogZGIuX3Jvb3Q7XG59XG4vKipcbiAqIFJldHVybnMgYSBgUmVmZXJlbmNlYCByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIGluIHRoZSBEYXRhYmFzZVxuICogY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgRmlyZWJhc2UgVVJMLlxuICpcbiAqIEFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgdGhlIFVSTCBpcyBub3QgYSB2YWxpZCBGaXJlYmFzZSBEYXRhYmFzZSBVUkwgb3IgaXRcbiAqIGhhcyBhIGRpZmZlcmVudCBkb21haW4gdGhhbiB0aGUgY3VycmVudCBgRGF0YWJhc2VgIGluc3RhbmNlLlxuICpcbiAqIE5vdGUgdGhhdCBhbGwgcXVlcnkgcGFyYW1ldGVycyAoYG9yZGVyQnlgLCBgbGltaXRUb0xhc3RgLCBldGMuKSBhcmUgaWdub3JlZFxuICogYW5kIGFyZSBub3QgYXBwbGllZCB0byB0aGUgcmV0dXJuZWQgYFJlZmVyZW5jZWAuXG4gKlxuICogQHBhcmFtIGRiIC0gVGhlIGRhdGFiYXNlIGluc3RhbmNlIHRvIG9idGFpbiBhIHJlZmVyZW5jZSBmb3IuXG4gKiBAcGFyYW0gdXJsIC0gVGhlIEZpcmViYXNlIFVSTCBhdCB3aGljaCB0aGUgcmV0dXJuZWQgYFJlZmVyZW5jZWAgd2lsbFxuICogICBwb2ludC5cbiAqIEByZXR1cm5zIEEgYFJlZmVyZW5jZWAgcG9pbnRpbmcgdG8gdGhlIHByb3ZpZGVkXG4gKiAgIEZpcmViYXNlIFVSTC5cbiAqL1xuZnVuY3Rpb24gcmVmRnJvbVVSTChkYiwgdXJsKSB7XG4gICAgZGIgPSBnZXRNb2R1bGFySW5zdGFuY2UoZGIpO1xuICAgIGRiLl9jaGVja05vdERlbGV0ZWQoJ3JlZkZyb21VUkwnKTtcbiAgICBjb25zdCBwYXJzZWRVUkwgPSBwYXJzZVJlcG9JbmZvKHVybCwgZGIuX3JlcG8ucmVwb0luZm9fLm5vZGVBZG1pbik7XG4gICAgdmFsaWRhdGVVcmwoJ3JlZkZyb21VUkwnLCBwYXJzZWRVUkwpO1xuICAgIGNvbnN0IHJlcG9JbmZvID0gcGFyc2VkVVJMLnJlcG9JbmZvO1xuICAgIGlmICghZGIuX3JlcG8ucmVwb0luZm9fLmlzQ3VzdG9tSG9zdCgpICYmXG4gICAgICAgIHJlcG9JbmZvLmhvc3QgIT09IGRiLl9yZXBvLnJlcG9JbmZvXy5ob3N0KSB7XG4gICAgICAgIGZhdGFsKCdyZWZGcm9tVVJMJyArXG4gICAgICAgICAgICAnOiBIb3N0IG5hbWUgZG9lcyBub3QgbWF0Y2ggdGhlIGN1cnJlbnQgZGF0YWJhc2U6ICcgK1xuICAgICAgICAgICAgJyhmb3VuZCAnICtcbiAgICAgICAgICAgIHJlcG9JbmZvLmhvc3QgK1xuICAgICAgICAgICAgJyBidXQgZXhwZWN0ZWQgJyArXG4gICAgICAgICAgICBkYi5fcmVwby5yZXBvSW5mb18uaG9zdCArXG4gICAgICAgICAgICAnKScpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmKGRiLCBwYXJzZWRVUkwucGF0aC50b1N0cmluZygpKTtcbn1cbi8qKlxuICogR2V0cyBhIGBSZWZlcmVuY2VgIGZvciB0aGUgbG9jYXRpb24gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwYXRoLlxuICpcbiAqIFRoZSByZWxhdGl2ZSBwYXRoIGNhbiBlaXRoZXIgYmUgYSBzaW1wbGUgY2hpbGQgbmFtZSAoZm9yIGV4YW1wbGUsIFwiYWRhXCIpIG9yXG4gKiBhIGRlZXBlciBzbGFzaC1zZXBhcmF0ZWQgcGF0aCAoZm9yIGV4YW1wbGUsIFwiYWRhL25hbWUvZmlyc3RcIikuXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgbG9jYXRpb24uXG4gKiBAcGFyYW0gcGF0aCAtIEEgcmVsYXRpdmUgcGF0aCBmcm9tIHRoaXMgbG9jYXRpb24gdG8gdGhlIGRlc2lyZWQgY2hpbGRcbiAqICAgbG9jYXRpb24uXG4gKiBAcmV0dXJucyBUaGUgc3BlY2lmaWVkIGNoaWxkIGxvY2F0aW9uLlxuICovXG5mdW5jdGlvbiBjaGlsZChwYXJlbnQsIHBhdGgpIHtcbiAgICBwYXJlbnQgPSBnZXRNb2R1bGFySW5zdGFuY2UocGFyZW50KTtcbiAgICBpZiAocGF0aEdldEZyb250KHBhcmVudC5fcGF0aCkgPT09IG51bGwpIHtcbiAgICAgICAgdmFsaWRhdGVSb290UGF0aFN0cmluZygnY2hpbGQnLCAncGF0aCcsIHBhdGgsIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnY2hpbGQnLCAncGF0aCcsIHBhdGgsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWZlcmVuY2VJbXBsKHBhcmVudC5fcmVwbywgcGF0aENoaWxkKHBhcmVudC5fcGF0aCwgcGF0aCkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIGBPbkRpc2Nvbm5lY3RgIG9iamVjdCAtIHNlZVxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2RhdGFiYXNlL3dlYi9vZmZsaW5lLWNhcGFiaWxpdGllcyB8IEVuYWJsaW5nIE9mZmxpbmUgQ2FwYWJpbGl0aWVzIGluIEphdmFTY3JpcHR9XG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gdXNlIGl0LlxuICpcbiAqIEBwYXJhbSByZWYgLSBUaGUgcmVmZXJlbmNlIHRvIGFkZCBPbkRpc2Nvbm5lY3QgdHJpZ2dlcnMgZm9yLlxuICovXG5mdW5jdGlvbiBvbkRpc2Nvbm5lY3QocmVmKSB7XG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XG4gICAgcmV0dXJuIG5ldyBPbkRpc2Nvbm5lY3QocmVmLl9yZXBvLCByZWYuX3BhdGgpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBuZXcgY2hpbGQgbG9jYXRpb24gdXNpbmcgYSB1bmlxdWUga2V5IGFuZCByZXR1cm5zIGl0c1xuICogYFJlZmVyZW5jZWAuXG4gKlxuICogVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gcGF0dGVybiBmb3IgYWRkaW5nIGRhdGEgdG8gYSBjb2xsZWN0aW9uIG9mIGl0ZW1zLlxuICpcbiAqIElmIHlvdSBwcm92aWRlIGEgdmFsdWUgdG8gYHB1c2goKWAsIHRoZSB2YWx1ZSBpcyB3cml0dGVuIHRvIHRoZVxuICogZ2VuZXJhdGVkIGxvY2F0aW9uLiBJZiB5b3UgZG9uJ3QgcGFzcyBhIHZhbHVlLCBub3RoaW5nIGlzIHdyaXR0ZW4gdG8gdGhlXG4gKiBkYXRhYmFzZSBhbmQgdGhlIGNoaWxkIHJlbWFpbnMgZW1wdHkgKGJ1dCB5b3UgY2FuIHVzZSB0aGUgYFJlZmVyZW5jZWBcbiAqIGVsc2V3aGVyZSkuXG4gKlxuICogVGhlIHVuaXF1ZSBrZXlzIGdlbmVyYXRlZCBieSBgcHVzaCgpYCBhcmUgb3JkZXJlZCBieSB0aGUgY3VycmVudCB0aW1lLCBzbyB0aGVcbiAqIHJlc3VsdGluZyBsaXN0IG9mIGl0ZW1zIGlzIGNocm9ub2xvZ2ljYWxseSBzb3J0ZWQuIFRoZSBrZXlzIGFyZSBhbHNvXG4gKiBkZXNpZ25lZCB0byBiZSB1bmd1ZXNzYWJsZSAodGhleSBjb250YWluIDcyIHJhbmRvbSBiaXRzIG9mIGVudHJvcHkpLlxuICpcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjYXBwZW5kX3RvX2FfbGlzdF9vZl9kYXRhIHwgQXBwZW5kIHRvIGEgbGlzdCBvZiBkYXRhfS5cbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGVibG9nLmNvbS8yMDE1LzAyL3RoZS0yMTIwLXdheXMtdG8tZW5zdXJlLXVuaXF1ZV82OC5odG1sIHwgVGhlIDJeMTIwIFdheXMgdG8gRW5zdXJlIFVuaXF1ZSBJZGVudGlmaWVyc30uXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgbG9jYXRpb24uXG4gKiBAcGFyYW0gdmFsdWUgLSBPcHRpb25hbCB2YWx1ZSB0byBiZSB3cml0dGVuIGF0IHRoZSBnZW5lcmF0ZWQgbG9jYXRpb24uXG4gKiBAcmV0dXJucyBDb21iaW5lZCBgUHJvbWlzZWAgYW5kIGBSZWZlcmVuY2VgOyByZXNvbHZlcyB3aGVuIHdyaXRlIGlzIGNvbXBsZXRlLFxuICogYnV0IGNhbiBiZSB1c2VkIGltbWVkaWF0ZWx5IGFzIHRoZSBgUmVmZXJlbmNlYCB0byB0aGUgY2hpbGQgbG9jYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHB1c2gocGFyZW50LCB2YWx1ZSkge1xuICAgIHBhcmVudCA9IGdldE1vZHVsYXJJbnN0YW5jZShwYXJlbnQpO1xuICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdwdXNoJywgcGFyZW50Ll9wYXRoKTtcbiAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygncHVzaCcsIHZhbHVlLCBwYXJlbnQuX3BhdGgsIHRydWUpO1xuICAgIGNvbnN0IG5vdyA9IHJlcG9TZXJ2ZXJUaW1lKHBhcmVudC5fcmVwbyk7XG4gICAgY29uc3QgbmFtZSA9IG5leHRQdXNoSWQobm93KTtcbiAgICAvLyBwdXNoKCkgcmV0dXJucyBhIFRoZW5uYWJsZVJlZmVyZW5jZSB3aG9zZSBwcm9taXNlIGlzIGZ1bGZpbGxlZCB3aXRoIGFcbiAgICAvLyByZWd1bGFyIFJlZmVyZW5jZS4gV2UgdXNlIGNoaWxkKCkgdG8gY3JlYXRlIGhhbmRsZXMgdG8gdHdvIGRpZmZlcmVudFxuICAgIC8vIHJlZmVyZW5jZXMuIFRoZSBmaXJzdCBpcyB0dXJuZWQgaW50byBhIFRoZW5uYWJsZVJlZmVyZW5jZSBiZWxvdyBieSBhZGRpbmdcbiAgICAvLyB0aGVuKCkgYW5kIGNhdGNoKCkgbWV0aG9kcyBhbmQgaXMgdXNlZCBhcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHB1c2goKS4gVGhlXG4gICAgLy8gc2Vjb25kIHJlbWFpbnMgYSByZWd1bGFyIFJlZmVyZW5jZSBhbmQgaXMgdXNlZCBhcyB0aGUgZnVsZmlsbGVkIHZhbHVlIG9mXG4gICAgLy8gdGhlIGZpcnN0IFRoZW5uYWJsZVJlZmVyZW5jZS5cbiAgICBjb25zdCB0aGVuYWJsZVB1c2hSZWYgPSBjaGlsZChwYXJlbnQsIG5hbWUpO1xuICAgIGNvbnN0IHB1c2hSZWYgPSBjaGlsZChwYXJlbnQsIG5hbWUpO1xuICAgIGxldCBwcm9taXNlO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHByb21pc2UgPSBzZXQocHVzaFJlZiwgdmFsdWUpLnRoZW4oKCkgPT4gcHVzaFJlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHB1c2hSZWYpO1xuICAgIH1cbiAgICB0aGVuYWJsZVB1c2hSZWYudGhlbiA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UpO1xuICAgIHRoZW5hYmxlUHVzaFJlZi5jYXRjaCA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UsIHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIHRoZW5hYmxlUHVzaFJlZjtcbn1cbi8qKlxuICogUmVtb3ZlcyB0aGUgZGF0YSBhdCB0aGlzIERhdGFiYXNlIGxvY2F0aW9uLlxuICpcbiAqIEFueSBkYXRhIGF0IGNoaWxkIGxvY2F0aW9ucyB3aWxsIGFsc28gYmUgZGVsZXRlZC5cbiAqXG4gKiBUaGUgZWZmZWN0IG9mIHRoZSByZW1vdmUgd2lsbCBiZSB2aXNpYmxlIGltbWVkaWF0ZWx5IGFuZCB0aGUgY29ycmVzcG9uZGluZ1xuICogZXZlbnQgJ3ZhbHVlJyB3aWxsIGJlIHRyaWdnZXJlZC4gU3luY2hyb25pemF0aW9uIG9mIHRoZSByZW1vdmUgdG8gdGhlXG4gKiBGaXJlYmFzZSBzZXJ2ZXJzIHdpbGwgYWxzbyBiZSBzdGFydGVkLCBhbmQgdGhlIHJldHVybmVkIFByb21pc2Ugd2lsbCByZXNvbHZlXG4gKiB3aGVuIGNvbXBsZXRlLiBJZiBwcm92aWRlZCwgdGhlIG9uQ29tcGxldGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWRcbiAqIGFzeW5jaHJvbm91c2x5IGFmdGVyIHN5bmNocm9uaXphdGlvbiBoYXMgZmluaXNoZWQuXG4gKlxuICogQHBhcmFtIHJlZiAtIFRoZSBsb2NhdGlvbiB0byByZW1vdmUuXG4gKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHJlbW92ZSBvbiBzZXJ2ZXIgaXMgY29tcGxldGUuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZShyZWYpIHtcbiAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgncmVtb3ZlJywgcmVmLl9wYXRoKTtcbiAgICByZXR1cm4gc2V0KHJlZiwgbnVsbCk7XG59XG4vKipcbiAqIFdyaXRlcyBkYXRhIHRvIHRoaXMgRGF0YWJhc2UgbG9jYXRpb24uXG4gKlxuICogVGhpcyB3aWxsIG92ZXJ3cml0ZSBhbnkgZGF0YSBhdCB0aGlzIGxvY2F0aW9uIGFuZCBhbGwgY2hpbGQgbG9jYXRpb25zLlxuICpcbiAqIFRoZSBlZmZlY3Qgb2YgdGhlIHdyaXRlIHdpbGwgYmUgdmlzaWJsZSBpbW1lZGlhdGVseSwgYW5kIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBldmVudHMgKFwidmFsdWVcIiwgXCJjaGlsZF9hZGRlZFwiLCBldGMuKSB3aWxsIGJlIHRyaWdnZXJlZC4gU3luY2hyb25pemF0aW9uIG9mXG4gKiB0aGUgZGF0YSB0byB0aGUgRmlyZWJhc2Ugc2VydmVycyB3aWxsIGFsc28gYmUgc3RhcnRlZCwgYW5kIHRoZSByZXR1cm5lZFxuICogUHJvbWlzZSB3aWxsIHJlc29sdmUgd2hlbiBjb21wbGV0ZS4gSWYgcHJvdmlkZWQsIHRoZSBgb25Db21wbGV0ZWAgY2FsbGJhY2tcbiAqIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IGFmdGVyIHN5bmNocm9uaXphdGlvbiBoYXMgZmluaXNoZWQuXG4gKlxuICogUGFzc2luZyBgbnVsbGAgZm9yIHRoZSBuZXcgdmFsdWUgaXMgZXF1aXZhbGVudCB0byBjYWxsaW5nIGByZW1vdmUoKWA7IG5hbWVseSxcbiAqIGFsbCBkYXRhIGF0IHRoaXMgbG9jYXRpb24gYW5kIGFsbCBjaGlsZCBsb2NhdGlvbnMgd2lsbCBiZSBkZWxldGVkLlxuICpcbiAqIGBzZXQoKWAgd2lsbCByZW1vdmUgYW55IHByaW9yaXR5IHN0b3JlZCBhdCB0aGlzIGxvY2F0aW9uLCBzbyBpZiBwcmlvcml0eSBpc1xuICogbWVhbnQgdG8gYmUgcHJlc2VydmVkLCB5b3UgbmVlZCB0byB1c2UgYHNldFdpdGhQcmlvcml0eSgpYCBpbnN0ZWFkLlxuICpcbiAqIE5vdGUgdGhhdCBtb2RpZnlpbmcgZGF0YSB3aXRoIGBzZXQoKWAgd2lsbCBjYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNhY3Rpb25zXG4gKiBhdCB0aGF0IGxvY2F0aW9uLCBzbyBleHRyZW1lIGNhcmUgc2hvdWxkIGJlIHRha2VuIGlmIG1peGluZyBgc2V0KClgIGFuZFxuICogYHRyYW5zYWN0aW9uKClgIHRvIG1vZGlmeSB0aGUgc2FtZSBkYXRhLlxuICpcbiAqIEEgc2luZ2xlIGBzZXQoKWAgd2lsbCBnZW5lcmF0ZSBhIHNpbmdsZSBcInZhbHVlXCIgZXZlbnQgYXQgdGhlIGxvY2F0aW9uIHdoZXJlXG4gKiB0aGUgYHNldCgpYCB3YXMgcGVyZm9ybWVkLlxuICpcbiAqIEBwYXJhbSByZWYgLSBUaGUgbG9jYXRpb24gdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgd3JpdHRlbiAoc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9iamVjdCxcbiAqICAgYXJyYXksIG9yIG51bGwpLlxuICogQHJldHVybnMgUmVzb2x2ZXMgd2hlbiB3cml0ZSB0byBzZXJ2ZXIgaXMgY29tcGxldGUuXG4gKi9cbmZ1bmN0aW9uIHNldChyZWYsIHZhbHVlKSB7XG4gICAgcmVmID0gZ2V0TW9kdWxhckluc3RhbmNlKHJlZik7XG4gICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ3NldCcsIHJlZi5fcGF0aCk7XG4gICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ3NldCcsIHZhbHVlLCByZWYuX3BhdGgsIGZhbHNlKTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIHJlcG9TZXRXaXRoUHJpb3JpdHkocmVmLl9yZXBvLCByZWYuX3BhdGgsIHZhbHVlLCBcbiAgICAvKnByaW9yaXR5PSovIG51bGwsIGRlZmVycmVkLndyYXBDYWxsYmFjaygoKSA9PiB7IH0pKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cbi8qKlxuICogU2V0cyBhIHByaW9yaXR5IGZvciB0aGUgZGF0YSBhdCB0aGlzIERhdGFiYXNlIGxvY2F0aW9uLlxuICpcbiAqIEFwcGxpY2F0aW9ucyBuZWVkIG5vdCB1c2UgcHJpb3JpdHkgYnV0IGNhbiBvcmRlciBjb2xsZWN0aW9ucyBieVxuICogb3JkaW5hcnkgcHJvcGVydGllcyAoc2VlXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjc29ydGluZ19hbmRfZmlsdGVyaW5nX2RhdGEgfCBTb3J0aW5nIGFuZCBmaWx0ZXJpbmcgZGF0YX1cbiAqICkuXG4gKlxuICogQHBhcmFtIHJlZiAtIFRoZSBsb2NhdGlvbiB0byB3cml0ZSB0by5cbiAqIEBwYXJhbSBwcmlvcml0eSAtIFRoZSBwcmlvcml0eSB0byBiZSB3cml0dGVuIChzdHJpbmcsIG51bWJlciwgb3IgbnVsbCkuXG4gKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHdyaXRlIHRvIHNlcnZlciBpcyBjb21wbGV0ZS5cbiAqL1xuZnVuY3Rpb24gc2V0UHJpb3JpdHkocmVmLCBwcmlvcml0eSkge1xuICAgIHJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShyZWYpO1xuICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdzZXRQcmlvcml0eScsIHJlZi5fcGF0aCk7XG4gICAgdmFsaWRhdGVQcmlvcml0eSgnc2V0UHJpb3JpdHknLCBwcmlvcml0eSwgZmFsc2UpO1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVwb1NldFdpdGhQcmlvcml0eShyZWYuX3JlcG8sIHBhdGhDaGlsZChyZWYuX3BhdGgsICcucHJpb3JpdHknKSwgcHJpb3JpdHksIG51bGwsIGRlZmVycmVkLndyYXBDYWxsYmFjaygoKSA9PiB7IH0pKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cbi8qKlxuICogV3JpdGVzIGRhdGEgdGhlIERhdGFiYXNlIGxvY2F0aW9uLiBMaWtlIGBzZXQoKWAgYnV0IGFsc28gc3BlY2lmaWVzIHRoZVxuICogcHJpb3JpdHkgZm9yIHRoYXQgZGF0YS5cbiAqXG4gKiBBcHBsaWNhdGlvbnMgbmVlZCBub3QgdXNlIHByaW9yaXR5IGJ1dCBjYW4gb3JkZXIgY29sbGVjdGlvbnMgYnlcbiAqIG9yZGluYXJ5IHByb3BlcnRpZXMgKHNlZVxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2RhdGFiYXNlL3dlYi9saXN0cy1vZi1kYXRhI3NvcnRpbmdfYW5kX2ZpbHRlcmluZ19kYXRhIHwgU29ydGluZyBhbmQgZmlsdGVyaW5nIGRhdGF9XG4gKiApLlxuICpcbiAqIEBwYXJhbSByZWYgLSBUaGUgbG9jYXRpb24gdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgd3JpdHRlbiAoc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9iamVjdCxcbiAqICAgYXJyYXksIG9yIG51bGwpLlxuICogQHBhcmFtIHByaW9yaXR5IC0gVGhlIHByaW9yaXR5IHRvIGJlIHdyaXR0ZW4gKHN0cmluZywgbnVtYmVyLCBvciBudWxsKS5cbiAqIEByZXR1cm5zIFJlc29sdmVzIHdoZW4gd3JpdGUgdG8gc2VydmVyIGlzIGNvbXBsZXRlLlxuICovXG5mdW5jdGlvbiBzZXRXaXRoUHJpb3JpdHkocmVmLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnc2V0V2l0aFByaW9yaXR5JywgcmVmLl9wYXRoKTtcbiAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnc2V0V2l0aFByaW9yaXR5JywgdmFsdWUsIHJlZi5fcGF0aCwgZmFsc2UpO1xuICAgIHZhbGlkYXRlUHJpb3JpdHkoJ3NldFdpdGhQcmlvcml0eScsIHByaW9yaXR5LCBmYWxzZSk7XG4gICAgaWYgKHJlZi5rZXkgPT09ICcubGVuZ3RoJyB8fCByZWYua2V5ID09PSAnLmtleXMnKSB7XG4gICAgICAgIHRocm93ICdzZXRXaXRoUHJpb3JpdHkgZmFpbGVkOiAnICsgcmVmLmtleSArICcgaXMgYSByZWFkLW9ubHkgb2JqZWN0Lic7XG4gICAgfVxuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVwb1NldFdpdGhQcmlvcml0eShyZWYuX3JlcG8sIHJlZi5fcGF0aCwgdmFsdWUsIHByaW9yaXR5LCBkZWZlcnJlZC53cmFwQ2FsbGJhY2soKCkgPT4geyB9KSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG4vKipcbiAqIFdyaXRlcyBtdWx0aXBsZSB2YWx1ZXMgdG8gdGhlIERhdGFiYXNlIGF0IG9uY2UuXG4gKlxuICogVGhlIGB2YWx1ZXNgIGFyZ3VtZW50IGNvbnRhaW5zIG11bHRpcGxlIHByb3BlcnR5LXZhbHVlIHBhaXJzIHRoYXQgd2lsbCBiZVxuICogd3JpdHRlbiB0byB0aGUgRGF0YWJhc2UgdG9nZXRoZXIuIEVhY2ggY2hpbGQgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBhIHNpbXBsZVxuICogcHJvcGVydHkgKGZvciBleGFtcGxlLCBcIm5hbWVcIikgb3IgYSByZWxhdGl2ZSBwYXRoIChmb3IgZXhhbXBsZSxcbiAqIFwibmFtZS9maXJzdFwiKSBmcm9tIHRoZSBjdXJyZW50IGxvY2F0aW9uIHRvIHRoZSBkYXRhIHRvIHVwZGF0ZS5cbiAqXG4gKiBBcyBvcHBvc2VkIHRvIHRoZSBgc2V0KClgIG1ldGhvZCwgYHVwZGF0ZSgpYCBjYW4gYmUgdXNlIHRvIHNlbGVjdGl2ZWx5IHVwZGF0ZVxuICogb25seSB0aGUgcmVmZXJlbmNlZCBwcm9wZXJ0aWVzIGF0IHRoZSBjdXJyZW50IGxvY2F0aW9uIChpbnN0ZWFkIG9mIHJlcGxhY2luZ1xuICogYWxsIHRoZSBjaGlsZCBwcm9wZXJ0aWVzIGF0IHRoZSBjdXJyZW50IGxvY2F0aW9uKS5cbiAqXG4gKiBUaGUgZWZmZWN0IG9mIHRoZSB3cml0ZSB3aWxsIGJlIHZpc2libGUgaW1tZWRpYXRlbHksIGFuZCB0aGUgY29ycmVzcG9uZGluZ1xuICogZXZlbnRzICgndmFsdWUnLCAnY2hpbGRfYWRkZWQnLCBldGMuKSB3aWxsIGJlIHRyaWdnZXJlZC4gU3luY2hyb25pemF0aW9uIG9mXG4gKiB0aGUgZGF0YSB0byB0aGUgRmlyZWJhc2Ugc2VydmVycyB3aWxsIGFsc28gYmUgc3RhcnRlZCwgYW5kIHRoZSByZXR1cm5lZFxuICogUHJvbWlzZSB3aWxsIHJlc29sdmUgd2hlbiBjb21wbGV0ZS4gSWYgcHJvdmlkZWQsIHRoZSBgb25Db21wbGV0ZWAgY2FsbGJhY2tcbiAqIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IGFmdGVyIHN5bmNocm9uaXphdGlvbiBoYXMgZmluaXNoZWQuXG4gKlxuICogQSBzaW5nbGUgYHVwZGF0ZSgpYCB3aWxsIGdlbmVyYXRlIGEgc2luZ2xlIFwidmFsdWVcIiBldmVudCBhdCB0aGUgbG9jYXRpb25cbiAqIHdoZXJlIHRoZSBgdXBkYXRlKClgIHdhcyBwZXJmb3JtZWQsIHJlZ2FyZGxlc3Mgb2YgaG93IG1hbnkgY2hpbGRyZW4gd2VyZVxuICogbW9kaWZpZWQuXG4gKlxuICogTm90ZSB0aGF0IG1vZGlmeWluZyBkYXRhIHdpdGggYHVwZGF0ZSgpYCB3aWxsIGNhbmNlbCBhbnkgcGVuZGluZ1xuICogdHJhbnNhY3Rpb25zIGF0IHRoYXQgbG9jYXRpb24sIHNvIGV4dHJlbWUgY2FyZSBzaG91bGQgYmUgdGFrZW4gaWYgbWl4aW5nXG4gKiBgdXBkYXRlKClgIGFuZCBgdHJhbnNhY3Rpb24oKWAgdG8gbW9kaWZ5IHRoZSBzYW1lIGRhdGEuXG4gKlxuICogUGFzc2luZyBgbnVsbGAgdG8gYHVwZGF0ZSgpYCB3aWxsIHJlbW92ZSB0aGUgZGF0YSBhdCB0aGlzIGxvY2F0aW9uLlxuICpcbiAqIFNlZVxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlYmxvZy5jb20vMjAxNS8wOS9pbnRyb2R1Y2luZy1tdWx0aS1sb2NhdGlvbi11cGRhdGVzLWFuZF84Ni5odG1sIHwgSW50cm9kdWNpbmcgbXVsdGktbG9jYXRpb24gdXBkYXRlcyBhbmQgbW9yZX0uXG4gKlxuICogQHBhcmFtIHJlZiAtIFRoZSBsb2NhdGlvbiB0byB3cml0ZSB0by5cbiAqIEBwYXJhbSB2YWx1ZXMgLSBPYmplY3QgY29udGFpbmluZyBtdWx0aXBsZSB2YWx1ZXMuXG4gKiBAcmV0dXJucyBSZXNvbHZlcyB3aGVuIHVwZGF0ZSBvbiBzZXJ2ZXIgaXMgY29tcGxldGUuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZShyZWYsIHZhbHVlcykge1xuICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmcoJ3VwZGF0ZScsIHZhbHVlcywgcmVmLl9wYXRoLCBmYWxzZSk7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICByZXBvVXBkYXRlKHJlZi5fcmVwbywgcmVmLl9wYXRoLCB2YWx1ZXMsIGRlZmVycmVkLndyYXBDYWxsYmFjaygoKSA9PiB7IH0pKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cbi8qKlxuICogR2V0cyB0aGUgbW9zdCB1cC10by1kYXRlIHJlc3VsdCBmb3IgdGhpcyBxdWVyeS5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgdG8gcnVuLlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdGluZyBEYXRhU25hcHNob3QgaWYgYSB2YWx1ZSBpc1xuICogYXZhaWxhYmxlLCBvciByZWplY3RzIGlmIHRoZSBjbGllbnQgaXMgdW5hYmxlIHRvIHJldHVybiBhIHZhbHVlIChlLmcuLCBpZiB0aGVcbiAqIHNlcnZlciBpcyB1bnJlYWNoYWJsZSBhbmQgdGhlcmUgaXMgbm90aGluZyBjYWNoZWQpLlxuICovXG5mdW5jdGlvbiBnZXQocXVlcnkpIHtcbiAgICBxdWVyeSA9IGdldE1vZHVsYXJJbnN0YW5jZShxdWVyeSk7XG4gICAgY29uc3QgY2FsbGJhY2tDb250ZXh0ID0gbmV3IENhbGxiYWNrQ29udGV4dCgoKSA9PiB7IH0pO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrQ29udGV4dCk7XG4gICAgcmV0dXJuIHJlcG9HZXRWYWx1ZShxdWVyeS5fcmVwbywgcXVlcnksIGNvbnRhaW5lcikudGhlbihub2RlID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU25hcHNob3Qobm9kZSwgbmV3IFJlZmVyZW5jZUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoKSwgcXVlcnkuX3F1ZXJ5UGFyYW1zLmdldEluZGV4KCkpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIHJlZ2lzdHJhdGlvbiBmb3IgJ3ZhbHVlJyBldmVudHMuXG4gKi9cbmNsYXNzIFZhbHVlRXZlbnRSZWdpc3RyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNhbGxiYWNrQ29udGV4dCA9IGNhbGxiYWNrQ29udGV4dDtcbiAgICB9XG4gICAgcmVzcG9uZHNUbyhldmVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50VHlwZSA9PT0gJ3ZhbHVlJztcbiAgICB9XG4gICAgY3JlYXRlRXZlbnQoY2hhbmdlLCBxdWVyeSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHF1ZXJ5Ll9xdWVyeVBhcmFtcy5nZXRJbmRleCgpO1xuICAgICAgICByZXR1cm4gbmV3IERhdGFFdmVudCgndmFsdWUnLCB0aGlzLCBuZXcgRGF0YVNuYXBzaG90KGNoYW5nZS5zbmFwc2hvdE5vZGUsIG5ldyBSZWZlcmVuY2VJbXBsKHF1ZXJ5Ll9yZXBvLCBxdWVyeS5fcGF0aCksIGluZGV4KSk7XG4gICAgfVxuICAgIGdldEV2ZW50UnVubmVyKGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLmdldEV2ZW50VHlwZSgpID09PSAnY2FuY2VsJykge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuY2FsbGJhY2tDb250ZXh0Lm9uQ2FuY2VsKGV2ZW50RGF0YS5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5jYWxsYmFja0NvbnRleHQub25WYWx1ZShldmVudERhdGEuc25hcHNob3QsIG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUNhbmNlbEV2ZW50KGVycm9yLCBwYXRoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGxiYWNrQ29udGV4dC5oYXNDYW5jZWxDYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxFdmVudCh0aGlzLCBlcnJvciwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtYXRjaGVzKG90aGVyKSB7XG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghb3RoZXIuY2FsbGJhY2tDb250ZXh0IHx8ICF0aGlzLmNhbGxiYWNrQ29udGV4dCkge1xuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgc3BlY2lmaWVkLCB3ZSBjb25zaWRlciBpdCB0byBtYXRjaCBhbnkgY2FsbGJhY2suXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlci5jYWxsYmFja0NvbnRleHQubWF0Y2hlcyh0aGlzLmNhbGxiYWNrQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFzQW55Q2FsbGJhY2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxiYWNrQ29udGV4dCAhPT0gbnVsbDtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBhIGNoaWxkX3ggZXZlbnQuXG4gKi9cbmNsYXNzIENoaWxkRXZlbnRSZWdpc3RyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50VHlwZSwgY2FsbGJhY2tDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgICAgICB0aGlzLmNhbGxiYWNrQ29udGV4dCA9IGNhbGxiYWNrQ29udGV4dDtcbiAgICB9XG4gICAgcmVzcG9uZHNUbyhldmVudFR5cGUpIHtcbiAgICAgICAgbGV0IGV2ZW50VG9DaGVjayA9IGV2ZW50VHlwZSA9PT0gJ2NoaWxkcmVuX2FkZGVkJyA/ICdjaGlsZF9hZGRlZCcgOiBldmVudFR5cGU7XG4gICAgICAgIGV2ZW50VG9DaGVjayA9XG4gICAgICAgICAgICBldmVudFRvQ2hlY2sgPT09ICdjaGlsZHJlbl9yZW1vdmVkJyA/ICdjaGlsZF9yZW1vdmVkJyA6IGV2ZW50VG9DaGVjaztcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRUeXBlID09PSBldmVudFRvQ2hlY2s7XG4gICAgfVxuICAgIGNyZWF0ZUNhbmNlbEV2ZW50KGVycm9yLCBwYXRoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGxiYWNrQ29udGV4dC5oYXNDYW5jZWxDYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxFdmVudCh0aGlzLCBlcnJvciwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVFdmVudChjaGFuZ2UsIHF1ZXJ5KSB7XG4gICAgICAgIGFzc2VydChjaGFuZ2UuY2hpbGROYW1lICE9IG51bGwsICdDaGlsZCBldmVudHMgc2hvdWxkIGhhdmUgYSBjaGlsZE5hbWUuJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkUmVmID0gY2hpbGQobmV3IFJlZmVyZW5jZUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoKSwgY2hhbmdlLmNoaWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcXVlcnkuX3F1ZXJ5UGFyYW1zLmdldEluZGV4KCk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YUV2ZW50KGNoYW5nZS50eXBlLCB0aGlzLCBuZXcgRGF0YVNuYXBzaG90KGNoYW5nZS5zbmFwc2hvdE5vZGUsIGNoaWxkUmVmLCBpbmRleCksIGNoYW5nZS5wcmV2TmFtZSk7XG4gICAgfVxuICAgIGdldEV2ZW50UnVubmVyKGV2ZW50RGF0YSkge1xuICAgICAgICBpZiAoZXZlbnREYXRhLmdldEV2ZW50VHlwZSgpID09PSAnY2FuY2VsJykge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuY2FsbGJhY2tDb250ZXh0Lm9uQ2FuY2VsKGV2ZW50RGF0YS5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5jYWxsYmFja0NvbnRleHQub25WYWx1ZShldmVudERhdGEuc25hcHNob3QsIGV2ZW50RGF0YS5wcmV2TmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWF0Y2hlcyhvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuZXZlbnRUeXBlID09PSBvdGhlci5ldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoIXRoaXMuY2FsbGJhY2tDb250ZXh0IHx8XG4gICAgICAgICAgICAgICAgICAgICFvdGhlci5jYWxsYmFja0NvbnRleHQgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja0NvbnRleHQubWF0Y2hlcyhvdGhlci5jYWxsYmFja0NvbnRleHQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBoYXNBbnlDYWxsYmFjaygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5jYWxsYmFja0NvbnRleHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihxdWVyeSwgZXZlbnRUeXBlLCBjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2tPckxpc3Rlbk9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2FuY2VsQ2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBjYW5jZWxDYWxsYmFja09yTGlzdGVuT3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY2FuY2VsQ2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgIG9wdGlvbnMgPSBjYW5jZWxDYWxsYmFja09yTGlzdGVuT3B0aW9ucztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjYW5jZWxDYWxsYmFja09yTGlzdGVuT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYW5jZWxDYWxsYmFjayA9IGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9ubHlPbmNlKSB7XG4gICAgICAgIGNvbnN0IHVzZXJDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCBvbmNlQ2FsbGJhY2sgPSAoZGF0YVNuYXBzaG90LCBwcmV2aW91c0NoaWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgcmVwb1JlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeShxdWVyeS5fcmVwbywgcXVlcnksIGNvbnRhaW5lcik7XG4gICAgICAgICAgICB1c2VyQ2FsbGJhY2soZGF0YVNuYXBzaG90LCBwcmV2aW91c0NoaWxkTmFtZSk7XG4gICAgICAgIH07XG4gICAgICAgIG9uY2VDYWxsYmFjay51c2VyQ2FsbGJhY2sgPSBjYWxsYmFjay51c2VyQ2FsbGJhY2s7XG4gICAgICAgIG9uY2VDYWxsYmFjay5jb250ZXh0ID0gY2FsbGJhY2suY29udGV4dDtcbiAgICAgICAgY2FsbGJhY2sgPSBvbmNlQ2FsbGJhY2s7XG4gICAgfVxuICAgIGNvbnN0IGNhbGxiYWNrQ29udGV4dCA9IG5ldyBDYWxsYmFja0NvbnRleHQoY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrIHx8IHVuZGVmaW5lZCk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZXZlbnRUeXBlID09PSAndmFsdWUnXG4gICAgICAgID8gbmV3IFZhbHVlRXZlbnRSZWdpc3RyYXRpb24oY2FsbGJhY2tDb250ZXh0KVxuICAgICAgICA6IG5ldyBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKGV2ZW50VHlwZSwgY2FsbGJhY2tDb250ZXh0KTtcbiAgICByZXBvQWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5KHF1ZXJ5Ll9yZXBvLCBxdWVyeSwgY29udGFpbmVyKTtcbiAgICByZXR1cm4gKCkgPT4gcmVwb1JlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeShxdWVyeS5fcmVwbywgcXVlcnksIGNvbnRhaW5lcik7XG59XG5mdW5jdGlvbiBvblZhbHVlKHF1ZXJ5LCBjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2tPckxpc3Rlbk9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYWRkRXZlbnRMaXN0ZW5lcihxdWVyeSwgJ3ZhbHVlJywgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIG9uQ2hpbGRBZGRlZChxdWVyeSwgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIocXVlcnksICdjaGlsZF9hZGRlZCcsIGNhbGxiYWNrLCBjYW5jZWxDYWxsYmFja09yTGlzdGVuT3B0aW9ucywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBvbkNoaWxkQ2hhbmdlZChxdWVyeSwgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIocXVlcnksICdjaGlsZF9jaGFuZ2VkJywgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIG9uQ2hpbGRNb3ZlZChxdWVyeSwgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIocXVlcnksICdjaGlsZF9tb3ZlZCcsIGNhbGxiYWNrLCBjYW5jZWxDYWxsYmFja09yTGlzdGVuT3B0aW9ucywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBvbkNoaWxkUmVtb3ZlZChxdWVyeSwgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIocXVlcnksICdjaGlsZF9yZW1vdmVkJywgY2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrT3JMaXN0ZW5PcHRpb25zLCBvcHRpb25zKTtcbn1cbi8qKlxuICogRGV0YWNoZXMgYSBjYWxsYmFjayBwcmV2aW91c2x5IGF0dGFjaGVkIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgYG9uKigpYCAoYG9uVmFsdWVgLCBgb25DaGlsZEFkZGVkYCkgbGlzdGVuZXIuXG4gKiBOb3RlOiBUaGlzIGlzIG5vdCB0aGUgcmVjb21tZW5kZWQgd2F5IHRvIHJlbW92ZSBhIGxpc3RlbmVyLiBJbnN0ZWFkLCBwbGVhc2UgdXNlIHRoZSByZXR1cm5lZCBjYWxsYmFjayBmdW5jdGlvbiBmcm9tXG4gKiB0aGUgcmVzcGVjdGl2ZSBgb24qYCBjYWxsYmFja3MuXG4gKlxuICogRGV0YWNoIGEgY2FsbGJhY2sgcHJldmlvdXNseSBhdHRhY2hlZCB3aXRoIGBvbiooKWAuIENhbGxpbmcgYG9mZigpYCBvbiBhIHBhcmVudCBsaXN0ZW5lclxuICogd2lsbCBub3QgYXV0b21hdGljYWxseSByZW1vdmUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgb24gY2hpbGQgbm9kZXMsIGBvZmYoKWBcbiAqIG11c3QgYWxzbyBiZSBjYWxsZWQgb24gYW55IGNoaWxkIGxpc3RlbmVycyB0byByZW1vdmUgdGhlIGNhbGxiYWNrLlxuICpcbiAqIElmIGEgY2FsbGJhY2sgaXMgbm90IHNwZWNpZmllZCwgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFR5cGVcbiAqIHdpbGwgYmUgcmVtb3ZlZC4gU2ltaWxhcmx5LCBpZiBubyBldmVudFR5cGUgaXMgc3BlY2lmaWVkLCBhbGwgY2FsbGJhY2tzXG4gKiBmb3IgdGhlIGBSZWZlcmVuY2VgIHdpbGwgYmUgcmVtb3ZlZC5cbiAqXG4gKiBJbmRpdmlkdWFsIGxpc3RlbmVycyBjYW4gYWxzbyBiZSByZW1vdmVkIGJ5IGludm9raW5nIHRoZWlyIHVuc3Vic2NyaWJlXG4gKiBjYWxsYmFja3MuXG4gKlxuICogQHBhcmFtIHF1ZXJ5IC0gVGhlIHF1ZXJ5IHRoYXQgdGhlIGxpc3RlbmVyIHdhcyByZWdpc3RlcmVkIHdpdGguXG4gKiBAcGFyYW0gZXZlbnRUeXBlIC0gT25lIG9mIHRoZSBmb2xsb3dpbmcgc3RyaW5nczogXCJ2YWx1ZVwiLCBcImNoaWxkX2FkZGVkXCIsXG4gKiBcImNoaWxkX2NoYW5nZWRcIiwgXCJjaGlsZF9yZW1vdmVkXCIsIG9yIFwiY2hpbGRfbW92ZWQuXCIgSWYgb21pdHRlZCwgYWxsIGNhbGxiYWNrc1xuICogZm9yIHRoZSBgUmVmZXJlbmNlYCB3aWxsIGJlIHJlbW92ZWQuXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3YXMgcGFzc2VkIHRvIGBvbigpYCBvclxuICogYHVuZGVmaW5lZGAgdG8gcmVtb3ZlIGFsbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9mZihxdWVyeSwgZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgIGxldCBjb250YWluZXIgPSBudWxsO1xuICAgIGNvbnN0IGV4cENhbGxiYWNrID0gY2FsbGJhY2sgPyBuZXcgQ2FsbGJhY2tDb250ZXh0KGNhbGxiYWNrKSA6IG51bGw7XG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICBjb250YWluZXIgPSBuZXcgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbihleHBDYWxsYmFjayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50VHlwZSkge1xuICAgICAgICBjb250YWluZXIgPSBuZXcgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbihldmVudFR5cGUsIGV4cENhbGxiYWNrKTtcbiAgICB9XG4gICAgcmVwb1JlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeShxdWVyeS5fcmVwbywgcXVlcnksIGNvbnRhaW5lcik7XG59XG4vKipcbiAqIEEgYFF1ZXJ5Q29uc3RyYWludGAgaXMgdXNlZCB0byBuYXJyb3cgdGhlIHNldCBvZiBkb2N1bWVudHMgcmV0dXJuZWQgYnkgYVxuICogRGF0YWJhc2UgcXVlcnkuIGBRdWVyeUNvbnN0cmFpbnRgcyBhcmUgY3JlYXRlZCBieSBpbnZva2luZyB7QGxpbmsgZW5kQXR9LFxuICoge0BsaW5rIGVuZEJlZm9yZX0sIHtAbGluayBzdGFydEF0fSwge0BsaW5rIHN0YXJ0QWZ0ZXJ9LCB7QGxpbmtcbiAqIGxpbWl0VG9GaXJzdH0sIHtAbGluayBsaW1pdFRvTGFzdH0sIHtAbGluayBvcmRlckJ5Q2hpbGR9LFxuICoge0BsaW5rIG9yZGVyQnlDaGlsZH0sIHtAbGluayBvcmRlckJ5S2V5fSAsIHtAbGluayBvcmRlckJ5UHJpb3JpdHl9ICxcbiAqIHtAbGluayBvcmRlckJ5VmFsdWV9ICBvciB7QGxpbmsgZXF1YWxUb30gYW5kXG4gKiBjYW4gdGhlbiBiZSBwYXNzZWQgdG8ge0BsaW5rIHF1ZXJ5fSB0byBjcmVhdGUgYSBuZXcgcXVlcnkgaW5zdGFuY2UgdGhhdFxuICogYWxzbyBjb250YWlucyB0aGlzIGBRdWVyeUNvbnN0cmFpbnRgLlxuICovXG5jbGFzcyBRdWVyeUNvbnN0cmFpbnQge1xufVxuY2xhc3MgUXVlcnlFbmRBdENvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKF92YWx1ZSwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2VuZEF0JztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdlbmRBdCcsIHRoaXMuX3ZhbHVlLCBxdWVyeS5fcGF0aCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zRW5kQXQocXVlcnkuX3F1ZXJ5UGFyYW1zLCB0aGlzLl92YWx1ZSwgdGhpcy5fa2V5KTtcbiAgICAgICAgdmFsaWRhdGVMaW1pdChuZXdQYXJhbXMpO1xuICAgICAgICB2YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzKG5ld1BhcmFtcyk7XG4gICAgICAgIGlmIChxdWVyeS5fcXVlcnlQYXJhbXMuaGFzRW5kKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5kQXQ6IFN0YXJ0aW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGVuZEF0LCAnICtcbiAgICAgICAgICAgICAgICAnZW5kQmVmb3JlIG9yIGVxdWFsVG8pLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUXVlcnlJbXBsKHF1ZXJ5Ll9yZXBvLCBxdWVyeS5fcGF0aCwgbmV3UGFyYW1zLCBxdWVyeS5fb3JkZXJCeUNhbGxlZCk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgYFF1ZXJ5Q29uc3RyYWludGAgd2l0aCB0aGUgc3BlY2lmaWVkIGVuZGluZyBwb2ludC5cbiAqXG4gKiBVc2luZyBgc3RhcnRBdCgpYCwgYHN0YXJ0QWZ0ZXIoKWAsIGBlbmRCZWZvcmUoKWAsIGBlbmRBdCgpYCBhbmQgYGVxdWFsVG8oKWBcbiAqIGFsbG93cyB5b3UgdG8gY2hvb3NlIGFyYml0cmFyeSBzdGFydGluZyBhbmQgZW5kaW5nIHBvaW50cyBmb3IgeW91ciBxdWVyaWVzLlxuICpcbiAqIFRoZSBlbmRpbmcgcG9pbnQgaXMgaW5jbHVzaXZlLCBzbyBjaGlsZHJlbiB3aXRoIGV4YWN0bHkgdGhlIHNwZWNpZmllZCB2YWx1ZVxuICogd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcXVlcnkuIFRoZSBvcHRpb25hbCBrZXkgYXJndW1lbnQgY2FuIGJlIHVzZWQgdG9cbiAqIGZ1cnRoZXIgbGltaXQgdGhlIHJhbmdlIG9mIHRoZSBxdWVyeS4gSWYgaXQgaXMgc3BlY2lmaWVkLCB0aGVuIGNoaWxkcmVuIHRoYXRcbiAqIGhhdmUgZXhhY3RseSB0aGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYWxzbyBoYXZlIGEga2V5IG5hbWUgbGVzcyB0aGFuIG9yIGVxdWFsXG4gKiB0byB0aGUgc3BlY2lmaWVkIGtleS5cbiAqXG4gKiBZb3UgY2FuIHJlYWQgbW9yZSBhYm91dCBgZW5kQXQoKWAgaW5cbiAqIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9kYXRhYmFzZS93ZWIvbGlzdHMtb2YtZGF0YSNmaWx0ZXJpbmdfZGF0YSB8IEZpbHRlcmluZyBkYXRhfS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZW5kIGF0LiBUaGUgYXJndW1lbnQgdHlwZSBkZXBlbmRzIG9uIHdoaWNoXG4gKiBgb3JkZXJCeSooKWAgZnVuY3Rpb24gd2FzIHVzZWQgaW4gdGhpcyBxdWVyeS4gU3BlY2lmeSBhIHZhbHVlIHRoYXQgbWF0Y2hlc1xuICogdGhlIGBvcmRlckJ5KigpYCB0eXBlLiBXaGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgb3JkZXJCeUtleSgpYCwgdGhlXG4gKiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLlxuICogQHBhcmFtIGtleSAtIFRoZSBjaGlsZCBrZXkgdG8gZW5kIGF0LCBhbW9uZyB0aGUgY2hpbGRyZW4gd2l0aCB0aGUgcHJldmlvdXNseVxuICogc3BlY2lmaWVkIHByaW9yaXR5LiBUaGlzIGFyZ3VtZW50IGlzIG9ubHkgYWxsb3dlZCBpZiBvcmRlcmluZyBieSBjaGlsZCxcbiAqIHZhbHVlLCBvciBwcmlvcml0eS5cbiAqL1xuZnVuY3Rpb24gZW5kQXQodmFsdWUsIGtleSkge1xuICAgIHZhbGlkYXRlS2V5KCdlbmRBdCcsICdrZXknLCBrZXksIHRydWUpO1xuICAgIHJldHVybiBuZXcgUXVlcnlFbmRBdENvbnN0cmFpbnQodmFsdWUsIGtleSk7XG59XG5jbGFzcyBRdWVyeUVuZEJlZm9yZUNvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKF92YWx1ZSwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2VuZEJlZm9yZSc7XG4gICAgfVxuICAgIF9hcHBseShxdWVyeSkge1xuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnZW5kQmVmb3JlJywgdGhpcy5fdmFsdWUsIHF1ZXJ5Ll9wYXRoLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zRW5kQmVmb3JlKHF1ZXJ5Ll9xdWVyeVBhcmFtcywgdGhpcy5fdmFsdWUsIHRoaXMuX2tleSk7XG4gICAgICAgIHZhbGlkYXRlTGltaXQobmV3UGFyYW1zKTtcbiAgICAgICAgdmFsaWRhdGVRdWVyeUVuZHBvaW50cyhuZXdQYXJhbXMpO1xuICAgICAgICBpZiAocXVlcnkuX3F1ZXJ5UGFyYW1zLmhhc0VuZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VuZEJlZm9yZTogU3RhcnRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gZW5kQXQsICcgK1xuICAgICAgICAgICAgICAgICdlbmRCZWZvcmUgb3IgZXF1YWxUbykuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoLCBuZXdQYXJhbXMsIHF1ZXJ5Ll9vcmRlckJ5Q2FsbGVkKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBgUXVlcnlDb25zdHJhaW50YCB3aXRoIHRoZSBzcGVjaWZpZWQgZW5kaW5nIHBvaW50IChleGNsdXNpdmUpLlxuICpcbiAqIFVzaW5nIGBzdGFydEF0KClgLCBgc3RhcnRBZnRlcigpYCwgYGVuZEJlZm9yZSgpYCwgYGVuZEF0KClgIGFuZCBgZXF1YWxUbygpYFxuICogYWxsb3dzIHlvdSB0byBjaG9vc2UgYXJiaXRyYXJ5IHN0YXJ0aW5nIGFuZCBlbmRpbmcgcG9pbnRzIGZvciB5b3VyIHF1ZXJpZXMuXG4gKlxuICogVGhlIGVuZGluZyBwb2ludCBpcyBleGNsdXNpdmUuIElmIG9ubHkgYSB2YWx1ZSBpcyBwcm92aWRlZCwgY2hpbGRyZW5cbiAqIHdpdGggYSB2YWx1ZSBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCB2YWx1ZSB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBxdWVyeS5cbiAqIElmIGEga2V5IGlzIHNwZWNpZmllZCwgdGhlbiBjaGlsZHJlbiBtdXN0IGhhdmUgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWxcbiAqIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUgYW5kIGEga2V5IG5hbWUgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQga2V5LlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBlbmQgYmVmb3JlLiBUaGUgYXJndW1lbnQgdHlwZSBkZXBlbmRzIG9uIHdoaWNoXG4gKiBgb3JkZXJCeSooKWAgZnVuY3Rpb24gd2FzIHVzZWQgaW4gdGhpcyBxdWVyeS4gU3BlY2lmeSBhIHZhbHVlIHRoYXQgbWF0Y2hlc1xuICogdGhlIGBvcmRlckJ5KigpYCB0eXBlLiBXaGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgb3JkZXJCeUtleSgpYCwgdGhlXG4gKiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLlxuICogQHBhcmFtIGtleSAtIFRoZSBjaGlsZCBrZXkgdG8gZW5kIGJlZm9yZSwgYW1vbmcgdGhlIGNoaWxkcmVuIHdpdGggdGhlXG4gKiBwcmV2aW91c2x5IHNwZWNpZmllZCBwcmlvcml0eS4gVGhpcyBhcmd1bWVudCBpcyBvbmx5IGFsbG93ZWQgaWYgb3JkZXJpbmcgYnlcbiAqIGNoaWxkLCB2YWx1ZSwgb3IgcHJpb3JpdHkuXG4gKi9cbmZ1bmN0aW9uIGVuZEJlZm9yZSh2YWx1ZSwga2V5KSB7XG4gICAgdmFsaWRhdGVLZXkoJ2VuZEJlZm9yZScsICdrZXknLCBrZXksIHRydWUpO1xuICAgIHJldHVybiBuZXcgUXVlcnlFbmRCZWZvcmVDb25zdHJhaW50KHZhbHVlLCBrZXkpO1xufVxuY2xhc3MgUXVlcnlTdGFydEF0Q29uc3RyYWludCBleHRlbmRzIFF1ZXJ5Q29uc3RyYWludCB7XG4gICAgY29uc3RydWN0b3IoX3ZhbHVlLCBfa2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xuICAgICAgICB0aGlzLnR5cGUgPSAnc3RhcnRBdCc7XG4gICAgfVxuICAgIF9hcHBseShxdWVyeSkge1xuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnc3RhcnRBdCcsIHRoaXMuX3ZhbHVlLCBxdWVyeS5fcGF0aCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zU3RhcnRBdChxdWVyeS5fcXVlcnlQYXJhbXMsIHRoaXMuX3ZhbHVlLCB0aGlzLl9rZXkpO1xuICAgICAgICB2YWxpZGF0ZUxpbWl0KG5ld1BhcmFtcyk7XG4gICAgICAgIHZhbGlkYXRlUXVlcnlFbmRwb2ludHMobmV3UGFyYW1zKTtcbiAgICAgICAgaWYgKHF1ZXJ5Ll9xdWVyeVBhcmFtcy5oYXNTdGFydCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0QXQ6IFN0YXJ0aW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIHN0YXJ0QXQsICcgK1xuICAgICAgICAgICAgICAgICdzdGFydEJlZm9yZSBvciBlcXVhbFRvKS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5SW1wbChxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgsIG5ld1BhcmFtcywgcXVlcnkuX29yZGVyQnlDYWxsZWQpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGBRdWVyeUNvbnN0cmFpbnRgIHdpdGggdGhlIHNwZWNpZmllZCBzdGFydGluZyBwb2ludC5cbiAqXG4gKiBVc2luZyBgc3RhcnRBdCgpYCwgYHN0YXJ0QWZ0ZXIoKWAsIGBlbmRCZWZvcmUoKWAsIGBlbmRBdCgpYCBhbmQgYGVxdWFsVG8oKWBcbiAqIGFsbG93cyB5b3UgdG8gY2hvb3NlIGFyYml0cmFyeSBzdGFydGluZyBhbmQgZW5kaW5nIHBvaW50cyBmb3IgeW91ciBxdWVyaWVzLlxuICpcbiAqIFRoZSBzdGFydGluZyBwb2ludCBpcyBpbmNsdXNpdmUsIHNvIGNoaWxkcmVuIHdpdGggZXhhY3RseSB0aGUgc3BlY2lmaWVkIHZhbHVlXG4gKiB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBxdWVyeS4gVGhlIG9wdGlvbmFsIGtleSBhcmd1bWVudCBjYW4gYmUgdXNlZCB0b1xuICogZnVydGhlciBsaW1pdCB0aGUgcmFuZ2Ugb2YgdGhlIHF1ZXJ5LiBJZiBpdCBpcyBzcGVjaWZpZWQsIHRoZW4gY2hpbGRyZW4gdGhhdFxuICogaGF2ZSBleGFjdGx5IHRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBhbHNvIGhhdmUgYSBrZXkgbmFtZSBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIHRoZSBzcGVjaWZpZWQga2V5LlxuICpcbiAqIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGBzdGFydEF0KClgIGluXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjZmlsdGVyaW5nX2RhdGEgfCBGaWx0ZXJpbmcgZGF0YX0uXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0YXJ0IGF0LiBUaGUgYXJndW1lbnQgdHlwZSBkZXBlbmRzIG9uIHdoaWNoXG4gKiBgb3JkZXJCeSooKWAgZnVuY3Rpb24gd2FzIHVzZWQgaW4gdGhpcyBxdWVyeS4gU3BlY2lmeSBhIHZhbHVlIHRoYXQgbWF0Y2hlc1xuICogdGhlIGBvcmRlckJ5KigpYCB0eXBlLiBXaGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgb3JkZXJCeUtleSgpYCwgdGhlXG4gKiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLlxuICogQHBhcmFtIGtleSAtIFRoZSBjaGlsZCBrZXkgdG8gc3RhcnQgYXQuIFRoaXMgYXJndW1lbnQgaXMgb25seSBhbGxvd2VkIGlmXG4gKiBvcmRlcmluZyBieSBjaGlsZCwgdmFsdWUsIG9yIHByaW9yaXR5LlxuICovXG5mdW5jdGlvbiBzdGFydEF0KHZhbHVlID0gbnVsbCwga2V5KSB7XG4gICAgdmFsaWRhdGVLZXkoJ3N0YXJ0QXQnLCAna2V5Jywga2V5LCB0cnVlKTtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5U3RhcnRBdENvbnN0cmFpbnQodmFsdWUsIGtleSk7XG59XG5jbGFzcyBRdWVyeVN0YXJ0QWZ0ZXJDb25zdHJhaW50IGV4dGVuZHMgUXVlcnlDb25zdHJhaW50IHtcbiAgICBjb25zdHJ1Y3RvcihfdmFsdWUsIF9rZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBfdmFsdWU7XG4gICAgICAgIHRoaXMuX2tleSA9IF9rZXk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdzdGFydEFmdGVyJztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdzdGFydEFmdGVyJywgdGhpcy5fdmFsdWUsIHF1ZXJ5Ll9wYXRoLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zU3RhcnRBZnRlcihxdWVyeS5fcXVlcnlQYXJhbXMsIHRoaXMuX3ZhbHVlLCB0aGlzLl9rZXkpO1xuICAgICAgICB2YWxpZGF0ZUxpbWl0KG5ld1BhcmFtcyk7XG4gICAgICAgIHZhbGlkYXRlUXVlcnlFbmRwb2ludHMobmV3UGFyYW1zKTtcbiAgICAgICAgaWYgKHF1ZXJ5Ll9xdWVyeVBhcmFtcy5oYXNTdGFydCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0YXJ0QWZ0ZXI6IFN0YXJ0aW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIHN0YXJ0QXQsICcgK1xuICAgICAgICAgICAgICAgICdzdGFydEFmdGVyLCBvciBlcXVhbFRvKS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5SW1wbChxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgsIG5ld1BhcmFtcywgcXVlcnkuX29yZGVyQnlDYWxsZWQpO1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGBRdWVyeUNvbnN0cmFpbnRgIHdpdGggdGhlIHNwZWNpZmllZCBzdGFydGluZyBwb2ludCAoZXhjbHVzaXZlKS5cbiAqXG4gKiBVc2luZyBgc3RhcnRBdCgpYCwgYHN0YXJ0QWZ0ZXIoKWAsIGBlbmRCZWZvcmUoKWAsIGBlbmRBdCgpYCBhbmQgYGVxdWFsVG8oKWBcbiAqIGFsbG93cyB5b3UgdG8gY2hvb3NlIGFyYml0cmFyeSBzdGFydGluZyBhbmQgZW5kaW5nIHBvaW50cyBmb3IgeW91ciBxdWVyaWVzLlxuICpcbiAqIFRoZSBzdGFydGluZyBwb2ludCBpcyBleGNsdXNpdmUuIElmIG9ubHkgYSB2YWx1ZSBpcyBwcm92aWRlZCwgY2hpbGRyZW5cbiAqIHdpdGggYSB2YWx1ZSBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCB2YWx1ZSB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBxdWVyeS5cbiAqIElmIGEga2V5IGlzIHNwZWNpZmllZCwgdGhlbiBjaGlsZHJlbiBtdXN0IGhhdmUgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWxcbiAqIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUgYW5kIGEgYSBrZXkgbmFtZSBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCBrZXkuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHN0YXJ0IGFmdGVyLiBUaGUgYXJndW1lbnQgdHlwZSBkZXBlbmRzIG9uIHdoaWNoXG4gKiBgb3JkZXJCeSooKWAgZnVuY3Rpb24gd2FzIHVzZWQgaW4gdGhpcyBxdWVyeS4gU3BlY2lmeSBhIHZhbHVlIHRoYXQgbWF0Y2hlc1xuICogdGhlIGBvcmRlckJ5KigpYCB0eXBlLiBXaGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgb3JkZXJCeUtleSgpYCwgdGhlXG4gKiB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLlxuICogQHBhcmFtIGtleSAtIFRoZSBjaGlsZCBrZXkgdG8gc3RhcnQgYWZ0ZXIuIFRoaXMgYXJndW1lbnQgaXMgb25seSBhbGxvd2VkIGlmXG4gKiBvcmRlcmluZyBieSBjaGlsZCwgdmFsdWUsIG9yIHByaW9yaXR5LlxuICovXG5mdW5jdGlvbiBzdGFydEFmdGVyKHZhbHVlLCBrZXkpIHtcbiAgICB2YWxpZGF0ZUtleSgnc3RhcnRBZnRlcicsICdrZXknLCBrZXksIHRydWUpO1xuICAgIHJldHVybiBuZXcgUXVlcnlTdGFydEFmdGVyQ29uc3RyYWludCh2YWx1ZSwga2V5KTtcbn1cbmNsYXNzIFF1ZXJ5TGltaXRUb0ZpcnN0Q29uc3RyYWludCBleHRlbmRzIFF1ZXJ5Q29uc3RyYWludCB7XG4gICAgY29uc3RydWN0b3IoX2xpbWl0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gX2xpbWl0O1xuICAgICAgICB0aGlzLnR5cGUgPSAnbGltaXRUb0ZpcnN0JztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIGlmIChxdWVyeS5fcXVlcnlQYXJhbXMuaGFzTGltaXQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaW1pdFRvRmlyc3Q6IExpbWl0IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGxpbWl0VG9GaXJzdCAnICtcbiAgICAgICAgICAgICAgICAnb3IgbGltaXRUb0xhc3QpLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUXVlcnlJbXBsKHF1ZXJ5Ll9yZXBvLCBxdWVyeS5fcGF0aCwgcXVlcnlQYXJhbXNMaW1pdFRvRmlyc3QocXVlcnkuX3F1ZXJ5UGFyYW1zLCB0aGlzLl9saW1pdCksIHF1ZXJ5Ll9vcmRlckJ5Q2FsbGVkKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYFF1ZXJ5Q29uc3RyYWludGAgdGhhdCBpZiBsaW1pdGVkIHRvIHRoZSBmaXJzdCBzcGVjaWZpYyBudW1iZXJcbiAqIG9mIGNoaWxkcmVuLlxuICpcbiAqIFRoZSBgbGltaXRUb0ZpcnN0KClgIG1ldGhvZCBpcyB1c2VkIHRvIHNldCBhIG1heGltdW0gbnVtYmVyIG9mIGNoaWxkcmVuIHRvIGJlXG4gKiBzeW5jZWQgZm9yIGEgZ2l2ZW4gY2FsbGJhY2suIElmIHdlIHNldCBhIGxpbWl0IG9mIDEwMCwgd2Ugd2lsbCBpbml0aWFsbHkgb25seVxuICogcmVjZWl2ZSB1cCB0byAxMDAgYGNoaWxkX2FkZGVkYCBldmVudHMuIElmIHdlIGhhdmUgZmV3ZXIgdGhhbiAxMDAgbWVzc2FnZXNcbiAqIHN0b3JlZCBpbiBvdXIgRGF0YWJhc2UsIGEgYGNoaWxkX2FkZGVkYCBldmVudCB3aWxsIGZpcmUgZm9yIGVhY2ggbWVzc2FnZS5cbiAqIEhvd2V2ZXIsIGlmIHdlIGhhdmUgb3ZlciAxMDAgbWVzc2FnZXMsIHdlIHdpbGwgb25seSByZWNlaXZlIGEgYGNoaWxkX2FkZGVkYFxuICogZXZlbnQgZm9yIHRoZSBmaXJzdCAxMDAgb3JkZXJlZCBtZXNzYWdlcy4gQXMgaXRlbXMgY2hhbmdlLCB3ZSB3aWxsIHJlY2VpdmVcbiAqIGBjaGlsZF9yZW1vdmVkYCBldmVudHMgZm9yIGVhY2ggaXRlbSB0aGF0IGRyb3BzIG91dCBvZiB0aGUgYWN0aXZlIGxpc3Qgc29cbiAqIHRoYXQgdGhlIHRvdGFsIG51bWJlciBzdGF5cyBhdCAxMDAuXG4gKlxuICogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgYGxpbWl0VG9GaXJzdCgpYCBpblxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2RhdGFiYXNlL3dlYi9saXN0cy1vZi1kYXRhI2ZpbHRlcmluZ19kYXRhIHwgRmlsdGVyaW5nIGRhdGF9LlxuICpcbiAqIEBwYXJhbSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBub2RlcyB0byBpbmNsdWRlIGluIHRoaXMgcXVlcnkuXG4gKi9cbmZ1bmN0aW9uIGxpbWl0VG9GaXJzdChsaW1pdCkge1xuICAgIGlmICh0eXBlb2YgbGltaXQgIT09ICdudW1iZXInIHx8IE1hdGguZmxvb3IobGltaXQpICE9PSBsaW1pdCB8fCBsaW1pdCA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGltaXRUb0ZpcnN0OiBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBRdWVyeUxpbWl0VG9GaXJzdENvbnN0cmFpbnQobGltaXQpO1xufVxuY2xhc3MgUXVlcnlMaW1pdFRvTGFzdENvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKF9saW1pdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9saW1pdCA9IF9saW1pdDtcbiAgICAgICAgdGhpcy50eXBlID0gJ2xpbWl0VG9MYXN0JztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIGlmIChxdWVyeS5fcXVlcnlQYXJhbXMuaGFzTGltaXQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsaW1pdFRvTGFzdDogTGltaXQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gbGltaXRUb0ZpcnN0ICcgK1xuICAgICAgICAgICAgICAgICdvciBsaW1pdFRvTGFzdCkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoLCBxdWVyeVBhcmFtc0xpbWl0VG9MYXN0KHF1ZXJ5Ll9xdWVyeVBhcmFtcywgdGhpcy5fbGltaXQpLCBxdWVyeS5fb3JkZXJCeUNhbGxlZCk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBRdWVyeUNvbnN0cmFpbnRgIHRoYXQgaXMgbGltaXRlZCB0byByZXR1cm4gb25seSB0aGUgbGFzdFxuICogc3BlY2lmaWVkIG51bWJlciBvZiBjaGlsZHJlbi5cbiAqXG4gKiBUaGUgYGxpbWl0VG9MYXN0KClgIG1ldGhvZCBpcyB1c2VkIHRvIHNldCBhIG1heGltdW0gbnVtYmVyIG9mIGNoaWxkcmVuIHRvIGJlXG4gKiBzeW5jZWQgZm9yIGEgZ2l2ZW4gY2FsbGJhY2suIElmIHdlIHNldCBhIGxpbWl0IG9mIDEwMCwgd2Ugd2lsbCBpbml0aWFsbHkgb25seVxuICogcmVjZWl2ZSB1cCB0byAxMDAgYGNoaWxkX2FkZGVkYCBldmVudHMuIElmIHdlIGhhdmUgZmV3ZXIgdGhhbiAxMDAgbWVzc2FnZXNcbiAqIHN0b3JlZCBpbiBvdXIgRGF0YWJhc2UsIGEgYGNoaWxkX2FkZGVkYCBldmVudCB3aWxsIGZpcmUgZm9yIGVhY2ggbWVzc2FnZS5cbiAqIEhvd2V2ZXIsIGlmIHdlIGhhdmUgb3ZlciAxMDAgbWVzc2FnZXMsIHdlIHdpbGwgb25seSByZWNlaXZlIGEgYGNoaWxkX2FkZGVkYFxuICogZXZlbnQgZm9yIHRoZSBsYXN0IDEwMCBvcmRlcmVkIG1lc3NhZ2VzLiBBcyBpdGVtcyBjaGFuZ2UsIHdlIHdpbGwgcmVjZWl2ZVxuICogYGNoaWxkX3JlbW92ZWRgIGV2ZW50cyBmb3IgZWFjaCBpdGVtIHRoYXQgZHJvcHMgb3V0IG9mIHRoZSBhY3RpdmUgbGlzdCBzb1xuICogdGhhdCB0aGUgdG90YWwgbnVtYmVyIHN0YXlzIGF0IDEwMC5cbiAqXG4gKiBZb3UgY2FuIHJlYWQgbW9yZSBhYm91dCBgbGltaXRUb0xhc3QoKWAgaW5cbiAqIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9kYXRhYmFzZS93ZWIvbGlzdHMtb2YtZGF0YSNmaWx0ZXJpbmdfZGF0YSB8IEZpbHRlcmluZyBkYXRhfS5cbiAqXG4gKiBAcGFyYW0gbGltaXQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gaW5jbHVkZSBpbiB0aGlzIHF1ZXJ5LlxuICovXG5mdW5jdGlvbiBsaW1pdFRvTGFzdChsaW1pdCkge1xuICAgIGlmICh0eXBlb2YgbGltaXQgIT09ICdudW1iZXInIHx8IE1hdGguZmxvb3IobGltaXQpICE9PSBsaW1pdCB8fCBsaW1pdCA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGltaXRUb0xhc3Q6IEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLicpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFF1ZXJ5TGltaXRUb0xhc3RDb25zdHJhaW50KGxpbWl0KTtcbn1cbmNsYXNzIFF1ZXJ5T3JkZXJCeUNoaWxkQ29uc3RyYWludCBleHRlbmRzIFF1ZXJ5Q29uc3RyYWludCB7XG4gICAgY29uc3RydWN0b3IoX3BhdGgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcGF0aCA9IF9wYXRoO1xuICAgICAgICB0aGlzLnR5cGUgPSAnb3JkZXJCeUNoaWxkJztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIHZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsKHF1ZXJ5LCAnb3JkZXJCeUNoaWxkJyk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFBhdGggPSBuZXcgUGF0aCh0aGlzLl9wYXRoKTtcbiAgICAgICAgaWYgKHBhdGhJc0VtcHR5KHBhcnNlZFBhdGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29yZGVyQnlDaGlsZDogY2Fubm90IHBhc3MgaW4gZW1wdHkgcGF0aC4gVXNlIG9yZGVyQnlWYWx1ZSgpIGluc3RlYWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSBuZXcgUGF0aEluZGV4KHBhcnNlZFBhdGgpO1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBxdWVyeVBhcmFtc09yZGVyQnkocXVlcnkuX3F1ZXJ5UGFyYW1zLCBpbmRleCk7XG4gICAgICAgIHZhbGlkYXRlUXVlcnlFbmRwb2ludHMobmV3UGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoLCBuZXdQYXJhbXMsIFxuICAgICAgICAvKm9yZGVyQnlDYWxsZWQ9Ki8gdHJ1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBRdWVyeUNvbnN0cmFpbnRgIHRoYXQgb3JkZXJzIGJ5IHRoZSBzcGVjaWZpZWQgY2hpbGQga2V5LlxuICpcbiAqIFF1ZXJpZXMgY2FuIG9ubHkgb3JkZXIgYnkgb25lIGtleSBhdCBhIHRpbWUuIENhbGxpbmcgYG9yZGVyQnlDaGlsZCgpYFxuICogbXVsdGlwbGUgdGltZXMgb24gdGhlIHNhbWUgcXVlcnkgaXMgYW4gZXJyb3IuXG4gKlxuICogRmlyZWJhc2UgcXVlcmllcyBhbGxvdyB5b3UgdG8gb3JkZXIgeW91ciBkYXRhIGJ5IGFueSBjaGlsZCBrZXkgb24gdGhlIGZseS5cbiAqIEhvd2V2ZXIsIGlmIHlvdSBrbm93IGluIGFkdmFuY2Ugd2hhdCB5b3VyIGluZGV4ZXMgd2lsbCBiZSwgeW91IGNhbiBkZWZpbmVcbiAqIHRoZW0gdmlhIHRoZSAuaW5kZXhPbiBydWxlIGluIHlvdXIgU2VjdXJpdHkgUnVsZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS4gU2VlXG4gKiB0aGV7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvc2VjdXJpdHkvaW5kZXhpbmctZGF0YX1cbiAqIHJ1bGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgYG9yZGVyQnlDaGlsZCgpYCBpblxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2RhdGFiYXNlL3dlYi9saXN0cy1vZi1kYXRhI3NvcnRfZGF0YSB8IFNvcnQgZGF0YX0uXG4gKlxuICogQHBhcmFtIHBhdGggLSBUaGUgcGF0aCB0byBvcmRlciBieS5cbiAqL1xuZnVuY3Rpb24gb3JkZXJCeUNoaWxkKHBhdGgpIHtcbiAgICBpZiAocGF0aCA9PT0gJyRrZXknKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb3JkZXJCeUNoaWxkOiBcIiRrZXlcIiBpcyBpbnZhbGlkLiAgVXNlIG9yZGVyQnlLZXkoKSBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICBlbHNlIGlmIChwYXRoID09PSAnJHByaW9yaXR5Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29yZGVyQnlDaGlsZDogXCIkcHJpb3JpdHlcIiBpcyBpbnZhbGlkLiAgVXNlIG9yZGVyQnlQcmlvcml0eSgpIGluc3RlYWQuJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhdGggPT09ICckdmFsdWUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb3JkZXJCeUNoaWxkOiBcIiR2YWx1ZVwiIGlzIGludmFsaWQuICBVc2Ugb3JkZXJCeVZhbHVlKCkgaW5zdGVhZC4nKTtcbiAgICB9XG4gICAgdmFsaWRhdGVQYXRoU3RyaW5nKCdvcmRlckJ5Q2hpbGQnLCAncGF0aCcsIHBhdGgsIGZhbHNlKTtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5T3JkZXJCeUNoaWxkQ29uc3RyYWludChwYXRoKTtcbn1cbmNsYXNzIFF1ZXJ5T3JkZXJCeUtleUNvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAnb3JkZXJCeUtleSc7XG4gICAgfVxuICAgIF9hcHBseShxdWVyeSkge1xuICAgICAgICB2YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbChxdWVyeSwgJ29yZGVyQnlLZXknKTtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gcXVlcnlQYXJhbXNPcmRlckJ5KHF1ZXJ5Ll9xdWVyeVBhcmFtcywgS0VZX0lOREVYKTtcbiAgICAgICAgdmFsaWRhdGVRdWVyeUVuZHBvaW50cyhuZXdQYXJhbXMpO1xuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5SW1wbChxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgsIG5ld1BhcmFtcywgXG4gICAgICAgIC8qb3JkZXJCeUNhbGxlZD0qLyB0cnVlKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYFF1ZXJ5Q29uc3RyYWludGAgdGhhdCBvcmRlcnMgYnkgdGhlIGtleS5cbiAqXG4gKiBTb3J0cyB0aGUgcmVzdWx0cyBvZiBhIHF1ZXJ5IGJ5IHRoZWlyIChhc2NlbmRpbmcpIGtleSB2YWx1ZXMuXG4gKlxuICogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgYG9yZGVyQnlLZXkoKWAgaW5cbiAqIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9kYXRhYmFzZS93ZWIvbGlzdHMtb2YtZGF0YSNzb3J0X2RhdGEgfCBTb3J0IGRhdGF9LlxuICovXG5mdW5jdGlvbiBvcmRlckJ5S2V5KCkge1xuICAgIHJldHVybiBuZXcgUXVlcnlPcmRlckJ5S2V5Q29uc3RyYWludCgpO1xufVxuY2xhc3MgUXVlcnlPcmRlckJ5UHJpb3JpdHlDb25zdHJhaW50IGV4dGVuZHMgUXVlcnlDb25zdHJhaW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gJ29yZGVyQnlQcmlvcml0eSc7XG4gICAgfVxuICAgIF9hcHBseShxdWVyeSkge1xuICAgICAgICB2YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbChxdWVyeSwgJ29yZGVyQnlQcmlvcml0eScpO1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBxdWVyeVBhcmFtc09yZGVyQnkocXVlcnkuX3F1ZXJ5UGFyYW1zLCBQUklPUklUWV9JTkRFWCk7XG4gICAgICAgIHZhbGlkYXRlUXVlcnlFbmRwb2ludHMobmV3UGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUltcGwocXVlcnkuX3JlcG8sIHF1ZXJ5Ll9wYXRoLCBuZXdQYXJhbXMsIFxuICAgICAgICAvKm9yZGVyQnlDYWxsZWQ9Ki8gdHJ1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBRdWVyeUNvbnN0cmFpbnRgIHRoYXQgb3JkZXJzIGJ5IHByaW9yaXR5LlxuICpcbiAqIEFwcGxpY2F0aW9ucyBuZWVkIG5vdCB1c2UgcHJpb3JpdHkgYnV0IGNhbiBvcmRlciBjb2xsZWN0aW9ucyBieVxuICogb3JkaW5hcnkgcHJvcGVydGllcyAoc2VlXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjc29ydF9kYXRhIHwgU29ydCBkYXRhfVxuICogZm9yIGFsdGVybmF0aXZlcyB0byBwcmlvcml0eS5cbiAqL1xuZnVuY3Rpb24gb3JkZXJCeVByaW9yaXR5KCkge1xuICAgIHJldHVybiBuZXcgUXVlcnlPcmRlckJ5UHJpb3JpdHlDb25zdHJhaW50KCk7XG59XG5jbGFzcyBRdWVyeU9yZGVyQnlWYWx1ZUNvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAnb3JkZXJCeVZhbHVlJztcbiAgICB9XG4gICAgX2FwcGx5KHF1ZXJ5KSB7XG4gICAgICAgIHZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsKHF1ZXJ5LCAnb3JkZXJCeVZhbHVlJyk7XG4gICAgICAgIGNvbnN0IG5ld1BhcmFtcyA9IHF1ZXJ5UGFyYW1zT3JkZXJCeShxdWVyeS5fcXVlcnlQYXJhbXMsIFZBTFVFX0lOREVYKTtcbiAgICAgICAgdmFsaWRhdGVRdWVyeUVuZHBvaW50cyhuZXdQYXJhbXMpO1xuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5SW1wbChxdWVyeS5fcmVwbywgcXVlcnkuX3BhdGgsIG5ld1BhcmFtcywgXG4gICAgICAgIC8qb3JkZXJCeUNhbGxlZD0qLyB0cnVlKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYFF1ZXJ5Q29uc3RyYWludGAgdGhhdCBvcmRlcnMgYnkgdmFsdWUuXG4gKlxuICogSWYgdGhlIGNoaWxkcmVuIG9mIGEgcXVlcnkgYXJlIGFsbCBzY2FsYXIgdmFsdWVzIChzdHJpbmcsIG51bWJlciwgb3JcbiAqIGJvb2xlYW4pLCB5b3UgY2FuIG9yZGVyIHRoZSByZXN1bHRzIGJ5IHRoZWlyIChhc2NlbmRpbmcpIHZhbHVlcy5cbiAqXG4gKiBZb3UgY2FuIHJlYWQgbW9yZSBhYm91dCBgb3JkZXJCeVZhbHVlKClgIGluXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjc29ydF9kYXRhIHwgU29ydCBkYXRhfS5cbiAqL1xuZnVuY3Rpb24gb3JkZXJCeVZhbHVlKCkge1xuICAgIHJldHVybiBuZXcgUXVlcnlPcmRlckJ5VmFsdWVDb25zdHJhaW50KCk7XG59XG5jbGFzcyBRdWVyeUVxdWFsVG9WYWx1ZUNvbnN0cmFpbnQgZXh0ZW5kcyBRdWVyeUNvbnN0cmFpbnQge1xuICAgIGNvbnN0cnVjdG9yKF92YWx1ZSwgX2tleSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2VxdWFsVG8nO1xuICAgIH1cbiAgICBfYXBwbHkocXVlcnkpIHtcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ2VxdWFsVG8nLCB0aGlzLl92YWx1ZSwgcXVlcnkuX3BhdGgsIGZhbHNlKTtcbiAgICAgICAgaWYgKHF1ZXJ5Ll9xdWVyeVBhcmFtcy5oYXNTdGFydCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VxdWFsVG86IFN0YXJ0aW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIHN0YXJ0QXQvc3RhcnRBZnRlciBvciAnICtcbiAgICAgICAgICAgICAgICAnZXF1YWxUbykuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXJ5Ll9xdWVyeVBhcmFtcy5oYXNFbmQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcXVhbFRvOiBFbmRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gZW5kQXQvZW5kQmVmb3JlIG9yICcgK1xuICAgICAgICAgICAgICAgICdlcXVhbFRvKS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5RW5kQXRDb25zdHJhaW50KHRoaXMuX3ZhbHVlLCB0aGlzLl9rZXkpLl9hcHBseShuZXcgUXVlcnlTdGFydEF0Q29uc3RyYWludCh0aGlzLl92YWx1ZSwgdGhpcy5fa2V5KS5fYXBwbHkocXVlcnkpKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBgUXVlcnlDb25zdHJhaW50YCB0aGF0IGluY2x1ZGVzIGNoaWxkcmVuIHRoYXQgbWF0Y2ggdGhlIHNwZWNpZmllZFxuICogdmFsdWUuXG4gKlxuICogVXNpbmcgYHN0YXJ0QXQoKWAsIGBzdGFydEFmdGVyKClgLCBgZW5kQmVmb3JlKClgLCBgZW5kQXQoKWAgYW5kIGBlcXVhbFRvKClgXG4gKiBhbGxvd3MgeW91IHRvIGNob29zZSBhcmJpdHJhcnkgc3RhcnRpbmcgYW5kIGVuZGluZyBwb2ludHMgZm9yIHlvdXIgcXVlcmllcy5cbiAqXG4gKiBUaGUgb3B0aW9uYWwga2V5IGFyZ3VtZW50IGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgbGltaXQgdGhlIHJhbmdlIG9mIHRoZVxuICogcXVlcnkuIElmIGl0IGlzIHNwZWNpZmllZCwgdGhlbiBjaGlsZHJlbiB0aGF0IGhhdmUgZXhhY3RseSB0aGUgc3BlY2lmaWVkXG4gKiB2YWx1ZSBtdXN0IGFsc28gaGF2ZSBleGFjdGx5IHRoZSBzcGVjaWZpZWQga2V5IGFzIHRoZWlyIGtleSBuYW1lLiBUaGlzIGNhbiBiZVxuICogdXNlZCB0byBmaWx0ZXIgcmVzdWx0IHNldHMgd2l0aCBtYW55IG1hdGNoZXMgZm9yIHRoZSBzYW1lIHZhbHVlLlxuICpcbiAqIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGBlcXVhbFRvKClgIGluXG4gKiB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvZGF0YWJhc2Uvd2ViL2xpc3RzLW9mLWRhdGEjZmlsdGVyaW5nX2RhdGEgfCBGaWx0ZXJpbmcgZGF0YX0uXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIG1hdGNoIGZvci4gVGhlIGFyZ3VtZW50IHR5cGUgZGVwZW5kcyBvbiB3aGljaFxuICogYG9yZGVyQnkqKClgIGZ1bmN0aW9uIHdhcyB1c2VkIGluIHRoaXMgcXVlcnkuIFNwZWNpZnkgYSB2YWx1ZSB0aGF0IG1hdGNoZXNcbiAqIHRoZSBgb3JkZXJCeSooKWAgdHlwZS4gV2hlbiB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggYG9yZGVyQnlLZXkoKWAsIHRoZVxuICogdmFsdWUgbXVzdCBiZSBhIHN0cmluZy5cbiAqIEBwYXJhbSBrZXkgLSBUaGUgY2hpbGQga2V5IHRvIHN0YXJ0IGF0LCBhbW9uZyB0aGUgY2hpbGRyZW4gd2l0aCB0aGVcbiAqIHByZXZpb3VzbHkgc3BlY2lmaWVkIHByaW9yaXR5LiBUaGlzIGFyZ3VtZW50IGlzIG9ubHkgYWxsb3dlZCBpZiBvcmRlcmluZyBieVxuICogY2hpbGQsIHZhbHVlLCBvciBwcmlvcml0eS5cbiAqL1xuZnVuY3Rpb24gZXF1YWxUbyh2YWx1ZSwga2V5KSB7XG4gICAgdmFsaWRhdGVLZXkoJ2VxdWFsVG8nLCAna2V5Jywga2V5LCB0cnVlKTtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5RXF1YWxUb1ZhbHVlQ29uc3RyYWludCh2YWx1ZSwga2V5KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbW11dGFibGUgaW5zdGFuY2Ugb2YgYFF1ZXJ5YCB0aGF0IGlzIGV4dGVuZGVkIHRvIGFsc28gaW5jbHVkZVxuICogYWRkaXRpb25hbCBxdWVyeSBjb25zdHJhaW50cy5cbiAqXG4gKiBAcGFyYW0gcXVlcnkgLSBUaGUgUXVlcnkgaW5zdGFuY2UgdG8gdXNlIGFzIGEgYmFzZSBmb3IgdGhlIG5ldyBjb25zdHJhaW50cy5cbiAqIEBwYXJhbSBxdWVyeUNvbnN0cmFpbnRzIC0gVGhlIGxpc3Qgb2YgYFF1ZXJ5Q29uc3RyYWludGBzIHRvIGFwcGx5LlxuICogQHRocm93cyBpZiBhbnkgb2YgdGhlIHByb3ZpZGVkIHF1ZXJ5IGNvbnN0cmFpbnRzIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIHRoZVxuICogZXhpc3Rpbmcgb3IgbmV3IGNvbnN0cmFpbnRzLlxuICovXG5mdW5jdGlvbiBxdWVyeShxdWVyeSwgLi4ucXVlcnlDb25zdHJhaW50cykge1xuICAgIGxldCBxdWVyeUltcGwgPSBnZXRNb2R1bGFySW5zdGFuY2UocXVlcnkpO1xuICAgIGZvciAoY29uc3QgY29uc3RyYWludCBvZiBxdWVyeUNvbnN0cmFpbnRzKSB7XG4gICAgICAgIHF1ZXJ5SW1wbCA9IGNvbnN0cmFpbnQuX2FwcGx5KHF1ZXJ5SW1wbCk7XG4gICAgfVxuICAgIHJldHVybiBxdWVyeUltcGw7XG59XG4vKipcbiAqIERlZmluZSByZWZlcmVuY2UgY29uc3RydWN0b3IgaW4gdmFyaW91cyBtb2R1bGVzXG4gKlxuICogV2UgYXJlIGRvaW5nIHRoaXMgaGVyZSB0byBhdm9pZCBzZXZlcmFsIGNpcmN1bGFyXG4gKiBkZXBlbmRlbmN5IGlzc3Vlc1xuICovXG5zeW5jUG9pbnRTZXRSZWZlcmVuY2VDb25zdHJ1Y3RvcihSZWZlcmVuY2VJbXBsKTtcbnN5bmNUcmVlU2V0UmVmZXJlbmNlQ29uc3RydWN0b3IoUmVmZXJlbmNlSW1wbCk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFRoaXMgdmFyaWFibGUgaXMgYWxzbyBkZWZpbmVkIGluIHRoZSBmaXJlYmFzZSBOb2RlLmpzIEFkbWluIFNESy4gQmVmb3JlXG4gKiBtb2RpZnlpbmcgdGhpcyBkZWZpbml0aW9uLCBjb25zdWx0IHRoZSBkZWZpbml0aW9uIGluOlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1hZG1pbi1ub2RlXG4gKlxuICogYW5kIG1ha2Ugc3VyZSB0aGUgdHdvIGFyZSBjb25zaXN0ZW50LlxuICovXG5jb25zdCBGSVJFQkFTRV9EQVRBQkFTRV9FTVVMQVRPUl9IT1NUX1ZBUiA9ICdGSVJFQkFTRV9EQVRBQkFTRV9FTVVMQVRPUl9IT1NUJztcbi8qKlxuICogQ3JlYXRlcyBhbmQgY2FjaGVzIGBSZXBvYCBpbnN0YW5jZXMuXG4gKi9cbmNvbnN0IHJlcG9zID0ge307XG4vKipcbiAqIElmIHRydWUsIGFueSBuZXcgYFJlcG9gIHdpbGwgYmUgY3JlYXRlZCB0byB1c2UgYFJlYWRvbmx5UmVzdENsaWVudGAgKGZvciB0ZXN0aW5nIHB1cnBvc2VzKS5cbiAqL1xubGV0IHVzZVJlc3RDbGllbnQgPSBmYWxzZTtcbi8qKlxuICogVXBkYXRlIGFuIGV4aXN0aW5nIGBSZXBvYCBpbiBwbGFjZSB0byBwb2ludCB0byBhIG5ldyBob3N0L3BvcnQuXG4gKi9cbmZ1bmN0aW9uIHJlcG9NYW5hZ2VyQXBwbHlFbXVsYXRvclNldHRpbmdzKHJlcG8sIGhvc3QsIHBvcnQsIHRva2VuUHJvdmlkZXIpIHtcbiAgICByZXBvLnJlcG9JbmZvXyA9IG5ldyBSZXBvSW5mbyhgJHtob3N0fToke3BvcnR9YCwgXG4gICAgLyogc2VjdXJlPSAqLyBmYWxzZSwgcmVwby5yZXBvSW5mb18ubmFtZXNwYWNlLCByZXBvLnJlcG9JbmZvXy53ZWJTb2NrZXRPbmx5LCByZXBvLnJlcG9JbmZvXy5ub2RlQWRtaW4sIHJlcG8ucmVwb0luZm9fLnBlcnNpc3RlbmNlS2V5LCByZXBvLnJlcG9JbmZvXy5pbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcywgXG4gICAgLyppc1VzaW5nRW11bGF0b3I9Ki8gdHJ1ZSk7XG4gICAgaWYgKHRva2VuUHJvdmlkZXIpIHtcbiAgICAgICAgcmVwby5hdXRoVG9rZW5Qcm92aWRlcl8gPSB0b2tlblByb3ZpZGVyO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBldmVyIGJlIGNhbGxlZCB0byBDUkVBVEUgYSBuZXcgZGF0YWJhc2UgaW5zdGFuY2UuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVwb01hbmFnZXJEYXRhYmFzZUZyb21BcHAoYXBwLCBhdXRoUHJvdmlkZXIsIGFwcENoZWNrUHJvdmlkZXIsIHVybCwgbm9kZUFkbWluKSB7XG4gICAgbGV0IGRiVXJsID0gdXJsIHx8IGFwcC5vcHRpb25zLmRhdGFiYXNlVVJMO1xuICAgIGlmIChkYlVybCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghYXBwLm9wdGlvbnMucHJvamVjdElkKSB7XG4gICAgICAgICAgICBmYXRhbChcIkNhbid0IGRldGVybWluZSBGaXJlYmFzZSBEYXRhYmFzZSBVUkwuIEJlIHN1cmUgdG8gaW5jbHVkZSBcIiArXG4gICAgICAgICAgICAgICAgJyBhIFByb2plY3QgSUQgd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKS4nKTtcbiAgICAgICAgfVxuICAgICAgICBsb2coJ1VzaW5nIGRlZmF1bHQgaG9zdCBmb3IgcHJvamVjdCAnLCBhcHAub3B0aW9ucy5wcm9qZWN0SWQpO1xuICAgICAgICBkYlVybCA9IGAke2FwcC5vcHRpb25zLnByb2plY3RJZH0tZGVmYXVsdC1ydGRiLmZpcmViYXNlaW8uY29tYDtcbiAgICB9XG4gICAgbGV0IHBhcnNlZFVybCA9IHBhcnNlUmVwb0luZm8oZGJVcmwsIG5vZGVBZG1pbik7XG4gICAgbGV0IHJlcG9JbmZvID0gcGFyc2VkVXJsLnJlcG9JbmZvO1xuICAgIGxldCBpc0VtdWxhdG9yO1xuICAgIGxldCBkYkVtdWxhdG9ySG9zdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52KSB7XG4gICAgICAgIGRiRW11bGF0b3JIb3N0ID0gcHJvY2Vzcy5lbnZbRklSRUJBU0VfREFUQUJBU0VfRU1VTEFUT1JfSE9TVF9WQVJdO1xuICAgIH1cbiAgICBpZiAoZGJFbXVsYXRvckhvc3QpIHtcbiAgICAgICAgaXNFbXVsYXRvciA9IHRydWU7XG4gICAgICAgIGRiVXJsID0gYGh0dHA6Ly8ke2RiRW11bGF0b3JIb3N0fT9ucz0ke3JlcG9JbmZvLm5hbWVzcGFjZX1gO1xuICAgICAgICBwYXJzZWRVcmwgPSBwYXJzZVJlcG9JbmZvKGRiVXJsLCBub2RlQWRtaW4pO1xuICAgICAgICByZXBvSW5mbyA9IHBhcnNlZFVybC5yZXBvSW5mbztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlzRW11bGF0b3IgPSAhcGFyc2VkVXJsLnJlcG9JbmZvLnNlY3VyZTtcbiAgICB9XG4gICAgY29uc3QgYXV0aFRva2VuUHJvdmlkZXIgPSBub2RlQWRtaW4gJiYgaXNFbXVsYXRvclxuICAgICAgICA/IG5ldyBFbXVsYXRvclRva2VuUHJvdmlkZXIoRW11bGF0b3JUb2tlblByb3ZpZGVyLk9XTkVSKVxuICAgICAgICA6IG5ldyBGaXJlYmFzZUF1dGhUb2tlblByb3ZpZGVyKGFwcC5uYW1lLCBhcHAub3B0aW9ucywgYXV0aFByb3ZpZGVyKTtcbiAgICB2YWxpZGF0ZVVybCgnSW52YWxpZCBGaXJlYmFzZSBEYXRhYmFzZSBVUkwnLCBwYXJzZWRVcmwpO1xuICAgIGlmICghcGF0aElzRW1wdHkocGFyc2VkVXJsLnBhdGgpKSB7XG4gICAgICAgIGZhdGFsKCdEYXRhYmFzZSBVUkwgbXVzdCBwb2ludCB0byB0aGUgcm9vdCBvZiBhIEZpcmViYXNlIERhdGFiYXNlICcgK1xuICAgICAgICAgICAgJyhub3QgaW5jbHVkaW5nIGEgY2hpbGQgcGF0aCkuJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcG8gPSByZXBvTWFuYWdlckNyZWF0ZVJlcG8ocmVwb0luZm8sIGFwcCwgYXV0aFRva2VuUHJvdmlkZXIsIG5ldyBBcHBDaGVja1Rva2VuUHJvdmlkZXIoYXBwLm5hbWUsIGFwcENoZWNrUHJvdmlkZXIpKTtcbiAgICByZXR1cm4gbmV3IERhdGFiYXNlKHJlcG8sIGFwcCk7XG59XG4vKipcbiAqIFJlbW92ZSB0aGUgcmVwbyBhbmQgbWFrZSBzdXJlIGl0IGlzIGRpc2Nvbm5lY3RlZC5cbiAqXG4gKi9cbmZ1bmN0aW9uIHJlcG9NYW5hZ2VyRGVsZXRlUmVwbyhyZXBvLCBhcHBOYW1lKSB7XG4gICAgY29uc3QgYXBwUmVwb3MgPSByZXBvc1thcHBOYW1lXTtcbiAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uLi5cbiAgICBpZiAoIWFwcFJlcG9zIHx8IGFwcFJlcG9zW3JlcG8ua2V5XSAhPT0gcmVwbykge1xuICAgICAgICBmYXRhbChgRGF0YWJhc2UgJHthcHBOYW1lfSgke3JlcG8ucmVwb0luZm9ffSkgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkLmApO1xuICAgIH1cbiAgICByZXBvSW50ZXJydXB0KHJlcG8pO1xuICAgIGRlbGV0ZSBhcHBSZXBvc1tyZXBvLmtleV07XG59XG4vKipcbiAqIEVuc3VyZXMgYSByZXBvIGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBhbmQgdGhlbiBjcmVhdGVzIG9uZSB1c2luZyB0aGVcbiAqIHByb3ZpZGVkIGFwcC5cbiAqXG4gKiBAcGFyYW0gcmVwb0luZm8gLSBUaGUgbWV0YWRhdGEgYWJvdXQgdGhlIFJlcG9cbiAqIEByZXR1cm5zIFRoZSBSZXBvIG9iamVjdCBmb3IgdGhlIHNwZWNpZmllZCBzZXJ2ZXIgLyByZXBvTmFtZS5cbiAqL1xuZnVuY3Rpb24gcmVwb01hbmFnZXJDcmVhdGVSZXBvKHJlcG9JbmZvLCBhcHAsIGF1dGhUb2tlblByb3ZpZGVyLCBhcHBDaGVja1Byb3ZpZGVyKSB7XG4gICAgbGV0IGFwcFJlcG9zID0gcmVwb3NbYXBwLm5hbWVdO1xuICAgIGlmICghYXBwUmVwb3MpIHtcbiAgICAgICAgYXBwUmVwb3MgPSB7fTtcbiAgICAgICAgcmVwb3NbYXBwLm5hbWVdID0gYXBwUmVwb3M7XG4gICAgfVxuICAgIGxldCByZXBvID0gYXBwUmVwb3NbcmVwb0luZm8udG9VUkxTdHJpbmcoKV07XG4gICAgaWYgKHJlcG8pIHtcbiAgICAgICAgZmF0YWwoJ0RhdGFiYXNlIGluaXRpYWxpemVkIG11bHRpcGxlIHRpbWVzLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBmb3JtYXQgb2YgdGhlIGRhdGFiYXNlIFVSTCBtYXRjaGVzIHdpdGggZWFjaCBkYXRhYmFzZSgpIGNhbGwuJyk7XG4gICAgfVxuICAgIHJlcG8gPSBuZXcgUmVwbyhyZXBvSW5mbywgdXNlUmVzdENsaWVudCwgYXV0aFRva2VuUHJvdmlkZXIsIGFwcENoZWNrUHJvdmlkZXIpO1xuICAgIGFwcFJlcG9zW3JlcG9JbmZvLnRvVVJMU3RyaW5nKCldID0gcmVwbztcbiAgICByZXR1cm4gcmVwbztcbn1cbi8qKlxuICogRm9yY2VzIHVzIHRvIHVzZSBSZWFkb25seVJlc3RDbGllbnQgaW5zdGVhZCBvZiBQZXJzaXN0ZW50Q29ubmVjdGlvbiBmb3IgbmV3IFJlcG9zLlxuICovXG5mdW5jdGlvbiByZXBvTWFuYWdlckZvcmNlUmVzdENsaWVudChmb3JjZVJlc3RDbGllbnQpIHtcbiAgICB1c2VSZXN0Q2xpZW50ID0gZm9yY2VSZXN0Q2xpZW50O1xufVxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBGaXJlYmFzZSBSZWFsdGltZSBEYXRhYmFzZS5cbiAqL1xuY2xhc3MgRGF0YWJhc2Uge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoX3JlcG9JbnRlcm5hbCwgXG4gICAgLyoqIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gYXNzb2NpYXRlZCB3aXRoIHRoaXMgUmVhbHRpbWUgRGF0YWJhc2UgaW5zdGFuY2UuICovXG4gICAgYXBwKSB7XG4gICAgICAgIHRoaXMuX3JlcG9JbnRlcm5hbCA9IF9yZXBvSW50ZXJuYWw7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICAvKiogUmVwcmVzZW50cyBhIGBEYXRhYmFzZWAgaW5zdGFuY2UuICovXG4gICAgICAgIHRoaXNbJ3R5cGUnXSA9ICdkYXRhYmFzZSc7XG4gICAgICAgIC8qKiBUcmFjayBpZiB0aGUgaW5zdGFuY2UgaGFzIGJlZW4gdXNlZCAocm9vdCBvciByZXBvIGFjY2Vzc2VkKSAqL1xuICAgICAgICB0aGlzLl9pbnN0YW5jZVN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IF9yZXBvKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlU3RhcnRlZCkge1xuICAgICAgICAgICAgcmVwb1N0YXJ0KHRoaXMuX3JlcG9JbnRlcm5hbCwgdGhpcy5hcHAub3B0aW9ucy5hcHBJZCwgdGhpcy5hcHAub3B0aW9uc1snZGF0YWJhc2VBdXRoVmFyaWFibGVPdmVycmlkZSddKTtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlU3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlcG9JbnRlcm5hbDtcbiAgICB9XG4gICAgZ2V0IF9yb290KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Jvb3RJbnRlcm5hbCkge1xuICAgICAgICAgICAgdGhpcy5fcm9vdEludGVybmFsID0gbmV3IFJlZmVyZW5jZUltcGwodGhpcy5fcmVwbywgbmV3RW1wdHlQYXRoKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yb290SW50ZXJuYWw7XG4gICAgfVxuICAgIF9kZWxldGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yb290SW50ZXJuYWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlcG9NYW5hZ2VyRGVsZXRlUmVwbyh0aGlzLl9yZXBvLCB0aGlzLmFwcC5uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcG9JbnRlcm5hbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yb290SW50ZXJuYWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgX2NoZWNrTm90RGVsZXRlZChhcGlOYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9yb290SW50ZXJuYWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGZhdGFsKCdDYW5ub3QgY2FsbCAnICsgYXBpTmFtZSArICcgb24gYSBkZWxldGVkIGRhdGFiYXNlLicpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tUcmFuc3BvcnRJbml0KCkge1xuICAgIGlmIChUcmFuc3BvcnRNYW5hZ2VyLklTX1RSQU5TUE9SVF9JTklUSUFMSVpFRCkge1xuICAgICAgICB3YXJuKCdUcmFuc3BvcnQgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZC4gUGxlYXNlIGNhbGwgdGhpcyBmdW5jdGlvbiBiZWZvcmUgY2FsbGluZyByZWYgb3Igc2V0dGluZyB1cCBhIGxpc3RlbmVyJyk7XG4gICAgfVxufVxuLyoqXG4gKiBGb3JjZSB0aGUgdXNlIG9mIHdlYnNvY2tldHMgaW5zdGVhZCBvZiBsb25nUG9sbGluZy5cbiAqL1xuZnVuY3Rpb24gZm9yY2VXZWJTb2NrZXRzKCkge1xuICAgIGNoZWNrVHJhbnNwb3J0SW5pdCgpO1xuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZURpc2FsbG93KCk7XG59XG4vKipcbiAqIEZvcmNlIHRoZSB1c2Ugb2YgbG9uZ1BvbGxpbmcgaW5zdGVhZCBvZiB3ZWJzb2NrZXRzLiBUaGlzIHdpbGwgYmUgaWdub3JlZCBpZiB3ZWJzb2NrZXQgcHJvdG9jb2wgaXMgdXNlZCBpbiBkYXRhYmFzZVVSTC5cbiAqL1xuZnVuY3Rpb24gZm9yY2VMb25nUG9sbGluZygpIHtcbiAgICBjaGVja1RyYW5zcG9ydEluaXQoKTtcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3coKTtcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24uZm9yY2VBbGxvdygpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnN0YW5jZSBvZiB0aGUgUmVhbHRpbWUgRGF0YWJhc2UgU0RLIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZFxuICoge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9LiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSB3aXRoIGRlZmF1bHQgc2V0dGluZ3MgaWZcbiAqIG5vIGluc3RhbmNlIGV4aXN0cyBvciBpZiB0aGUgZXhpc3RpbmcgaW5zdGFuY2UgdXNlcyBhIGN1c3RvbSBkYXRhYmFzZSBVUkwuXG4gKlxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UgdGhhdCB0aGUgcmV0dXJuZWQgUmVhbHRpbWVcbiAqIERhdGFiYXNlIGluc3RhbmNlIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqIEBwYXJhbSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBSZWFsdGltZSBEYXRhYmFzZSBpbnN0YW5jZSB0byBjb25uZWN0IHRvLiBJZiBub3RcbiAqIHByb3ZpZGVkLCB0aGUgU0RLIGNvbm5lY3RzIHRvIHRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIHRoZSBGaXJlYmFzZSBBcHAuXG4gKiBAcmV0dXJucyBUaGUgYERhdGFiYXNlYCBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZWQgYXBwLlxuICovXG5mdW5jdGlvbiBnZXREYXRhYmFzZShhcHAgPSBnZXRBcHAoKSwgdXJsKSB7XG4gICAgY29uc3QgZGIgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnZGF0YWJhc2UnKS5nZXRJbW1lZGlhdGUoe1xuICAgICAgICBpZGVudGlmaWVyOiB1cmxcbiAgICB9KTtcbiAgICBpZiAoIWRiLl9pbnN0YW5jZVN0YXJ0ZWQpIHtcbiAgICAgICAgY29uc3QgZW11bGF0b3IgPSBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQoJ2RhdGFiYXNlJyk7XG4gICAgICAgIGlmIChlbXVsYXRvcikge1xuICAgICAgICAgICAgY29ubmVjdERhdGFiYXNlRW11bGF0b3IoZGIsIC4uLmVtdWxhdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGI7XG59XG4vKipcbiAqIE1vZGlmeSB0aGUgcHJvdmlkZWQgaW5zdGFuY2UgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgUmVhbHRpbWUgRGF0YWJhc2VcbiAqIGVtdWxhdG9yLlxuICpcbiAqIDxwPk5vdGU6IFRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBwZXJmb3JtaW5nIGFueSBvdGhlciBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIGRiIC0gVGhlIGluc3RhbmNlIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSBob3N0IC0gVGhlIGVtdWxhdG9yIGhvc3QgKGV4OiBsb2NhbGhvc3QpXG4gKiBAcGFyYW0gcG9ydCAtIFRoZSBlbXVsYXRvciBwb3J0IChleDogODA4MClcbiAqIEBwYXJhbSBvcHRpb25zLm1vY2tVc2VyVG9rZW4gLSB0aGUgbW9jayBhdXRoIHRva2VuIHRvIHVzZSBmb3IgdW5pdCB0ZXN0aW5nIFNlY3VyaXR5IFJ1bGVzXG4gKi9cbmZ1bmN0aW9uIGNvbm5lY3REYXRhYmFzZUVtdWxhdG9yKGRiLCBob3N0LCBwb3J0LCBvcHRpb25zID0ge30pIHtcbiAgICBkYiA9IGdldE1vZHVsYXJJbnN0YW5jZShkYik7XG4gICAgZGIuX2NoZWNrTm90RGVsZXRlZCgndXNlRW11bGF0b3InKTtcbiAgICBpZiAoZGIuX2luc3RhbmNlU3RhcnRlZCkge1xuICAgICAgICBmYXRhbCgnQ2Fubm90IGNhbGwgdXNlRW11bGF0b3IoKSBhZnRlciBpbnN0YW5jZSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLicpO1xuICAgIH1cbiAgICBjb25zdCByZXBvID0gZGIuX3JlcG9JbnRlcm5hbDtcbiAgICBsZXQgdG9rZW5Qcm92aWRlciA9IHVuZGVmaW5lZDtcbiAgICBpZiAocmVwby5yZXBvSW5mb18ubm9kZUFkbWluKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm1vY2tVc2VyVG9rZW4pIHtcbiAgICAgICAgICAgIGZhdGFsKCdtb2NrVXNlclRva2VuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIEFkbWluIFNESy4gRm9yIGNsaWVudCBhY2Nlc3Mgd2l0aCBtb2NrIHVzZXJzLCBwbGVhc2UgdXNlIHRoZSBcImZpcmViYXNlXCIgcGFja2FnZSBpbnN0ZWFkIG9mIFwiZmlyZWJhc2UtYWRtaW5cIi4nKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlblByb3ZpZGVyID0gbmV3IEVtdWxhdG9yVG9rZW5Qcm92aWRlcihFbXVsYXRvclRva2VuUHJvdmlkZXIuT1dORVIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zLm1vY2tVc2VyVG9rZW4pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0eXBlb2Ygb3B0aW9ucy5tb2NrVXNlclRva2VuID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBvcHRpb25zLm1vY2tVc2VyVG9rZW5cbiAgICAgICAgICAgIDogY3JlYXRlTW9ja1VzZXJUb2tlbihvcHRpb25zLm1vY2tVc2VyVG9rZW4sIGRiLmFwcC5vcHRpb25zLnByb2plY3RJZCk7XG4gICAgICAgIHRva2VuUHJvdmlkZXIgPSBuZXcgRW11bGF0b3JUb2tlblByb3ZpZGVyKHRva2VuKTtcbiAgICB9XG4gICAgLy8gTW9kaWZ5IHRoZSByZXBvIHRvIGFwcGx5IGVtdWxhdG9yIHNldHRpbmdzXG4gICAgcmVwb01hbmFnZXJBcHBseUVtdWxhdG9yU2V0dGluZ3MocmVwbywgaG9zdCwgcG9ydCwgdG9rZW5Qcm92aWRlcik7XG59XG4vKipcbiAqIERpc2Nvbm5lY3RzIGZyb20gdGhlIHNlcnZlciAoYWxsIERhdGFiYXNlIG9wZXJhdGlvbnMgd2lsbCBiZSBjb21wbGV0ZWRcbiAqIG9mZmxpbmUpLlxuICpcbiAqIFRoZSBjbGllbnQgYXV0b21hdGljYWxseSBtYWludGFpbnMgYSBwZXJzaXN0ZW50IGNvbm5lY3Rpb24gdG8gdGhlIERhdGFiYXNlXG4gKiBzZXJ2ZXIsIHdoaWNoIHdpbGwgcmVtYWluIGFjdGl2ZSBpbmRlZmluaXRlbHkgYW5kIHJlY29ubmVjdCB3aGVuXG4gKiBkaXNjb25uZWN0ZWQuIEhvd2V2ZXIsIHRoZSBgZ29PZmZsaW5lKClgIGFuZCBgZ29PbmxpbmUoKWAgbWV0aG9kcyBtYXkgYmUgdXNlZFxuICogdG8gY29udHJvbCB0aGUgY2xpZW50IGNvbm5lY3Rpb24gaW4gY2FzZXMgd2hlcmUgYSBwZXJzaXN0ZW50IGNvbm5lY3Rpb24gaXNcbiAqIHVuZGVzaXJhYmxlLlxuICpcbiAqIFdoaWxlIG9mZmxpbmUsIHRoZSBjbGllbnQgd2lsbCBubyBsb25nZXIgcmVjZWl2ZSBkYXRhIHVwZGF0ZXMgZnJvbSB0aGVcbiAqIERhdGFiYXNlLiBIb3dldmVyLCBhbGwgRGF0YWJhc2Ugb3BlcmF0aW9ucyBwZXJmb3JtZWQgbG9jYWxseSB3aWxsIGNvbnRpbnVlIHRvXG4gKiBpbW1lZGlhdGVseSBmaXJlIGV2ZW50cywgYWxsb3dpbmcgeW91ciBhcHBsaWNhdGlvbiB0byBjb250aW51ZSBiZWhhdmluZ1xuICogbm9ybWFsbHkuIEFkZGl0aW9uYWxseSwgZWFjaCBvcGVyYXRpb24gcGVyZm9ybWVkIGxvY2FsbHkgd2lsbCBhdXRvbWF0aWNhbGx5XG4gKiBiZSBxdWV1ZWQgYW5kIHJldHJpZWQgdXBvbiByZWNvbm5lY3Rpb24gdG8gdGhlIERhdGFiYXNlIHNlcnZlci5cbiAqXG4gKiBUbyByZWNvbm5lY3QgdG8gdGhlIERhdGFiYXNlIGFuZCBiZWdpbiByZWNlaXZpbmcgcmVtb3RlIGV2ZW50cywgc2VlXG4gKiBgZ29PbmxpbmUoKWAuXG4gKlxuICogQHBhcmFtIGRiIC0gVGhlIGluc3RhbmNlIHRvIGRpc2Nvbm5lY3QuXG4gKi9cbmZ1bmN0aW9uIGdvT2ZmbGluZShkYikge1xuICAgIGRiID0gZ2V0TW9kdWxhckluc3RhbmNlKGRiKTtcbiAgICBkYi5fY2hlY2tOb3REZWxldGVkKCdnb09mZmxpbmUnKTtcbiAgICByZXBvSW50ZXJydXB0KGRiLl9yZXBvKTtcbn1cbi8qKlxuICogUmVjb25uZWN0cyB0byB0aGUgc2VydmVyIGFuZCBzeW5jaHJvbml6ZXMgdGhlIG9mZmxpbmUgRGF0YWJhc2Ugc3RhdGVcbiAqIHdpdGggdGhlIHNlcnZlciBzdGF0ZS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBhZnRlciBkaXNhYmxpbmcgdGhlIGFjdGl2ZSBjb25uZWN0aW9uIHdpdGhcbiAqIGBnb09mZmxpbmUoKWAuIE9uY2UgcmVjb25uZWN0ZWQsIHRoZSBjbGllbnQgd2lsbCB0cmFuc21pdCB0aGUgcHJvcGVyIGRhdGFcbiAqIGFuZCBmaXJlIHRoZSBhcHByb3ByaWF0ZSBldmVudHMgc28gdGhhdCB5b3VyIGNsaWVudCBcImNhdGNoZXMgdXBcIlxuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcGFyYW0gZGIgLSBUaGUgaW5zdGFuY2UgdG8gcmVjb25uZWN0LlxuICovXG5mdW5jdGlvbiBnb09ubGluZShkYikge1xuICAgIGRiID0gZ2V0TW9kdWxhckluc3RhbmNlKGRiKTtcbiAgICBkYi5fY2hlY2tOb3REZWxldGVkKCdnb09ubGluZScpO1xuICAgIHJlcG9SZXN1bWUoZGIuX3JlcG8pO1xufVxuZnVuY3Rpb24gZW5hYmxlTG9nZ2luZyhsb2dnZXIsIHBlcnNpc3RlbnQpIHtcbiAgICBlbmFibGVMb2dnaW5nJDEobG9nZ2VyLCBwZXJzaXN0ZW50KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRGF0YWJhc2UodmFyaWFudCkge1xuICAgIHNldFNES1ZlcnNpb24oU0RLX1ZFUlNJT04kMSk7XG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2RhdGFiYXNlJywgKGNvbnRhaW5lciwgeyBpbnN0YW5jZUlkZW50aWZpZXI6IHVybCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XG4gICAgICAgIGNvbnN0IGF1dGhQcm92aWRlciA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXV0aC1pbnRlcm5hbCcpO1xuICAgICAgICBjb25zdCBhcHBDaGVja1Byb3ZpZGVyID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAtY2hlY2staW50ZXJuYWwnKTtcbiAgICAgICAgcmV0dXJuIHJlcG9NYW5hZ2VyRGF0YWJhc2VGcm9tQXBwKGFwcCwgYXV0aFByb3ZpZGVyLCBhcHBDaGVja1Byb3ZpZGVyLCB1cmwpO1xuICAgIH0sIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pLnNldE11bHRpcGxlSW5zdGFuY2VzKHRydWUpKTtcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgdmFyaWFudCk7XG4gICAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtMjAxNywgY2pzMjAxNywgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cbiAgICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2VzbTIwMTcnKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFNFUlZFUl9USU1FU1RBTVAgPSB7XG4gICAgJy5zdic6ICd0aW1lc3RhbXAnXG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGF1dG8tcG9wdWxhdGluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAgKHRpbWVcbiAqIHNpbmNlIHRoZSBVbml4IGVwb2NoLCBpbiBtaWxsaXNlY29uZHMpIGFzIGRldGVybWluZWQgYnkgdGhlIEZpcmViYXNlXG4gKiBzZXJ2ZXJzLlxuICovXG5mdW5jdGlvbiBzZXJ2ZXJUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIFNFUlZFUl9USU1FU1RBTVA7XG59XG4vKipcbiAqIFJldHVybnMgYSBwbGFjZWhvbGRlciB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGF0b21pY2FsbHkgaW5jcmVtZW50IHRoZVxuICogY3VycmVudCBkYXRhYmFzZSB2YWx1ZSBieSB0aGUgcHJvdmlkZWQgZGVsdGEuXG4gKlxuICogQHBhcmFtIGRlbHRhIC0gdGhlIGFtb3VudCB0byBtb2RpZnkgdGhlIGN1cnJlbnQgdmFsdWUgYXRvbWljYWxseS5cbiAqIEByZXR1cm5zIEEgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIG1vZGlmeWluZyBkYXRhIGF0b21pY2FsbHkgc2VydmVyLXNpZGUuXG4gKi9cbmZ1bmN0aW9uIGluY3JlbWVudChkZWx0YSkge1xuICAgIHJldHVybiB7XG4gICAgICAgICcuc3YnOiB7XG4gICAgICAgICAgICAnaW5jcmVtZW50JzogZGVsdGFcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEEgdHlwZSBmb3IgdGhlIHJlc29sdmUgdmFsdWUgb2Yge0BsaW5rIHJ1blRyYW5zYWN0aW9ufS5cbiAqL1xuY2xhc3MgVHJhbnNhY3Rpb25SZXN1bHQge1xuICAgIC8qKiBAaGlkZWNvbnN0cnVjdG9yICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIFdoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIHdhcyBzdWNjZXNzZnVsbHkgY29tbWl0dGVkLiAqL1xuICAgIGNvbW1pdHRlZCwgXG4gICAgLyoqIFRoZSByZXN1bHRpbmcgZGF0YSBzbmFwc2hvdC4gKi9cbiAgICBzbmFwc2hvdCkge1xuICAgICAgICB0aGlzLmNvbW1pdHRlZCA9IGNvbW1pdHRlZDtcbiAgICAgICAgdGhpcy5zbmFwc2hvdCA9IHNuYXBzaG90O1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIEpTT04tc2VyaWFsaXphYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgb2JqZWN0LiAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHsgY29tbWl0dGVkOiB0aGlzLmNvbW1pdHRlZCwgc25hcHNob3Q6IHRoaXMuc25hcHNob3QudG9KU09OKCkgfTtcbiAgICB9XG59XG4vKipcbiAqIEF0b21pY2FsbHkgbW9kaWZpZXMgdGhlIGRhdGEgYXQgdGhpcyBsb2NhdGlvbi5cbiAqXG4gKiBBdG9taWNhbGx5IG1vZGlmeSB0aGUgZGF0YSBhdCB0aGlzIGxvY2F0aW9uLiBVbmxpa2UgYSBub3JtYWwgYHNldCgpYCwgd2hpY2hcbiAqIGp1c3Qgb3ZlcndyaXRlcyB0aGUgZGF0YSByZWdhcmRsZXNzIG9mIGl0cyBwcmV2aW91cyB2YWx1ZSwgYHJ1blRyYW5zYWN0aW9uKClgIGlzXG4gKiB1c2VkIHRvIG1vZGlmeSB0aGUgZXhpc3RpbmcgdmFsdWUgdG8gYSBuZXcgdmFsdWUsIGVuc3VyaW5nIHRoZXJlIGFyZSBub1xuICogY29uZmxpY3RzIHdpdGggb3RoZXIgY2xpZW50cyB3cml0aW5nIHRvIHRoZSBzYW1lIGxvY2F0aW9uIGF0IHRoZSBzYW1lIHRpbWUuXG4gKlxuICogVG8gYWNjb21wbGlzaCB0aGlzLCB5b3UgcGFzcyBgcnVuVHJhbnNhY3Rpb24oKWAgYW4gdXBkYXRlIGZ1bmN0aW9uIHdoaWNoIGlzXG4gKiB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgY3VycmVudCB2YWx1ZSBpbnRvIGEgbmV3IHZhbHVlLiBJZiBhbm90aGVyIGNsaWVudFxuICogd3JpdGVzIHRvIHRoZSBsb2NhdGlvbiBiZWZvcmUgeW91ciBuZXcgdmFsdWUgaXMgc3VjY2Vzc2Z1bGx5IHdyaXR0ZW4sIHlvdXJcbiAqIHVwZGF0ZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoIHRoZSBuZXcgY3VycmVudCB2YWx1ZSwgYW5kIHRoZVxuICogd3JpdGUgd2lsbCBiZSByZXRyaWVkLiBUaGlzIHdpbGwgaGFwcGVuIHJlcGVhdGVkbHkgdW50aWwgeW91ciB3cml0ZSBzdWNjZWVkc1xuICogd2l0aG91dCBjb25mbGljdCBvciB5b3UgYWJvcnQgdGhlIHRyYW5zYWN0aW9uIGJ5IG5vdCByZXR1cm5pbmcgYSB2YWx1ZSBmcm9tXG4gKiB5b3VyIHVwZGF0ZSBmdW5jdGlvbi5cbiAqXG4gKiBOb3RlOiBNb2RpZnlpbmcgZGF0YSB3aXRoIGBzZXQoKWAgd2lsbCBjYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNhY3Rpb25zIGF0XG4gKiB0aGF0IGxvY2F0aW9uLCBzbyBleHRyZW1lIGNhcmUgc2hvdWxkIGJlIHRha2VuIGlmIG1peGluZyBgc2V0KClgIGFuZFxuICogYHJ1blRyYW5zYWN0aW9uKClgIHRvIHVwZGF0ZSB0aGUgc2FtZSBkYXRhLlxuICpcbiAqIE5vdGU6IFdoZW4gdXNpbmcgdHJhbnNhY3Rpb25zIHdpdGggU2VjdXJpdHkgYW5kIEZpcmViYXNlIFJ1bGVzIGluIHBsYWNlLCBiZVxuICogYXdhcmUgdGhhdCBhIGNsaWVudCBuZWVkcyBgLnJlYWRgIGFjY2VzcyBpbiBhZGRpdGlvbiB0byBgLndyaXRlYCBhY2Nlc3MgaW5cbiAqIG9yZGVyIHRvIHBlcmZvcm0gYSB0cmFuc2FjdGlvbi4gVGhpcyBpcyBiZWNhdXNlIHRoZSBjbGllbnQtc2lkZSBuYXR1cmUgb2ZcbiAqIHRyYW5zYWN0aW9ucyByZXF1aXJlcyB0aGUgY2xpZW50IHRvIHJlYWQgdGhlIGRhdGEgaW4gb3JkZXIgdG8gdHJhbnNhY3Rpb25hbGx5XG4gKiB1cGRhdGUgaXQuXG4gKlxuICogQHBhcmFtIHJlZiAtIFRoZSBsb2NhdGlvbiB0byBhdG9taWNhbGx5IG1vZGlmeS5cbiAqIEBwYXJhbSB0cmFuc2FjdGlvblVwZGF0ZSAtIEEgZGV2ZWxvcGVyLXN1cHBsaWVkIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgcGFzc2VkXG4gKiB0aGUgY3VycmVudCBkYXRhIHN0b3JlZCBhdCB0aGlzIGxvY2F0aW9uIChhcyBhIEphdmFTY3JpcHQgb2JqZWN0KS4gVGhlXG4gKiBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRoZSBuZXcgdmFsdWUgaXQgd291bGQgbGlrZSB3cml0dGVuIChhcyBhIEphdmFTY3JpcHRcbiAqIG9iamVjdCkuIElmIGB1bmRlZmluZWRgIGlzIHJldHVybmVkIChpLmUuIHlvdSByZXR1cm4gd2l0aCBubyBhcmd1bWVudHMpIHRoZVxuICogdHJhbnNhY3Rpb24gd2lsbCBiZSBhYm9ydGVkIGFuZCB0aGUgZGF0YSBhdCB0aGlzIGxvY2F0aW9uIHdpbGwgbm90IGJlXG4gKiBtb2RpZmllZC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb3B0aW9ucyBvYmplY3QgdG8gY29uZmlndXJlIHRyYW5zYWN0aW9ucy5cbiAqIEByZXR1cm5zIEEgYFByb21pc2VgIHRoYXQgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBgb25Db21wbGV0ZWBcbiAqIGNhbGxiYWNrIHRvIGhhbmRsZSBzdWNjZXNzIGFuZCBmYWlsdXJlLlxuICovXG5mdW5jdGlvbiBydW5UcmFuc2FjdGlvbihyZWYsIFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnRyYW5zYWN0aW9uVXBkYXRlLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIHJlZiA9IGdldE1vZHVsYXJJbnN0YW5jZShyZWYpO1xuICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdSZWZlcmVuY2UudHJhbnNhY3Rpb24nLCByZWYuX3BhdGgpO1xuICAgIGlmIChyZWYua2V5ID09PSAnLmxlbmd0aCcgfHwgcmVmLmtleSA9PT0gJy5rZXlzJykge1xuICAgICAgICB0aHJvdyAoJ1JlZmVyZW5jZS50cmFuc2FjdGlvbiBmYWlsZWQ6ICcgKyByZWYua2V5ICsgJyBpcyBhIHJlYWQtb25seSBvYmplY3QuJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwcGx5TG9jYWxseSA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hcHBseUxvY2FsbHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBjb25zdCBwcm9taXNlQ29tcGxldGUgPSAoZXJyb3IsIGNvbW1pdHRlZCwgbm9kZSkgPT4ge1xuICAgICAgICBsZXQgZGF0YVNuYXBzaG90ID0gbnVsbDtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YVNuYXBzaG90ID0gbmV3IERhdGFTbmFwc2hvdChub2RlLCBuZXcgUmVmZXJlbmNlSW1wbChyZWYuX3JlcG8sIHJlZi5fcGF0aCksIFBSSU9SSVRZX0lOREVYKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUobmV3IFRyYW5zYWN0aW9uUmVzdWx0KGNvbW1pdHRlZCwgZGF0YVNuYXBzaG90KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEFkZCBhIHdhdGNoIHRvIG1ha2Ugc3VyZSB3ZSBnZXQgc2VydmVyIHVwZGF0ZXMuXG4gICAgY29uc3QgdW53YXRjaGVyID0gb25WYWx1ZShyZWYsICgpID0+IHsgfSk7XG4gICAgcmVwb1N0YXJ0VHJhbnNhY3Rpb24ocmVmLl9yZXBvLCByZWYuX3BhdGgsIHRyYW5zYWN0aW9uVXBkYXRlLCBwcm9taXNlQ29tcGxldGUsIHVud2F0Y2hlciwgYXBwbHlMb2NhbGx5KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblBlcnNpc3RlbnRDb25uZWN0aW9uO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zaW1wbGVMaXN0ZW4gPSBmdW5jdGlvbiAocGF0aFN0cmluZywgb25Db21wbGV0ZSkge1xuICAgIHRoaXMuc2VuZFJlcXVlc3QoJ3EnLCB7IHA6IHBhdGhTdHJpbmcgfSwgb25Db21wbGV0ZSk7XG59O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5lY2hvID0gZnVuY3Rpb24gKGRhdGEsIG9uRWNobykge1xuICAgIHRoaXMuc2VuZFJlcXVlc3QoJ2VjaG8nLCB7IGQ6IGRhdGEgfSwgb25FY2hvKTtcbn07XG4vLyBSZWFsVGltZUNvbm5lY3Rpb24gcHJvcGVydGllcyB0aGF0IHdlIHVzZSBpbiB0ZXN0cy5cbkNvbm5lY3Rpb247XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBoaWphY2tIYXNoID0gZnVuY3Rpb24gKG5ld0hhc2gpIHtcbiAgICBjb25zdCBvbGRQdXQgPSBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucHV0O1xuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xuICAgICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoYXNoID0gbmV3SGFzaCgpO1xuICAgICAgICB9XG4gICAgICAgIG9sZFB1dC5jYWxsKHRoaXMsIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnB1dCA9IG9sZFB1dDtcbiAgICB9O1xufTtcblJlcG9JbmZvO1xuLyoqXG4gKiBGb3JjZXMgdGhlIFJlcG9NYW5hZ2VyIHRvIGNyZWF0ZSBSZXBvcyB0aGF0IHVzZSBSZWFkb25seVJlc3RDbGllbnQgaW5zdGVhZCBvZiBQZXJzaXN0ZW50Q29ubmVjdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBmb3JjZVJlc3RDbGllbnQgPSBmdW5jdGlvbiAoZm9yY2VSZXN0Q2xpZW50KSB7XG4gICAgcmVwb01hbmFnZXJGb3JjZVJlc3RDbGllbnQoZm9yY2VSZXN0Q2xpZW50KTtcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIzIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFVzZWQgYnkgY29uc29sZSB0byBjcmVhdGUgYSBkYXRhYmFzZSBiYXNlZCBvbiB0aGUgYXBwLFxuICogcGFzc2VkIGRhdGFiYXNlIFVSTCBhbmQgYSBjdXN0b20gYXV0aCBpbXBsZW1lbnRhdGlvbi5cbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGFwcCAtIEEgdmFsaWQgRmlyZWJhc2VBcHAtbGlrZSBvYmplY3RcbiAqIEBwYXJhbSB1cmwgLSBBIHZhbGlkIEZpcmViYXNlIGRhdGFiYXNlVVJMXG4gKiBAcGFyYW0gdmVyc2lvbiAtIGN1c3RvbSB2ZXJzaW9uIGUuZy4gZmlyZWJhc2UtYWRtaW4gdmVyc2lvblxuICogQHBhcmFtIGN1c3RvbUFwcENoZWNrSW1wbCAtIGN1c3RvbSBhcHAgY2hlY2sgaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSBjdXN0b21BdXRoSW1wbCAtIGN1c3RvbSBhdXRoIGltcGxlbWVudGF0aW9uXG4gKi9cbmZ1bmN0aW9uIF9pbml0U3RhbmRhbG9uZSh7IGFwcCwgdXJsLCB2ZXJzaW9uLCBjdXN0b21BdXRoSW1wbCwgY3VzdG9tQXBwQ2hlY2tJbXBsLCBub2RlQWRtaW4gPSBmYWxzZSB9KSB7XG4gICAgc2V0U0RLVmVyc2lvbih2ZXJzaW9uKTtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnRDb250YWluZXIoJ2RhdGFiYXNlLXN0YW5kYWxvbmUnKSBpcyBqdXN0IGEgcGxhY2Vob2xkZXIgdGhhdCBkb2Vzbid0IHBlcmZvcm1cbiAgICAgKiBhbnkgYWN0dWFsIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGNvbnN0IGNvbXBvbmVudENvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIoJ2RhdGFiYXNlLXN0YW5kYWxvbmUnKTtcbiAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIoJ2F1dGgtaW50ZXJuYWwnLCBjb21wb25lbnRDb250YWluZXIpO1xuICAgIGxldCBhcHBDaGVja1Byb3ZpZGVyO1xuICAgIGlmIChjdXN0b21BcHBDaGVja0ltcGwpIHtcbiAgICAgICAgYXBwQ2hlY2tQcm92aWRlciA9IG5ldyBQcm92aWRlcignYXBwLWNoZWNrLWludGVybmFsJywgY29tcG9uZW50Q29udGFpbmVyKTtcbiAgICAgICAgYXBwQ2hlY2tQcm92aWRlci5zZXRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXBwLWNoZWNrLWludGVybmFsJywgKCkgPT4gY3VzdG9tQXBwQ2hlY2tJbXBsLCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcbiAgICB9XG4gICAgYXV0aFByb3ZpZGVyLnNldENvbXBvbmVudChuZXcgQ29tcG9uZW50KCdhdXRoLWludGVybmFsJywgKCkgPT4gY3VzdG9tQXV0aEltcGwsIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xuICAgIHJldHVybiByZXBvTWFuYWdlckRhdGFiYXNlRnJvbUFwcChhcHAsIGF1dGhQcm92aWRlciwgYXBwQ2hlY2tQcm92aWRlciwgdXJsLCBub2RlQWRtaW4pO1xufVxuXG4vKipcbiAqIEZpcmViYXNlIFJlYWx0aW1lIERhdGFiYXNlXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbnJlZ2lzdGVyRGF0YWJhc2UoKTtcblxuZXhwb3J0IHsgRGF0YVNuYXBzaG90LCBEYXRhYmFzZSwgT25EaXNjb25uZWN0LCBRdWVyeUNvbnN0cmFpbnQsIFRyYW5zYWN0aW9uUmVzdWx0LCBRdWVyeUltcGwgYXMgX1F1ZXJ5SW1wbCwgUXVlcnlQYXJhbXMgYXMgX1F1ZXJ5UGFyYW1zLCBSZWZlcmVuY2VJbXBsIGFzIF9SZWZlcmVuY2VJbXBsLCBmb3JjZVJlc3RDbGllbnQgYXMgX1RFU1RfQUNDRVNTX2ZvcmNlUmVzdENsaWVudCwgaGlqYWNrSGFzaCBhcyBfVEVTVF9BQ0NFU1NfaGlqYWNrSGFzaCwgX2luaXRTdGFuZGFsb25lLCByZXBvTWFuYWdlckRhdGFiYXNlRnJvbUFwcCBhcyBfcmVwb01hbmFnZXJEYXRhYmFzZUZyb21BcHAsIHNldFNES1ZlcnNpb24gYXMgX3NldFNES1ZlcnNpb24sIHZhbGlkYXRlUGF0aFN0cmluZyBhcyBfdmFsaWRhdGVQYXRoU3RyaW5nLCB2YWxpZGF0ZVdyaXRhYmxlUGF0aCBhcyBfdmFsaWRhdGVXcml0YWJsZVBhdGgsIGNoaWxkLCBjb25uZWN0RGF0YWJhc2VFbXVsYXRvciwgZW5hYmxlTG9nZ2luZywgZW5kQXQsIGVuZEJlZm9yZSwgZXF1YWxUbywgZm9yY2VMb25nUG9sbGluZywgZm9yY2VXZWJTb2NrZXRzLCBnZXQsIGdldERhdGFiYXNlLCBnb09mZmxpbmUsIGdvT25saW5lLCBpbmNyZW1lbnQsIGxpbWl0VG9GaXJzdCwgbGltaXRUb0xhc3QsIG9mZiwgb25DaGlsZEFkZGVkLCBvbkNoaWxkQ2hhbmdlZCwgb25DaGlsZE1vdmVkLCBvbkNoaWxkUmVtb3ZlZCwgb25EaXNjb25uZWN0LCBvblZhbHVlLCBvcmRlckJ5Q2hpbGQsIG9yZGVyQnlLZXksIG9yZGVyQnlQcmlvcml0eSwgb3JkZXJCeVZhbHVlLCBwdXNoLCBxdWVyeSwgcmVmLCByZWZGcm9tVVJMLCByZW1vdmUsIHJ1blRyYW5zYWN0aW9uLCBzZXJ2ZXJUaW1lc3RhbXAsIHNldCwgc2V0UHJpb3JpdHksIHNldFdpdGhQcmlvcml0eSwgc3RhcnRBZnRlciwgc3RhcnRBdCwgdXBkYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@firebase/database/dist/index.esm2017.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@firebase/util/dist/index.esm2017.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.esm2017.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSTANTS: () => (/* binding */ CONSTANTS),\n/* harmony export */   DecodeBase64StringError: () => (/* binding */ DecodeBase64StringError),\n/* harmony export */   Deferred: () => (/* binding */ Deferred),\n/* harmony export */   ErrorFactory: () => (/* binding */ ErrorFactory),\n/* harmony export */   FirebaseError: () => (/* binding */ FirebaseError),\n/* harmony export */   MAX_VALUE_MILLIS: () => (/* binding */ MAX_VALUE_MILLIS),\n/* harmony export */   RANDOM_FACTOR: () => (/* binding */ RANDOM_FACTOR),\n/* harmony export */   Sha1: () => (/* binding */ Sha1),\n/* harmony export */   areCookiesEnabled: () => (/* binding */ areCookiesEnabled),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertionError: () => (/* binding */ assertionError),\n/* harmony export */   async: () => (/* binding */ async),\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64Decode: () => (/* binding */ base64Decode),\n/* harmony export */   base64Encode: () => (/* binding */ base64Encode),\n/* harmony export */   base64urlEncodeWithoutPadding: () => (/* binding */ base64urlEncodeWithoutPadding),\n/* harmony export */   calculateBackoffMillis: () => (/* binding */ calculateBackoffMillis),\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   createMockUserToken: () => (/* binding */ createMockUserToken),\n/* harmony export */   createSubscribe: () => (/* binding */ createSubscribe),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   deepCopy: () => (/* binding */ deepCopy),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   deepExtend: () => (/* binding */ deepExtend),\n/* harmony export */   errorPrefix: () => (/* binding */ errorPrefix),\n/* harmony export */   extractQuerystring: () => (/* binding */ extractQuerystring),\n/* harmony export */   getDefaultAppConfig: () => (/* binding */ getDefaultAppConfig),\n/* harmony export */   getDefaultEmulatorHost: () => (/* binding */ getDefaultEmulatorHost),\n/* harmony export */   getDefaultEmulatorHostnameAndPort: () => (/* binding */ getDefaultEmulatorHostnameAndPort),\n/* harmony export */   getDefaults: () => (/* binding */ getDefaults),\n/* harmony export */   getExperimentalSetting: () => (/* binding */ getExperimentalSetting),\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   getModularInstance: () => (/* binding */ getModularInstance),\n/* harmony export */   getUA: () => (/* binding */ getUA),\n/* harmony export */   isAdmin: () => (/* binding */ isAdmin),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBrowserExtension: () => (/* binding */ isBrowserExtension),\n/* harmony export */   isCloudflareWorker: () => (/* binding */ isCloudflareWorker),\n/* harmony export */   isElectron: () => (/* binding */ isElectron),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isIE: () => (/* binding */ isIE),\n/* harmony export */   isIndexedDBAvailable: () => (/* binding */ isIndexedDBAvailable),\n/* harmony export */   isMobileCordova: () => (/* binding */ isMobileCordova),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNodeSdk: () => (/* binding */ isNodeSdk),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isSafari: () => (/* binding */ isSafari),\n/* harmony export */   isUWP: () => (/* binding */ isUWP),\n/* harmony export */   isValidFormat: () => (/* binding */ isValidFormat),\n/* harmony export */   isValidTimestamp: () => (/* binding */ isValidTimestamp),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker),\n/* harmony export */   issuedAtTime: () => (/* binding */ issuedAtTime),\n/* harmony export */   jsonEval: () => (/* binding */ jsonEval),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   ordinal: () => (/* binding */ ordinal),\n/* harmony export */   promiseWithTimeout: () => (/* binding */ promiseWithTimeout),\n/* harmony export */   querystring: () => (/* binding */ querystring),\n/* harmony export */   querystringDecode: () => (/* binding */ querystringDecode),\n/* harmony export */   safeGet: () => (/* binding */ safeGet),\n/* harmony export */   stringLength: () => (/* binding */ stringLength),\n/* harmony export */   stringToByteArray: () => (/* binding */ stringToByteArray),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   uuidv4: () => (/* binding */ uuidv4),\n/* harmony export */   validateArgCount: () => (/* binding */ validateArgCount),\n/* harmony export */   validateCallback: () => (/* binding */ validateCallback),\n/* harmony export */   validateContextObject: () => (/* binding */ validateContextObject),\n/* harmony export */   validateIndexedDBOpenable: () => (/* binding */ validateIndexedDBOpenable),\n/* harmony export */   validateNamespace: () => (/* binding */ validateNamespace)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\nconst CONSTANTS = {\n    /**\n     * @define {boolean} Whether this is the client Node.js SDK.\n     */\n    NODE_CLIENT: false,\n    /**\n     * @define {boolean} Whether this is the Admin Node.js SDK.\n     */\n    NODE_ADMIN: false,\n    /**\n     * Firebase SDK Version\n     */\n    SDK_VERSION: '${JSCORE_VERSION}'\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Throws an error if the provided assertion is falsy\n */\nconst assert = function (assertion, message) {\n    if (!assertion) {\n        throw assertionError(message);\n    }\n};\n/**\n * Returns an Error object suitable for throwing.\n */\nconst assertionError = function (message) {\n    return new Error('Firebase Database (' +\n        CONSTANTS.SDK_VERSION +\n        ') INTERNAL ASSERT FAILED: ' +\n        message);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst stringToByteArray$1 = function (str) {\n    // TODO(user): Use native implementations if/when available\n    const out = [];\n    let p = 0;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n        if (c < 128) {\n            out[p++] = c;\n        }\n        else if (c < 2048) {\n            out[p++] = (c >> 6) | 192;\n            out[p++] = (c & 63) | 128;\n        }\n        else if ((c & 0xfc00) === 0xd800 &&\n            i + 1 < str.length &&\n            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n            out[p++] = (c >> 18) | 240;\n            out[p++] = ((c >> 12) & 63) | 128;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n        else {\n            out[p++] = (c >> 12) | 224;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n    }\n    return out;\n};\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes) {\n    // TODO(user): Use native implementations if/when available\n    const out = [];\n    let pos = 0, c = 0;\n    while (pos < bytes.length) {\n        const c1 = bytes[pos++];\n        if (c1 < 128) {\n            out[c++] = String.fromCharCode(c1);\n        }\n        else if (c1 > 191 && c1 < 224) {\n            const c2 = bytes[pos++];\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n        }\n        else if (c1 > 239 && c1 < 365) {\n            // Surrogate Pair\n            const c2 = bytes[pos++];\n            const c3 = bytes[pos++];\n            const c4 = bytes[pos++];\n            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n                0x10000;\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n        }\n        else {\n            const c2 = bytes[pos++];\n            const c3 = bytes[pos++];\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n        }\n    }\n    return out.join('');\n};\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\n// TODO(dlarocque): Define this as a class, since we no longer target ES5.\nconst base64 = {\n    /**\n     * Maps bytes to characters.\n     */\n    byteToCharMap_: null,\n    /**\n     * Maps characters to bytes.\n     */\n    charToByteMap_: null,\n    /**\n     * Maps bytes to websafe characters.\n     * @private\n     */\n    byteToCharMapWebSafe_: null,\n    /**\n     * Maps websafe characters to bytes.\n     * @private\n     */\n    charToByteMapWebSafe_: null,\n    /**\n     * Our default alphabet, shared between\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n     */\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n    /**\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n     */\n    get ENCODED_VALS() {\n        return this.ENCODED_VALS_BASE + '+/=';\n    },\n    /**\n     * Our websafe alphabet.\n     */\n    get ENCODED_VALS_WEBSAFE() {\n        return this.ENCODED_VALS_BASE + '-_.';\n    },\n    /**\n     * Whether this browser supports the atob and btoa functions. This extension\n     * started at Mozilla but is now implemented by many browsers. We use the\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\n     * but still allowing the standard per-browser compilations.\n     *\n     */\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\n    /**\n     * Base64-encode an array of bytes.\n     *\n     * @param input An array of bytes (numbers with\n     *     value in [0, 255]) to encode.\n     * @param webSafe Boolean indicating we should use the\n     *     alternative alphabet.\n     * @return The base64 encoded string.\n     */\n    encodeByteArray(input, webSafe) {\n        if (!Array.isArray(input)) {\n            throw Error('encodeByteArray takes an array as a parameter');\n        }\n        this.init_();\n        const byteToCharMap = webSafe\n            ? this.byteToCharMapWebSafe_\n            : this.byteToCharMap_;\n        const output = [];\n        for (let i = 0; i < input.length; i += 3) {\n            const byte1 = input[i];\n            const haveByte2 = i + 1 < input.length;\n            const byte2 = haveByte2 ? input[i + 1] : 0;\n            const haveByte3 = i + 2 < input.length;\n            const byte3 = haveByte3 ? input[i + 2] : 0;\n            const outByte1 = byte1 >> 2;\n            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n            let outByte4 = byte3 & 0x3f;\n            if (!haveByte3) {\n                outByte4 = 64;\n                if (!haveByte2) {\n                    outByte3 = 64;\n                }\n            }\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n        }\n        return output.join('');\n    },\n    /**\n     * Base64-encode a string.\n     *\n     * @param input A string to encode.\n     * @param webSafe If true, we should use the\n     *     alternative alphabet.\n     * @return The base64 encoded string.\n     */\n    encodeString(input, webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n            return btoa(input);\n        }\n        return this.encodeByteArray(stringToByteArray$1(input), webSafe);\n    },\n    /**\n     * Base64-decode a string.\n     *\n     * @param input to decode.\n     * @param webSafe True if we should use the\n     *     alternative alphabet.\n     * @return string representing the decoded value.\n     */\n    decodeString(input, webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n            return atob(input);\n        }\n        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n    },\n    /**\n     * Base64-decode a string.\n     *\n     * In base-64 decoding, groups of four characters are converted into three\n     * bytes.  If the encoder did not apply padding, the input length may not\n     * be a multiple of 4.\n     *\n     * In this case, the last group will have fewer than 4 characters, and\n     * padding will be inferred.  If the group has one or two characters, it decodes\n     * to one byte.  If the group has three characters, it decodes to two bytes.\n     *\n     * @param input Input to decode.\n     * @param webSafe True if we should use the web-safe alphabet.\n     * @return bytes representing the decoded value.\n     */\n    decodeStringToByteArray(input, webSafe) {\n        this.init_();\n        const charToByteMap = webSafe\n            ? this.charToByteMapWebSafe_\n            : this.charToByteMap_;\n        const output = [];\n        for (let i = 0; i < input.length;) {\n            const byte1 = charToByteMap[input.charAt(i++)];\n            const haveByte2 = i < input.length;\n            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n            ++i;\n            const haveByte3 = i < input.length;\n            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            const haveByte4 = i < input.length;\n            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n                throw new DecodeBase64StringError();\n            }\n            const outByte1 = (byte1 << 2) | (byte2 >> 4);\n            output.push(outByte1);\n            if (byte3 !== 64) {\n                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n                output.push(outByte2);\n                if (byte4 !== 64) {\n                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n                    output.push(outByte3);\n                }\n            }\n        }\n        return output;\n    },\n    /**\n     * Lazy static initialization function. Called before\n     * accessing any of the static map variables.\n     * @private\n     */\n    init_() {\n        if (!this.byteToCharMap_) {\n            this.byteToCharMap_ = {};\n            this.charToByteMap_ = {};\n            this.byteToCharMapWebSafe_ = {};\n            this.charToByteMapWebSafe_ = {};\n            // We want quick mappings back and forth, so we precompute two maps.\n            for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n                // Be forgiving when decoding and correctly decode both encodings.\n                if (i >= this.ENCODED_VALS_BASE.length) {\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n                }\n            }\n        }\n    }\n};\n/**\n * An error encountered while decoding base64 string.\n */\nclass DecodeBase64StringError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'DecodeBase64StringError';\n    }\n}\n/**\n * URL-safe base64 encoding\n */\nconst base64Encode = function (str) {\n    const utf8Bytes = stringToByteArray$1(str);\n    return base64.encodeByteArray(utf8Bytes, true);\n};\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nconst base64urlEncodeWithoutPadding = function (str) {\n    // Use base64url encoding and remove padding in the end (dot characters).\n    return base64Encode(str).replace(/\\./g, '');\n};\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nconst base64Decode = function (str) {\n    try {\n        return base64.decodeString(str, true);\n    }\n    catch (e) {\n        console.error('base64Decode failed: ', e);\n    }\n    return null;\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nfunction deepCopy(value) {\n    return deepExtend(undefined, value);\n}\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nfunction deepExtend(target, source) {\n    if (!(source instanceof Object)) {\n        return source;\n    }\n    switch (source.constructor) {\n        case Date:\n            // Treat Dates like scalars; if the target date object had any child\n            // properties - they will be lost!\n            const dateValue = source;\n            return new Date(dateValue.getTime());\n        case Object:\n            if (target === undefined) {\n                target = {};\n            }\n            break;\n        case Array:\n            // Always copy the array source and overwrite the target.\n            target = [];\n            break;\n        default:\n            // Not a plain Object - treat it as a scalar.\n            return source;\n    }\n    for (const prop in source) {\n        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n            continue;\n        }\n        target[prop] = deepExtend(target[prop], source[prop]);\n    }\n    return target;\n}\nfunction isValidKey(key) {\n    return key !== '__proto__';\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof __webpack_require__.g !== 'undefined') {\n        return __webpack_require__.g;\n    }\n    throw new Error('Unable to locate global object.');\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = () => {\n    if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n        return;\n    }\n    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n    if (defaultsJsonString) {\n        return JSON.parse(defaultsJsonString);\n    }\n};\nconst getDefaultsFromCookie = () => {\n    if (typeof document === 'undefined') {\n        return;\n    }\n    let match;\n    try {\n        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n    }\n    catch (e) {\n        // Some environments such as Angular Universal SSR have a\n        // `document` object but error on accessing `document.cookie`.\n        return;\n    }\n    const decoded = match && base64Decode(match[1]);\n    return decoded && JSON.parse(decoded);\n};\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nconst getDefaults = () => {\n    try {\n        return (getDefaultsFromGlobal() ||\n            getDefaultsFromEnvVariable() ||\n            getDefaultsFromCookie());\n    }\n    catch (e) {\n        /**\n         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n         * to any environment case we have not accounted for. Log to\n         * info instead of swallowing so we can find these unknown cases\n         * and add paths for them if needed.\n         */\n        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n        return;\n    }\n};\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nconst getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nconst getDefaultEmulatorHostnameAndPort = (productName) => {\n    const host = getDefaultEmulatorHost(productName);\n    if (!host) {\n        return undefined;\n    }\n    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n        throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n    }\n    // eslint-disable-next-line no-restricted-globals\n    const port = parseInt(host.substring(separatorIndex + 1), 10);\n    if (host[0] === '[') {\n        // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n        return [host.substring(1, separatorIndex - 1), port];\n    }\n    else {\n        return [host.substring(0, separatorIndex), port];\n    }\n};\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nconst getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nconst getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Deferred {\n    constructor() {\n        this.reject = () => { };\n        this.resolve = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n    /**\n     * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\n     */\n    wrapCallback(callback) {\n        return (error, value) => {\n            if (error) {\n                this.reject(error);\n            }\n            else {\n                this.resolve(value);\n            }\n            if (typeof callback === 'function') {\n                // Attaching noop handler just in case developer wasn't expecting\n                // promises\n                this.promise.catch(() => { });\n                // Some of our callbacks don't expect a value and our own tests\n                // assert that the parameter length is 1\n                if (callback.length === 1) {\n                    callback(error);\n                }\n                else {\n                    callback(error, value);\n                }\n            }\n        };\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction createMockUserToken(token, projectId) {\n    if (token.uid) {\n        throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\n    }\n    // Unsecured JWTs use \"none\" as the algorithm.\n    const header = {\n        alg: 'none',\n        type: 'JWT'\n    };\n    const project = projectId || 'demo-project';\n    const iat = token.iat || 0;\n    const sub = token.sub || token.user_id;\n    if (!sub) {\n        throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n    }\n    const payload = Object.assign({ \n        // Set all required fields to decent defaults\n        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {\n            sign_in_provider: 'custom',\n            identities: {}\n        } }, token);\n    // Unsecured JWTs use the empty string as a signature.\n    const signature = '';\n    return [\n        base64urlEncodeWithoutPadding(JSON.stringify(header)),\n        base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n        signature\n    ].join('.');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nfunction getUA() {\n    if (typeof navigator !== 'undefined' &&\n        typeof navigator['userAgent'] === 'string') {\n        return navigator['userAgent'];\n    }\n    else {\n        return '';\n    }\n}\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nfunction isMobileCordova() {\n    return (typeof window !== 'undefined' &&\n        // @ts-ignore Setting up an broadly applicable index signature for Window\n        // just to deal with this case would probably be a bad idea.\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\n}\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nfunction isNode() {\n    var _a;\n    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\n    if (forceEnvironment === 'node') {\n        return true;\n    }\n    else if (forceEnvironment === 'browser') {\n        return false;\n    }\n    try {\n        return (Object.prototype.toString.call(__webpack_require__.g.process) === '[object process]');\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * Detect Browser Environment.\n * Note: This will return true for certain test frameworks that are incompletely\n * mimicking a browser, and should not lead to assuming all browser APIs are\n * available.\n */\nfunction isBrowser() {\n    return typeof window !== 'undefined' || isWebWorker();\n}\n/**\n * Detect Web Worker context.\n */\nfunction isWebWorker() {\n    return (typeof WorkerGlobalScope !== 'undefined' &&\n        typeof self !== 'undefined' &&\n        self instanceof WorkerGlobalScope);\n}\n/**\n * Detect Cloudflare Worker context.\n */\nfunction isCloudflareWorker() {\n    return (typeof navigator !== 'undefined' &&\n        navigator.userAgent === 'Cloudflare-Workers');\n}\nfunction isBrowserExtension() {\n    const runtime = typeof chrome === 'object'\n        ? chrome.runtime\n        : typeof browser === 'object'\n            ? browser.runtime\n            : undefined;\n    return typeof runtime === 'object' && runtime.id !== undefined;\n}\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nfunction isReactNative() {\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\n}\n/** Detects Electron apps. */\nfunction isElectron() {\n    return getUA().indexOf('Electron/') >= 0;\n}\n/** Detects Internet Explorer. */\nfunction isIE() {\n    const ua = getUA();\n    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n/** Detects Universal Windows Platform apps. */\nfunction isUWP() {\n    return getUA().indexOf('MSAppHost/') >= 0;\n}\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nfunction isNodeSdk() {\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n/** Returns true if we are running in Safari. */\nfunction isSafari() {\n    return (!isNode() &&\n        !!navigator.userAgent &&\n        navigator.userAgent.includes('Safari') &&\n        !navigator.userAgent.includes('Chrome'));\n}\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nfunction isIndexedDBAvailable() {\n    try {\n        return typeof indexedDB === 'object';\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nfunction validateIndexedDBOpenable() {\n    return new Promise((resolve, reject) => {\n        try {\n            let preExist = true;\n            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';\n            const request = self.indexedDB.open(DB_CHECK_NAME);\n            request.onsuccess = () => {\n                request.result.close();\n                // delete database only when it doesn't pre-exist\n                if (!preExist) {\n                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n                }\n                resolve(true);\n            };\n            request.onupgradeneeded = () => {\n                preExist = false;\n            };\n            request.onerror = () => {\n                var _a;\n                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');\n            };\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nfunction areCookiesEnabled() {\n    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // TypeScript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\nconst ERROR_NAME = 'FirebaseError';\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nclass FirebaseError extends Error {\n    constructor(\n    /** The error code for this error. */\n    code, message, \n    /** Custom data for this error. */\n    customData) {\n        super(message);\n        this.code = code;\n        this.customData = customData;\n        /** The custom name for all FirebaseErrors. */\n        this.name = ERROR_NAME;\n        // Fix For ES5\n        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget\n        //                   which we can now use since we no longer target ES5.\n        Object.setPrototypeOf(this, FirebaseError.prototype);\n        // Maintains proper stack trace for where our error was thrown.\n        // Only available on V8.\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ErrorFactory.prototype.create);\n        }\n    }\n}\nclass ErrorFactory {\n    constructor(service, serviceName, errors) {\n        this.service = service;\n        this.serviceName = serviceName;\n        this.errors = errors;\n    }\n    create(code, ...data) {\n        const customData = data[0] || {};\n        const fullCode = `${this.service}/${code}`;\n        const template = this.errors[code];\n        const message = template ? replaceTemplate(template, customData) : 'Error';\n        // Service Name: Error message (service/code).\n        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n        const error = new FirebaseError(fullCode, fullMessage, customData);\n        return error;\n    }\n}\nfunction replaceTemplate(template, data) {\n    return template.replace(PATTERN, (_, key) => {\n        const value = data[key];\n        return value != null ? String(value) : `<${key}?>`;\n    });\n}\nconst PATTERN = /\\{\\$([^}]+)}/g;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nfunction jsonEval(str) {\n    return JSON.parse(str);\n}\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data JavaScript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nfunction stringify(data) {\n    return JSON.stringify(data);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nconst decode = function (token) {\n    let header = {}, claims = {}, data = {}, signature = '';\n    try {\n        const parts = token.split('.');\n        header = jsonEval(base64Decode(parts[0]) || '');\n        claims = jsonEval(base64Decode(parts[1]) || '');\n        signature = parts[2];\n        data = claims['d'] || {};\n        delete claims['d'];\n    }\n    catch (e) { }\n    return {\n        header,\n        claims,\n        data,\n        signature\n    };\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nconst isValidTimestamp = function (token) {\n    const claims = decode(token).claims;\n    const now = Math.floor(new Date().getTime() / 1000);\n    let validSince = 0, validUntil = 0;\n    if (typeof claims === 'object') {\n        if (claims.hasOwnProperty('nbf')) {\n            validSince = claims['nbf'];\n        }\n        else if (claims.hasOwnProperty('iat')) {\n            validSince = claims['iat'];\n        }\n        if (claims.hasOwnProperty('exp')) {\n            validUntil = claims['exp'];\n        }\n        else {\n            // token will expire after 24h by default\n            validUntil = validSince + 86400;\n        }\n    }\n    return (!!now &&\n        !!validSince &&\n        !!validUntil &&\n        now >= validSince &&\n        now <= validUntil);\n};\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nconst issuedAtTime = function (token) {\n    const claims = decode(token).claims;\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n        return claims['iat'];\n    }\n    return null;\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nconst isValidFormat = function (token) {\n    const decoded = decode(token), claims = decoded.claims;\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nconst isAdmin = function (token) {\n    const claims = decode(token).claims;\n    return typeof claims === 'object' && claims['admin'] === true;\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction contains(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction safeGet(obj, key) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        return obj[key];\n    }\n    else {\n        return undefined;\n    }\n}\nfunction isEmpty(obj) {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction map(obj, fn, contextObj) {\n    const res = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            res[key] = fn.call(contextObj, obj[key], key, obj);\n        }\n    }\n    return res;\n}\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nfunction deepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    for (const k of aKeys) {\n        if (!bKeys.includes(k)) {\n            return false;\n        }\n        const aProp = a[k];\n        const bProp = b[k];\n        if (isObject(aProp) && isObject(bProp)) {\n            if (!deepEqual(aProp, bProp)) {\n                return false;\n            }\n        }\n        else if (aProp !== bProp) {\n            return false;\n        }\n    }\n    for (const k of bKeys) {\n        if (!aKeys.includes(k)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isObject(thing) {\n    return thing !== null && typeof thing === 'object';\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nfunction promiseWithTimeout(promise, timeInMS = 2000) {\n    const deferredPromise = new Deferred();\n    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n    promise.then(deferredPromise.resolve, deferredPromise.reject);\n    return deferredPromise.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nfunction querystring(querystringParams) {\n    const params = [];\n    for (const [key, value] of Object.entries(querystringParams)) {\n        if (Array.isArray(value)) {\n            value.forEach(arrayVal => {\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n            });\n        }\n        else {\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        }\n    }\n    return params.length ? '&' + params.join('&') : '';\n}\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nfunction querystringDecode(querystring) {\n    const obj = {};\n    const tokens = querystring.replace(/^\\?/, '').split('&');\n    tokens.forEach(token => {\n        if (token) {\n            const [key, value] = token.split('=');\n            obj[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n    });\n    return obj;\n}\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nfunction extractQuerystring(url) {\n    const queryStart = url.indexOf('?');\n    if (!queryStart) {\n        return '';\n    }\n    const fragmentStart = url.indexOf('#', queryStart);\n    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nclass Sha1 {\n    constructor() {\n        /**\n         * Holds the previous values of accumulated variables a-e in the compress_\n         * function.\n         * @private\n         */\n        this.chain_ = [];\n        /**\n         * A buffer holding the partially computed hash result.\n         * @private\n         */\n        this.buf_ = [];\n        /**\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n         * as the message schedule in the docs.\n         * @private\n         */\n        this.W_ = [];\n        /**\n         * Contains data needed to pad messages less than 64 bytes.\n         * @private\n         */\n        this.pad_ = [];\n        /**\n         * @private {number}\n         */\n        this.inbuf_ = 0;\n        /**\n         * @private {number}\n         */\n        this.total_ = 0;\n        this.blockSize = 512 / 8;\n        this.pad_[0] = 128;\n        for (let i = 1; i < this.blockSize; ++i) {\n            this.pad_[i] = 0;\n        }\n        this.reset();\n    }\n    reset() {\n        this.chain_[0] = 0x67452301;\n        this.chain_[1] = 0xefcdab89;\n        this.chain_[2] = 0x98badcfe;\n        this.chain_[3] = 0x10325476;\n        this.chain_[4] = 0xc3d2e1f0;\n        this.inbuf_ = 0;\n        this.total_ = 0;\n    }\n    /**\n     * Internal compress helper function.\n     * @param buf Block to compress.\n     * @param offset Offset of the block in the buffer.\n     * @private\n     */\n    compress_(buf, offset) {\n        if (!offset) {\n            offset = 0;\n        }\n        const W = this.W_;\n        // get 16 big endian words\n        if (typeof buf === 'string') {\n            for (let i = 0; i < 16; i++) {\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n                // have a bug that turns the post-increment ++ operator into pre-increment\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\n                // correctness and which is affected by this bug, so I've removed all uses\n                // of post-increment ++ in which the result value is used.  We can revert\n                // this change once the Safari bug\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n                // most clients have been updated.\n                W[i] =\n                    (buf.charCodeAt(offset) << 24) |\n                        (buf.charCodeAt(offset + 1) << 16) |\n                        (buf.charCodeAt(offset + 2) << 8) |\n                        buf.charCodeAt(offset + 3);\n                offset += 4;\n            }\n        }\n        else {\n            for (let i = 0; i < 16; i++) {\n                W[i] =\n                    (buf[offset] << 24) |\n                        (buf[offset + 1] << 16) |\n                        (buf[offset + 2] << 8) |\n                        buf[offset + 3];\n                offset += 4;\n            }\n        }\n        // expand to 80 words\n        for (let i = 16; i < 80; i++) {\n            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n        }\n        let a = this.chain_[0];\n        let b = this.chain_[1];\n        let c = this.chain_[2];\n        let d = this.chain_[3];\n        let e = this.chain_[4];\n        let f, k;\n        // TODO(user): Try to unroll this loop to speed up the computation.\n        for (let i = 0; i < 80; i++) {\n            if (i < 40) {\n                if (i < 20) {\n                    f = d ^ (b & (c ^ d));\n                    k = 0x5a827999;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0x6ed9eba1;\n                }\n            }\n            else {\n                if (i < 60) {\n                    f = (b & c) | (d & (b | c));\n                    k = 0x8f1bbcdc;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0xca62c1d6;\n                }\n            }\n            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n            e = d;\n            d = c;\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n            b = a;\n            a = t;\n        }\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n    }\n    update(bytes, length) {\n        // TODO(johnlenz): tighten the function signature and remove this check\n        if (bytes == null) {\n            return;\n        }\n        if (length === undefined) {\n            length = bytes.length;\n        }\n        const lengthMinusBlock = length - this.blockSize;\n        let n = 0;\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\n        const buf = this.buf_;\n        let inbuf = this.inbuf_;\n        // The outer while loop should execute at most twice.\n        while (n < length) {\n            // When we have no data in the block to top up, we can directly process the\n            // input buffer (assuming it contains sufficient data). This gives ~25%\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n            // the data is provided in large chunks (or in multiples of 64 bytes).\n            if (inbuf === 0) {\n                while (n <= lengthMinusBlock) {\n                    this.compress_(bytes, n);\n                    n += this.blockSize;\n                }\n            }\n            if (typeof bytes === 'string') {\n                while (n < length) {\n                    buf[inbuf] = bytes.charCodeAt(n);\n                    ++inbuf;\n                    ++n;\n                    if (inbuf === this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n            else {\n                while (n < length) {\n                    buf[inbuf] = bytes[n];\n                    ++inbuf;\n                    ++n;\n                    if (inbuf === this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n        }\n        this.inbuf_ = inbuf;\n        this.total_ += length;\n    }\n    /** @override */\n    digest() {\n        const digest = [];\n        let totalBits = this.total_ * 8;\n        // Add pad 0x80 0x00*.\n        if (this.inbuf_ < 56) {\n            this.update(this.pad_, 56 - this.inbuf_);\n        }\n        else {\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n        }\n        // Add # bits.\n        for (let i = this.blockSize - 1; i >= 56; i--) {\n            this.buf_[i] = totalBits & 255;\n            totalBits /= 256; // Don't use bit-shifting here!\n        }\n        this.compress_(this.buf_);\n        let n = 0;\n        for (let i = 0; i < 5; i++) {\n            for (let j = 24; j >= 0; j -= 8) {\n                digest[n] = (this.chain_[i] >> j) & 255;\n                ++n;\n            }\n        }\n        return digest;\n    }\n}\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nfunction createSubscribe(executor, onNoObservers) {\n    const proxy = new ObserverProxy(executor, onNoObservers);\n    return proxy.subscribe.bind(proxy);\n}\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy {\n    /**\n     * @param executor Function which can make calls to a single Observer\n     *     as a proxy.\n     * @param onNoObservers Callback when count of Observers goes to zero.\n     */\n    constructor(executor, onNoObservers) {\n        this.observers = [];\n        this.unsubscribes = [];\n        this.observerCount = 0;\n        // Micro-task scheduling by calling task.then().\n        this.task = Promise.resolve();\n        this.finalized = false;\n        this.onNoObservers = onNoObservers;\n        // Call the executor asynchronously so subscribers that are called\n        // synchronously after the creation of the subscribe function\n        // can still receive the very first value generated in the executor.\n        this.task\n            .then(() => {\n            executor(this);\n        })\n            .catch(e => {\n            this.error(e);\n        });\n    }\n    next(value) {\n        this.forEachObserver((observer) => {\n            observer.next(value);\n        });\n    }\n    error(error) {\n        this.forEachObserver((observer) => {\n            observer.error(error);\n        });\n        this.close(error);\n    }\n    complete() {\n        this.forEachObserver((observer) => {\n            observer.complete();\n        });\n        this.close();\n    }\n    /**\n     * Subscribe function that can be used to add an Observer to the fan-out list.\n     *\n     * - We require that no event is sent to a subscriber synchronously to their\n     *   call to subscribe().\n     */\n    subscribe(nextOrObserver, error, complete) {\n        let observer;\n        if (nextOrObserver === undefined &&\n            error === undefined &&\n            complete === undefined) {\n            throw new Error('Missing Observer.');\n        }\n        // Assemble an Observer object when passed as callback functions.\n        if (implementsAnyMethods(nextOrObserver, [\n            'next',\n            'error',\n            'complete'\n        ])) {\n            observer = nextOrObserver;\n        }\n        else {\n            observer = {\n                next: nextOrObserver,\n                error,\n                complete\n            };\n        }\n        if (observer.next === undefined) {\n            observer.next = noop;\n        }\n        if (observer.error === undefined) {\n            observer.error = noop;\n        }\n        if (observer.complete === undefined) {\n            observer.complete = noop;\n        }\n        const unsub = this.unsubscribeOne.bind(this, this.observers.length);\n        // Attempt to subscribe to a terminated Observable - we\n        // just respond to the Observer with the final error or complete\n        // event.\n        if (this.finalized) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.task.then(() => {\n                try {\n                    if (this.finalError) {\n                        observer.error(this.finalError);\n                    }\n                    else {\n                        observer.complete();\n                    }\n                }\n                catch (e) {\n                    // nothing\n                }\n                return;\n            });\n        }\n        this.observers.push(observer);\n        return unsub;\n    }\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\n    // any unsubscribed Observer.\n    unsubscribeOne(i) {\n        if (this.observers === undefined || this.observers[i] === undefined) {\n            return;\n        }\n        delete this.observers[i];\n        this.observerCount -= 1;\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n            this.onNoObservers(this);\n        }\n    }\n    forEachObserver(fn) {\n        if (this.finalized) {\n            // Already closed by previous event....just eat the additional values.\n            return;\n        }\n        // Since sendOne calls asynchronously - there is no chance that\n        // this.observers will become undefined.\n        for (let i = 0; i < this.observers.length; i++) {\n            this.sendOne(i, fn);\n        }\n    }\n    // Call the Observer via one of it's callback function. We are careful to\n    // confirm that the observe has not been unsubscribed since this asynchronous\n    // function had been queued.\n    sendOne(i, fn) {\n        // Execute the callback asynchronously\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.task.then(() => {\n            if (this.observers !== undefined && this.observers[i] !== undefined) {\n                try {\n                    fn(this.observers[i]);\n                }\n                catch (e) {\n                    // Ignore exceptions raised in Observers or missing methods of an\n                    // Observer.\n                    // Log error to console. b/31404806\n                    if (typeof console !== 'undefined' && console.error) {\n                        console.error(e);\n                    }\n                }\n            }\n        });\n    }\n    close(err) {\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        if (err !== undefined) {\n            this.finalError = err;\n        }\n        // Proxy is no longer needed - garbage collect references\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.task.then(() => {\n            this.observers = undefined;\n            this.onNoObservers = undefined;\n        });\n    }\n}\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(fn, onError) {\n    return (...args) => {\n        Promise.resolve(true)\n            .then(() => {\n            fn(...args);\n        })\n            .catch((error) => {\n            if (onError) {\n                onError(error);\n            }\n        });\n    };\n}\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    for (const method of methods) {\n        if (method in obj && typeof obj[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\nfunction noop() {\n    // do nothing\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nconst validateArgCount = function (fnName, minCount, maxCount, argCount) {\n    let argError;\n    if (argCount < minCount) {\n        argError = 'at least ' + minCount;\n    }\n    else if (argCount > maxCount) {\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n    }\n    if (argError) {\n        const error = fnName +\n            ' failed: Was called with ' +\n            argCount +\n            (argCount === 1 ? ' argument.' : ' arguments.') +\n            ' Expects ' +\n            argError +\n            '.';\n        throw new Error(error);\n    }\n};\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nfunction errorPrefix(fnName, argName) {\n    return `${fnName} failed: ${argName} argument `;\n}\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nfunction validateNamespace(fnName, namespace, optional) {\n    if (optional && !namespace) {\n        return;\n    }\n    if (typeof namespace !== 'string') {\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\n        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');\n    }\n}\nfunction validateCallback(fnName, argumentName, \n// eslint-disable-next-line @typescript-eslint/ban-types\ncallback, optional) {\n    if (optional && !callback) {\n        return;\n    }\n    if (typeof callback !== 'function') {\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');\n    }\n}\nfunction validateContextObject(fnName, argumentName, context, optional) {\n    if (optional && !context) {\n        return;\n    }\n    if (typeof context !== 'object' || context === null) {\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n/**\n * @param {string} str\n * @return {Array}\n */\nconst stringToByteArray = function (str) {\n    const out = [];\n    let p = 0;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charCodeAt(i);\n        // Is this the lead surrogate in a surrogate pair?\n        if (c >= 0xd800 && c <= 0xdbff) {\n            const high = c - 0xd800; // the high 10 bits.\n            i++;\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n            c = 0x10000 + (high << 10) + low;\n        }\n        if (c < 128) {\n            out[p++] = c;\n        }\n        else if (c < 2048) {\n            out[p++] = (c >> 6) | 192;\n            out[p++] = (c & 63) | 128;\n        }\n        else if (c < 65536) {\n            out[p++] = (c >> 12) | 224;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n        else {\n            out[p++] = (c >> 18) | 240;\n            out[p++] = ((c >> 12) & 63) | 128;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n    }\n    return out;\n};\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nconst stringLength = function (str) {\n    let p = 0;\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 128) {\n            p++;\n        }\n        else if (c < 2048) {\n            p += 2;\n        }\n        else if (c >= 0xd800 && c <= 0xdbff) {\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n            p += 4;\n            i++; // skip trail surrogate.\n        }\n        else {\n            p += 3;\n        }\n    }\n    return p;\n};\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Copied from https://stackoverflow.com/a/2117523\n * Generates a new uuid.\n * @public\n */\nconst uuidv4 = function () {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nconst MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nconst RANDOM_FACTOR = 0.5;\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\n    // Calculates an exponentially increasing value.\n    // Deviation: calculates value from count and a constant interval, so we only need to save value\n    // and count to restore state.\n    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n    // A random \"fuzz\" to avoid waves of retries.\n    // Deviation: randomFactor is required.\n    const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n        currBaseValue *\n        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n        // if we add or subtract.\n        (Math.random() - 0.5) *\n        2);\n    // Limits backoff to max to avoid effectively permanent backoff.\n    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provide English ordinal letters after a number\n */\nfunction ordinal(i) {\n    if (!Number.isFinite(i)) {\n        return `${i}`;\n    }\n    return i + indicator(i);\n}\nfunction indicator(i) {\n    i = Math.abs(i);\n    const cent = i % 100;\n    if (cent >= 10 && cent <= 20) {\n        return 'th';\n    }\n    const dec = i % 10;\n    if (dec === 1) {\n        return 'st';\n    }\n    if (dec === 2) {\n        return 'nd';\n    }\n    if (dec === 3) {\n        return 'rd';\n    }\n    return 'th';\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getModularInstance(service) {\n    if (service && service._delegate) {\n        return service._delegate;\n    }\n    else {\n        return service;\n    }\n}\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@firebase/util/dist/index.esm2017.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/DaftarStok.js":
/*!**************************************!*\
  !*** ./src/components/DaftarStok.js ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n // Pastikan path sesuai\nconst DaftarStok = ()=>{\n    _s();\n    const [stockData, setStockData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"DaftarStok.useEffect\": ()=>{\n            // Mengambil data barang dari Firebase\n            const fetchData = {\n                \"DaftarStok.useEffect.fetchData\": async ()=>{\n                    const snapshot = await (0,_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.get)((0,_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.ref)(_lib_firebase__WEBPACK_IMPORTED_MODULE_2__.db, \"barang\"));\n                    const data = snapshot.val();\n                    const formattedData = Object.keys(data).map({\n                        \"DaftarStok.useEffect.fetchData.formattedData\": (key)=>({\n                                id: key,\n                                name: data[key].name,\n                                quantity: data[key].quantity,\n                                unit: data[key].unit,\n                                location: data[key].location\n                            })\n                    }[\"DaftarStok.useEffect.fetchData.formattedData\"]);\n                    setStockData(formattedData);\n                }\n            }[\"DaftarStok.useEffect.fetchData\"];\n            fetchData();\n        }\n    }[\"DaftarStok.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"bg-white shadow-lg w-vh h-max rounded-3xl border mx-8 mt-8\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mx-6 mt-6 \",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        className: \"font-semibold\",\n                        children: \"Daftar Stok\"\n                    }, void 0, false, {\n                        fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                        lineNumber: 30,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                    lineNumber: 29,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex h-vh p-4\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                        className: \"table-auto w-full border-collapse border border-gray-300\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"thead\", {\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                    className: \"bg-gray-200\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                            className: \"border border-gray-300 px-4 py-2\",\n                                            children: \"#\"\n                                        }, void 0, false, {\n                                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                            lineNumber: 36,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                            className: \"border border-gray-300 px-4 py-2\",\n                                            children: \"Nama Barang\"\n                                        }, void 0, false, {\n                                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                            lineNumber: 37,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                            className: \"border border-gray-300 px-4 py-2\",\n                                            children: \"Jumlah\"\n                                        }, void 0, false, {\n                                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                            lineNumber: 38,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                            className: \"border border-gray-300 px-4 py-2\",\n                                            children: \"Satuan\"\n                                        }, void 0, false, {\n                                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                            lineNumber: 39,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                            className: \"border border-gray-300 px-4 py-2\",\n                                            children: \"Kategori\"\n                                        }, void 0, false, {\n                                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                            lineNumber: 40,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                    lineNumber: 35,\n                                    columnNumber: 15\n                                }, undefined)\n                            }, void 0, false, {\n                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                lineNumber: 34,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                                children: stockData.map((item, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                        className: index % 2 === 0 ? \"bg-gray-100\" : \"\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                className: \"border border-gray-300 px-4 py-2 text-center\",\n                                                children: item.id\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                                lineNumber: 49,\n                                                columnNumber: 19\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                className: \"border border-gray-300 px-4 py-2\",\n                                                children: item.name\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                                lineNumber: 52,\n                                                columnNumber: 19\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                className: \"border border-gray-300 px-4 py-2 text-right\",\n                                                children: item.quantity\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                                lineNumber: 55,\n                                                columnNumber: 19\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                className: \"border border-gray-300 px-4 py-2 text-center\",\n                                                children: item.unit\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                                lineNumber: 58,\n                                                columnNumber: 19\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                className: \"border border-gray-300 px-4 py-2\",\n                                                children: item.location\n                                            }, void 0, false, {\n                                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                                lineNumber: 61,\n                                                columnNumber: 19\n                                            }, undefined)\n                                        ]\n                                    }, item.id, true, {\n                                        fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                        lineNumber: 45,\n                                        columnNumber: 17\n                                    }, undefined))\n                            }, void 0, false, {\n                                fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                                lineNumber: 43,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                        lineNumber: 33,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                    lineNumber: 32,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"h-vh flex my-4 px-4 justify-between \",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            className: \"btn bg-secondary hover:bg-secondary/70 border-0\",\n                            children: \"TAMBAH\"\n                        }, void 0, false, {\n                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                            lineNumber: 70,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            className: \"btn btn-wide bg-primary hover:bg-primary/70 text-white\",\n                            children: \"EDIT\"\n                        }, void 0, false, {\n                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                            lineNumber: 71,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            className: \"btn bg-third hover:bg-third/70 border-0\",\n                            children: \"DELETE\"\n                        }, void 0, false, {\n                            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                            lineNumber: 72,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n                    lineNumber: 69,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"E:\\\\KULIAH\\\\PWB\\\\UAS\\\\uas-pweb\\\\src\\\\components\\\\DaftarStok.js\",\n            lineNumber: 28,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false);\n};\n_s(DaftarStok, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n_c = DaftarStok;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DaftarStok);\nvar _c;\n$RefreshReg$(_c, \"DaftarStok\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0RhZnRhclN0b2suanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNtRDtBQUNMLENBQUMsdUJBQXVCO0FBRXRFLE1BQU1NLGFBQWE7O0lBQ2pCLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHTiwrQ0FBUUEsQ0FBQyxFQUFFO0lBRTdDRCxnREFBU0E7Z0NBQUM7WUFDUixzQ0FBc0M7WUFDdEMsTUFBTVE7a0RBQVk7b0JBQ2hCLE1BQU1DLFdBQVcsTUFBTUwsa0RBQUdBLENBQUNELGtEQUFHQSxDQUFDRCw2Q0FBRUEsRUFBRTtvQkFDbkMsTUFBTVEsT0FBT0QsU0FBU0UsR0FBRztvQkFDekIsTUFBTUMsZ0JBQWdCQyxPQUFPQyxJQUFJLENBQUNKLE1BQU1LLEdBQUc7d0VBQUNDLENBQUFBLE1BQVE7Z0NBQ2xEQyxJQUFJRDtnQ0FDSkUsTUFBTVIsSUFBSSxDQUFDTSxJQUFJLENBQUNFLElBQUk7Z0NBQ3BCQyxVQUFVVCxJQUFJLENBQUNNLElBQUksQ0FBQ0csUUFBUTtnQ0FDNUJDLE1BQU1WLElBQUksQ0FBQ00sSUFBSSxDQUFDSSxJQUFJO2dDQUNwQkMsVUFBVVgsSUFBSSxDQUFDTSxJQUFJLENBQUNLLFFBQVE7NEJBQzlCOztvQkFDQWQsYUFBYUs7Z0JBQ2Y7O1lBRUFKO1FBQ0Y7K0JBQUcsRUFBRTtJQUVMLHFCQUNFO2tCQUNFLDRFQUFDYztZQUFJQyxXQUFVOzs4QkFDYiw4REFBQ0Q7b0JBQUlDLFdBQVU7OEJBQ2IsNEVBQUNDO3dCQUFHRCxXQUFVO2tDQUFnQjs7Ozs7Ozs7Ozs7OEJBRWhDLDhEQUFDRDtvQkFBSUMsV0FBVTs4QkFDYiw0RUFBQ0U7d0JBQU1GLFdBQVU7OzBDQUNmLDhEQUFDRzswQ0FDQyw0RUFBQ0M7b0NBQUdKLFdBQVU7O3NEQUNaLDhEQUFDSzs0Q0FBR0wsV0FBVTtzREFBbUM7Ozs7OztzREFDakQsOERBQUNLOzRDQUFHTCxXQUFVO3NEQUFtQzs7Ozs7O3NEQUNqRCw4REFBQ0s7NENBQUdMLFdBQVU7c0RBQW1DOzs7Ozs7c0RBQ2pELDhEQUFDSzs0Q0FBR0wsV0FBVTtzREFBbUM7Ozs7OztzREFDakQsOERBQUNLOzRDQUFHTCxXQUFVO3NEQUFtQzs7Ozs7Ozs7Ozs7Ozs7Ozs7MENBR3JELDhEQUFDTTswQ0FDRXZCLFVBQVVTLEdBQUcsQ0FBQyxDQUFDZSxNQUFNQyxzQkFDcEIsOERBQUNKO3dDQUVDSixXQUFXUSxRQUFRLE1BQU0sSUFBSSxnQkFBZ0I7OzBEQUU3Qyw4REFBQ0M7Z0RBQUdULFdBQVU7MERBQ1hPLEtBQUtiLEVBQUU7Ozs7OzswREFFViw4REFBQ2U7Z0RBQUdULFdBQVU7MERBQ1hPLEtBQUtaLElBQUk7Ozs7OzswREFFWiw4REFBQ2M7Z0RBQUdULFdBQVU7MERBQ1hPLEtBQUtYLFFBQVE7Ozs7OzswREFFaEIsOERBQUNhO2dEQUFHVCxXQUFVOzBEQUNYTyxLQUFLVixJQUFJOzs7Ozs7MERBRVosOERBQUNZO2dEQUFHVCxXQUFVOzBEQUNYTyxLQUFLVCxRQUFROzs7Ozs7O3VDQWhCWFMsS0FBS2IsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQXVCdEIsOERBQUNLO29CQUFJQyxXQUFVOztzQ0FDYiw4REFBQ1U7NEJBQU9WLFdBQVU7c0NBQWtEOzs7Ozs7c0NBQ3BFLDhEQUFDVTs0QkFBT1YsV0FBVTtzQ0FBeUQ7Ozs7OztzQ0FDM0UsOERBQUNVOzRCQUFPVixXQUFVO3NDQUEwQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUt0RTtHQXhFTWxCO0tBQUFBO0FBMEVOLGlFQUFlQSxVQUFVQSxFQUFDIiwic291cmNlcyI6WyJFOlxcS1VMSUFIXFxQV0JcXFVBU1xcdWFzLXB3ZWJcXHNyY1xcY29tcG9uZW50c1xcRGFmdGFyU3Rvay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgZGIsIHJlZiwgZ2V0IH0gZnJvbSBcIkAvbGliL2ZpcmViYXNlXCI7IC8vIFBhc3Rpa2FuIHBhdGggc2VzdWFpXHJcblxyXG5jb25zdCBEYWZ0YXJTdG9rID0gKCkgPT4ge1xyXG4gIGNvbnN0IFtzdG9ja0RhdGEsIHNldFN0b2NrRGF0YV0gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyBNZW5nYW1iaWwgZGF0YSBiYXJhbmcgZGFyaSBGaXJlYmFzZVxyXG4gICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGdldChyZWYoZGIsIFwiYmFyYW5nXCIpKTtcclxuICAgICAgY29uc3QgZGF0YSA9IHNuYXBzaG90LnZhbCgpO1xyXG4gICAgICBjb25zdCBmb3JtYXR0ZWREYXRhID0gT2JqZWN0LmtleXMoZGF0YSkubWFwKGtleSA9PiAoe1xyXG4gICAgICAgIGlkOiBrZXksXHJcbiAgICAgICAgbmFtZTogZGF0YVtrZXldLm5hbWUsXHJcbiAgICAgICAgcXVhbnRpdHk6IGRhdGFba2V5XS5xdWFudGl0eSxcclxuICAgICAgICB1bml0OiBkYXRhW2tleV0udW5pdCxcclxuICAgICAgICBsb2NhdGlvbjogZGF0YVtrZXldLmxvY2F0aW9uXHJcbiAgICAgIH0pKTtcclxuICAgICAgc2V0U3RvY2tEYXRhKGZvcm1hdHRlZERhdGEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmZXRjaERhdGEoKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLXdoaXRlIHNoYWRvdy1sZyB3LXZoIGgtbWF4IHJvdW5kZWQtM3hsIGJvcmRlciBteC04IG10LThcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm14LTYgbXQtNiBcIj5cclxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJmb250LXNlbWlib2xkXCI+RGFmdGFyIFN0b2s8L2gxPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBoLXZoIHAtNFwiPlxyXG4gICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRhYmxlLWF1dG8gdy1mdWxsIGJvcmRlci1jb2xsYXBzZSBib3JkZXIgYm9yZGVyLWdyYXktMzAwXCI+XHJcbiAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYmctZ3JheS0yMDBcIj5cclxuICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJib3JkZXIgYm9yZGVyLWdyYXktMzAwIHB4LTQgcHktMlwiPiM8L3RoPlxyXG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yXCI+TmFtYSBCYXJhbmc8L3RoPlxyXG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yXCI+SnVtbGFoPC90aD5cclxuICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJib3JkZXIgYm9yZGVyLWdyYXktMzAwIHB4LTQgcHktMlwiPlNhdHVhbjwvdGg+XHJcbiAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBweC00IHB5LTJcIj5LYXRlZ29yaTwvdGg+XHJcbiAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgIHtzdG9ja0RhdGEubWFwKChpdGVtLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgPHRyXHJcbiAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtpbmRleCAlIDIgPT09IDAgPyBcImJnLWdyYXktMTAwXCIgOiBcIlwifVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBweC00IHB5LTIgdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICB7aXRlbS5pZH1cclxuICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cclxuICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7aXRlbS5xdWFudGl0eX1cclxuICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW0udW5pdH1cclxuICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgcHgtNCBweS0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW0ubG9jYXRpb259XHJcbiAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtdmggZmxleCBteS00IHB4LTQganVzdGlmeS1iZXR3ZWVuIFwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYmctc2Vjb25kYXJ5IGhvdmVyOmJnLXNlY29uZGFyeS83MCBib3JkZXItMFwiPlRBTUJBSDwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdpZGUgYmctcHJpbWFyeSBob3ZlcjpiZy1wcmltYXJ5LzcwIHRleHQtd2hpdGVcIj5FRElUPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBiZy10aGlyZCBob3ZlcjpiZy10aGlyZC83MCBib3JkZXItMFwiPkRFTEVURTwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEYWZ0YXJTdG9rO1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImRiIiwicmVmIiwiZ2V0IiwiRGFmdGFyU3RvayIsInN0b2NrRGF0YSIsInNldFN0b2NrRGF0YSIsImZldGNoRGF0YSIsInNuYXBzaG90IiwiZGF0YSIsInZhbCIsImZvcm1hdHRlZERhdGEiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwiaWQiLCJuYW1lIiwicXVhbnRpdHkiLCJ1bml0IiwibG9jYXRpb24iLCJkaXYiLCJjbGFzc05hbWUiLCJoMSIsInRhYmxlIiwidGhlYWQiLCJ0ciIsInRoIiwidGJvZHkiLCJpdGVtIiwiaW5kZXgiLCJ0ZCIsImJ1dHRvbiJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/DaftarStok.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/firebase.js":
/*!*****************************!*\
  !*** ./src/lib/firebase.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   get: () => (/* reexport safe */ firebase_database__WEBPACK_IMPORTED_MODULE_1__.get),\n/* harmony export */   ref: () => (/* reexport safe */ firebase_database__WEBPACK_IMPORTED_MODULE_1__.ref)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/database */ \"(app-pages-browser)/./node_modules/firebase/database/dist/esm/index.esm.js\");\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCYSHx1Vb81UpbdkuLLSLECiEyHr3_Ws9o\",\n    authDomain: \"database-kas.firebaseapp.com\",\n    databaseURL: \"https://database-kas-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"database-kas\",\n    storageBucket: \"database-kas.firebasestorage.app\",\n    messagingSenderId: \"321224331324\",\n    appId: \"1:321224331324:web:8bfcb6966294a1e504f339\",\n    measurementId: \"G-SMTKHPZX0Q\"\n};\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst db = (0,firebase_database__WEBPACK_IMPORTED_MODULE_1__.getDatabase)(app);\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvZmlyZWJhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkM7QUFDYTtBQUUxRCxNQUFNSSxpQkFBaUI7SUFDckJDLFFBQVE7SUFDUkMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLFdBQVc7SUFDWEMsZUFBZTtJQUNmQyxtQkFBbUI7SUFDbkJDLE9BQU87SUFDUEMsZUFBZTtBQUNqQjtBQUVBLE1BQU1DLE1BQU1iLDJEQUFhQSxDQUFDSTtBQUMxQixNQUFNVSxLQUFLYiw4REFBV0EsQ0FBQ1k7QUFFQyIsInNvdXJjZXMiOlsiRTpcXEtVTElBSFxcUFdCXFxVQVNcXHVhcy1wd2ViXFxzcmNcXGxpYlxcZmlyZWJhc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gXCJmaXJlYmFzZS9hcHBcIjtcclxuaW1wb3J0IHsgZ2V0RGF0YWJhc2UsIHJlZiwgZ2V0IH0gZnJvbSBcImZpcmViYXNlL2RhdGFiYXNlXCI7XHJcblxyXG5jb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICBhcGlLZXk6IFwiQUl6YVN5Q1lTSHgxVmI4MVVwYmRrdUxMU0xFQ2lFeUhyM19XczlvXCIsXHJcbiAgYXV0aERvbWFpbjogXCJkYXRhYmFzZS1rYXMuZmlyZWJhc2VhcHAuY29tXCIsXHJcbiAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9kYXRhYmFzZS1rYXMtZGVmYXVsdC1ydGRiLmFzaWEtc291dGhlYXN0MS5maXJlYmFzZWRhdGFiYXNlLmFwcFwiLFxyXG4gIHByb2plY3RJZDogXCJkYXRhYmFzZS1rYXNcIixcclxuICBzdG9yYWdlQnVja2V0OiBcImRhdGFiYXNlLWthcy5maXJlYmFzZXN0b3JhZ2UuYXBwXCIsXHJcbiAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiMzIxMjI0MzMxMzI0XCIsXHJcbiAgYXBwSWQ6IFwiMTozMjEyMjQzMzEzMjQ6d2ViOjhiZmNiNjk2NjI5NGExZTUwNGYzMzlcIixcclxuICBtZWFzdXJlbWVudElkOiBcIkctU01US0hQWlgwUVwiXHJcbn07XHJcblxyXG5jb25zdCBhcHAgPSBpbml0aWFsaXplQXBwKGZpcmViYXNlQ29uZmlnKTtcclxuY29uc3QgZGIgPSBnZXREYXRhYmFzZShhcHApO1xyXG5cclxuZXhwb3J0IHsgZGIsIHJlZiwgZ2V0IH07Il0sIm5hbWVzIjpbImluaXRpYWxpemVBcHAiLCJnZXREYXRhYmFzZSIsInJlZiIsImdldCIsImZpcmViYXNlQ29uZmlnIiwiYXBpS2V5IiwiYXV0aERvbWFpbiIsImRhdGFiYXNlVVJMIiwicHJvamVjdElkIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiYXBwSWQiLCJtZWFzdXJlbWVudElkIiwiYXBwIiwiZGIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE$2\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function disabledLog() {}\n    function disableLogs() {\n      if (0 === disabledDepth) {\n        prevLog = console.log;\n        prevInfo = console.info;\n        prevWarn = console.warn;\n        prevError = console.error;\n        prevGroup = console.group;\n        prevGroupCollapsed = console.groupCollapsed;\n        prevGroupEnd = console.groupEnd;\n        var props = {\n          configurable: !0,\n          enumerable: !0,\n          value: disabledLog,\n          writable: !0\n        };\n        Object.defineProperties(console, {\n          info: props,\n          log: props,\n          warn: props,\n          error: props,\n          group: props,\n          groupCollapsed: props,\n          groupEnd: props\n        });\n      }\n      disabledDepth++;\n    }\n    function reenableLogs() {\n      disabledDepth--;\n      if (0 === disabledDepth) {\n        var props = { configurable: !0, enumerable: !0, writable: !0 };\n        Object.defineProperties(console, {\n          log: assign({}, props, { value: prevLog }),\n          info: assign({}, props, { value: prevInfo }),\n          warn: assign({}, props, { value: prevWarn }),\n          error: assign({}, props, { value: prevError }),\n          group: assign({}, props, { value: prevGroup }),\n          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),\n          groupEnd: assign({}, props, { value: prevGroupEnd })\n        });\n      }\n      0 > disabledDepth &&\n        console.error(\n          \"disabledDepth fell below zero. This is a bug in React. Please file an issue.\"\n        );\n    }\n    function describeBuiltInComponentFrame(name) {\n      if (void 0 === prefix)\n        try {\n          throw Error();\n        } catch (x) {\n          var match = x.stack.trim().match(/\\n( *(at )?)/);\n          prefix = (match && match[1]) || \"\";\n          suffix =\n            -1 < x.stack.indexOf(\"\\n    at\")\n              ? \" (<anonymous>)\"\n              : -1 < x.stack.indexOf(\"@\")\n                ? \"@unknown:0:0\"\n                : \"\";\n        }\n      return \"\\n\" + prefix + name + suffix;\n    }\n    function describeNativeComponentFrame(fn, construct) {\n      if (!fn || reentry) return \"\";\n      var frame = componentFrameCache.get(fn);\n      if (void 0 !== frame) return frame;\n      reentry = !0;\n      frame = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var previousDispatcher = null;\n      previousDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = null;\n      disableLogs();\n      try {\n        var RunInRootFrame = {\n          DetermineComponentFrameRoot: function () {\n            try {\n              if (construct) {\n                var Fake = function () {\n                  throw Error();\n                };\n                Object.defineProperty(Fake.prototype, \"props\", {\n                  set: function () {\n                    throw Error();\n                  }\n                });\n                if (\"object\" === typeof Reflect && Reflect.construct) {\n                  try {\n                    Reflect.construct(Fake, []);\n                  } catch (x) {\n                    var control = x;\n                  }\n                  Reflect.construct(fn, [], Fake);\n                } else {\n                  try {\n                    Fake.call();\n                  } catch (x$0) {\n                    control = x$0;\n                  }\n                  fn.call(Fake.prototype);\n                }\n              } else {\n                try {\n                  throw Error();\n                } catch (x$1) {\n                  control = x$1;\n                }\n                (Fake = fn()) &&\n                  \"function\" === typeof Fake.catch &&\n                  Fake.catch(function () {});\n              }\n            } catch (sample) {\n              if (sample && control && \"string\" === typeof sample.stack)\n                return [sample.stack, control.stack];\n            }\n            return [null, null];\n          }\n        };\n        RunInRootFrame.DetermineComponentFrameRoot.displayName =\n          \"DetermineComponentFrameRoot\";\n        var namePropDescriptor = Object.getOwnPropertyDescriptor(\n          RunInRootFrame.DetermineComponentFrameRoot,\n          \"name\"\n        );\n        namePropDescriptor &&\n          namePropDescriptor.configurable &&\n          Object.defineProperty(\n            RunInRootFrame.DetermineComponentFrameRoot,\n            \"name\",\n            { value: \"DetermineComponentFrameRoot\" }\n          );\n        var _RunInRootFrame$Deter =\n            RunInRootFrame.DetermineComponentFrameRoot(),\n          sampleStack = _RunInRootFrame$Deter[0],\n          controlStack = _RunInRootFrame$Deter[1];\n        if (sampleStack && controlStack) {\n          var sampleLines = sampleStack.split(\"\\n\"),\n            controlLines = controlStack.split(\"\\n\");\n          for (\n            _RunInRootFrame$Deter = namePropDescriptor = 0;\n            namePropDescriptor < sampleLines.length &&\n            !sampleLines[namePropDescriptor].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            namePropDescriptor++;\n          for (\n            ;\n            _RunInRootFrame$Deter < controlLines.length &&\n            !controlLines[_RunInRootFrame$Deter].includes(\n              \"DetermineComponentFrameRoot\"\n            );\n\n          )\n            _RunInRootFrame$Deter++;\n          if (\n            namePropDescriptor === sampleLines.length ||\n            _RunInRootFrame$Deter === controlLines.length\n          )\n            for (\n              namePropDescriptor = sampleLines.length - 1,\n                _RunInRootFrame$Deter = controlLines.length - 1;\n              1 <= namePropDescriptor &&\n              0 <= _RunInRootFrame$Deter &&\n              sampleLines[namePropDescriptor] !==\n                controlLines[_RunInRootFrame$Deter];\n\n            )\n              _RunInRootFrame$Deter--;\n          for (\n            ;\n            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;\n            namePropDescriptor--, _RunInRootFrame$Deter--\n          )\n            if (\n              sampleLines[namePropDescriptor] !==\n              controlLines[_RunInRootFrame$Deter]\n            ) {\n              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {\n                do\n                  if (\n                    (namePropDescriptor--,\n                    _RunInRootFrame$Deter--,\n                    0 > _RunInRootFrame$Deter ||\n                      sampleLines[namePropDescriptor] !==\n                        controlLines[_RunInRootFrame$Deter])\n                  ) {\n                    var _frame =\n                      \"\\n\" +\n                      sampleLines[namePropDescriptor].replace(\n                        \" at new \",\n                        \" at \"\n                      );\n                    fn.displayName &&\n                      _frame.includes(\"<anonymous>\") &&\n                      (_frame = _frame.replace(\"<anonymous>\", fn.displayName));\n                    \"function\" === typeof fn &&\n                      componentFrameCache.set(fn, _frame);\n                    return _frame;\n                  }\n                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);\n              }\n              break;\n            }\n        }\n      } finally {\n        (reentry = !1),\n          (ReactSharedInternals.H = previousDispatcher),\n          reenableLogs(),\n          (Error.prepareStackTrace = frame);\n      }\n      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : \"\")\n        ? describeBuiltInComponentFrame(sampleLines)\n        : \"\";\n      \"function\" === typeof fn && componentFrameCache.set(fn, sampleLines);\n      return sampleLines;\n    }\n    function describeUnknownElementTypeFrameInDEV(type) {\n      if (null == type) return \"\";\n      if (\"function\" === typeof type) {\n        var prototype = type.prototype;\n        return describeNativeComponentFrame(\n          type,\n          !(!prototype || !prototype.isReactComponent)\n        );\n      }\n      if (\"string\" === typeof type) return describeBuiltInComponentFrame(type);\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\");\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\");\n      }\n      if (\"object\" === typeof type)\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return (type = describeNativeComponentFrame(type.render, !1)), type;\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type);\n          case REACT_LAZY_TYPE:\n            prototype = type._payload;\n            type = type._init;\n            try {\n              return describeUnknownElementTypeFrameInDEV(type(prototype));\n            } catch (x) {}\n        }\n      return \"\";\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(type, key, self, source, owner, props) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      if (\n        \"string\" === typeof type ||\n        \"function\" === typeof type ||\n        type === REACT_FRAGMENT_TYPE ||\n        type === REACT_PROFILER_TYPE ||\n        type === REACT_STRICT_MODE_TYPE ||\n        type === REACT_SUSPENSE_TYPE ||\n        type === REACT_SUSPENSE_LIST_TYPE ||\n        type === REACT_OFFSCREEN_TYPE ||\n        (\"object\" === typeof type &&\n          null !== type &&\n          (type.$$typeof === REACT_LAZY_TYPE ||\n            type.$$typeof === REACT_MEMO_TYPE ||\n            type.$$typeof === REACT_CONTEXT_TYPE ||\n            type.$$typeof === REACT_CONSUMER_TYPE ||\n            type.$$typeof === REACT_FORWARD_REF_TYPE ||\n            type.$$typeof === REACT_CLIENT_REFERENCE$1 ||\n            void 0 !== type.getModuleId))\n      ) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (\n                isStaticChildren = 0;\n                isStaticChildren < children.length;\n                isStaticChildren++\n              )\n                validateChildKeys(children[isStaticChildren], type);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children, type);\n      } else {\n        children = \"\";\n        if (\n          void 0 === type ||\n          (\"object\" === typeof type &&\n            null !== type &&\n            0 === Object.keys(type).length)\n        )\n          children +=\n            \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\";\n        null === type\n          ? (isStaticChildren = \"null\")\n          : isArrayImpl(type)\n            ? (isStaticChildren = \"array\")\n            : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE\n              ? ((isStaticChildren =\n                  \"<\" +\n                  (getComponentNameFromType(type.type) || \"Unknown\") +\n                  \" />\"),\n                (children =\n                  \" Did you accidentally export a JSX literal instead of a component?\"))\n              : (isStaticChildren = typeof type);\n        console.error(\n          \"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",\n          isStaticChildren,\n          children\n        );\n      }\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(type, children, self, source, getOwner(), maybeKey);\n    }\n    function validateChildKeys(node, parentType) {\n      if (\n        \"object\" === typeof node &&\n        node &&\n        node.$$typeof !== REACT_CLIENT_REFERENCE\n      )\n        if (isArrayImpl(node))\n          for (var i = 0; i < node.length; i++) {\n            var child = node[i];\n            isValidElement(child) && validateExplicitKey(child, parentType);\n          }\n        else if (isValidElement(node))\n          node._store && (node._store.validated = 1);\n        else if (\n          (null === node || \"object\" !== typeof node\n            ? (i = null)\n            : ((i =\n                (MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL]) ||\n                node[\"@@iterator\"]),\n              (i = \"function\" === typeof i ? i : null)),\n          \"function\" === typeof i &&\n            i !== node.entries &&\n            ((i = i.call(node)), i !== node))\n        )\n          for (; !(node = i.next()).done; )\n            isValidElement(node.value) &&\n              validateExplicitKey(node.value, parentType);\n    }\n    function isValidElement(object) {\n      return (\n        \"object\" === typeof object &&\n        null !== object &&\n        object.$$typeof === REACT_ELEMENT_TYPE\n      );\n    }\n    function validateExplicitKey(element, parentType) {\n      if (\n        element._store &&\n        !element._store.validated &&\n        null == element.key &&\n        ((element._store.validated = 1),\n        (parentType = getCurrentComponentErrorInfo(parentType)),\n        !ownerHasKeyUseWarning[parentType])\n      ) {\n        ownerHasKeyUseWarning[parentType] = !0;\n        var childOwner = \"\";\n        element &&\n          null != element._owner &&\n          element._owner !== getOwner() &&\n          ((childOwner = null),\n          \"number\" === typeof element._owner.tag\n            ? (childOwner = getComponentNameFromType(element._owner.type))\n            : \"string\" === typeof element._owner.name &&\n              (childOwner = element._owner.name),\n          (childOwner = \" It was passed a child from \" + childOwner + \".\"));\n        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;\n        ReactSharedInternals.getCurrentStack = function () {\n          var stack = describeUnknownElementTypeFrameInDEV(element.type);\n          prevGetCurrentStack && (stack += prevGetCurrentStack() || \"\");\n          return stack;\n        };\n        console.error(\n          'Each child in a list should have a unique \"key\" prop.%s%s See https://react.dev/link/warning-keys for more information.',\n          parentType,\n          childOwner\n        );\n        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;\n      }\n    }\n    function getCurrentComponentErrorInfo(parentType) {\n      var info = \"\",\n        owner = getOwner();\n      owner &&\n        (owner = getComponentNameFromType(owner.type)) &&\n        (info = \"\\n\\nCheck the render method of `\" + owner + \"`.\");\n      info ||\n        ((parentType = getComponentNameFromType(parentType)) &&\n          (info =\n            \"\\n\\nCheck the top-level render call using <\" + parentType + \">.\"));\n      return info;\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\"),\n      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,\n      REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      assign = Object.assign,\n      REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"),\n      isArrayImpl = Array.isArray,\n      disabledDepth = 0,\n      prevLog,\n      prevInfo,\n      prevWarn,\n      prevError,\n      prevGroup,\n      prevGroupCollapsed,\n      prevGroupEnd;\n    disabledLog.__reactDisabledLog = !0;\n    var prefix,\n      suffix,\n      reentry = !1;\n    var componentFrameCache = new (\n      \"function\" === typeof WeakMap ? WeakMap : Map\n    )();\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {},\n      ownerHasKeyUseWarning = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIkU6XFxLVUxJQUhcXFBXQlxcVUFTXFx1YXMtcHdlYlxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxccmVhY3RcXGpzeC1kZXYtcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@firebase/app/dist/esm/index.esm2017.js":
/*!**************************************************************!*\
  !*** ./node_modules/@firebase/app/dist/esm/index.esm2017.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseError: () => (/* reexport safe */ _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),\n/* harmony export */   _DEFAULT_ENTRY_NAME: () => (/* binding */ DEFAULT_ENTRY_NAME),\n/* harmony export */   _addComponent: () => (/* binding */ _addComponent),\n/* harmony export */   _addOrOverwriteComponent: () => (/* binding */ _addOrOverwriteComponent),\n/* harmony export */   _apps: () => (/* binding */ _apps),\n/* harmony export */   _clearComponents: () => (/* binding */ _clearComponents),\n/* harmony export */   _components: () => (/* binding */ _components),\n/* harmony export */   _getProvider: () => (/* binding */ _getProvider),\n/* harmony export */   _isFirebaseApp: () => (/* binding */ _isFirebaseApp),\n/* harmony export */   _isFirebaseServerApp: () => (/* binding */ _isFirebaseServerApp),\n/* harmony export */   _registerComponent: () => (/* binding */ _registerComponent),\n/* harmony export */   _removeServiceInstance: () => (/* binding */ _removeServiceInstance),\n/* harmony export */   _serverApps: () => (/* binding */ _serverApps),\n/* harmony export */   deleteApp: () => (/* binding */ deleteApp),\n/* harmony export */   getApp: () => (/* binding */ getApp),\n/* harmony export */   getApps: () => (/* binding */ getApps),\n/* harmony export */   initializeApp: () => (/* binding */ initializeApp),\n/* harmony export */   initializeServerApp: () => (/* binding */ initializeServerApp),\n/* harmony export */   onLog: () => (/* binding */ onLog),\n/* harmony export */   registerVersion: () => (/* binding */ registerVersion),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/component */ \"(app-pages-browser)/./node_modules/@firebase/component/dist/esm/index.esm2017.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/logger */ \"(app-pages-browser)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ \"(app-pages-browser)/./node_modules/@firebase/util/dist/index.esm2017.js\");\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb */ \"(app-pages-browser)/./node_modules/idb/build/index.js\");\n\n\n\n\n\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PlatformLoggerServiceImpl {\n    constructor(container) {\n        this.container = container;\n    }\n    // In initial implementation, this will be called by installations on\n    // auth token refresh, and installations will send this string.\n    getPlatformInfoString() {\n        const providers = this.container.getProviders();\n        // Loop through providers and get library/version pairs from any that are\n        // version components.\n        return providers\n            .map(provider => {\n            if (isVersionServiceProvider(provider)) {\n                const service = provider.getImmediate();\n                return `${service.library}/${service.version}`;\n            }\n            else {\n                return null;\n            }\n        })\n            .filter(logString => logString)\n            .join(' ');\n    }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider) {\n    const component = provider.getComponent();\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\n}\n\nconst name$q = \"@firebase/app\";\nconst version$1 = \"0.10.17\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger('@firebase/app');\n\nconst name$p = \"@firebase/app-compat\";\n\nconst name$o = \"@firebase/analytics-compat\";\n\nconst name$n = \"@firebase/analytics\";\n\nconst name$m = \"@firebase/app-check-compat\";\n\nconst name$l = \"@firebase/app-check\";\n\nconst name$k = \"@firebase/auth\";\n\nconst name$j = \"@firebase/auth-compat\";\n\nconst name$i = \"@firebase/database\";\n\nconst name$h = \"@firebase/data-connect\";\n\nconst name$g = \"@firebase/database-compat\";\n\nconst name$f = \"@firebase/functions\";\n\nconst name$e = \"@firebase/functions-compat\";\n\nconst name$d = \"@firebase/installations\";\n\nconst name$c = \"@firebase/installations-compat\";\n\nconst name$b = \"@firebase/messaging\";\n\nconst name$a = \"@firebase/messaging-compat\";\n\nconst name$9 = \"@firebase/performance\";\n\nconst name$8 = \"@firebase/performance-compat\";\n\nconst name$7 = \"@firebase/remote-config\";\n\nconst name$6 = \"@firebase/remote-config-compat\";\n\nconst name$5 = \"@firebase/storage\";\n\nconst name$4 = \"@firebase/storage-compat\";\n\nconst name$3 = \"@firebase/firestore\";\n\nconst name$2 = \"@firebase/vertexai\";\n\nconst name$1 = \"@firebase/firestore-compat\";\n\nconst name = \"firebase\";\nconst version = \"11.1.0\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default app name\n *\n * @internal\n */\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n    [name$q]: 'fire-core',\n    [name$p]: 'fire-core-compat',\n    [name$n]: 'fire-analytics',\n    [name$o]: 'fire-analytics-compat',\n    [name$l]: 'fire-app-check',\n    [name$m]: 'fire-app-check-compat',\n    [name$k]: 'fire-auth',\n    [name$j]: 'fire-auth-compat',\n    [name$i]: 'fire-rtdb',\n    [name$h]: 'fire-data-connect',\n    [name$g]: 'fire-rtdb-compat',\n    [name$f]: 'fire-fn',\n    [name$e]: 'fire-fn-compat',\n    [name$d]: 'fire-iid',\n    [name$c]: 'fire-iid-compat',\n    [name$b]: 'fire-fcm',\n    [name$a]: 'fire-fcm-compat',\n    [name$9]: 'fire-perf',\n    [name$8]: 'fire-perf-compat',\n    [name$7]: 'fire-rc',\n    [name$6]: 'fire-rc-compat',\n    [name$5]: 'fire-gcs',\n    [name$4]: 'fire-gcs-compat',\n    [name$3]: 'fire-fst',\n    [name$1]: 'fire-fst-compat',\n    [name$2]: 'fire-vertex',\n    'fire-js': 'fire-js', // Platform identifier for JS SDK.\n    [name]: 'fire-js-all'\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nconst _apps = new Map();\n/**\n * @internal\n */\nconst _serverApps = new Map();\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst _components = new Map();\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nfunction _addComponent(app, component) {\n    try {\n        app.container.addComponent(component);\n    }\n    catch (e) {\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n    }\n}\n/**\n *\n * @internal\n */\nfunction _addOrOverwriteComponent(app, component) {\n    app.container.addOrOverwriteComponent(component);\n}\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nfunction _registerComponent(component) {\n    const componentName = component.name;\n    if (_components.has(componentName)) {\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\n        return false;\n    }\n    _components.set(componentName, component);\n    // add the component to existing app instances\n    for (const app of _apps.values()) {\n        _addComponent(app, component);\n    }\n    for (const serverApp of _serverApps.values()) {\n        _addComponent(serverApp, component);\n    }\n    return true;\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nfunction _getProvider(app, name) {\n    const heartbeatController = app.container\n        .getProvider('heartbeat')\n        .getImmediate({ optional: true });\n    if (heartbeatController) {\n        void heartbeatController.triggerHeartbeat();\n    }\n    return app.container.getProvider(name);\n}\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n    _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nfunction _isFirebaseApp(obj) {\n    return obj.options !== undefined;\n}\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nfunction _isFirebaseServerApp(obj) {\n    return obj.settings !== undefined;\n}\n/**\n * Test only\n *\n * @internal\n */\nfunction _clearComponents() {\n    _components.clear();\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst ERRORS = {\n    [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\n        'call initializeApp() first',\n    [\"bad-app-name\" /* AppError.BAD_APP_NAME */]: \"Illegal App name: '{$appName}'\",\n    [\"duplicate-app\" /* AppError.DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\n    [\"app-deleted\" /* AppError.APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\n    [\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',\n    [\"no-options\" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\n    [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\n        'Firebase App instance.',\n    [\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\n    [\"idb-open\" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n    [\"idb-get\" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n    [\"idb-set\" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n    [\"idb-delete\" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n    [\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n    [\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'\n};\nconst ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass FirebaseAppImpl {\n    constructor(options, config, container) {\n        this._isDeleted = false;\n        this._options = Object.assign({}, options);\n        this._config = Object.assign({}, config);\n        this._name = config.name;\n        this._automaticDataCollectionEnabled =\n            config.automaticDataCollectionEnabled;\n        this._container = container;\n        this.container.addComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('app', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\n    }\n    get automaticDataCollectionEnabled() {\n        this.checkDestroyed();\n        return this._automaticDataCollectionEnabled;\n    }\n    set automaticDataCollectionEnabled(val) {\n        this.checkDestroyed();\n        this._automaticDataCollectionEnabled = val;\n    }\n    get name() {\n        this.checkDestroyed();\n        return this._name;\n    }\n    get options() {\n        this.checkDestroyed();\n        return this._options;\n    }\n    get config() {\n        this.checkDestroyed();\n        return this._config;\n    }\n    get container() {\n        return this._container;\n    }\n    get isDeleted() {\n        return this._isDeleted;\n    }\n    set isDeleted(val) {\n        this._isDeleted = val;\n    }\n    /**\n     * This function will throw an Error if the App has already been deleted -\n     * use before performing API actions on the App.\n     */\n    checkDestroyed() {\n        if (this.isDeleted) {\n            throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, { appName: this._name });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass FirebaseServerAppImpl extends FirebaseAppImpl {\n    constructor(options, serverConfig, name, container) {\n        // Build configuration parameters for the FirebaseAppImpl base class.\n        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined\n            ? serverConfig.automaticDataCollectionEnabled\n            : false;\n        // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n        const config = {\n            name,\n            automaticDataCollectionEnabled\n        };\n        if (options.apiKey !== undefined) {\n            // Construct the parent FirebaseAppImp object.\n            super(options, config, container);\n        }\n        else {\n            const appImpl = options;\n            super(appImpl.options, config, container);\n        }\n        // Now construct the data for the FirebaseServerAppImpl.\n        this._serverConfig = Object.assign({ automaticDataCollectionEnabled }, serverConfig);\n        this._finalizationRegistry = null;\n        if (typeof FinalizationRegistry !== 'undefined') {\n            this._finalizationRegistry = new FinalizationRegistry(() => {\n                this.automaticCleanup();\n            });\n        }\n        this._refCount = 0;\n        this.incRefCount(this._serverConfig.releaseOnDeref);\n        // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n        // will never trigger.\n        this._serverConfig.releaseOnDeref = undefined;\n        serverConfig.releaseOnDeref = undefined;\n        registerVersion(name$q, version$1, 'serverapp');\n    }\n    toJSON() {\n        return undefined;\n    }\n    get refCount() {\n        return this._refCount;\n    }\n    // Increment the reference count of this server app. If an object is provided, register it\n    // with the finalization registry.\n    incRefCount(obj) {\n        if (this.isDeleted) {\n            return;\n        }\n        this._refCount++;\n        if (obj !== undefined && this._finalizationRegistry !== null) {\n            this._finalizationRegistry.register(obj, this);\n        }\n    }\n    // Decrement the reference count.\n    decRefCount() {\n        if (this.isDeleted) {\n            return 0;\n        }\n        return --this._refCount;\n    }\n    // Invoked by the FinalizationRegistry callback to note that this app should go through its\n    // reference counts and delete itself if no reference count remain. The coordinating logic that\n    // handles this is in deleteApp(...).\n    automaticCleanup() {\n        void deleteApp(this);\n    }\n    get settings() {\n        this.checkDestroyed();\n        return this._serverConfig;\n    }\n    /**\n     * This function will throw an Error if the App has already been deleted -\n     * use before performing API actions on the App.\n     */\n    checkDestroyed() {\n        if (this.isDeleted) {\n            throw ERROR_FACTORY.create(\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The current SDK version.\n *\n * @public\n */\nconst SDK_VERSION = version;\nfunction initializeApp(_options, rawConfig = {}) {\n    let options = _options;\n    if (typeof rawConfig !== 'object') {\n        const name = rawConfig;\n        rawConfig = { name };\n    }\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\n    const name = config.name;\n    if (typeof name !== 'string' || !name) {\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\n            appName: String(name)\n        });\n    }\n    options || (options = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultAppConfig)());\n    if (!options) {\n        throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\n    }\n    const existingApp = _apps.get(name);\n    if (existingApp) {\n        // return the existing app if options and config deep equal the ones in the existing app.\n        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(options, existingApp.options) &&\n            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(config, existingApp.config)) {\n            return existingApp;\n        }\n        else {\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, { appName: name });\n        }\n    }\n    const container = new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.ComponentContainer(name);\n    for (const component of _components.values()) {\n        container.addComponent(component);\n    }\n    const newApp = new FirebaseAppImpl(options, config, container);\n    _apps.set(name, newApp);\n    return newApp;\n}\nfunction initializeServerApp(_options, _serverAppConfig) {\n    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isBrowser)() && !(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isWebWorker)()) {\n        // FirebaseServerApp isn't designed to be run in browsers.\n        throw ERROR_FACTORY.create(\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */);\n    }\n    if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n        _serverAppConfig.automaticDataCollectionEnabled = false;\n    }\n    let appOptions;\n    if (_isFirebaseApp(_options)) {\n        appOptions = _options.options;\n    }\n    else {\n        appOptions = _options;\n    }\n    // Build an app name based on a hash of the configuration options.\n    const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);\n    // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n    // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n    if (nameObj.releaseOnDeref !== undefined) {\n        delete nameObj.releaseOnDeref;\n    }\n    const hashCode = (s) => {\n        return [...s].reduce((hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0, 0);\n    };\n    if (_serverAppConfig.releaseOnDeref !== undefined) {\n        if (typeof FinalizationRegistry === 'undefined') {\n            throw ERROR_FACTORY.create(\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */, {});\n        }\n    }\n    const nameString = '' + hashCode(JSON.stringify(nameObj));\n    const existingApp = _serverApps.get(nameString);\n    if (existingApp) {\n        existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\n        return existingApp;\n    }\n    const container = new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.ComponentContainer(nameString);\n    for (const component of _components.values()) {\n        container.addComponent(component);\n    }\n    const newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\n    _serverApps.set(nameString, newApp);\n    return newApp;\n}\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n    const app = _apps.get(name);\n    if (!app && name === DEFAULT_ENTRY_NAME && (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultAppConfig)()) {\n        return initializeApp();\n    }\n    if (!app) {\n        throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, { appName: name });\n    }\n    return app;\n}\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nfunction getApps() {\n    return Array.from(_apps.values());\n}\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nasync function deleteApp(app) {\n    let cleanupProviders = false;\n    const name = app.name;\n    if (_apps.has(name)) {\n        cleanupProviders = true;\n        _apps.delete(name);\n    }\n    else if (_serverApps.has(name)) {\n        const firebaseServerApp = app;\n        if (firebaseServerApp.decRefCount() <= 0) {\n            _serverApps.delete(name);\n            cleanupProviders = true;\n        }\n    }\n    if (cleanupProviders) {\n        await Promise.all(app.container\n            .getProviders()\n            .map(provider => provider.delete()));\n        app.isDeleted = true;\n    }\n}\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nfunction registerVersion(libraryKeyOrName, version, variant) {\n    var _a;\n    // TODO: We can use this check to whitelist strings when/if we set up\n    // a good whitelist system.\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n    if (variant) {\n        library += `-${variant}`;\n    }\n    const libraryMismatch = library.match(/\\s|\\//);\n    const versionMismatch = version.match(/\\s|\\//);\n    if (libraryMismatch || versionMismatch) {\n        const warning = [\n            `Unable to register library \"${library}\" with version \"${version}\":`\n        ];\n        if (libraryMismatch) {\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n        }\n        if (libraryMismatch && versionMismatch) {\n            warning.push('and');\n        }\n        if (versionMismatch) {\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n        }\n        logger.warn(warning.join(' '));\n        return;\n    }\n    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* ComponentType.VERSION */));\n}\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nfunction onLog(logCallback, options) {\n    if (logCallback !== null && typeof logCallback !== 'function') {\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\n    }\n    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setUserLogHandler)(logCallback, options);\n}\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nfunction setLogLevel(logLevel) {\n    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setLogLevel)(logLevel);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\nfunction getDbPromise() {\n    if (!dbPromise) {\n        dbPromise = (0,idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(DB_NAME, DB_VERSION, {\n            upgrade: (db, oldVersion) => {\n                // We don't use 'break' in this switch statement, the fall-through\n                // behavior is what we want, because if there are multiple versions between\n                // the old version and the current version, we want ALL the migrations\n                // that correspond to those versions to run, not only the last one.\n                // eslint-disable-next-line default-case\n                switch (oldVersion) {\n                    case 0:\n                        try {\n                            db.createObjectStore(STORE_NAME);\n                        }\n                        catch (e) {\n                            // Safari/iOS browsers throw occasional exceptions on\n                            // db.createObjectStore() that may be a bug. Avoid blocking\n                            // the rest of the app functionality.\n                            console.warn(e);\n                        }\n                }\n            }\n        }).catch(e => {\n            throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\n                originalErrorMessage: e.message\n            });\n        });\n    }\n    return dbPromise;\n}\nasync function readHeartbeatsFromIndexedDB(app) {\n    try {\n        const db = await getDbPromise();\n        const tx = db.transaction(STORE_NAME);\n        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n        // We already have the value but tx.done can throw,\n        // so we need to await it here to catch errors\n        await tx.done;\n        return result;\n    }\n    catch (e) {\n        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError) {\n            logger.warn(e.message);\n        }\n        else {\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n            });\n            logger.warn(idbGetError.message);\n        }\n    }\n}\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\n    try {\n        const db = await getDbPromise();\n        const tx = db.transaction(STORE_NAME, 'readwrite');\n        const objectStore = tx.objectStore(STORE_NAME);\n        await objectStore.put(heartbeatObject, computeKey(app));\n        await tx.done;\n    }\n    catch (e) {\n        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError) {\n            logger.warn(e.message);\n        }\n        else {\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\n                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\n            });\n            logger.warn(idbGetError.message);\n        }\n    }\n}\nfunction computeKey(app) {\n    return `${app.name}!${app.options.appId}`;\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\nclass HeartbeatServiceImpl {\n    constructor(container) {\n        this.container = container;\n        /**\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n         * the header string.\n         * Stores one record per date. This will be consolidated into the standard\n         * format of one record per user agent string before being sent as a header.\n         * Populated from indexedDB when the controller is instantiated and should\n         * be kept in sync with indexedDB.\n         * Leave public for easier testing.\n         */\n        this._heartbeatsCache = null;\n        const app = this.container.getProvider('app').getImmediate();\n        this._storage = new HeartbeatStorageImpl(app);\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\n            this._heartbeatsCache = result;\n            return result;\n        });\n    }\n    /**\n     * Called to report a heartbeat. The function will generate\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n     * to IndexedDB.\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\n     * already logged, subsequent calls to this function in the same day will be ignored.\n     */\n    async triggerHeartbeat() {\n        var _a, _b;\n        try {\n            const platformLogger = this.container\n                .getProvider('platform-logger')\n                .getImmediate();\n            // This is the \"Firebase user agent\" string from the platform logger\n            // service, not the browser user agent.\n            const agent = platformLogger.getPlatformInfoString();\n            const date = getUTCDateString();\n            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {\n                this._heartbeatsCache = await this._heartbeatsCachePromise;\n                // If we failed to construct a heartbeats cache, then return immediately.\n                if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {\n                    return;\n                }\n            }\n            // Do not store a heartbeat if one is already stored for this day\n            // or if a header has already been sent today.\n            if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\n                this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n                return;\n            }\n            else {\n                // There is no entry for this date. Create one.\n                this._heartbeatsCache.heartbeats.push({ date, agent });\n            }\n            // Remove entries older than 30 days.\n            this._heartbeatsCache.heartbeats =\n                this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\n                    const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n                    const now = Date.now();\n                    return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n                });\n            return this._storage.overwrite(this._heartbeatsCache);\n        }\n        catch (e) {\n            logger.warn(e);\n        }\n    }\n    /**\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n     * It also clears all heartbeats from memory as well as in IndexedDB.\n     *\n     * NOTE: Consuming product SDKs should not send the header if this method\n     * returns an empty string.\n     */\n    async getHeartbeatsHeader() {\n        var _a;\n        try {\n            if (this._heartbeatsCache === null) {\n                await this._heartbeatsCachePromise;\n            }\n            // If it's still null or the array is empty, there is no data to send.\n            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||\n                this._heartbeatsCache.heartbeats.length === 0) {\n                return '';\n            }\n            const date = getUTCDateString();\n            // Extract as many heartbeats from the cache as will fit under the size limit.\n            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\n            const headerString = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\n            // Store last sent date to prevent another being logged/sent for the same day.\n            this._heartbeatsCache.lastSentHeartbeatDate = date;\n            if (unsentEntries.length > 0) {\n                // Store any unsent entries if they exist.\n                this._heartbeatsCache.heartbeats = unsentEntries;\n                // This seems more likely than emptying the array (below) to lead to some odd state\n                // since the cache isn't empty and this will be called again on the next request,\n                // and is probably safest if we await it.\n                await this._storage.overwrite(this._heartbeatsCache);\n            }\n            else {\n                this._heartbeatsCache.heartbeats = [];\n                // Do not wait for this, to reduce latency.\n                void this._storage.overwrite(this._heartbeatsCache);\n            }\n            return headerString;\n        }\n        catch (e) {\n            logger.warn(e);\n            return '';\n        }\n    }\n}\nfunction getUTCDateString() {\n    const today = new Date();\n    // Returns date format 'YYYY-MM-DD'\n    return today.toISOString().substring(0, 10);\n}\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n    // Heartbeats grouped by user agent in the standard format to be sent in\n    // the header.\n    const heartbeatsToSend = [];\n    // Single date format heartbeats that are not sent.\n    let unsentEntries = heartbeatsCache.slice();\n    for (const singleDateHeartbeat of heartbeatsCache) {\n        // Look for an existing entry with the same user agent.\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\n        if (!heartbeatEntry) {\n            // If no entry for this user agent exists, create one.\n            heartbeatsToSend.push({\n                agent: singleDateHeartbeat.agent,\n                dates: [singleDateHeartbeat.date]\n            });\n            if (countBytes(heartbeatsToSend) > maxSize) {\n                // If the header would exceed max size, remove the added heartbeat\n                // entry and stop adding to the header.\n                heartbeatsToSend.pop();\n                break;\n            }\n        }\n        else {\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\n            // If the header would exceed max size, remove the added date\n            // and stop adding to the header.\n            if (countBytes(heartbeatsToSend) > maxSize) {\n                heartbeatEntry.dates.pop();\n                break;\n            }\n        }\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n        // quota and the loop breaks early.)\n        unsentEntries = unsentEntries.slice(1);\n    }\n    return {\n        heartbeatsToSend,\n        unsentEntries\n    };\n}\nclass HeartbeatStorageImpl {\n    constructor(app) {\n        this.app = app;\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n    }\n    async runIndexedDBEnvironmentCheck() {\n        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()) {\n            return false;\n        }\n        else {\n            return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)()\n                .then(() => true)\n                .catch(() => false);\n        }\n    }\n    /**\n     * Read all heartbeats.\n     */\n    async read() {\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\n        if (!canUseIndexedDB) {\n            return { heartbeats: [] };\n        }\n        else {\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {\n                return idbHeartbeatObject;\n            }\n            else {\n                return { heartbeats: [] };\n            }\n        }\n    }\n    // overwrite the storage with the provided heartbeats\n    async overwrite(heartbeatsObject) {\n        var _a;\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\n        if (!canUseIndexedDB) {\n            return;\n        }\n        else {\n            const existingHeartbeatsObject = await this.read();\n            return writeHeartbeatsToIndexedDB(this.app, {\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                heartbeats: heartbeatsObject.heartbeats\n            });\n        }\n    }\n    // add heartbeats\n    async add(heartbeatsObject) {\n        var _a;\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\n        if (!canUseIndexedDB) {\n            return;\n        }\n        else {\n            const existingHeartbeatsObject = await this.read();\n            return writeHeartbeatsToIndexedDB(this.app, {\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                heartbeats: [\n                    ...existingHeartbeatsObject.heartbeats,\n                    ...heartbeatsObject.heartbeats\n                ]\n            });\n        }\n    }\n}\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nfunction countBytes(heartbeatsCache) {\n    // base64 has a restricted set of characters, all of which should be 1 byte.\n    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerCoreComponents(variant) {\n    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\n    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* ComponentType.PRIVATE */));\n    // Register `app` package.\n    registerVersion(name$q, version$1, variant);\n    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n    registerVersion(name$q, version$1, 'esm2017');\n    // Register platform SDK identifier (no version).\n    registerVersion('fire-js', '');\n}\n\n/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\nregisterCoreComponents('');\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@firebase/app/dist/esm/index.esm2017.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@firebase/component/dist/esm/index.esm2017.js":
/*!********************************************************************!*\
  !*** ./node_modules/@firebase/component/dist/esm/index.esm2017.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Component: () => (/* binding */ Component),\n/* harmony export */   ComponentContainer: () => (/* binding */ ComponentContainer),\n/* harmony export */   Provider: () => (/* binding */ Provider)\n/* harmony export */ });\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/util */ \"(app-pages-browser)/./node_modules/@firebase/util/dist/index.esm2017.js\");\n\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nclass Component {\n    /**\n     *\n     * @param name The public service name, e.g. app, auth, firestore, database\n     * @param instanceFactory Service factory responsible for creating the public interface\n     * @param type whether the service provided by the component is public or private\n     */\n    constructor(name, instanceFactory, type) {\n        this.name = name;\n        this.instanceFactory = instanceFactory;\n        this.type = type;\n        this.multipleInstances = false;\n        /**\n         * Properties to be added to the service namespace\n         */\n        this.serviceProps = {};\n        this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\n        this.onInstanceCreated = null;\n    }\n    setInstantiationMode(mode) {\n        this.instantiationMode = mode;\n        return this;\n    }\n    setMultipleInstances(multipleInstances) {\n        this.multipleInstances = multipleInstances;\n        return this;\n    }\n    setServiceProps(props) {\n        this.serviceProps = props;\n        return this;\n    }\n    setInstanceCreatedCallback(callback) {\n        this.onInstanceCreated = callback;\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nclass Provider {\n    constructor(name, container) {\n        this.name = name;\n        this.container = container;\n        this.component = null;\n        this.instances = new Map();\n        this.instancesDeferred = new Map();\n        this.instancesOptions = new Map();\n        this.onInitCallbacks = new Map();\n    }\n    /**\n     * @param identifier A provider can provide multiple instances of a service\n     * if this.component.multipleInstances is true.\n     */\n    get(identifier) {\n        // if multipleInstances is not supported, use the default name\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\n            const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\n            if (this.isInitialized(normalizedIdentifier) ||\n                this.shouldAutoInitialize()) {\n                // initialize the service if it can be auto-initialized\n                try {\n                    const instance = this.getOrInitializeService({\n                        instanceIdentifier: normalizedIdentifier\n                    });\n                    if (instance) {\n                        deferred.resolve(instance);\n                    }\n                }\n                catch (e) {\n                    // when the instance factory throws an exception during get(), it should not cause\n                    // a fatal error. We just return the unresolved promise in this case.\n                }\n            }\n        }\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\n    }\n    getImmediate(options) {\n        var _a;\n        // if multipleInstances is not supported, use the default name\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n        if (this.isInitialized(normalizedIdentifier) ||\n            this.shouldAutoInitialize()) {\n            try {\n                return this.getOrInitializeService({\n                    instanceIdentifier: normalizedIdentifier\n                });\n            }\n            catch (e) {\n                if (optional) {\n                    return null;\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        else {\n            // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw\n            if (optional) {\n                return null;\n            }\n            else {\n                throw Error(`Service ${this.name} is not available`);\n            }\n        }\n    }\n    getComponent() {\n        return this.component;\n    }\n    setComponent(component) {\n        if (component.name !== this.name) {\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n        }\n        if (this.component) {\n            throw Error(`Component for ${this.name} has already been provided`);\n        }\n        this.component = component;\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n        if (!this.shouldAutoInitialize()) {\n            return;\n        }\n        // if the service is eager, initialize the default instance\n        if (isComponentEager(component)) {\n            try {\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n            }\n            catch (e) {\n                // when the instance factory for an eager Component throws an exception during the eager\n                // initialization, it should not cause a fatal error.\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\n                // a fatal error in this case?\n            }\n        }\n        // Create service instances for the pending promises and resolve them\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\n        // and all promises with resolve with it regardless of the identifier.\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n            try {\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n                const instance = this.getOrInitializeService({\n                    instanceIdentifier: normalizedIdentifier\n                });\n                instanceDeferred.resolve(instance);\n            }\n            catch (e) {\n                // when the instance factory throws an exception, it should not cause\n                // a fatal error. We just leave the promise unresolved.\n            }\n        }\n    }\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\n        this.instancesDeferred.delete(identifier);\n        this.instancesOptions.delete(identifier);\n        this.instances.delete(identifier);\n    }\n    // app.delete() will call this method on every provider to delete the services\n    // TODO: should we mark the provider as deleted?\n    async delete() {\n        const services = Array.from(this.instances.values());\n        await Promise.all([\n            ...services\n                .filter(service => 'INTERNAL' in service) // legacy services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(service => service.INTERNAL.delete()),\n            ...services\n                .filter(service => '_delete' in service) // modularized services\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                .map(service => service._delete())\n        ]);\n    }\n    isComponentSet() {\n        return this.component != null;\n    }\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\n        return this.instances.has(identifier);\n    }\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\n        return this.instancesOptions.get(identifier) || {};\n    }\n    initialize(opts = {}) {\n        const { options = {} } = opts;\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n        if (this.isInitialized(normalizedIdentifier)) {\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n        }\n        if (!this.isComponentSet()) {\n            throw Error(`Component ${this.name} has not been registered yet`);\n        }\n        const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier,\n            options\n        });\n        // resolve any pending promise waiting for the service instance\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\n                instanceDeferred.resolve(instance);\n            }\n        }\n        return instance;\n    }\n    /**\n     *\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n     *\n     * @param identifier An optional instance identifier\n     * @returns a function to unregister the callback\n     */\n    onInit(callback, identifier) {\n        var _a;\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n        existingCallbacks.add(callback);\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n        const existingInstance = this.instances.get(normalizedIdentifier);\n        if (existingInstance) {\n            callback(existingInstance, normalizedIdentifier);\n        }\n        return () => {\n            existingCallbacks.delete(callback);\n        };\n    }\n    /**\n     * Invoke onInit callbacks synchronously\n     * @param instance the service instance`\n     */\n    invokeOnInitCallbacks(instance, identifier) {\n        const callbacks = this.onInitCallbacks.get(identifier);\n        if (!callbacks) {\n            return;\n        }\n        for (const callback of callbacks) {\n            try {\n                callback(instance, identifier);\n            }\n            catch (_a) {\n                // ignore errors in the onInit callback\n            }\n        }\n    }\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\n        let instance = this.instances.get(instanceIdentifier);\n        if (!instance && this.component) {\n            instance = this.component.instanceFactory(this.container, {\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n                options\n            });\n            this.instances.set(instanceIdentifier, instance);\n            this.instancesOptions.set(instanceIdentifier, options);\n            /**\n             * Invoke onInit listeners.\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\n             * while onInit listeners are registered by consumers of the provider.\n             */\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\n            /**\n             * Order is important\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n             * makes `isInitialized()` return true.\n             */\n            if (this.component.onInstanceCreated) {\n                try {\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n                }\n                catch (_a) {\n                    // ignore errors in the onInstanceCreatedCallback\n                }\n            }\n        }\n        return instance || null;\n    }\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\n        if (this.component) {\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n        }\n        else {\n            return identifier; // assume multiple instances are supported before the component is provided.\n        }\n    }\n    shouldAutoInitialize() {\n        return (!!this.component &&\n            this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */);\n    }\n}\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n    return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nclass ComponentContainer {\n    constructor(name) {\n        this.name = name;\n        this.providers = new Map();\n    }\n    /**\n     *\n     * @param component Component being added\n     * @param overwrite When a component with the same name has already been registered,\n     * if overwrite is true: overwrite the existing component with the new component and create a new\n     * provider with the new component. It can be useful in tests where you want to use different mocks\n     * for different tests.\n     * if overwrite is false: throw an exception\n     */\n    addComponent(component) {\n        const provider = this.getProvider(component.name);\n        if (provider.isComponentSet()) {\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n        }\n        provider.setComponent(component);\n    }\n    addOrOverwriteComponent(component) {\n        const provider = this.getProvider(component.name);\n        if (provider.isComponentSet()) {\n            // delete the existing provider from the container, so we can register the new component\n            this.providers.delete(component.name);\n        }\n        this.addComponent(component);\n    }\n    /**\n     * getProvider provides a type safe interface where it can only be called with a field name\n     * present in NameServiceMapping interface.\n     *\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\n     * themselves.\n     */\n    getProvider(name) {\n        if (this.providers.has(name)) {\n            return this.providers.get(name);\n        }\n        // create a Provider for a service that hasn't registered with Firebase\n        const provider = new Provider(name, this);\n        this.providers.set(name, provider);\n        return provider;\n    }\n    getProviders() {\n        return Array.from(this.providers.values());\n    }\n}\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@firebase/component/dist/esm/index.esm2017.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/esm/index.esm2017.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setUserLogHandler: () => (/* binding */ setUserLogHandler)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A container for all of the Logger instances\n */\nconst instances = [];\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nconst levelStringToEnum = {\n    'debug': LogLevel.DEBUG,\n    'verbose': LogLevel.VERBOSE,\n    'info': LogLevel.INFO,\n    'warn': LogLevel.WARN,\n    'error': LogLevel.ERROR,\n    'silent': LogLevel.SILENT\n};\n/**\n * The default log level\n */\nconst defaultLogLevel = LogLevel.INFO;\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n    [LogLevel.DEBUG]: 'log',\n    [LogLevel.VERBOSE]: 'log',\n    [LogLevel.INFO]: 'info',\n    [LogLevel.WARN]: 'warn',\n    [LogLevel.ERROR]: 'error'\n};\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler = (instance, logType, ...args) => {\n    if (logType < instance.logLevel) {\n        return;\n    }\n    const now = new Date().toISOString();\n    const method = ConsoleMethod[logType];\n    if (method) {\n        console[method](`[${now}]  ${instance.name}:`, ...args);\n    }\n    else {\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n    }\n};\nclass Logger {\n    /**\n     * Gives you an instance of a Logger to capture messages according to\n     * Firebase's logging scheme.\n     *\n     * @param name The name that the logs will be associated with\n     */\n    constructor(name) {\n        this.name = name;\n        /**\n         * The log level of the given Logger instance.\n         */\n        this._logLevel = defaultLogLevel;\n        /**\n         * The main (internal) log handler for the Logger instance.\n         * Can be set to a new function in internal package code but not by user.\n         */\n        this._logHandler = defaultLogHandler;\n        /**\n         * The optional, additional, user-defined log handler for the Logger instance.\n         */\n        this._userLogHandler = null;\n        /**\n         * Capture the current instance for later use\n         */\n        instances.push(this);\n    }\n    get logLevel() {\n        return this._logLevel;\n    }\n    set logLevel(val) {\n        if (!(val in LogLevel)) {\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n        }\n        this._logLevel = val;\n    }\n    // Workaround for setter/getter having to be the same type.\n    setLogLevel(val) {\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n    }\n    get logHandler() {\n        return this._logHandler;\n    }\n    set logHandler(val) {\n        if (typeof val !== 'function') {\n            throw new TypeError('Value assigned to `logHandler` must be a function');\n        }\n        this._logHandler = val;\n    }\n    get userLogHandler() {\n        return this._userLogHandler;\n    }\n    set userLogHandler(val) {\n        this._userLogHandler = val;\n    }\n    /**\n     * The functions below are all based on the `console` interface\n     */\n    debug(...args) {\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n        this._logHandler(this, LogLevel.DEBUG, ...args);\n    }\n    log(...args) {\n        this._userLogHandler &&\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\n    }\n    info(...args) {\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n        this._logHandler(this, LogLevel.INFO, ...args);\n    }\n    warn(...args) {\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n        this._logHandler(this, LogLevel.WARN, ...args);\n    }\n    error(...args) {\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n        this._logHandler(this, LogLevel.ERROR, ...args);\n    }\n}\nfunction setLogLevel(level) {\n    instances.forEach(inst => {\n        inst.setLogLevel(level);\n    });\n}\nfunction setUserLogHandler(logCallback, options) {\n    for (const instance of instances) {\n        let customLogLevel = null;\n        if (options && options.level) {\n            customLogLevel = levelStringToEnum[options.level];\n        }\n        if (logCallback === null) {\n            instance.userLogHandler = null;\n        }\n        else {\n            instance.userLogHandler = (instance, level, ...args) => {\n                const message = args\n                    .map(arg => {\n                    if (arg == null) {\n                        return null;\n                    }\n                    else if (typeof arg === 'string') {\n                        return arg;\n                    }\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\n                        return arg.toString();\n                    }\n                    else if (arg instanceof Error) {\n                        return arg.message;\n                    }\n                    else {\n                        try {\n                            return JSON.stringify(arg);\n                        }\n                        catch (ignored) {\n                            return null;\n                        }\n                    }\n                })\n                    .filter(arg => arg)\n                    .join(' ');\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n                    logCallback({\n                        level: LogLevel[level].toLowerCase(),\n                        message,\n                        args,\n                        type: instance.name\n                    });\n                }\n            };\n        }\n    }\n}\n\n\n//# sourceMappingURL=index.esm2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLElBQUksS0FBSyxjQUFjO0FBQ25EO0FBQ0E7QUFDQSxzRkFBc0YsUUFBUTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxJQUFJO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU0RDtBQUM1RCIsInNvdXJjZXMiOlsiRTpcXEtVTElBSFxcUFdCXFxVQVNcXHVhcy1wd2ViXFxub2RlX21vZHVsZXNcXEBmaXJlYmFzZVxcbG9nZ2VyXFxkaXN0XFxlc21cXGluZGV4LmVzbTIwMTcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xuICovXG5jb25zdCBpbnN0YW5jZXMgPSBbXTtcbi8qKlxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxuICpcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXG4gKlxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXG4gKiBgVkVSQk9TRWAgbG9ncyB3aWxsIG5vdClcbiAqL1xudmFyIExvZ0xldmVsO1xuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlZFUkJPU0VcIl0gPSAxXSA9IFwiVkVSQk9TRVwiO1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSU5GT1wiXSA9IDJdID0gXCJJTkZPXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gM10gPSBcIldBUk5cIjtcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIkVSUk9SXCJdID0gNF0gPSBcIkVSUk9SXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJTSUxFTlRcIl0gPSA1XSA9IFwiU0lMRU5UXCI7XG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xuY29uc3QgbGV2ZWxTdHJpbmdUb0VudW0gPSB7XG4gICAgJ2RlYnVnJzogTG9nTGV2ZWwuREVCVUcsXG4gICAgJ3ZlcmJvc2UnOiBMb2dMZXZlbC5WRVJCT1NFLFxuICAgICdpbmZvJzogTG9nTGV2ZWwuSU5GTyxcbiAgICAnd2Fybic6IExvZ0xldmVsLldBUk4sXG4gICAgJ2Vycm9yJzogTG9nTGV2ZWwuRVJST1IsXG4gICAgJ3NpbGVudCc6IExvZ0xldmVsLlNJTEVOVFxufTtcbi8qKlxuICogVGhlIGRlZmF1bHQgbG9nIGxldmVsXG4gKi9cbmNvbnN0IGRlZmF1bHRMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XG4vKipcbiAqIEJ5IGRlZmF1bHQsIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgZGlzcGxheWVkIGluIHRoZSBkZXZlbG9wZXIgY29uc29sZSAoaW5cbiAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxuICogKGkuZS4gb25jZSBmb3IgZmlyZWJhc2UsIGFuZCBvbmNlIGluIHRoZSBjb25zb2xlKSwgd2UgYXJlIHNlbmRpbmcgYERFQlVHYFxuICogbG9ncyB0byB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbi5cbiAqL1xuY29uc3QgQ29uc29sZU1ldGhvZCA9IHtcbiAgICBbTG9nTGV2ZWwuREVCVUddOiAnbG9nJyxcbiAgICBbTG9nTGV2ZWwuVkVSQk9TRV06ICdsb2cnLFxuICAgIFtMb2dMZXZlbC5JTkZPXTogJ2luZm8nLFxuICAgIFtMb2dMZXZlbC5XQVJOXTogJ3dhcm4nLFxuICAgIFtMb2dMZXZlbC5FUlJPUl06ICdlcnJvcidcbn07XG4vKipcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXG4gKiBtZXNzYWdlcyBvbiB0byB0aGVpciBjb3JyZXNwb25kaW5nIGNvbnNvbGUgY291bnRlcnBhcnRzIChpZiB0aGUgbG9nIG1ldGhvZFxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcbiAqL1xuY29uc3QgZGVmYXVsdExvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxvZ1R5cGUsIC4uLmFyZ3MpID0+IHtcbiAgICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZV07XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgICBjb25zb2xlW21ldGhvZF0oYFske25vd31dICAke2luc3RhbmNlLm5hbWV9OmAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6ICR7bG9nVHlwZX0pYCk7XG4gICAgfVxufTtcbmNsYXNzIExvZ2dlciB7XG4gICAgLyoqXG4gICAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXG4gICAgICogRmlyZWJhc2UncyBsb2dnaW5nIHNjaGVtZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbG9nIGxldmVsIG9mIHRoZSBnaXZlbiBMb2dnZXIgaW5zdGFuY2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYWluIChpbnRlcm5hbCkgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXG4gICAgICAgICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSBkZWZhdWx0TG9nSGFuZGxlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBvcHRpb25hbCwgYWRkaXRpb25hbCwgdXNlci1kZWZpbmVkIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FwdHVyZSB0aGUgY3VycmVudCBpbnN0YW5jZSBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAqL1xuICAgICAgICBpbnN0YW5jZXMucHVzaCh0aGlzKTtcbiAgICB9XG4gICAgZ2V0IGxvZ0xldmVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XG4gICAgfVxuICAgIHNldCBsb2dMZXZlbCh2YWwpIHtcbiAgICAgICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBcIiR7dmFsfVwiIGFzc2lnbmVkIHRvIFxcYGxvZ0xldmVsXFxgYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB2YWw7XG4gICAgfVxuICAgIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXG4gICAgc2V0TG9nTGV2ZWwodmFsKSB7XG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xuICAgIH1cbiAgICBnZXQgbG9nSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0hhbmRsZXI7XG4gICAgfVxuICAgIHNldCBsb2dIYW5kbGVyKHZhbCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XG4gICAgfVxuICAgIGdldCB1c2VyTG9nSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJMb2dIYW5kbGVyO1xuICAgIH1cbiAgICBzZXQgdXNlckxvZ0hhbmRsZXIodmFsKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gdmFsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcbiAgICAgKi9cbiAgICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkRFQlVHLCAuLi5hcmdzKTtcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5ERUJVRywgLi4uYXJncyk7XG4gICAgfVxuICAgIGxvZyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgaW5mbyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xuICAgIH1cbiAgICB3YXJuKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XG4gICAgfVxuICAgIGVycm9yKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuRVJST1IsIC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICAgIGluc3RhbmNlcy5mb3JFYWNoKGluc3QgPT4ge1xuICAgICAgICBpbnN0LnNldExvZ0xldmVsKGxldmVsKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcbiAgICAgICAgbGV0IGN1c3RvbUxvZ0xldmVsID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZXZlbCkge1xuICAgICAgICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9nQ2FsbGJhY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gKGluc3RhbmNlLCBsZXZlbCwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoYXJnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGFyZyA9PiBhcmcpXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID49IChjdXN0b21Mb2dMZXZlbCAhPT0gbnVsbCAmJiBjdXN0b21Mb2dMZXZlbCAhPT0gdm9pZCAwID8gY3VzdG9tTG9nTGV2ZWwgOiBpbnN0YW5jZS5sb2dMZXZlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nQ2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IExvZ0xldmVsW2xldmVsXS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnN0YW5jZS5uYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IExvZ0xldmVsLCBMb2dnZXIsIHNldExvZ0xldmVsLCBzZXRVc2VyTG9nSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/firebase/app/dist/esm/index.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseError: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.FirebaseError),\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),\n/* harmony export */   _DEFAULT_ENTRY_NAME: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._DEFAULT_ENTRY_NAME),\n/* harmony export */   _addComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addComponent),\n/* harmony export */   _addOrOverwriteComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addOrOverwriteComponent),\n/* harmony export */   _apps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._apps),\n/* harmony export */   _clearComponents: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._clearComponents),\n/* harmony export */   _components: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._components),\n/* harmony export */   _getProvider: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider),\n/* harmony export */   _isFirebaseApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseApp),\n/* harmony export */   _isFirebaseServerApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp),\n/* harmony export */   _registerComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent),\n/* harmony export */   _removeServiceInstance: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._removeServiceInstance),\n/* harmony export */   _serverApps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._serverApps),\n/* harmony export */   deleteApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.deleteApp),\n/* harmony export */   getApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp),\n/* harmony export */   getApps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps),\n/* harmony export */   initializeApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp),\n/* harmony export */   initializeServerApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeServerApp),\n/* harmony export */   onLog: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.onLog),\n/* harmony export */   registerVersion: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"(app-pages-browser)/./node_modules/@firebase/app/dist/esm/index.esm2017.js\");\n\n\n\nvar name = \"firebase\";\nvar version = \"11.1.0\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'app');\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9lc20vaW5kZXguZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ2xCOztBQUU5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQWU7QUFDZiIsInNvdXJjZXMiOlsiRTpcXEtVTElBSFxcUFdCXFxVQVNcXHVhcy1wd2ViXFxub2RlX21vZHVsZXNcXGZpcmViYXNlXFxhcHBcXGRpc3RcXGVzbVxcaW5kZXguZXNtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjExLjEuMFwiO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/firebase/database/dist/esm/index.esm.js":
/*!**************************************************************!*\
  !*** ./node_modules/firebase/database/dist/esm/index.esm.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataSnapshot: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.DataSnapshot),\n/* harmony export */   Database: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.Database),\n/* harmony export */   OnDisconnect: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.OnDisconnect),\n/* harmony export */   QueryConstraint: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.QueryConstraint),\n/* harmony export */   TransactionResult: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.TransactionResult),\n/* harmony export */   _QueryImpl: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._QueryImpl),\n/* harmony export */   _QueryParams: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._QueryParams),\n/* harmony export */   _ReferenceImpl: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._ReferenceImpl),\n/* harmony export */   _TEST_ACCESS_forceRestClient: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._TEST_ACCESS_forceRestClient),\n/* harmony export */   _TEST_ACCESS_hijackHash: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._TEST_ACCESS_hijackHash),\n/* harmony export */   _initStandalone: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._initStandalone),\n/* harmony export */   _repoManagerDatabaseFromApp: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._repoManagerDatabaseFromApp),\n/* harmony export */   _setSDKVersion: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._setSDKVersion),\n/* harmony export */   _validatePathString: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._validatePathString),\n/* harmony export */   _validateWritablePath: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__._validateWritablePath),\n/* harmony export */   child: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.child),\n/* harmony export */   connectDatabaseEmulator: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.connectDatabaseEmulator),\n/* harmony export */   enableLogging: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.enableLogging),\n/* harmony export */   endAt: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.endAt),\n/* harmony export */   endBefore: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.endBefore),\n/* harmony export */   equalTo: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.equalTo),\n/* harmony export */   forceLongPolling: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.forceLongPolling),\n/* harmony export */   forceWebSockets: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.forceWebSockets),\n/* harmony export */   get: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.get),\n/* harmony export */   getDatabase: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.getDatabase),\n/* harmony export */   goOffline: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.goOffline),\n/* harmony export */   goOnline: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.goOnline),\n/* harmony export */   increment: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.increment),\n/* harmony export */   limitToFirst: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.limitToFirst),\n/* harmony export */   limitToLast: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.limitToLast),\n/* harmony export */   off: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.off),\n/* harmony export */   onChildAdded: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildAdded),\n/* harmony export */   onChildChanged: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildChanged),\n/* harmony export */   onChildMoved: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildMoved),\n/* harmony export */   onChildRemoved: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onChildRemoved),\n/* harmony export */   onDisconnect: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onDisconnect),\n/* harmony export */   onValue: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.onValue),\n/* harmony export */   orderByChild: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByChild),\n/* harmony export */   orderByKey: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByKey),\n/* harmony export */   orderByPriority: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByPriority),\n/* harmony export */   orderByValue: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.orderByValue),\n/* harmony export */   push: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.push),\n/* harmony export */   query: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.query),\n/* harmony export */   ref: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   refFromURL: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.refFromURL),\n/* harmony export */   remove: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.remove),\n/* harmony export */   runTransaction: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.runTransaction),\n/* harmony export */   serverTimestamp: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp),\n/* harmony export */   set: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.set),\n/* harmony export */   setPriority: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.setPriority),\n/* harmony export */   setWithPriority: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.setWithPriority),\n/* harmony export */   startAfter: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.startAfter),\n/* harmony export */   startAt: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.startAt),\n/* harmony export */   update: () => (/* reexport safe */ _firebase_database__WEBPACK_IMPORTED_MODULE_0__.update)\n/* harmony export */ });\n/* harmony import */ var _firebase_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/database */ \"(app-pages-browser)/./node_modules/@firebase/database/dist/index.esm2017.js\");\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9kYXRhYmFzZS9kaXN0L2VzbS9pbmRleC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtQztBQUNuQyIsInNvdXJjZXMiOlsiRTpcXEtVTElBSFxcUFdCXFxVQVNcXHVhcy1wd2ViXFxub2RlX21vZHVsZXNcXGZpcmViYXNlXFxkYXRhYmFzZVxcZGlzdFxcZXNtXFxpbmRleC5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2RhdGFiYXNlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/firebase/database/dist/esm/index.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/idb/build/index.js":
/*!*****************************************!*\
  !*** ./node_modules/idb/build/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteDB: () => (/* binding */ deleteDB),\n/* harmony export */   openDB: () => (/* binding */ openDB),\n/* harmony export */   unwrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.u),\n/* harmony export */   wrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)\n/* harmony export */ });\n/* harmony import */ var _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrap-idb-value.js */ \"(app-pages-browser)/./node_modules/idb/build/wrap-idb-value.js\");\n\n\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade((0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.result), event.oldVersion, event.newVersion, (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\n(0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.r)((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUU7QUFDTjs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMseUNBQXlDLElBQUk7QUFDOUU7QUFDQSx3QkFBd0IscURBQUk7QUFDNUI7QUFDQTtBQUNBLG9CQUFvQixxREFBSSxzREFBc0QscURBQUk7QUFDbEYsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixVQUFVLElBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxREFBSTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFMkIiLCJzb3VyY2VzIjpbIkU6XFxLVUxJQUhcXFBXQlxcVUFTXFx1YXMtcHdlYlxcbm9kZV9tb2R1bGVzXFxpZGJcXGJ1aWxkXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSwgZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKSB7XG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCd2ZXJzaW9uY2hhbmdlJywgKGV2ZW50KSA9PiBibG9ja2luZyhldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgcmV0dXJuIG9wZW5Qcm9taXNlO1xufVxuLyoqXG4gKiBEZWxldGUgYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlREIobmFtZSwgeyBibG9ja2VkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XG4gICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKGV2ZW50KSA9PiBibG9ja2VkKFxuICAgICAgICAvLyBDYXN0aW5nIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQtRE9NLWxpYi1nZW5lcmF0b3IvcHVsbC8xNDA1XG4gICAgICAgIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50KSk7XG4gICAgfVxuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/idb/build/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/idb/build/wrap-idb-value.js":
/*!**************************************************!*\
  !*** ./node_modules/idb/build/wrap-idb-value.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ reverseTransformCache),\n/* harmony export */   i: () => (/* binding */ instanceOfAny),\n/* harmony export */   r: () => (/* binding */ replaceTraps),\n/* harmony export */   u: () => (/* binding */ unwrap),\n/* harmony export */   w: () => (/* binding */ wrap)\n/* harmony export */ });\nconst instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/idb/build/wrap-idb-value.js\n"));

/***/ })

});